// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module cfg_regs_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 7
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output cfg_regs_reg_pkg::cfg_regs_reg2hw_t reg2hw, // Write
  input  cfg_regs_reg_pkg::cfg_regs_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import cfg_regs_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ctrl_u_mode_qs;
  logic ctrl_u_mode_wd;
  logic ctrl_u_mode_we;
  logic ctrl_s_mode_qs;
  logic ctrl_s_mode_wd;
  logic ctrl_s_mode_we;
  logic ctrl_m_mode_qs;
  logic ctrl_m_mode_wd;
  logic ctrl_m_mode_we;
  logic ctrl_pc_range_0_qs;
  logic ctrl_pc_range_0_wd;
  logic ctrl_pc_range_0_we;
  logic ctrl_pc_range_1_qs;
  logic ctrl_pc_range_1_wd;
  logic ctrl_pc_range_1_we;
  logic ctrl_pc_range_2_qs;
  logic ctrl_pc_range_2_wd;
  logic ctrl_pc_range_2_we;
  logic ctrl_pc_range_3_qs;
  logic ctrl_pc_range_3_wd;
  logic ctrl_pc_range_3_we;
  logic ctrl_trig_pc_0_qs;
  logic ctrl_trig_pc_0_wd;
  logic ctrl_trig_pc_0_we;
  logic ctrl_trig_pc_1_qs;
  logic ctrl_trig_pc_1_wd;
  logic ctrl_trig_pc_1_we;
  logic ctrl_trig_pc_2_qs;
  logic ctrl_trig_pc_2_wd;
  logic ctrl_trig_pc_2_we;
  logic ctrl_trig_pc_3_qs;
  logic ctrl_trig_pc_3_wd;
  logic ctrl_trig_pc_3_we;
  logic [1:0] ctrl_trace_mode_qs;
  logic [1:0] ctrl_trace_mode_wd;
  logic ctrl_trace_mode_we;
  logic ctrl_test_mode_qs;
  logic ctrl_test_mode_wd;
  logic ctrl_test_mode_we;
  logic ctrl_cnt_rst_qs;
  logic ctrl_cnt_rst_wd;
  logic ctrl_cnt_rst_we;
  logic ctrl_excinh_qs;
  logic ctrl_excinh_wd;
  logic ctrl_excinh_we;
  logic ctrl_intrinh_qs;
  logic ctrl_intrinh_wd;
  logic ctrl_intrinh_we;
  logic ctrl_tretinh_qs;
  logic ctrl_tretinh_wd;
  logic ctrl_tretinh_we;
  logic ctrl_ntbren_qs;
  logic ctrl_ntbren_wd;
  logic ctrl_ntbren_we;
  logic ctrl_tkbrinh_qs;
  logic ctrl_tkbrinh_wd;
  logic ctrl_tkbrinh_we;
  logic ctrl_indcallinh_qs;
  logic ctrl_indcallinh_wd;
  logic ctrl_indcallinh_we;
  logic ctrl_dircallinh_qs;
  logic ctrl_dircallinh_wd;
  logic ctrl_dircallinh_we;
  logic ctrl_indjmpinh_qs;
  logic ctrl_indjmpinh_wd;
  logic ctrl_indjmpinh_we;
  logic ctrl_dirjmpinh_qs;
  logic ctrl_dirjmpinh_wd;
  logic ctrl_dirjmpinh_we;
  logic ctrl_corswapinh_qs;
  logic ctrl_corswapinh_wd;
  logic ctrl_corswapinh_we;
  logic ctrl_retinh_qs;
  logic ctrl_retinh_wd;
  logic ctrl_retinh_we;
  logic ctrl_indljmpinh_qs;
  logic ctrl_indljmpinh_wd;
  logic ctrl_indljmpinh_we;
  logic ctrl_dirljmpinh_qs;
  logic ctrl_dirljmpinh_wd;
  logic ctrl_dirljmpinh_we;
  logic ctrl_core_select_qs;
  logic ctrl_core_select_wd;
  logic ctrl_core_select_we;
  logic ctrl_watermark_en_qs;
  logic ctrl_watermark_en_wd;
  logic ctrl_watermark_en_we;
  logic [1:0] ctrl_unused_qs;
  logic [1:0] ctrl_unused_wd;
  logic ctrl_unused_we;
  logic [31:0] base_qs;
  logic [31:0] last_qs;
  logic [31:0] range_0_base_h_qs;
  logic [31:0] range_0_base_h_wd;
  logic range_0_base_h_we;
  logic [31:0] range_0_base_l_qs;
  logic [31:0] range_0_base_l_wd;
  logic range_0_base_l_we;
  logic [31:0] range_0_last_h_qs;
  logic [31:0] range_0_last_h_wd;
  logic range_0_last_h_we;
  logic [31:0] range_0_last_l_qs;
  logic [31:0] range_0_last_l_wd;
  logic range_0_last_l_we;
  logic [31:0] range_1_base_h_qs;
  logic [31:0] range_1_base_h_wd;
  logic range_1_base_h_we;
  logic [31:0] range_1_base_l_qs;
  logic [31:0] range_1_base_l_wd;
  logic range_1_base_l_we;
  logic [31:0] range_1_last_h_qs;
  logic [31:0] range_1_last_h_wd;
  logic range_1_last_h_we;
  logic [31:0] range_1_last_l_qs;
  logic [31:0] range_1_last_l_wd;
  logic range_1_last_l_we;
  logic [31:0] range_2_base_h_qs;
  logic [31:0] range_2_base_h_wd;
  logic range_2_base_h_we;
  logic [31:0] range_2_base_l_qs;
  logic [31:0] range_2_base_l_wd;
  logic range_2_base_l_we;
  logic [31:0] range_2_last_h_qs;
  logic [31:0] range_2_last_h_wd;
  logic range_2_last_h_we;
  logic [31:0] range_2_last_l_qs;
  logic [31:0] range_2_last_l_wd;
  logic range_2_last_l_we;
  logic [31:0] range_3_base_h_qs;
  logic [31:0] range_3_base_h_wd;
  logic range_3_base_h_we;
  logic [31:0] range_3_base_l_qs;
  logic [31:0] range_3_base_l_wd;
  logic range_3_base_l_we;
  logic [31:0] range_3_last_h_qs;
  logic [31:0] range_3_last_h_wd;
  logic range_3_last_h_we;
  logic [31:0] range_3_last_l_qs;
  logic [31:0] range_3_last_l_wd;
  logic range_3_last_l_we;
  logic [31:0] trig_pc0_h_qs;
  logic [31:0] trig_pc0_h_wd;
  logic trig_pc0_h_we;
  logic [31:0] trig_pc0_l_qs;
  logic [31:0] trig_pc0_l_wd;
  logic trig_pc0_l_we;
  logic [31:0] trig_pc1_h_qs;
  logic [31:0] trig_pc1_h_wd;
  logic trig_pc1_h_we;
  logic [31:0] trig_pc1_l_qs;
  logic [31:0] trig_pc1_l_wd;
  logic trig_pc1_l_we;
  logic [31:0] trig_pc2_h_qs;
  logic [31:0] trig_pc2_h_wd;
  logic trig_pc2_h_we;
  logic [31:0] trig_pc2_l_qs;
  logic [31:0] trig_pc2_l_wd;
  logic trig_pc2_l_we;
  logic [31:0] trig_pc3_h_qs;
  logic [31:0] trig_pc3_h_wd;
  logic trig_pc3_h_we;
  logic [31:0] trig_pc3_l_qs;
  logic [31:0] trig_pc3_l_wd;
  logic trig_pc3_l_we;
  logic [31:0] watermark_lvl_qs;
  logic [31:0] watermark_lvl_wd;
  logic watermark_lvl_we;

  // Register instances
  // R[ctrl]: V(False)

  //   F[u_mode]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_u_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_u_mode_we),
    .wd     (ctrl_u_mode_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.u_mode.de),
    .d      (hw2reg.ctrl.u_mode.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.u_mode.q ),

    // to register interface (read)
    .qs     (ctrl_u_mode_qs)
  );


  //   F[s_mode]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_s_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_s_mode_we),
    .wd     (ctrl_s_mode_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.s_mode.de),
    .d      (hw2reg.ctrl.s_mode.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.s_mode.q ),

    // to register interface (read)
    .qs     (ctrl_s_mode_qs)
  );


  //   F[m_mode]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_m_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_m_mode_we),
    .wd     (ctrl_m_mode_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.m_mode.de),
    .d      (hw2reg.ctrl.m_mode.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.m_mode.q ),

    // to register interface (read)
    .qs     (ctrl_m_mode_qs)
  );


  //   F[pc_range_0]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_pc_range_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_pc_range_0_we),
    .wd     (ctrl_pc_range_0_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.pc_range_0.de),
    .d      (hw2reg.ctrl.pc_range_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.pc_range_0.q ),

    // to register interface (read)
    .qs     (ctrl_pc_range_0_qs)
  );


  //   F[pc_range_1]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_pc_range_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_pc_range_1_we),
    .wd     (ctrl_pc_range_1_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.pc_range_1.de),
    .d      (hw2reg.ctrl.pc_range_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.pc_range_1.q ),

    // to register interface (read)
    .qs     (ctrl_pc_range_1_qs)
  );


  //   F[pc_range_2]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_pc_range_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_pc_range_2_we),
    .wd     (ctrl_pc_range_2_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.pc_range_2.de),
    .d      (hw2reg.ctrl.pc_range_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.pc_range_2.q ),

    // to register interface (read)
    .qs     (ctrl_pc_range_2_qs)
  );


  //   F[pc_range_3]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_pc_range_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_pc_range_3_we),
    .wd     (ctrl_pc_range_3_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.pc_range_3.de),
    .d      (hw2reg.ctrl.pc_range_3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.pc_range_3.q ),

    // to register interface (read)
    .qs     (ctrl_pc_range_3_qs)
  );


  //   F[trig_pc_0]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_trig_pc_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_trig_pc_0_we),
    .wd     (ctrl_trig_pc_0_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.trig_pc_0.de),
    .d      (hw2reg.ctrl.trig_pc_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.trig_pc_0.q ),

    // to register interface (read)
    .qs     (ctrl_trig_pc_0_qs)
  );


  //   F[trig_pc_1]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_trig_pc_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_trig_pc_1_we),
    .wd     (ctrl_trig_pc_1_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.trig_pc_1.de),
    .d      (hw2reg.ctrl.trig_pc_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.trig_pc_1.q ),

    // to register interface (read)
    .qs     (ctrl_trig_pc_1_qs)
  );


  //   F[trig_pc_2]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_trig_pc_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_trig_pc_2_we),
    .wd     (ctrl_trig_pc_2_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.trig_pc_2.de),
    .d      (hw2reg.ctrl.trig_pc_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.trig_pc_2.q ),

    // to register interface (read)
    .qs     (ctrl_trig_pc_2_qs)
  );


  //   F[trig_pc_3]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_trig_pc_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_trig_pc_3_we),
    .wd     (ctrl_trig_pc_3_wd),

    // from internal hardware
    .de     (hw2reg.ctrl.trig_pc_3.de),
    .d      (hw2reg.ctrl.trig_pc_3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.trig_pc_3.q ),

    // to register interface (read)
    .qs     (ctrl_trig_pc_3_qs)
  );


  //   F[trace_mode]: 12:11
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ctrl_trace_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_trace_mode_we),
    .wd     (ctrl_trace_mode_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.trace_mode.q ),

    // to register interface (read)
    .qs     (ctrl_trace_mode_qs)
  );


  //   F[test_mode]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_test_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_test_mode_we),
    .wd     (ctrl_test_mode_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.test_mode.q ),

    // to register interface (read)
    .qs     (ctrl_test_mode_qs)
  );


  //   F[cnt_rst]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_cnt_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_cnt_rst_we),
    .wd     (ctrl_cnt_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.cnt_rst.q ),

    // to register interface (read)
    .qs     (ctrl_cnt_rst_qs)
  );


  //   F[excinh]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_excinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_excinh_we),
    .wd     (ctrl_excinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.excinh.q ),

    // to register interface (read)
    .qs     (ctrl_excinh_qs)
  );


  //   F[intrinh]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_intrinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_intrinh_we),
    .wd     (ctrl_intrinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.intrinh.q ),

    // to register interface (read)
    .qs     (ctrl_intrinh_qs)
  );


  //   F[tretinh]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_tretinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_tretinh_we),
    .wd     (ctrl_tretinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.tretinh.q ),

    // to register interface (read)
    .qs     (ctrl_tretinh_qs)
  );


  //   F[ntbren]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_ntbren (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_ntbren_we),
    .wd     (ctrl_ntbren_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.ntbren.q ),

    // to register interface (read)
    .qs     (ctrl_ntbren_qs)
  );


  //   F[tkbrinh]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_tkbrinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_tkbrinh_we),
    .wd     (ctrl_tkbrinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.tkbrinh.q ),

    // to register interface (read)
    .qs     (ctrl_tkbrinh_qs)
  );


  //   F[indcallinh]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_indcallinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_indcallinh_we),
    .wd     (ctrl_indcallinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.indcallinh.q ),

    // to register interface (read)
    .qs     (ctrl_indcallinh_qs)
  );


  //   F[dircallinh]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_dircallinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_dircallinh_we),
    .wd     (ctrl_dircallinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.dircallinh.q ),

    // to register interface (read)
    .qs     (ctrl_dircallinh_qs)
  );


  //   F[indjmpinh]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_indjmpinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_indjmpinh_we),
    .wd     (ctrl_indjmpinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.indjmpinh.q ),

    // to register interface (read)
    .qs     (ctrl_indjmpinh_qs)
  );


  //   F[dirjmpinh]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_dirjmpinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_dirjmpinh_we),
    .wd     (ctrl_dirjmpinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.dirjmpinh.q ),

    // to register interface (read)
    .qs     (ctrl_dirjmpinh_qs)
  );


  //   F[corswapinh]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_corswapinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_corswapinh_we),
    .wd     (ctrl_corswapinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.corswapinh.q ),

    // to register interface (read)
    .qs     (ctrl_corswapinh_qs)
  );


  //   F[retinh]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_retinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_retinh_we),
    .wd     (ctrl_retinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.retinh.q ),

    // to register interface (read)
    .qs     (ctrl_retinh_qs)
  );


  //   F[indljmpinh]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_indljmpinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_indljmpinh_we),
    .wd     (ctrl_indljmpinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.indljmpinh.q ),

    // to register interface (read)
    .qs     (ctrl_indljmpinh_qs)
  );


  //   F[dirljmpinh]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_dirljmpinh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_dirljmpinh_we),
    .wd     (ctrl_dirljmpinh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.dirljmpinh.q ),

    // to register interface (read)
    .qs     (ctrl_dirljmpinh_qs)
  );


  //   F[core_select]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_core_select (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_core_select_we),
    .wd     (ctrl_core_select_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.core_select.q ),

    // to register interface (read)
    .qs     (ctrl_core_select_qs)
  );


  //   F[watermark_en]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_watermark_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_watermark_en_we),
    .wd     (ctrl_watermark_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.watermark_en.q ),

    // to register interface (read)
    .qs     (ctrl_watermark_en_qs)
  );


  //   F[unused]: 31:30
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ctrl_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_unused_we),
    .wd     (ctrl_unused_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.unused.q ),

    // to register interface (read)
    .qs     (ctrl_unused_qs)
  );


  // R[base]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_base (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.base.de),
    .d      (hw2reg.base.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (base_qs)
  );


  // R[last]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_last (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.last.de),
    .d      (hw2reg.last.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (last_qs)
  );


  // R[range_0_base_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_0_base_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_0_base_h_we),
    .wd     (range_0_base_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_0_base_h.q ),

    // to register interface (read)
    .qs     (range_0_base_h_qs)
  );


  // R[range_0_base_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_0_base_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_0_base_l_we),
    .wd     (range_0_base_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_0_base_l.q ),

    // to register interface (read)
    .qs     (range_0_base_l_qs)
  );


  // R[range_0_last_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_0_last_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_0_last_h_we),
    .wd     (range_0_last_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_0_last_h.q ),

    // to register interface (read)
    .qs     (range_0_last_h_qs)
  );


  // R[range_0_last_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_0_last_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_0_last_l_we),
    .wd     (range_0_last_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_0_last_l.q ),

    // to register interface (read)
    .qs     (range_0_last_l_qs)
  );


  // R[range_1_base_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_1_base_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_1_base_h_we),
    .wd     (range_1_base_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_1_base_h.q ),

    // to register interface (read)
    .qs     (range_1_base_h_qs)
  );


  // R[range_1_base_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_1_base_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_1_base_l_we),
    .wd     (range_1_base_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_1_base_l.q ),

    // to register interface (read)
    .qs     (range_1_base_l_qs)
  );


  // R[range_1_last_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_1_last_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_1_last_h_we),
    .wd     (range_1_last_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_1_last_h.q ),

    // to register interface (read)
    .qs     (range_1_last_h_qs)
  );


  // R[range_1_last_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_1_last_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_1_last_l_we),
    .wd     (range_1_last_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_1_last_l.q ),

    // to register interface (read)
    .qs     (range_1_last_l_qs)
  );


  // R[range_2_base_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_2_base_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_2_base_h_we),
    .wd     (range_2_base_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_2_base_h.q ),

    // to register interface (read)
    .qs     (range_2_base_h_qs)
  );


  // R[range_2_base_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_2_base_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_2_base_l_we),
    .wd     (range_2_base_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_2_base_l.q ),

    // to register interface (read)
    .qs     (range_2_base_l_qs)
  );


  // R[range_2_last_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_2_last_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_2_last_h_we),
    .wd     (range_2_last_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_2_last_h.q ),

    // to register interface (read)
    .qs     (range_2_last_h_qs)
  );


  // R[range_2_last_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_2_last_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_2_last_l_we),
    .wd     (range_2_last_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_2_last_l.q ),

    // to register interface (read)
    .qs     (range_2_last_l_qs)
  );


  // R[range_3_base_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_3_base_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_3_base_h_we),
    .wd     (range_3_base_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_3_base_h.q ),

    // to register interface (read)
    .qs     (range_3_base_h_qs)
  );


  // R[range_3_base_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_3_base_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_3_base_l_we),
    .wd     (range_3_base_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_3_base_l.q ),

    // to register interface (read)
    .qs     (range_3_base_l_qs)
  );


  // R[range_3_last_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_3_last_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_3_last_h_we),
    .wd     (range_3_last_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_3_last_h.q ),

    // to register interface (read)
    .qs     (range_3_last_h_qs)
  );


  // R[range_3_last_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_range_3_last_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (range_3_last_l_we),
    .wd     (range_3_last_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_3_last_l.q ),

    // to register interface (read)
    .qs     (range_3_last_l_qs)
  );


  // R[trig_pc0_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_trig_pc0_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (trig_pc0_h_we),
    .wd     (trig_pc0_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trig_pc0_h.q ),

    // to register interface (read)
    .qs     (trig_pc0_h_qs)
  );


  // R[trig_pc0_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_trig_pc0_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (trig_pc0_l_we),
    .wd     (trig_pc0_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trig_pc0_l.q ),

    // to register interface (read)
    .qs     (trig_pc0_l_qs)
  );


  // R[trig_pc1_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_trig_pc1_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (trig_pc1_h_we),
    .wd     (trig_pc1_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trig_pc1_h.q ),

    // to register interface (read)
    .qs     (trig_pc1_h_qs)
  );


  // R[trig_pc1_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_trig_pc1_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (trig_pc1_l_we),
    .wd     (trig_pc1_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trig_pc1_l.q ),

    // to register interface (read)
    .qs     (trig_pc1_l_qs)
  );


  // R[trig_pc2_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_trig_pc2_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (trig_pc2_h_we),
    .wd     (trig_pc2_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trig_pc2_h.q ),

    // to register interface (read)
    .qs     (trig_pc2_h_qs)
  );


  // R[trig_pc2_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_trig_pc2_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (trig_pc2_l_we),
    .wd     (trig_pc2_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trig_pc2_l.q ),

    // to register interface (read)
    .qs     (trig_pc2_l_qs)
  );


  // R[trig_pc3_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_trig_pc3_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (trig_pc3_h_we),
    .wd     (trig_pc3_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trig_pc3_h.q ),

    // to register interface (read)
    .qs     (trig_pc3_h_qs)
  );


  // R[trig_pc3_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_trig_pc3_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (trig_pc3_l_we),
    .wd     (trig_pc3_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trig_pc3_l.q ),

    // to register interface (read)
    .qs     (trig_pc3_l_qs)
  );


  // R[watermark_lvl]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_watermark_lvl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (watermark_lvl_we),
    .wd     (watermark_lvl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.watermark_lvl.q ),

    // to register interface (read)
    .qs     (watermark_lvl_qs)
  );




  logic [27:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == CFG_REGS_CTRL_OFFSET);
    addr_hit[ 1] = (reg_addr == CFG_REGS_BASE_OFFSET);
    addr_hit[ 2] = (reg_addr == CFG_REGS_LAST_OFFSET);
    addr_hit[ 3] = (reg_addr == CFG_REGS_RANGE_0_BASE_H_OFFSET);
    addr_hit[ 4] = (reg_addr == CFG_REGS_RANGE_0_BASE_L_OFFSET);
    addr_hit[ 5] = (reg_addr == CFG_REGS_RANGE_0_LAST_H_OFFSET);
    addr_hit[ 6] = (reg_addr == CFG_REGS_RANGE_0_LAST_L_OFFSET);
    addr_hit[ 7] = (reg_addr == CFG_REGS_RANGE_1_BASE_H_OFFSET);
    addr_hit[ 8] = (reg_addr == CFG_REGS_RANGE_1_BASE_L_OFFSET);
    addr_hit[ 9] = (reg_addr == CFG_REGS_RANGE_1_LAST_H_OFFSET);
    addr_hit[10] = (reg_addr == CFG_REGS_RANGE_1_LAST_L_OFFSET);
    addr_hit[11] = (reg_addr == CFG_REGS_RANGE_2_BASE_H_OFFSET);
    addr_hit[12] = (reg_addr == CFG_REGS_RANGE_2_BASE_L_OFFSET);
    addr_hit[13] = (reg_addr == CFG_REGS_RANGE_2_LAST_H_OFFSET);
    addr_hit[14] = (reg_addr == CFG_REGS_RANGE_2_LAST_L_OFFSET);
    addr_hit[15] = (reg_addr == CFG_REGS_RANGE_3_BASE_H_OFFSET);
    addr_hit[16] = (reg_addr == CFG_REGS_RANGE_3_BASE_L_OFFSET);
    addr_hit[17] = (reg_addr == CFG_REGS_RANGE_3_LAST_H_OFFSET);
    addr_hit[18] = (reg_addr == CFG_REGS_RANGE_3_LAST_L_OFFSET);
    addr_hit[19] = (reg_addr == CFG_REGS_TRIG_PC0_H_OFFSET);
    addr_hit[20] = (reg_addr == CFG_REGS_TRIG_PC0_L_OFFSET);
    addr_hit[21] = (reg_addr == CFG_REGS_TRIG_PC1_H_OFFSET);
    addr_hit[22] = (reg_addr == CFG_REGS_TRIG_PC1_L_OFFSET);
    addr_hit[23] = (reg_addr == CFG_REGS_TRIG_PC2_H_OFFSET);
    addr_hit[24] = (reg_addr == CFG_REGS_TRIG_PC2_L_OFFSET);
    addr_hit[25] = (reg_addr == CFG_REGS_TRIG_PC3_H_OFFSET);
    addr_hit[26] = (reg_addr == CFG_REGS_TRIG_PC3_L_OFFSET);
    addr_hit[27] = (reg_addr == CFG_REGS_WATERMARK_LVL_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(CFG_REGS_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(CFG_REGS_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(CFG_REGS_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(CFG_REGS_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(CFG_REGS_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(CFG_REGS_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(CFG_REGS_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(CFG_REGS_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(CFG_REGS_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(CFG_REGS_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(CFG_REGS_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(CFG_REGS_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(CFG_REGS_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(CFG_REGS_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(CFG_REGS_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(CFG_REGS_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(CFG_REGS_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(CFG_REGS_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(CFG_REGS_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(CFG_REGS_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(CFG_REGS_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(CFG_REGS_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(CFG_REGS_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(CFG_REGS_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(CFG_REGS_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(CFG_REGS_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(CFG_REGS_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(CFG_REGS_PERMIT[27] & ~reg_be)))));
  end

  assign ctrl_u_mode_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_u_mode_wd = reg_wdata[0];

  assign ctrl_s_mode_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_s_mode_wd = reg_wdata[1];

  assign ctrl_m_mode_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_m_mode_wd = reg_wdata[2];

  assign ctrl_pc_range_0_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_pc_range_0_wd = reg_wdata[3];

  assign ctrl_pc_range_1_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_pc_range_1_wd = reg_wdata[4];

  assign ctrl_pc_range_2_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_pc_range_2_wd = reg_wdata[5];

  assign ctrl_pc_range_3_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_pc_range_3_wd = reg_wdata[6];

  assign ctrl_trig_pc_0_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_trig_pc_0_wd = reg_wdata[7];

  assign ctrl_trig_pc_1_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_trig_pc_1_wd = reg_wdata[8];

  assign ctrl_trig_pc_2_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_trig_pc_2_wd = reg_wdata[9];

  assign ctrl_trig_pc_3_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_trig_pc_3_wd = reg_wdata[10];

  assign ctrl_trace_mode_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_trace_mode_wd = reg_wdata[12:11];

  assign ctrl_test_mode_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_test_mode_wd = reg_wdata[13];

  assign ctrl_cnt_rst_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_cnt_rst_wd = reg_wdata[14];

  assign ctrl_excinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_excinh_wd = reg_wdata[15];

  assign ctrl_intrinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_intrinh_wd = reg_wdata[16];

  assign ctrl_tretinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_tretinh_wd = reg_wdata[17];

  assign ctrl_ntbren_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_ntbren_wd = reg_wdata[18];

  assign ctrl_tkbrinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_tkbrinh_wd = reg_wdata[19];

  assign ctrl_indcallinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_indcallinh_wd = reg_wdata[20];

  assign ctrl_dircallinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_dircallinh_wd = reg_wdata[21];

  assign ctrl_indjmpinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_indjmpinh_wd = reg_wdata[22];

  assign ctrl_dirjmpinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_dirjmpinh_wd = reg_wdata[23];

  assign ctrl_corswapinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_corswapinh_wd = reg_wdata[24];

  assign ctrl_retinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_retinh_wd = reg_wdata[25];

  assign ctrl_indljmpinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_indljmpinh_wd = reg_wdata[26];

  assign ctrl_dirljmpinh_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_dirljmpinh_wd = reg_wdata[27];

  assign ctrl_core_select_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_core_select_wd = reg_wdata[28];

  assign ctrl_watermark_en_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_watermark_en_wd = reg_wdata[29];

  assign ctrl_unused_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_unused_wd = reg_wdata[31:30];

  assign range_0_base_h_we = addr_hit[3] & reg_we & !reg_error;
  assign range_0_base_h_wd = reg_wdata[31:0];

  assign range_0_base_l_we = addr_hit[4] & reg_we & !reg_error;
  assign range_0_base_l_wd = reg_wdata[31:0];

  assign range_0_last_h_we = addr_hit[5] & reg_we & !reg_error;
  assign range_0_last_h_wd = reg_wdata[31:0];

  assign range_0_last_l_we = addr_hit[6] & reg_we & !reg_error;
  assign range_0_last_l_wd = reg_wdata[31:0];

  assign range_1_base_h_we = addr_hit[7] & reg_we & !reg_error;
  assign range_1_base_h_wd = reg_wdata[31:0];

  assign range_1_base_l_we = addr_hit[8] & reg_we & !reg_error;
  assign range_1_base_l_wd = reg_wdata[31:0];

  assign range_1_last_h_we = addr_hit[9] & reg_we & !reg_error;
  assign range_1_last_h_wd = reg_wdata[31:0];

  assign range_1_last_l_we = addr_hit[10] & reg_we & !reg_error;
  assign range_1_last_l_wd = reg_wdata[31:0];

  assign range_2_base_h_we = addr_hit[11] & reg_we & !reg_error;
  assign range_2_base_h_wd = reg_wdata[31:0];

  assign range_2_base_l_we = addr_hit[12] & reg_we & !reg_error;
  assign range_2_base_l_wd = reg_wdata[31:0];

  assign range_2_last_h_we = addr_hit[13] & reg_we & !reg_error;
  assign range_2_last_h_wd = reg_wdata[31:0];

  assign range_2_last_l_we = addr_hit[14] & reg_we & !reg_error;
  assign range_2_last_l_wd = reg_wdata[31:0];

  assign range_3_base_h_we = addr_hit[15] & reg_we & !reg_error;
  assign range_3_base_h_wd = reg_wdata[31:0];

  assign range_3_base_l_we = addr_hit[16] & reg_we & !reg_error;
  assign range_3_base_l_wd = reg_wdata[31:0];

  assign range_3_last_h_we = addr_hit[17] & reg_we & !reg_error;
  assign range_3_last_h_wd = reg_wdata[31:0];

  assign range_3_last_l_we = addr_hit[18] & reg_we & !reg_error;
  assign range_3_last_l_wd = reg_wdata[31:0];

  assign trig_pc0_h_we = addr_hit[19] & reg_we & !reg_error;
  assign trig_pc0_h_wd = reg_wdata[31:0];

  assign trig_pc0_l_we = addr_hit[20] & reg_we & !reg_error;
  assign trig_pc0_l_wd = reg_wdata[31:0];

  assign trig_pc1_h_we = addr_hit[21] & reg_we & !reg_error;
  assign trig_pc1_h_wd = reg_wdata[31:0];

  assign trig_pc1_l_we = addr_hit[22] & reg_we & !reg_error;
  assign trig_pc1_l_wd = reg_wdata[31:0];

  assign trig_pc2_h_we = addr_hit[23] & reg_we & !reg_error;
  assign trig_pc2_h_wd = reg_wdata[31:0];

  assign trig_pc2_l_we = addr_hit[24] & reg_we & !reg_error;
  assign trig_pc2_l_wd = reg_wdata[31:0];

  assign trig_pc3_h_we = addr_hit[25] & reg_we & !reg_error;
  assign trig_pc3_h_wd = reg_wdata[31:0];

  assign trig_pc3_l_we = addr_hit[26] & reg_we & !reg_error;
  assign trig_pc3_l_wd = reg_wdata[31:0];

  assign watermark_lvl_we = addr_hit[27] & reg_we & !reg_error;
  assign watermark_lvl_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ctrl_u_mode_qs;
        reg_rdata_next[1] = ctrl_s_mode_qs;
        reg_rdata_next[2] = ctrl_m_mode_qs;
        reg_rdata_next[3] = ctrl_pc_range_0_qs;
        reg_rdata_next[4] = ctrl_pc_range_1_qs;
        reg_rdata_next[5] = ctrl_pc_range_2_qs;
        reg_rdata_next[6] = ctrl_pc_range_3_qs;
        reg_rdata_next[7] = ctrl_trig_pc_0_qs;
        reg_rdata_next[8] = ctrl_trig_pc_1_qs;
        reg_rdata_next[9] = ctrl_trig_pc_2_qs;
        reg_rdata_next[10] = ctrl_trig_pc_3_qs;
        reg_rdata_next[12:11] = ctrl_trace_mode_qs;
        reg_rdata_next[13] = ctrl_test_mode_qs;
        reg_rdata_next[14] = ctrl_cnt_rst_qs;
        reg_rdata_next[15] = ctrl_excinh_qs;
        reg_rdata_next[16] = ctrl_intrinh_qs;
        reg_rdata_next[17] = ctrl_tretinh_qs;
        reg_rdata_next[18] = ctrl_ntbren_qs;
        reg_rdata_next[19] = ctrl_tkbrinh_qs;
        reg_rdata_next[20] = ctrl_indcallinh_qs;
        reg_rdata_next[21] = ctrl_dircallinh_qs;
        reg_rdata_next[22] = ctrl_indjmpinh_qs;
        reg_rdata_next[23] = ctrl_dirjmpinh_qs;
        reg_rdata_next[24] = ctrl_corswapinh_qs;
        reg_rdata_next[25] = ctrl_retinh_qs;
        reg_rdata_next[26] = ctrl_indljmpinh_qs;
        reg_rdata_next[27] = ctrl_dirljmpinh_qs;
        reg_rdata_next[28] = ctrl_core_select_qs;
        reg_rdata_next[29] = ctrl_watermark_en_qs;
        reg_rdata_next[31:30] = ctrl_unused_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = base_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = last_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = range_0_base_h_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = range_0_base_l_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = range_0_last_h_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = range_0_last_l_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = range_1_base_h_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = range_1_base_l_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = range_1_last_h_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = range_1_last_l_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = range_2_base_h_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = range_2_base_l_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = range_2_last_h_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = range_2_last_l_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = range_3_base_h_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = range_3_base_l_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = range_3_last_h_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = range_3_last_l_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = trig_pc0_h_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = trig_pc0_l_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = trig_pc1_h_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = trig_pc1_l_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = trig_pc2_h_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = trig_pc2_l_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = trig_pc3_h_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = trig_pc3_l_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = watermark_lvl_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module cfg_regs_reg_top_intf
#(
  parameter int AW = 7,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output cfg_regs_reg_pkg::cfg_regs_reg2hw_t reg2hw, // Write
  input  cfg_regs_reg_pkg::cfg_regs_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  cfg_regs_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


