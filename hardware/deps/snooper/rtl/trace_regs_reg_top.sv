// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module trace_regs_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 5
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output trace_regs_reg_pkg::trace_regs_reg2hw_t reg2hw, // Write
  input  trace_regs_reg_pkg::trace_regs_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import trace_regs_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0

  // Register instances
  // R[priv_lvl]: V(False)

  //   F[priv_lvl]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("NONE"),
    .RESVAL  (2'h0)
  ) u_priv_lvl_priv_lvl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.priv_lvl.priv_lvl.de),
    .d      (hw2reg.priv_lvl.priv_lvl.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.priv_lvl.priv_lvl.q ),

    .qs     ()
  );


  //   F[unused]: 31:2
  prim_subreg #(
    .DW      (30),
    .SWACCESS("NONE"),
    .RESVAL  (30'h0)
  ) u_priv_lvl_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.priv_lvl.unused.de),
    .d      (hw2reg.priv_lvl.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.priv_lvl.unused.q ),

    .qs     ()
  );


  // R[pc_src_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_pc_src_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.pc_src_h.de),
    .d      (hw2reg.pc_src_h.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pc_src_h.q ),

    .qs     ()
  );


  // R[pc_src_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_pc_src_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.pc_src_l.de),
    .d      (hw2reg.pc_src_l.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pc_src_l.q ),

    .qs     ()
  );


  // R[pc_dst_h]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_pc_dst_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.pc_dst_h.de),
    .d      (hw2reg.pc_dst_h.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pc_dst_h.q ),

    .qs     ()
  );


  // R[pc_dst_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_pc_dst_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.pc_dst_l.de),
    .d      (hw2reg.pc_dst_l.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pc_dst_l.q ),

    .qs     ()
  );


  // R[metadata]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_metadata (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.metadata.de),
    .d      (hw2reg.metadata.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.metadata.q ),

    .qs     ()
  );


  // R[opcode]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("NONE"),
    .RESVAL  (32'h0)
  ) u_opcode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.opcode.de),
    .d      (hw2reg.opcode.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.opcode.q ),

    .qs     ()
  );


  // R[valid]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("NONE"),
    .RESVAL  (1'h0)
  ) u_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.valid.de),
    .d      (hw2reg.valid.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.valid.q ),

    .qs     ()
  );




  logic [7:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == TRACE_REGS_PRIV_LVL_OFFSET);
    addr_hit[1] = (reg_addr == TRACE_REGS_PC_SRC_H_OFFSET);
    addr_hit[2] = (reg_addr == TRACE_REGS_PC_SRC_L_OFFSET);
    addr_hit[3] = (reg_addr == TRACE_REGS_PC_DST_H_OFFSET);
    addr_hit[4] = (reg_addr == TRACE_REGS_PC_DST_L_OFFSET);
    addr_hit[5] = (reg_addr == TRACE_REGS_METADATA_OFFSET);
    addr_hit[6] = (reg_addr == TRACE_REGS_OPCODE_OFFSET);
    addr_hit[7] = (reg_addr == TRACE_REGS_VALID_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(TRACE_REGS_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(TRACE_REGS_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(TRACE_REGS_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(TRACE_REGS_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(TRACE_REGS_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(TRACE_REGS_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(TRACE_REGS_PERMIT[6] & ~reg_be))) |
               (addr_hit[7] & (|(TRACE_REGS_PERMIT[7] & ~reg_be)))));
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[1:0] = '0;
        reg_rdata_next[31:2] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
