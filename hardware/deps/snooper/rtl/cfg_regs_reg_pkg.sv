// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package cfg_regs_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } u_mode;
    struct packed {
      logic        q;
    } s_mode;
    struct packed {
      logic        q;
    } m_mode;
    struct packed {
      logic        q;
    } pc_range_0;
    struct packed {
      logic        q;
    } pc_range_1;
    struct packed {
      logic        q;
    } pc_range_2;
    struct packed {
      logic        q;
    } pc_range_3;
    struct packed {
      logic        q;
    } trig_pc_0;
    struct packed {
      logic        q;
    } trig_pc_1;
    struct packed {
      logic        q;
    } trig_pc_2;
    struct packed {
      logic        q;
    } trig_pc_3;
    struct packed {
      logic [1:0]  q;
    } trace_mode;
    struct packed {
      logic        q;
    } test_mode;
    struct packed {
      logic        q;
    } cnt_rst;
    struct packed {
      logic        q;
    } excinh;
    struct packed {
      logic        q;
    } intrinh;
    struct packed {
      logic        q;
    } tretinh;
    struct packed {
      logic        q;
    } ntbren;
    struct packed {
      logic        q;
    } tkbrinh;
    struct packed {
      logic        q;
    } indcallinh;
    struct packed {
      logic        q;
    } dircallinh;
    struct packed {
      logic        q;
    } indjmpinh;
    struct packed {
      logic        q;
    } dirjmpinh;
    struct packed {
      logic        q;
    } corswapinh;
    struct packed {
      logic        q;
    } retinh;
    struct packed {
      logic        q;
    } indljmpinh;
    struct packed {
      logic        q;
    } dirljmpinh;
    struct packed {
      logic        q;
    } core_select;
    struct packed {
      logic        q;
    } watermark_en;
    struct packed {
      logic [1:0]  q;
    } unused;
  } cfg_regs_reg2hw_ctrl_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_0_base_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_0_base_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_0_last_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_0_last_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_1_base_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_1_base_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_1_last_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_1_last_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_2_base_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_2_base_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_2_last_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_2_last_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_3_base_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_3_base_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_3_last_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_range_3_last_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_trig_pc0_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_trig_pc0_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_trig_pc1_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_trig_pc1_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_trig_pc2_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_trig_pc2_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_trig_pc3_h_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_trig_pc3_l_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } cfg_regs_reg2hw_watermark_lvl_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } u_mode;
    struct packed {
      logic        d;
      logic        de;
    } s_mode;
    struct packed {
      logic        d;
      logic        de;
    } m_mode;
    struct packed {
      logic        d;
      logic        de;
    } pc_range_0;
    struct packed {
      logic        d;
      logic        de;
    } pc_range_1;
    struct packed {
      logic        d;
      logic        de;
    } pc_range_2;
    struct packed {
      logic        d;
      logic        de;
    } pc_range_3;
    struct packed {
      logic        d;
      logic        de;
    } trig_pc_0;
    struct packed {
      logic        d;
      logic        de;
    } trig_pc_1;
    struct packed {
      logic        d;
      logic        de;
    } trig_pc_2;
    struct packed {
      logic        d;
      logic        de;
    } trig_pc_3;
  } cfg_regs_hw2reg_ctrl_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } cfg_regs_hw2reg_base_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } cfg_regs_hw2reg_last_reg_t;

  // Register -> HW type
  typedef struct packed {
    cfg_regs_reg2hw_ctrl_reg_t ctrl; // [831:800]
    cfg_regs_reg2hw_range_0_base_h_reg_t range_0_base_h; // [799:768]
    cfg_regs_reg2hw_range_0_base_l_reg_t range_0_base_l; // [767:736]
    cfg_regs_reg2hw_range_0_last_h_reg_t range_0_last_h; // [735:704]
    cfg_regs_reg2hw_range_0_last_l_reg_t range_0_last_l; // [703:672]
    cfg_regs_reg2hw_range_1_base_h_reg_t range_1_base_h; // [671:640]
    cfg_regs_reg2hw_range_1_base_l_reg_t range_1_base_l; // [639:608]
    cfg_regs_reg2hw_range_1_last_h_reg_t range_1_last_h; // [607:576]
    cfg_regs_reg2hw_range_1_last_l_reg_t range_1_last_l; // [575:544]
    cfg_regs_reg2hw_range_2_base_h_reg_t range_2_base_h; // [543:512]
    cfg_regs_reg2hw_range_2_base_l_reg_t range_2_base_l; // [511:480]
    cfg_regs_reg2hw_range_2_last_h_reg_t range_2_last_h; // [479:448]
    cfg_regs_reg2hw_range_2_last_l_reg_t range_2_last_l; // [447:416]
    cfg_regs_reg2hw_range_3_base_h_reg_t range_3_base_h; // [415:384]
    cfg_regs_reg2hw_range_3_base_l_reg_t range_3_base_l; // [383:352]
    cfg_regs_reg2hw_range_3_last_h_reg_t range_3_last_h; // [351:320]
    cfg_regs_reg2hw_range_3_last_l_reg_t range_3_last_l; // [319:288]
    cfg_regs_reg2hw_trig_pc0_h_reg_t trig_pc0_h; // [287:256]
    cfg_regs_reg2hw_trig_pc0_l_reg_t trig_pc0_l; // [255:224]
    cfg_regs_reg2hw_trig_pc1_h_reg_t trig_pc1_h; // [223:192]
    cfg_regs_reg2hw_trig_pc1_l_reg_t trig_pc1_l; // [191:160]
    cfg_regs_reg2hw_trig_pc2_h_reg_t trig_pc2_h; // [159:128]
    cfg_regs_reg2hw_trig_pc2_l_reg_t trig_pc2_l; // [127:96]
    cfg_regs_reg2hw_trig_pc3_h_reg_t trig_pc3_h; // [95:64]
    cfg_regs_reg2hw_trig_pc3_l_reg_t trig_pc3_l; // [63:32]
    cfg_regs_reg2hw_watermark_lvl_reg_t watermark_lvl; // [31:0]
  } cfg_regs_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    cfg_regs_hw2reg_ctrl_reg_t ctrl; // [87:66]
    cfg_regs_hw2reg_base_reg_t base; // [65:33]
    cfg_regs_hw2reg_last_reg_t last; // [32:0]
  } cfg_regs_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CFG_REGS_CTRL_OFFSET = 7'h 0;
  parameter logic [BlockAw-1:0] CFG_REGS_BASE_OFFSET = 7'h 4;
  parameter logic [BlockAw-1:0] CFG_REGS_LAST_OFFSET = 7'h 8;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_0_BASE_H_OFFSET = 7'h c;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_0_BASE_L_OFFSET = 7'h 10;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_0_LAST_H_OFFSET = 7'h 14;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_0_LAST_L_OFFSET = 7'h 18;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_1_BASE_H_OFFSET = 7'h 1c;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_1_BASE_L_OFFSET = 7'h 20;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_1_LAST_H_OFFSET = 7'h 24;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_1_LAST_L_OFFSET = 7'h 28;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_2_BASE_H_OFFSET = 7'h 2c;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_2_BASE_L_OFFSET = 7'h 30;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_2_LAST_H_OFFSET = 7'h 34;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_2_LAST_L_OFFSET = 7'h 38;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_3_BASE_H_OFFSET = 7'h 3c;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_3_BASE_L_OFFSET = 7'h 40;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_3_LAST_H_OFFSET = 7'h 44;
  parameter logic [BlockAw-1:0] CFG_REGS_RANGE_3_LAST_L_OFFSET = 7'h 48;
  parameter logic [BlockAw-1:0] CFG_REGS_TRIG_PC0_H_OFFSET = 7'h 4c;
  parameter logic [BlockAw-1:0] CFG_REGS_TRIG_PC0_L_OFFSET = 7'h 50;
  parameter logic [BlockAw-1:0] CFG_REGS_TRIG_PC1_H_OFFSET = 7'h 54;
  parameter logic [BlockAw-1:0] CFG_REGS_TRIG_PC1_L_OFFSET = 7'h 58;
  parameter logic [BlockAw-1:0] CFG_REGS_TRIG_PC2_H_OFFSET = 7'h 5c;
  parameter logic [BlockAw-1:0] CFG_REGS_TRIG_PC2_L_OFFSET = 7'h 60;
  parameter logic [BlockAw-1:0] CFG_REGS_TRIG_PC3_H_OFFSET = 7'h 64;
  parameter logic [BlockAw-1:0] CFG_REGS_TRIG_PC3_L_OFFSET = 7'h 68;
  parameter logic [BlockAw-1:0] CFG_REGS_WATERMARK_LVL_OFFSET = 7'h 6c;

  // Register index
  typedef enum int {
    CFG_REGS_CTRL,
    CFG_REGS_BASE,
    CFG_REGS_LAST,
    CFG_REGS_RANGE_0_BASE_H,
    CFG_REGS_RANGE_0_BASE_L,
    CFG_REGS_RANGE_0_LAST_H,
    CFG_REGS_RANGE_0_LAST_L,
    CFG_REGS_RANGE_1_BASE_H,
    CFG_REGS_RANGE_1_BASE_L,
    CFG_REGS_RANGE_1_LAST_H,
    CFG_REGS_RANGE_1_LAST_L,
    CFG_REGS_RANGE_2_BASE_H,
    CFG_REGS_RANGE_2_BASE_L,
    CFG_REGS_RANGE_2_LAST_H,
    CFG_REGS_RANGE_2_LAST_L,
    CFG_REGS_RANGE_3_BASE_H,
    CFG_REGS_RANGE_3_BASE_L,
    CFG_REGS_RANGE_3_LAST_H,
    CFG_REGS_RANGE_3_LAST_L,
    CFG_REGS_TRIG_PC0_H,
    CFG_REGS_TRIG_PC0_L,
    CFG_REGS_TRIG_PC1_H,
    CFG_REGS_TRIG_PC1_L,
    CFG_REGS_TRIG_PC2_H,
    CFG_REGS_TRIG_PC2_L,
    CFG_REGS_TRIG_PC3_H,
    CFG_REGS_TRIG_PC3_L,
    CFG_REGS_WATERMARK_LVL
  } cfg_regs_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CFG_REGS_PERMIT [28] = '{
    4'b 1111, // index[ 0] CFG_REGS_CTRL
    4'b 1111, // index[ 1] CFG_REGS_BASE
    4'b 1111, // index[ 2] CFG_REGS_LAST
    4'b 1111, // index[ 3] CFG_REGS_RANGE_0_BASE_H
    4'b 1111, // index[ 4] CFG_REGS_RANGE_0_BASE_L
    4'b 1111, // index[ 5] CFG_REGS_RANGE_0_LAST_H
    4'b 1111, // index[ 6] CFG_REGS_RANGE_0_LAST_L
    4'b 1111, // index[ 7] CFG_REGS_RANGE_1_BASE_H
    4'b 1111, // index[ 8] CFG_REGS_RANGE_1_BASE_L
    4'b 1111, // index[ 9] CFG_REGS_RANGE_1_LAST_H
    4'b 1111, // index[10] CFG_REGS_RANGE_1_LAST_L
    4'b 1111, // index[11] CFG_REGS_RANGE_2_BASE_H
    4'b 1111, // index[12] CFG_REGS_RANGE_2_BASE_L
    4'b 1111, // index[13] CFG_REGS_RANGE_2_LAST_H
    4'b 1111, // index[14] CFG_REGS_RANGE_2_LAST_L
    4'b 1111, // index[15] CFG_REGS_RANGE_3_BASE_H
    4'b 1111, // index[16] CFG_REGS_RANGE_3_BASE_L
    4'b 1111, // index[17] CFG_REGS_RANGE_3_LAST_H
    4'b 1111, // index[18] CFG_REGS_RANGE_3_LAST_L
    4'b 1111, // index[19] CFG_REGS_TRIG_PC0_H
    4'b 1111, // index[20] CFG_REGS_TRIG_PC0_L
    4'b 1111, // index[21] CFG_REGS_TRIG_PC1_H
    4'b 1111, // index[22] CFG_REGS_TRIG_PC1_L
    4'b 1111, // index[23] CFG_REGS_TRIG_PC2_H
    4'b 1111, // index[24] CFG_REGS_TRIG_PC2_L
    4'b 1111, // index[25] CFG_REGS_TRIG_PC3_H
    4'b 1111, // index[26] CFG_REGS_TRIG_PC3_L
    4'b 1111  // index[27] CFG_REGS_WATERMARK_LVL
  };

endpackage

