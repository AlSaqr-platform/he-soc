// File auto-generated by Padrick 0.1.0.post0.dev37+gc5ae078
module alsaqr_periph_padframe_periphs_muxer
  import pkg_internal_alsaqr_periph_padframe_periphs::*;
  import pkg_alsaqr_periph_padframe::*;
  import alsaqr_periph_padframe_periphs_config_reg_pkg::*;
#(
  parameter type              req_t  = logic, // reg_interface request type
  parameter type             resp_t  = logic // reg_interface response type
) (
  input logic clk_i,
  input logic rst_ni,
  input pad_domain_periphs_ports_soc2pad_t port_signals_soc2pad_i,
  output pad_domain_periphs_ports_pad2soc_t port_signals_pad2soc_o,
  output mux_to_pads_t mux_to_pads_o,
  input pads_to_mux_t pads_to_mux_i,
  // Configuration interface using register_interface protocol
  input req_t config_req_i,
  output resp_t config_rsp_o
);
   // Connections between register file and pads
     alsaqr_periph_padframe_periphs_config_reg2hw_t s_reg2hw;

  // Register File Instantiation
  alsaqr_periph_padframe_periphs_config_reg_top #(
    .reg_req_t(req_t),
    .reg_rsp_t(resp_t)
    ) i_regfile (
    .clk_i,
    .rst_ni,
    .reg2hw(s_reg2hw),
    .reg_req_i(config_req_i),
    .reg_rsp_o(config_rsp_o),
    .devmode_i(1'b1)
  );


   // SoC -> Pad Multiplex Logic
   // Pad pad_mx_can_0
   always_comb begin
     unique case (s_reg2hw.pad_mx_can_0_mux_sel.q)
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_can_0.chip2pad = s_reg2hw.pad_mx_can_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_can_0.oen = s_reg2hw.pad_mx_can_0_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_SPI7_SPI_CS: begin
          mux_to_pads_o.pad_mx_can_0.chip2pad = port_signals_soc2pad_i.spi7.csn0_i;
          mux_to_pads_o.pad_mx_can_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_SPI7_SPI_MISO: begin
          mux_to_pads_o.pad_mx_can_0.chip2pad = s_reg2hw.pad_mx_can_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_SPI7_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_can_0.chip2pad = port_signals_soc2pad_i.spi7.sd0_i;
          mux_to_pads_o.pad_mx_can_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_SPI7_SPI_SCK: begin
          mux_to_pads_o.pad_mx_can_0.chip2pad = port_signals_soc2pad_i.spi7.clk_i;
          mux_to_pads_o.pad_mx_can_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_CAN2_CAN_CAN1_RX: begin
          mux_to_pads_o.pad_mx_can_0.chip2pad = s_reg2hw.pad_mx_can_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_CAN2_CAN_CAN1_TX: begin
          mux_to_pads_o.pad_mx_can_0.chip2pad = port_signals_soc2pad_i.CAN2_CAN.can1_tx_i;
          mux_to_pads_o.pad_mx_can_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_CAN2_CAN_CAN2_RX: begin
          mux_to_pads_o.pad_mx_can_0.chip2pad = s_reg2hw.pad_mx_can_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_CAN2_CAN_CAN2_TX: begin
          mux_to_pads_o.pad_mx_can_0.chip2pad = port_signals_soc2pad_i.CAN2_CAN.can2_tx_i;
          mux_to_pads_o.pad_mx_can_0.oen = 1'b0;
       end
       default: begin
         mux_to_pads_o.pad_mx_can_0.chip2pad = s_reg2hw.pad_mx_can_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_can_0.oen = s_reg2hw.pad_mx_can_0_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_can_1
   always_comb begin
     unique case (s_reg2hw.pad_mx_can_1_mux_sel.q)
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_can_1.chip2pad = s_reg2hw.pad_mx_can_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_can_1.oen = s_reg2hw.pad_mx_can_1_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_SPI7_SPI_CS: begin
          mux_to_pads_o.pad_mx_can_1.chip2pad = port_signals_soc2pad_i.spi7.csn0_i;
          mux_to_pads_o.pad_mx_can_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_SPI7_SPI_MISO: begin
          mux_to_pads_o.pad_mx_can_1.chip2pad = s_reg2hw.pad_mx_can_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_SPI7_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_can_1.chip2pad = port_signals_soc2pad_i.spi7.sd0_i;
          mux_to_pads_o.pad_mx_can_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_SPI7_SPI_SCK: begin
          mux_to_pads_o.pad_mx_can_1.chip2pad = port_signals_soc2pad_i.spi7.clk_i;
          mux_to_pads_o.pad_mx_can_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_CAN2_CAN_CAN1_RX: begin
          mux_to_pads_o.pad_mx_can_1.chip2pad = s_reg2hw.pad_mx_can_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_CAN2_CAN_CAN1_TX: begin
          mux_to_pads_o.pad_mx_can_1.chip2pad = port_signals_soc2pad_i.CAN2_CAN.can1_tx_i;
          mux_to_pads_o.pad_mx_can_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_CAN2_CAN_CAN2_RX: begin
          mux_to_pads_o.pad_mx_can_1.chip2pad = s_reg2hw.pad_mx_can_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_CAN2_CAN_CAN2_TX: begin
          mux_to_pads_o.pad_mx_can_1.chip2pad = port_signals_soc2pad_i.CAN2_CAN.can2_tx_i;
          mux_to_pads_o.pad_mx_can_1.oen = 1'b0;
       end
       default: begin
         mux_to_pads_o.pad_mx_can_1.chip2pad = s_reg2hw.pad_mx_can_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_can_1.oen = s_reg2hw.pad_mx_can_1_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_can_2
   always_comb begin
     unique case (s_reg2hw.pad_mx_can_2_mux_sel.q)
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_can_2.chip2pad = s_reg2hw.pad_mx_can_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_can_2.oen = s_reg2hw.pad_mx_can_2_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_SPI7_SPI_CS: begin
          mux_to_pads_o.pad_mx_can_2.chip2pad = port_signals_soc2pad_i.spi7.csn0_i;
          mux_to_pads_o.pad_mx_can_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_SPI7_SPI_MISO: begin
          mux_to_pads_o.pad_mx_can_2.chip2pad = s_reg2hw.pad_mx_can_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_SPI7_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_can_2.chip2pad = port_signals_soc2pad_i.spi7.sd0_i;
          mux_to_pads_o.pad_mx_can_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_SPI7_SPI_SCK: begin
          mux_to_pads_o.pad_mx_can_2.chip2pad = port_signals_soc2pad_i.spi7.clk_i;
          mux_to_pads_o.pad_mx_can_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_CAN2_CAN_CAN1_RX: begin
          mux_to_pads_o.pad_mx_can_2.chip2pad = s_reg2hw.pad_mx_can_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_CAN2_CAN_CAN1_TX: begin
          mux_to_pads_o.pad_mx_can_2.chip2pad = port_signals_soc2pad_i.CAN2_CAN.can1_tx_i;
          mux_to_pads_o.pad_mx_can_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_CAN2_CAN_CAN2_RX: begin
          mux_to_pads_o.pad_mx_can_2.chip2pad = s_reg2hw.pad_mx_can_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_CAN2_CAN_CAN2_TX: begin
          mux_to_pads_o.pad_mx_can_2.chip2pad = port_signals_soc2pad_i.CAN2_CAN.can2_tx_i;
          mux_to_pads_o.pad_mx_can_2.oen = 1'b0;
       end
       default: begin
         mux_to_pads_o.pad_mx_can_2.chip2pad = s_reg2hw.pad_mx_can_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_can_2.oen = s_reg2hw.pad_mx_can_2_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_can_3
   always_comb begin
     unique case (s_reg2hw.pad_mx_can_3_mux_sel.q)
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_can_3.chip2pad = s_reg2hw.pad_mx_can_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_can_3.oen = s_reg2hw.pad_mx_can_3_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_SPI7_SPI_CS: begin
          mux_to_pads_o.pad_mx_can_3.chip2pad = port_signals_soc2pad_i.spi7.csn0_i;
          mux_to_pads_o.pad_mx_can_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_SPI7_SPI_MISO: begin
          mux_to_pads_o.pad_mx_can_3.chip2pad = s_reg2hw.pad_mx_can_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_SPI7_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_can_3.chip2pad = port_signals_soc2pad_i.spi7.sd0_i;
          mux_to_pads_o.pad_mx_can_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_SPI7_SPI_SCK: begin
          mux_to_pads_o.pad_mx_can_3.chip2pad = port_signals_soc2pad_i.spi7.clk_i;
          mux_to_pads_o.pad_mx_can_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_CAN2_CAN_CAN1_RX: begin
          mux_to_pads_o.pad_mx_can_3.chip2pad = s_reg2hw.pad_mx_can_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_CAN2_CAN_CAN1_TX: begin
          mux_to_pads_o.pad_mx_can_3.chip2pad = port_signals_soc2pad_i.CAN2_CAN.can1_tx_i;
          mux_to_pads_o.pad_mx_can_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_CAN2_CAN_CAN2_RX: begin
          mux_to_pads_o.pad_mx_can_3.chip2pad = s_reg2hw.pad_mx_can_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_can_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_CAN2_CAN_CAN2_TX: begin
          mux_to_pads_o.pad_mx_can_3.chip2pad = port_signals_soc2pad_i.CAN2_CAN.can2_tx_i;
          mux_to_pads_o.pad_mx_can_3.oen = 1'b0;
       end
       default: begin
         mux_to_pads_o.pad_mx_can_3.chip2pad = s_reg2hw.pad_mx_can_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_can_3.oen = s_reg2hw.pad_mx_can_3_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_0
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_0_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_0.oen = s_reg2hw.pad_mx_cam0_0_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_0.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_0.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_0.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_0.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_0.chip2pad = s_reg2hw.pad_mx_cam0_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_0.oen = s_reg2hw.pad_mx_cam0_0_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_1
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_1_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_1.oen = s_reg2hw.pad_mx_cam0_1_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_1.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_1.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_1.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_1.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_1.chip2pad = s_reg2hw.pad_mx_cam0_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_1.oen = s_reg2hw.pad_mx_cam0_1_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_2
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_2_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_2.oen = s_reg2hw.pad_mx_cam0_2_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_2.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_2.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_2.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_2.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_2.chip2pad = s_reg2hw.pad_mx_cam0_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_2.oen = s_reg2hw.pad_mx_cam0_2_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_3
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_3_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_3.oen = s_reg2hw.pad_mx_cam0_3_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_3.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_3.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_3.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_3.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_3.chip2pad = s_reg2hw.pad_mx_cam0_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_3.oen = s_reg2hw.pad_mx_cam0_3_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_4
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_4_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_4.oen = s_reg2hw.pad_mx_cam0_4_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_4.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_4.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_4.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_4.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_4.chip2pad = s_reg2hw.pad_mx_cam0_4_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_4.oen = s_reg2hw.pad_mx_cam0_4_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_5
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_5_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_5.oen = s_reg2hw.pad_mx_cam0_5_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_5.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_5.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_5.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_5.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_5.chip2pad = s_reg2hw.pad_mx_cam0_5_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_5.oen = s_reg2hw.pad_mx_cam0_5_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_6
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_6_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_6.oen = s_reg2hw.pad_mx_cam0_6_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_6.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_6.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_6.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_6.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_6.chip2pad = s_reg2hw.pad_mx_cam0_6_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_6.oen = s_reg2hw.pad_mx_cam0_6_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_7
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_7_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_7.oen = s_reg2hw.pad_mx_cam0_7_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_7.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_7.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_7.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_7.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_7.chip2pad = s_reg2hw.pad_mx_cam0_7_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_7.oen = s_reg2hw.pad_mx_cam0_7_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_8
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_8_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_8.oen = s_reg2hw.pad_mx_cam0_8_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_8.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_8.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_8.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_8.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_8.chip2pad = s_reg2hw.pad_mx_cam0_8_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_8.oen = s_reg2hw.pad_mx_cam0_8_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_9
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_9_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_9.oen = s_reg2hw.pad_mx_cam0_9_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_9.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_9.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_9.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_9.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_9.chip2pad = s_reg2hw.pad_mx_cam0_9_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_9.oen = s_reg2hw.pad_mx_cam0_9_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam0_10
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam0_10_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_10.oen = s_reg2hw.pad_mx_cam0_10_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI8_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = port_signals_soc2pad_i.spi8.csn0_i;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI8_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI8_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = port_signals_soc2pad_i.spi8.sd0_i;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI8_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = port_signals_soc2pad_i.spi8.clk_i;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI9_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = port_signals_soc2pad_i.spi9.csn0_i;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI9_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI9_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = port_signals_soc2pad_i.spi9.sd0_i;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI9_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = port_signals_soc2pad_i.spi9.clk_i;
          mux_to_pads_o.pad_mx_cam0_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_I2C3_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = port_signals_soc2pad_i.i2c3.scl_i;
          mux_to_pads_o.pad_mx_cam0_10.oen = ~port_signals_soc2pad_i.i2c3.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_I2C3_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = port_signals_soc2pad_i.i2c3.sda_i;
          mux_to_pads_o.pad_mx_cam0_10.oen = ~port_signals_soc2pad_i.i2c3.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_IMU2_DRDY_GPIO57: begin
          mux_to_pads_o.pad_mx_cam0_10.chip2pad = port_signals_soc2pad_i.IMU2_DRDY.gpio57_i;
          mux_to_pads_o.pad_mx_cam0_10.oen = port_signals_soc2pad_i.IMU2_DRDY.gpio57_dir_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam0_10.chip2pad = s_reg2hw.pad_mx_cam0_10_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam0_10.oen = s_reg2hw.pad_mx_cam0_10_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_0
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_0_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_0.oen = s_reg2hw.pad_mx_cam1_0_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_0.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_0.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_0.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_0.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_0.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_0.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_0.chip2pad = s_reg2hw.pad_mx_cam1_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_0.oen = s_reg2hw.pad_mx_cam1_0_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_1
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_1_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_1.oen = s_reg2hw.pad_mx_cam1_1_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_1.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_1.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_1.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_1.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_1.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_1.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_1.chip2pad = s_reg2hw.pad_mx_cam1_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_1.oen = s_reg2hw.pad_mx_cam1_1_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_2
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_2_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_2.oen = s_reg2hw.pad_mx_cam1_2_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_2.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_2.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_2.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_2.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_2.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_2.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_2.chip2pad = s_reg2hw.pad_mx_cam1_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_2.oen = s_reg2hw.pad_mx_cam1_2_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_3
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_3_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_3.oen = s_reg2hw.pad_mx_cam1_3_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_3.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_3.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_3.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_3.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_3.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_3.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_3.chip2pad = s_reg2hw.pad_mx_cam1_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_3.oen = s_reg2hw.pad_mx_cam1_3_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_4
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_4_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_4.oen = s_reg2hw.pad_mx_cam1_4_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_4.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_4.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_4.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_4.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_4.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_4.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_4.chip2pad = s_reg2hw.pad_mx_cam1_4_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_4.oen = s_reg2hw.pad_mx_cam1_4_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_5
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_5_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_5.oen = s_reg2hw.pad_mx_cam1_5_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_5.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_5.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_5.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_5.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_5.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_5.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_5.chip2pad = s_reg2hw.pad_mx_cam1_5_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_5.oen = s_reg2hw.pad_mx_cam1_5_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_6
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_6_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_6.oen = s_reg2hw.pad_mx_cam1_6_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_6.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_6.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_6.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_6.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_6.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_6.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_6.chip2pad = s_reg2hw.pad_mx_cam1_6_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_6.oen = s_reg2hw.pad_mx_cam1_6_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_7
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_7_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_7.oen = s_reg2hw.pad_mx_cam1_7_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_7.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_7.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_7.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_7.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_7.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_7.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_7.chip2pad = s_reg2hw.pad_mx_cam1_7_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_7.oen = s_reg2hw.pad_mx_cam1_7_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_8
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_8_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_8.oen = s_reg2hw.pad_mx_cam1_8_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_8.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_8.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_8.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_8.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_8.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_8.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_8.chip2pad = s_reg2hw.pad_mx_cam1_8_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_8.oen = s_reg2hw.pad_mx_cam1_8_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_9
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_9_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_9.oen = s_reg2hw.pad_mx_cam1_9_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_9.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_9.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_9.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_9.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_9.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_9.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_9.chip2pad = s_reg2hw.pad_mx_cam1_9_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_9.oen = s_reg2hw.pad_mx_cam1_9_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_cam1_10
   always_comb begin
     unique case (s_reg2hw.pad_mx_cam1_10_mux_sel.q)
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_10.oen = s_reg2hw.pad_mx_cam1_10_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA0_I: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA1_I: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA2_I: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA3_I: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA4_I: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA5_I: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA6_I: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA7_I: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_HSYNC: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_PCLK: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_VSYNC: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_SPI10_SPI_CS: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = port_signals_soc2pad_i.spi10.csn0_i;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_SPI10_SPI_MISO: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_SPI10_SPI_MOSI: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = port_signals_soc2pad_i.spi10.sd0_i;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_SPI10_SPI_SCK: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = port_signals_soc2pad_i.spi10.clk_i;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_I2C4_I2C_SCL: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = port_signals_soc2pad_i.i2c4.scl_i;
          mux_to_pads_o.pad_mx_cam1_10.oen = ~port_signals_soc2pad_i.i2c4.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_I2C4_I2C_SDA: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = port_signals_soc2pad_i.i2c4.sda_i;
          mux_to_pads_o.pad_mx_cam1_10.oen = ~port_signals_soc2pad_i.i2c4.sda_oe_i;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_SPI10_CS1_SPI10_CS1: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = port_signals_soc2pad_i.SPI10_CS1.spi10_cs_i;
          mux_to_pads_o.pad_mx_cam1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_GPIO58_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = port_signals_soc2pad_i.gpio58.gpio_i;
          mux_to_pads_o.pad_mx_cam1_10.oen = port_signals_soc2pad_i.gpio58.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_GPIO59_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = port_signals_soc2pad_i.gpio59.gpio_i;
          mux_to_pads_o.pad_mx_cam1_10.oen = port_signals_soc2pad_i.gpio59.gpio_dir;
       end
       PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_GPIO60_GPIO: begin
          mux_to_pads_o.pad_mx_cam1_10.chip2pad = port_signals_soc2pad_i.gpio60.gpio_i;
          mux_to_pads_o.pad_mx_cam1_10.oen = port_signals_soc2pad_i.gpio60.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_cam1_10.chip2pad = s_reg2hw.pad_mx_cam1_10_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_cam1_10.oen = s_reg2hw.pad_mx_cam1_10_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_sdio1_0
   always_comb begin
     unique case (s_reg2hw.pad_mx_sdio1_0_mux_sel.q)
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_sdio1_0.chip2pad = s_reg2hw.pad_mx_sdio1_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_0.oen = s_reg2hw.pad_mx_sdio1_0_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_CLK: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.sdio1.clk_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_CMD: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.sdio1.cmd_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = port_signals_soc2pad_i.sdio1.cmd_oen_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_DATA0: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.sdio1.data0_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = port_signals_soc2pad_i.sdio1.data0_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_DATA1: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.sdio1.data1_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = port_signals_soc2pad_i.sdio1.data1_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_DATA2: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.sdio1.data2_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = port_signals_soc2pad_i.sdio1.data2_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_DATA3: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.sdio1.data3_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = port_signals_soc2pad_i.sdio1.data3_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_UART5_UART_CTS: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = s_reg2hw.pad_mx_sdio1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_UART5_UART_RTS: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.uart5.rts_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_UART5_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = s_reg2hw.pad_mx_sdio1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_UART5_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.uart5.tx_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_UART6_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = s_reg2hw.pad_mx_sdio1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_UART6_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.uart6.tx_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_GPIO61_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.gpio61.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = port_signals_soc2pad_i.gpio61.gpio_dir;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_GPIO62_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_0.chip2pad = port_signals_soc2pad_i.gpio62.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_0.oen = port_signals_soc2pad_i.gpio62.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_sdio1_0.chip2pad = s_reg2hw.pad_mx_sdio1_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_0.oen = s_reg2hw.pad_mx_sdio1_0_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_sdio1_1
   always_comb begin
     unique case (s_reg2hw.pad_mx_sdio1_1_mux_sel.q)
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_sdio1_1.chip2pad = s_reg2hw.pad_mx_sdio1_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_1.oen = s_reg2hw.pad_mx_sdio1_1_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_CLK: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.sdio1.clk_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_CMD: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.sdio1.cmd_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = port_signals_soc2pad_i.sdio1.cmd_oen_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_DATA0: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.sdio1.data0_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = port_signals_soc2pad_i.sdio1.data0_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_DATA1: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.sdio1.data1_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = port_signals_soc2pad_i.sdio1.data1_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_DATA2: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.sdio1.data2_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = port_signals_soc2pad_i.sdio1.data2_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_DATA3: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.sdio1.data3_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = port_signals_soc2pad_i.sdio1.data3_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_UART5_UART_CTS: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = s_reg2hw.pad_mx_sdio1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_UART5_UART_RTS: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.uart5.rts_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_UART5_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = s_reg2hw.pad_mx_sdio1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_UART5_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.uart5.tx_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_UART6_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = s_reg2hw.pad_mx_sdio1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_UART6_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.uart6.tx_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_GPIO61_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.gpio61.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = port_signals_soc2pad_i.gpio61.gpio_dir;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_GPIO62_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_1.chip2pad = port_signals_soc2pad_i.gpio62.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_1.oen = port_signals_soc2pad_i.gpio62.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_sdio1_1.chip2pad = s_reg2hw.pad_mx_sdio1_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_1.oen = s_reg2hw.pad_mx_sdio1_1_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_sdio1_2
   always_comb begin
     unique case (s_reg2hw.pad_mx_sdio1_2_mux_sel.q)
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_sdio1_2.chip2pad = s_reg2hw.pad_mx_sdio1_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_2.oen = s_reg2hw.pad_mx_sdio1_2_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_CLK: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.sdio1.clk_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_CMD: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.sdio1.cmd_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = port_signals_soc2pad_i.sdio1.cmd_oen_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_DATA0: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.sdio1.data0_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = port_signals_soc2pad_i.sdio1.data0_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_DATA1: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.sdio1.data1_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = port_signals_soc2pad_i.sdio1.data1_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_DATA2: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.sdio1.data2_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = port_signals_soc2pad_i.sdio1.data2_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_DATA3: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.sdio1.data3_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = port_signals_soc2pad_i.sdio1.data3_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_UART5_UART_CTS: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = s_reg2hw.pad_mx_sdio1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_UART5_UART_RTS: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.uart5.rts_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_UART5_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = s_reg2hw.pad_mx_sdio1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_UART5_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.uart5.tx_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_UART6_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = s_reg2hw.pad_mx_sdio1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_UART6_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.uart6.tx_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_GPIO61_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.gpio61.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = port_signals_soc2pad_i.gpio61.gpio_dir;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_GPIO62_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_2.chip2pad = port_signals_soc2pad_i.gpio62.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_2.oen = port_signals_soc2pad_i.gpio62.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_sdio1_2.chip2pad = s_reg2hw.pad_mx_sdio1_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_2.oen = s_reg2hw.pad_mx_sdio1_2_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_sdio1_3
   always_comb begin
     unique case (s_reg2hw.pad_mx_sdio1_3_mux_sel.q)
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_sdio1_3.chip2pad = s_reg2hw.pad_mx_sdio1_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_3.oen = s_reg2hw.pad_mx_sdio1_3_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_CLK: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.sdio1.clk_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_CMD: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.sdio1.cmd_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = port_signals_soc2pad_i.sdio1.cmd_oen_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_DATA0: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.sdio1.data0_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = port_signals_soc2pad_i.sdio1.data0_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_DATA1: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.sdio1.data1_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = port_signals_soc2pad_i.sdio1.data1_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_DATA2: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.sdio1.data2_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = port_signals_soc2pad_i.sdio1.data2_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_DATA3: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.sdio1.data3_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = port_signals_soc2pad_i.sdio1.data3_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_UART5_UART_CTS: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = s_reg2hw.pad_mx_sdio1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_UART5_UART_RTS: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.uart5.rts_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_UART5_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = s_reg2hw.pad_mx_sdio1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_UART5_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.uart5.tx_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_UART6_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = s_reg2hw.pad_mx_sdio1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_UART6_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.uart6.tx_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_GPIO61_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.gpio61.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = port_signals_soc2pad_i.gpio61.gpio_dir;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_GPIO62_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_3.chip2pad = port_signals_soc2pad_i.gpio62.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_3.oen = port_signals_soc2pad_i.gpio62.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_sdio1_3.chip2pad = s_reg2hw.pad_mx_sdio1_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_3.oen = s_reg2hw.pad_mx_sdio1_3_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_sdio1_4
   always_comb begin
     unique case (s_reg2hw.pad_mx_sdio1_4_mux_sel.q)
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_sdio1_4.chip2pad = s_reg2hw.pad_mx_sdio1_4_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_4.oen = s_reg2hw.pad_mx_sdio1_4_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_CLK: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.sdio1.clk_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_CMD: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.sdio1.cmd_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = port_signals_soc2pad_i.sdio1.cmd_oen_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_DATA0: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.sdio1.data0_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = port_signals_soc2pad_i.sdio1.data0_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_DATA1: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.sdio1.data1_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = port_signals_soc2pad_i.sdio1.data1_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_DATA2: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.sdio1.data2_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = port_signals_soc2pad_i.sdio1.data2_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_DATA3: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.sdio1.data3_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = port_signals_soc2pad_i.sdio1.data3_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_UART5_UART_CTS: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = s_reg2hw.pad_mx_sdio1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_UART5_UART_RTS: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.uart5.rts_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_UART5_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = s_reg2hw.pad_mx_sdio1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_UART5_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.uart5.tx_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_UART6_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = s_reg2hw.pad_mx_sdio1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_UART6_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.uart6.tx_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_GPIO61_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.gpio61.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = port_signals_soc2pad_i.gpio61.gpio_dir;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_GPIO62_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_4.chip2pad = port_signals_soc2pad_i.gpio62.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_4.oen = port_signals_soc2pad_i.gpio62.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_sdio1_4.chip2pad = s_reg2hw.pad_mx_sdio1_4_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_4.oen = s_reg2hw.pad_mx_sdio1_4_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_sdio1_5
   always_comb begin
     unique case (s_reg2hw.pad_mx_sdio1_5_mux_sel.q)
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_sdio1_5.chip2pad = s_reg2hw.pad_mx_sdio1_5_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_5.oen = s_reg2hw.pad_mx_sdio1_5_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_CLK: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.sdio1.clk_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_CMD: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.sdio1.cmd_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = port_signals_soc2pad_i.sdio1.cmd_oen_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_DATA0: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.sdio1.data0_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = port_signals_soc2pad_i.sdio1.data0_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_DATA1: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.sdio1.data1_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = port_signals_soc2pad_i.sdio1.data1_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_DATA2: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.sdio1.data2_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = port_signals_soc2pad_i.sdio1.data2_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_DATA3: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.sdio1.data3_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = port_signals_soc2pad_i.sdio1.data3_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_UART5_UART_CTS: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = s_reg2hw.pad_mx_sdio1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_UART5_UART_RTS: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.uart5.rts_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_UART5_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = s_reg2hw.pad_mx_sdio1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_UART5_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.uart5.tx_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_UART6_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = s_reg2hw.pad_mx_sdio1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_UART6_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.uart6.tx_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_GPIO61_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.gpio61.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = port_signals_soc2pad_i.gpio61.gpio_dir;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_GPIO62_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_5.chip2pad = port_signals_soc2pad_i.gpio62.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_5.oen = port_signals_soc2pad_i.gpio62.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_sdio1_5.chip2pad = s_reg2hw.pad_mx_sdio1_5_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_5.oen = s_reg2hw.pad_mx_sdio1_5_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_sdio1_6
   always_comb begin
     unique case (s_reg2hw.pad_mx_sdio1_6_mux_sel.q)
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_sdio1_6.chip2pad = s_reg2hw.pad_mx_sdio1_6_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_6.oen = s_reg2hw.pad_mx_sdio1_6_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_CLK: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.sdio1.clk_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_CMD: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.sdio1.cmd_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = port_signals_soc2pad_i.sdio1.cmd_oen_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_DATA0: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.sdio1.data0_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = port_signals_soc2pad_i.sdio1.data0_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_DATA1: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.sdio1.data1_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = port_signals_soc2pad_i.sdio1.data1_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_DATA2: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.sdio1.data2_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = port_signals_soc2pad_i.sdio1.data2_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_DATA3: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.sdio1.data3_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = port_signals_soc2pad_i.sdio1.data3_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_UART5_UART_CTS: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = s_reg2hw.pad_mx_sdio1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_UART5_UART_RTS: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.uart5.rts_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_UART5_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = s_reg2hw.pad_mx_sdio1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_UART5_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.uart5.tx_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_UART6_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = s_reg2hw.pad_mx_sdio1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_UART6_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.uart6.tx_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_GPIO61_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.gpio61.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = port_signals_soc2pad_i.gpio61.gpio_dir;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_GPIO62_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_6.chip2pad = port_signals_soc2pad_i.gpio62.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_6.oen = port_signals_soc2pad_i.gpio62.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_sdio1_6.chip2pad = s_reg2hw.pad_mx_sdio1_6_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_6.oen = s_reg2hw.pad_mx_sdio1_6_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_sdio1_7
   always_comb begin
     unique case (s_reg2hw.pad_mx_sdio1_7_mux_sel.q)
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_sdio1_7.chip2pad = s_reg2hw.pad_mx_sdio1_7_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_7.oen = s_reg2hw.pad_mx_sdio1_7_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_CLK: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.sdio1.clk_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_CMD: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.sdio1.cmd_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = port_signals_soc2pad_i.sdio1.cmd_oen_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_DATA0: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.sdio1.data0_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = port_signals_soc2pad_i.sdio1.data0_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_DATA1: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.sdio1.data1_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = port_signals_soc2pad_i.sdio1.data1_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_DATA2: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.sdio1.data2_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = port_signals_soc2pad_i.sdio1.data2_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_DATA3: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.sdio1.data3_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = port_signals_soc2pad_i.sdio1.data3_oe_i;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_UART5_UART_CTS: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = s_reg2hw.pad_mx_sdio1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_UART5_UART_RTS: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.uart5.rts_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_UART5_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = s_reg2hw.pad_mx_sdio1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_UART5_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.uart5.tx_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_UART6_UART_RX: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = s_reg2hw.pad_mx_sdio1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_sdio1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_UART6_UART_TX: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.uart6.tx_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_GPIO61_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.gpio61.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = port_signals_soc2pad_i.gpio61.gpio_dir;
       end
       PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_GPIO62_GPIO: begin
          mux_to_pads_o.pad_mx_sdio1_7.chip2pad = port_signals_soc2pad_i.gpio62.gpio_i;
          mux_to_pads_o.pad_mx_sdio1_7.oen = port_signals_soc2pad_i.gpio62.gpio_dir;
       end
       default: begin
         mux_to_pads_o.pad_mx_sdio1_7.chip2pad = s_reg2hw.pad_mx_sdio1_7_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_sdio1_7.oen = s_reg2hw.pad_mx_sdio1_7_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_0
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_0_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_0.chip2pad = s_reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_0.oen = s_reg2hw.pad_mx_hyper1_0_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = s_reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = s_reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = s_reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = s_reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = s_reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = s_reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = s_reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_0.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_0.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_0.chip2pad = s_reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_0.oen = s_reg2hw.pad_mx_hyper1_0_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_1
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_1_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_1.chip2pad = s_reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_1.oen = s_reg2hw.pad_mx_hyper1_1_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = s_reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = s_reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = s_reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = s_reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = s_reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = s_reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = s_reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_1.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_1.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_1.chip2pad = s_reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_1.oen = s_reg2hw.pad_mx_hyper1_1_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_2
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_2_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_2.chip2pad = s_reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_2.oen = s_reg2hw.pad_mx_hyper1_2_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = s_reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = s_reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = s_reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = s_reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = s_reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = s_reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = s_reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_2.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_2.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_2.chip2pad = s_reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_2.oen = s_reg2hw.pad_mx_hyper1_2_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_3
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_3_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_3.chip2pad = s_reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_3.oen = s_reg2hw.pad_mx_hyper1_3_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = s_reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = s_reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = s_reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = s_reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = s_reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = s_reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = s_reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_3.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_3.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_3.chip2pad = s_reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_3.oen = s_reg2hw.pad_mx_hyper1_3_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_4
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_4_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_4.chip2pad = s_reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_4.oen = s_reg2hw.pad_mx_hyper1_4_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = s_reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = s_reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = s_reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = s_reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = s_reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = s_reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = s_reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_4.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_4.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_4.chip2pad = s_reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_4.oen = s_reg2hw.pad_mx_hyper1_4_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_5
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_5_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_5.chip2pad = s_reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_5.oen = s_reg2hw.pad_mx_hyper1_5_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = s_reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = s_reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = s_reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = s_reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = s_reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = s_reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = s_reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_5.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_5.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_5.chip2pad = s_reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_5.oen = s_reg2hw.pad_mx_hyper1_5_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_6
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_6_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_6.chip2pad = s_reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_6.oen = s_reg2hw.pad_mx_hyper1_6_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = s_reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = s_reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = s_reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = s_reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = s_reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = s_reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = s_reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_6.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_6.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_6.chip2pad = s_reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_6.oen = s_reg2hw.pad_mx_hyper1_6_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_7
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_7_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_7.chip2pad = s_reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_7.oen = s_reg2hw.pad_mx_hyper1_7_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = s_reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = s_reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = s_reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = s_reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = s_reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = s_reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = s_reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_7.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_7.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_7.chip2pad = s_reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_7.oen = s_reg2hw.pad_mx_hyper1_7_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_8
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_8_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_8.chip2pad = s_reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_8.oen = s_reg2hw.pad_mx_hyper1_8_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = s_reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = s_reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = s_reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = s_reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = s_reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = s_reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = s_reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_8.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_8.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_8.chip2pad = s_reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_8.oen = s_reg2hw.pad_mx_hyper1_8_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_9
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_9_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_9.chip2pad = s_reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_9.oen = s_reg2hw.pad_mx_hyper1_9_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = s_reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = s_reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = s_reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = s_reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = s_reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = s_reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = s_reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_9.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_9.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_9.chip2pad = s_reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_9.oen = s_reg2hw.pad_mx_hyper1_9_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_10
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_10_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_10.chip2pad = s_reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_10.oen = s_reg2hw.pad_mx_hyper1_10_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = s_reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = s_reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = s_reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = s_reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = s_reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = s_reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = s_reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_10.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_10.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_10.chip2pad = s_reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_10.oen = s_reg2hw.pad_mx_hyper1_10_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_11
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_11_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_11.chip2pad = s_reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_11.oen = s_reg2hw.pad_mx_hyper1_11_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = s_reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = s_reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = s_reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = s_reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = s_reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = s_reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = s_reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_11.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_11.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_11.chip2pad = s_reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_11.oen = s_reg2hw.pad_mx_hyper1_11_cfg.oen.q;
       end
     endcase
   end // always_comb

   // Pad pad_mx_hyper1_12
   always_comb begin
     unique case (s_reg2hw.pad_mx_hyper1_12_mux_sel.q)
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_DEFAULT: begin
         mux_to_pads_o.pad_mx_hyper1_12.chip2pad = s_reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_12.oen = s_reg2hw.pad_mx_hyper1_12_cfg.oen.q;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_CK: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.ck_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_CKN: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.ckn_o;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_CS0: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.cs0n_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_CS1: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.cs1n_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ0_I: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.dq0_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ1_I: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.dq1_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ2_I: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.dq2_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ3_I: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.dq3_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ4_I: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.dq4_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ5_I: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.dq5_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ6_I: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.dq6_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ7_I: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.dq7_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.hyper1.dq_oe;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_RST: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.resetn_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_RWDS: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.hyper1.rwds_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.hyper1.rwds_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RST: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.eth0.eth_rst_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXCK: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = s_reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = s_reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXD0: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = s_reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXD1: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = s_reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXD2: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = s_reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXD3: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = s_reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_TXCK: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.eth0.eth_txcd_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_TXCTL: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.eth0.eth_txctl_o;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_TXD0: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.eth0.eth_txd0_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_TXD1: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.eth0.eth_txd1_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_TXD2: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.eth0.eth_txd2_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_TXD3: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.eth0.eth_txd3_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b1;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_UART7_UART_RX: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = s_reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_UART7_UART_TX: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.uart7.tx_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = 1'b0;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_I2C5_I2C_SCL: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.i2c5.scl_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.i2c5.scl_oe_i;
       end
       PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_I2C5_I2C_SDA: begin
          mux_to_pads_o.pad_mx_hyper1_12.chip2pad = port_signals_soc2pad_i.i2c5.sda_i;
          mux_to_pads_o.pad_mx_hyper1_12.oen = ~port_signals_soc2pad_i.i2c5.sda_oe_i;
       end
       default: begin
         mux_to_pads_o.pad_mx_hyper1_12.chip2pad = s_reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q;
         mux_to_pads_o.pad_mx_hyper1_12.oen = s_reg2hw.pad_mx_hyper1_12_cfg.oen.q;
       end
     endcase
   end // always_comb


  // Pad -> SoC Multiplex Logic
  // Port Group spi7



  // Port Signal sd1_o
  logic [3:0] port_mux_sel_spi7_sd1_o_req;
  logic [PORT_MUX_GROUP_MX_CAN_SEL_WIDTH-1:0] port_mux_sel_spi7_sd1_o_arbitrated;
  logic port_mux_sel_spi7_sd1_o_no_connection;

   assign port_mux_sel_spi7_sd1_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_0] = s_reg2hw.pad_mx_can_0_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_SPI7_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi7_sd1_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_1] = s_reg2hw.pad_mx_can_1_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_SPI7_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi7_sd1_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_2] = s_reg2hw.pad_mx_can_2_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_SPI7_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi7_sd1_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_3] = s_reg2hw.pad_mx_can_3_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_SPI7_SPI_MISO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(4),
     .MODE(1'b0)
   ) i_port_muxsel_spi7_sd1_o_arbiter (
     .in_i(port_mux_sel_spi7_sd1_o_req),
     .cnt_o(port_mux_sel_spi7_sd1_o_arbitrated),
     .empty_o(port_mux_sel_spi7_sd1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi7_sd1_o_no_connection) begin
        port_signals_pad2soc_o.spi7.sd1_o = 1'b0;
     end else begin
        unique case (port_mux_sel_spi7_sd1_o_arbitrated)
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_0: begin
            port_signals_pad2soc_o.spi7.sd1_o = pads_to_mux_i.pad_mx_can_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_1: begin
            port_signals_pad2soc_o.spi7.sd1_o = pads_to_mux_i.pad_mx_can_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_2: begin
            port_signals_pad2soc_o.spi7.sd1_o = pads_to_mux_i.pad_mx_can_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_3: begin
            port_signals_pad2soc_o.spi7.sd1_o = pads_to_mux_i.pad_mx_can_3.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi7.sd1_o = 1'b0;
          end
       endcase
     end
   end


  // Port Group CAN2_CAN


  // Port Signal can1_rx_o
  logic [3:0] port_mux_sel_CAN2_CAN_can1_rx_o_req;
  logic [PORT_MUX_GROUP_MX_CAN_SEL_WIDTH-1:0] port_mux_sel_CAN2_CAN_can1_rx_o_arbitrated;
  logic port_mux_sel_CAN2_CAN_can1_rx_o_no_connection;

   assign port_mux_sel_CAN2_CAN_can1_rx_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_0] = s_reg2hw.pad_mx_can_0_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_CAN2_CAN_CAN1_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_CAN2_CAN_can1_rx_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_1] = s_reg2hw.pad_mx_can_1_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_CAN2_CAN_CAN1_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_CAN2_CAN_can1_rx_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_2] = s_reg2hw.pad_mx_can_2_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_CAN2_CAN_CAN1_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_CAN2_CAN_can1_rx_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_3] = s_reg2hw.pad_mx_can_3_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_CAN2_CAN_CAN1_RX ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(4),
     .MODE(1'b0)
   ) i_port_muxsel_CAN2_CAN_can1_rx_o_arbiter (
     .in_i(port_mux_sel_CAN2_CAN_can1_rx_o_req),
     .cnt_o(port_mux_sel_CAN2_CAN_can1_rx_o_arbitrated),
     .empty_o(port_mux_sel_CAN2_CAN_can1_rx_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_CAN2_CAN_can1_rx_o_no_connection) begin
        port_signals_pad2soc_o.CAN2_CAN.can1_rx_o = 1'b1;
     end else begin
        unique case (port_mux_sel_CAN2_CAN_can1_rx_o_arbitrated)
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_0: begin
            port_signals_pad2soc_o.CAN2_CAN.can1_rx_o = pads_to_mux_i.pad_mx_can_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_1: begin
            port_signals_pad2soc_o.CAN2_CAN.can1_rx_o = pads_to_mux_i.pad_mx_can_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_2: begin
            port_signals_pad2soc_o.CAN2_CAN.can1_rx_o = pads_to_mux_i.pad_mx_can_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_3: begin
            port_signals_pad2soc_o.CAN2_CAN.can1_rx_o = pads_to_mux_i.pad_mx_can_3.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.CAN2_CAN.can1_rx_o = 1'b1;
          end
       endcase
     end
   end



  // Port Signal can2_rx_o
  logic [3:0] port_mux_sel_CAN2_CAN_can2_rx_o_req;
  logic [PORT_MUX_GROUP_MX_CAN_SEL_WIDTH-1:0] port_mux_sel_CAN2_CAN_can2_rx_o_arbitrated;
  logic port_mux_sel_CAN2_CAN_can2_rx_o_no_connection;

   assign port_mux_sel_CAN2_CAN_can2_rx_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_0] = s_reg2hw.pad_mx_can_0_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_0_SEL_CAN2_CAN_CAN2_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_CAN2_CAN_can2_rx_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_1] = s_reg2hw.pad_mx_can_1_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_1_SEL_CAN2_CAN_CAN2_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_CAN2_CAN_can2_rx_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_2] = s_reg2hw.pad_mx_can_2_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_2_SEL_CAN2_CAN_CAN2_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_CAN2_CAN_can2_rx_o_req[PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_3] = s_reg2hw.pad_mx_can_3_mux_sel.q == PAD_MUX_GROUP_MX_CAN_PAD_MX_CAN_3_SEL_CAN2_CAN_CAN2_RX ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(4),
     .MODE(1'b0)
   ) i_port_muxsel_CAN2_CAN_can2_rx_o_arbiter (
     .in_i(port_mux_sel_CAN2_CAN_can2_rx_o_req),
     .cnt_o(port_mux_sel_CAN2_CAN_can2_rx_o_arbitrated),
     .empty_o(port_mux_sel_CAN2_CAN_can2_rx_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_CAN2_CAN_can2_rx_o_no_connection) begin
        port_signals_pad2soc_o.CAN2_CAN.can2_rx_o = 1'b1;
     end else begin
        unique case (port_mux_sel_CAN2_CAN_can2_rx_o_arbitrated)
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_0: begin
            port_signals_pad2soc_o.CAN2_CAN.can2_rx_o = pads_to_mux_i.pad_mx_can_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_1: begin
            port_signals_pad2soc_o.CAN2_CAN.can2_rx_o = pads_to_mux_i.pad_mx_can_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_2: begin
            port_signals_pad2soc_o.CAN2_CAN.can2_rx_o = pads_to_mux_i.pad_mx_can_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAN_SEL_PAD_MX_CAN_3: begin
            port_signals_pad2soc_o.CAN2_CAN.can2_rx_o = pads_to_mux_i.pad_mx_can_3.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.CAN2_CAN.can2_rx_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group cam0

  // Port Signal clk_i
  logic [10:0] port_mux_sel_cam0_clk_i_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_clk_i_arbitrated;
  logic port_mux_sel_cam0_clk_i_no_connection;

   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_clk_i_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_PCLK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_clk_i_arbiter (
     .in_i(port_mux_sel_cam0_clk_i_req),
     .cnt_o(port_mux_sel_cam0_clk_i_arbitrated),
     .empty_o(port_mux_sel_cam0_clk_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_clk_i_no_connection) begin
        port_signals_pad2soc_o.cam0.clk_i = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_clk_i_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.clk_i = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.clk_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal hsync_o
  logic [10:0] port_mux_sel_cam0_hsync_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_hsync_o_arbitrated;
  logic port_mux_sel_cam0_hsync_o_no_connection;

   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_hsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_HSYNC ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_hsync_o_arbiter (
     .in_i(port_mux_sel_cam0_hsync_o_req),
     .cnt_o(port_mux_sel_cam0_hsync_o_arbitrated),
     .empty_o(port_mux_sel_cam0_hsync_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_hsync_o_no_connection) begin
        port_signals_pad2soc_o.cam0.hsync_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_hsync_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.hsync_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.hsync_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal vsync_o
  logic [10:0] port_mux_sel_cam0_vsync_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_vsync_o_arbitrated;
  logic port_mux_sel_cam0_vsync_o_no_connection;

   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_vsync_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_VSYNC ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_vsync_o_arbiter (
     .in_i(port_mux_sel_cam0_vsync_o_req),
     .cnt_o(port_mux_sel_cam0_vsync_o_arbitrated),
     .empty_o(port_mux_sel_cam0_vsync_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_vsync_o_no_connection) begin
        port_signals_pad2soc_o.cam0.vsync_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_vsync_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.vsync_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.vsync_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data0_o
  logic [10:0] port_mux_sel_cam0_data0_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_data0_o_arbitrated;
  logic port_mux_sel_cam0_data0_o_no_connection;

   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data0_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA0_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_data0_o_arbiter (
     .in_i(port_mux_sel_cam0_data0_o_req),
     .cnt_o(port_mux_sel_cam0_data0_o_arbitrated),
     .empty_o(port_mux_sel_cam0_data0_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_data0_o_no_connection) begin
        port_signals_pad2soc_o.cam0.data0_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_data0_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.data0_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.data0_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data1_o
  logic [10:0] port_mux_sel_cam0_data1_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_data1_o_arbitrated;
  logic port_mux_sel_cam0_data1_o_no_connection;

   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA1_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_data1_o_arbiter (
     .in_i(port_mux_sel_cam0_data1_o_req),
     .cnt_o(port_mux_sel_cam0_data1_o_arbitrated),
     .empty_o(port_mux_sel_cam0_data1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_data1_o_no_connection) begin
        port_signals_pad2soc_o.cam0.data1_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_data1_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.data1_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.data1_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data2_o
  logic [10:0] port_mux_sel_cam0_data2_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_data2_o_arbitrated;
  logic port_mux_sel_cam0_data2_o_no_connection;

   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data2_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA2_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_data2_o_arbiter (
     .in_i(port_mux_sel_cam0_data2_o_req),
     .cnt_o(port_mux_sel_cam0_data2_o_arbitrated),
     .empty_o(port_mux_sel_cam0_data2_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_data2_o_no_connection) begin
        port_signals_pad2soc_o.cam0.data2_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_data2_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.data2_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.data2_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data3_o
  logic [10:0] port_mux_sel_cam0_data3_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_data3_o_arbitrated;
  logic port_mux_sel_cam0_data3_o_no_connection;

   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data3_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA3_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_data3_o_arbiter (
     .in_i(port_mux_sel_cam0_data3_o_req),
     .cnt_o(port_mux_sel_cam0_data3_o_arbitrated),
     .empty_o(port_mux_sel_cam0_data3_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_data3_o_no_connection) begin
        port_signals_pad2soc_o.cam0.data3_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_data3_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.data3_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.data3_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data4_o
  logic [10:0] port_mux_sel_cam0_data4_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_data4_o_arbitrated;
  logic port_mux_sel_cam0_data4_o_no_connection;

   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data4_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA4_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_data4_o_arbiter (
     .in_i(port_mux_sel_cam0_data4_o_req),
     .cnt_o(port_mux_sel_cam0_data4_o_arbitrated),
     .empty_o(port_mux_sel_cam0_data4_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_data4_o_no_connection) begin
        port_signals_pad2soc_o.cam0.data4_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_data4_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.data4_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.data4_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data5_o
  logic [10:0] port_mux_sel_cam0_data5_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_data5_o_arbitrated;
  logic port_mux_sel_cam0_data5_o_no_connection;

   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data5_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA5_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_data5_o_arbiter (
     .in_i(port_mux_sel_cam0_data5_o_req),
     .cnt_o(port_mux_sel_cam0_data5_o_arbitrated),
     .empty_o(port_mux_sel_cam0_data5_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_data5_o_no_connection) begin
        port_signals_pad2soc_o.cam0.data5_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_data5_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.data5_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.data5_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data6_o
  logic [10:0] port_mux_sel_cam0_data6_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_data6_o_arbitrated;
  logic port_mux_sel_cam0_data6_o_no_connection;

   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data6_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA6_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_data6_o_arbiter (
     .in_i(port_mux_sel_cam0_data6_o_req),
     .cnt_o(port_mux_sel_cam0_data6_o_arbitrated),
     .empty_o(port_mux_sel_cam0_data6_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_data6_o_no_connection) begin
        port_signals_pad2soc_o.cam0.data6_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_data6_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.data6_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.data6_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data7_o
  logic [10:0] port_mux_sel_cam0_data7_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_cam0_data7_o_arbitrated;
  logic port_mux_sel_cam0_data7_o_no_connection;

   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam0_data7_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_CAM0_CAM_DATA7_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam0_data7_o_arbiter (
     .in_i(port_mux_sel_cam0_data7_o_req),
     .cnt_o(port_mux_sel_cam0_data7_o_arbitrated),
     .empty_o(port_mux_sel_cam0_data7_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam0_data7_o_no_connection) begin
        port_signals_pad2soc_o.cam0.data7_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam0_data7_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.cam0.data7_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam0.data7_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group spi8



  // Port Signal sd1_o
  logic [10:0] port_mux_sel_spi8_sd1_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_spi8_sd1_o_arbitrated;
  logic port_mux_sel_spi8_sd1_o_no_connection;

   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi8_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI8_SPI_MISO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_spi8_sd1_o_arbiter (
     .in_i(port_mux_sel_spi8_sd1_o_req),
     .cnt_o(port_mux_sel_spi8_sd1_o_arbitrated),
     .empty_o(port_mux_sel_spi8_sd1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi8_sd1_o_no_connection) begin
        port_signals_pad2soc_o.spi8.sd1_o = 1'b0;
     end else begin
        unique case (port_mux_sel_spi8_sd1_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.spi8.sd1_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi8.sd1_o = 1'b0;
          end
       endcase
     end
   end


  // Port Group spi9



  // Port Signal sd1_o
  logic [10:0] port_mux_sel_spi9_sd1_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_spi9_sd1_o_arbitrated;
  logic port_mux_sel_spi9_sd1_o_no_connection;

   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi9_sd1_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_SPI9_SPI_MISO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_spi9_sd1_o_arbiter (
     .in_i(port_mux_sel_spi9_sd1_o_req),
     .cnt_o(port_mux_sel_spi9_sd1_o_arbitrated),
     .empty_o(port_mux_sel_spi9_sd1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi9_sd1_o_no_connection) begin
        port_signals_pad2soc_o.spi9.sd1_o = 1'b0;
     end else begin
        unique case (port_mux_sel_spi9_sd1_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.spi9.sd1_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi9.sd1_o = 1'b0;
          end
       endcase
     end
   end


  // Port Group i2c3

  // Port Signal sda_o
  logic [10:0] port_mux_sel_i2c3_sda_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_i2c3_sda_o_arbitrated;
  logic port_mux_sel_i2c3_sda_o_no_connection;

   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_sda_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_I2C3_I2C_SDA ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_i2c3_sda_o_arbiter (
     .in_i(port_mux_sel_i2c3_sda_o_req),
     .cnt_o(port_mux_sel_i2c3_sda_o_arbitrated),
     .empty_o(port_mux_sel_i2c3_sda_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c3_sda_o_no_connection) begin
        port_signals_pad2soc_o.i2c3.sda_o = 1'b1;
     end else begin
        unique case (port_mux_sel_i2c3_sda_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.i2c3.sda_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c3.sda_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal scl_o
  logic [10:0] port_mux_sel_i2c3_scl_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_i2c3_scl_o_arbitrated;
  logic port_mux_sel_i2c3_scl_o_no_connection;

   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c3_scl_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_I2C3_I2C_SCL ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_i2c3_scl_o_arbiter (
     .in_i(port_mux_sel_i2c3_scl_o_req),
     .cnt_o(port_mux_sel_i2c3_scl_o_arbitrated),
     .empty_o(port_mux_sel_i2c3_scl_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c3_scl_o_no_connection) begin
        port_signals_pad2soc_o.i2c3.scl_o = 1'b1;
     end else begin
        unique case (port_mux_sel_i2c3_scl_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.i2c3.scl_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c3.scl_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group IMU2_DRDY

  // Port Signal gpio57_o
  logic [10:0] port_mux_sel_IMU2_DRDY_gpio57_o_req;
  logic [PORT_MUX_GROUP_MX_CAM0_SEL_WIDTH-1:0] port_mux_sel_IMU2_DRDY_gpio57_o_arbitrated;
  logic port_mux_sel_IMU2_DRDY_gpio57_o_no_connection;

   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0] = s_reg2hw.pad_mx_cam0_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_0_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1] = s_reg2hw.pad_mx_cam0_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_1_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2] = s_reg2hw.pad_mx_cam0_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_2_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3] = s_reg2hw.pad_mx_cam0_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_3_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4] = s_reg2hw.pad_mx_cam0_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_4_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5] = s_reg2hw.pad_mx_cam0_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_5_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6] = s_reg2hw.pad_mx_cam0_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_6_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7] = s_reg2hw.pad_mx_cam0_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_7_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8] = s_reg2hw.pad_mx_cam0_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_8_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9] = s_reg2hw.pad_mx_cam0_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_9_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;
   assign port_mux_sel_IMU2_DRDY_gpio57_o_req[PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10] = s_reg2hw.pad_mx_cam0_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM0_PAD_MX_CAM0_10_SEL_IMU2_DRDY_GPIO57 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_IMU2_DRDY_gpio57_o_arbiter (
     .in_i(port_mux_sel_IMU2_DRDY_gpio57_o_req),
     .cnt_o(port_mux_sel_IMU2_DRDY_gpio57_o_arbitrated),
     .empty_o(port_mux_sel_IMU2_DRDY_gpio57_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_IMU2_DRDY_gpio57_o_no_connection) begin
        port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = 1'b1;
     end else begin
        unique case (port_mux_sel_IMU2_DRDY_gpio57_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_0: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_1: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_2: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_3: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_4: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_5: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_6: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_7: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_8: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_9: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM0_SEL_PAD_MX_CAM0_10: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = pads_to_mux_i.pad_mx_cam0_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.IMU2_DRDY.gpio57_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group cam1

  // Port Signal clk_i
  logic [10:0] port_mux_sel_cam1_clk_i_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_clk_i_arbitrated;
  logic port_mux_sel_cam1_clk_i_no_connection;

   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_clk_i_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_PCLK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_clk_i_arbiter (
     .in_i(port_mux_sel_cam1_clk_i_req),
     .cnt_o(port_mux_sel_cam1_clk_i_arbitrated),
     .empty_o(port_mux_sel_cam1_clk_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_clk_i_no_connection) begin
        port_signals_pad2soc_o.cam1.clk_i = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_clk_i_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.clk_i = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.clk_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal hsync_o
  logic [10:0] port_mux_sel_cam1_hsync_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_hsync_o_arbitrated;
  logic port_mux_sel_cam1_hsync_o_no_connection;

   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_hsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_HSYNC ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_hsync_o_arbiter (
     .in_i(port_mux_sel_cam1_hsync_o_req),
     .cnt_o(port_mux_sel_cam1_hsync_o_arbitrated),
     .empty_o(port_mux_sel_cam1_hsync_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_hsync_o_no_connection) begin
        port_signals_pad2soc_o.cam1.hsync_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_hsync_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.hsync_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.hsync_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal vsync_o
  logic [10:0] port_mux_sel_cam1_vsync_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_vsync_o_arbitrated;
  logic port_mux_sel_cam1_vsync_o_no_connection;

   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_vsync_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_VSYNC ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_vsync_o_arbiter (
     .in_i(port_mux_sel_cam1_vsync_o_req),
     .cnt_o(port_mux_sel_cam1_vsync_o_arbitrated),
     .empty_o(port_mux_sel_cam1_vsync_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_vsync_o_no_connection) begin
        port_signals_pad2soc_o.cam1.vsync_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_vsync_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.vsync_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.vsync_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data0_o
  logic [10:0] port_mux_sel_cam1_data0_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_data0_o_arbitrated;
  logic port_mux_sel_cam1_data0_o_no_connection;

   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data0_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA0_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_data0_o_arbiter (
     .in_i(port_mux_sel_cam1_data0_o_req),
     .cnt_o(port_mux_sel_cam1_data0_o_arbitrated),
     .empty_o(port_mux_sel_cam1_data0_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_data0_o_no_connection) begin
        port_signals_pad2soc_o.cam1.data0_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_data0_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.data0_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.data0_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data1_o
  logic [10:0] port_mux_sel_cam1_data1_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_data1_o_arbitrated;
  logic port_mux_sel_cam1_data1_o_no_connection;

   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA1_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_data1_o_arbiter (
     .in_i(port_mux_sel_cam1_data1_o_req),
     .cnt_o(port_mux_sel_cam1_data1_o_arbitrated),
     .empty_o(port_mux_sel_cam1_data1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_data1_o_no_connection) begin
        port_signals_pad2soc_o.cam1.data1_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_data1_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.data1_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.data1_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data2_o
  logic [10:0] port_mux_sel_cam1_data2_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_data2_o_arbitrated;
  logic port_mux_sel_cam1_data2_o_no_connection;

   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data2_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA2_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_data2_o_arbiter (
     .in_i(port_mux_sel_cam1_data2_o_req),
     .cnt_o(port_mux_sel_cam1_data2_o_arbitrated),
     .empty_o(port_mux_sel_cam1_data2_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_data2_o_no_connection) begin
        port_signals_pad2soc_o.cam1.data2_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_data2_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.data2_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.data2_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data3_o
  logic [10:0] port_mux_sel_cam1_data3_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_data3_o_arbitrated;
  logic port_mux_sel_cam1_data3_o_no_connection;

   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data3_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA3_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_data3_o_arbiter (
     .in_i(port_mux_sel_cam1_data3_o_req),
     .cnt_o(port_mux_sel_cam1_data3_o_arbitrated),
     .empty_o(port_mux_sel_cam1_data3_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_data3_o_no_connection) begin
        port_signals_pad2soc_o.cam1.data3_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_data3_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.data3_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.data3_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data4_o
  logic [10:0] port_mux_sel_cam1_data4_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_data4_o_arbitrated;
  logic port_mux_sel_cam1_data4_o_no_connection;

   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data4_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA4_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_data4_o_arbiter (
     .in_i(port_mux_sel_cam1_data4_o_req),
     .cnt_o(port_mux_sel_cam1_data4_o_arbitrated),
     .empty_o(port_mux_sel_cam1_data4_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_data4_o_no_connection) begin
        port_signals_pad2soc_o.cam1.data4_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_data4_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.data4_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.data4_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data5_o
  logic [10:0] port_mux_sel_cam1_data5_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_data5_o_arbitrated;
  logic port_mux_sel_cam1_data5_o_no_connection;

   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data5_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA5_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_data5_o_arbiter (
     .in_i(port_mux_sel_cam1_data5_o_req),
     .cnt_o(port_mux_sel_cam1_data5_o_arbitrated),
     .empty_o(port_mux_sel_cam1_data5_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_data5_o_no_connection) begin
        port_signals_pad2soc_o.cam1.data5_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_data5_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.data5_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.data5_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data6_o
  logic [10:0] port_mux_sel_cam1_data6_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_data6_o_arbitrated;
  logic port_mux_sel_cam1_data6_o_no_connection;

   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data6_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA6_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_data6_o_arbiter (
     .in_i(port_mux_sel_cam1_data6_o_req),
     .cnt_o(port_mux_sel_cam1_data6_o_arbitrated),
     .empty_o(port_mux_sel_cam1_data6_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_data6_o_no_connection) begin
        port_signals_pad2soc_o.cam1.data6_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_data6_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.data6_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.data6_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data7_o
  logic [10:0] port_mux_sel_cam1_data7_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_cam1_data7_o_arbitrated;
  logic port_mux_sel_cam1_data7_o_no_connection;

   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_cam1_data7_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_CAM1_CAM_DATA7_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_cam1_data7_o_arbiter (
     .in_i(port_mux_sel_cam1_data7_o_req),
     .cnt_o(port_mux_sel_cam1_data7_o_arbitrated),
     .empty_o(port_mux_sel_cam1_data7_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_cam1_data7_o_no_connection) begin
        port_signals_pad2soc_o.cam1.data7_o = 1'b1;
     end else begin
        unique case (port_mux_sel_cam1_data7_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.cam1.data7_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.cam1.data7_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group spi10



  // Port Signal sd1_o
  logic [10:0] port_mux_sel_spi10_sd1_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_spi10_sd1_o_arbitrated;
  logic port_mux_sel_spi10_sd1_o_no_connection;

   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;
   assign port_mux_sel_spi10_sd1_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_SPI10_SPI_MISO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_spi10_sd1_o_arbiter (
     .in_i(port_mux_sel_spi10_sd1_o_req),
     .cnt_o(port_mux_sel_spi10_sd1_o_arbitrated),
     .empty_o(port_mux_sel_spi10_sd1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi10_sd1_o_no_connection) begin
        port_signals_pad2soc_o.spi10.sd1_o = 1'b0;
     end else begin
        unique case (port_mux_sel_spi10_sd1_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.spi10.sd1_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi10.sd1_o = 1'b0;
          end
       endcase
     end
   end


  // Port Group i2c4

  // Port Signal sda_o
  logic [10:0] port_mux_sel_i2c4_sda_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_i2c4_sda_o_arbitrated;
  logic port_mux_sel_i2c4_sda_o_no_connection;

   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_sda_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_I2C4_I2C_SDA ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_i2c4_sda_o_arbiter (
     .in_i(port_mux_sel_i2c4_sda_o_req),
     .cnt_o(port_mux_sel_i2c4_sda_o_arbitrated),
     .empty_o(port_mux_sel_i2c4_sda_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c4_sda_o_no_connection) begin
        port_signals_pad2soc_o.i2c4.sda_o = 1'b1;
     end else begin
        unique case (port_mux_sel_i2c4_sda_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.i2c4.sda_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c4.sda_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal scl_o
  logic [10:0] port_mux_sel_i2c4_scl_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_i2c4_scl_o_arbitrated;
  logic port_mux_sel_i2c4_scl_o_no_connection;

   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c4_scl_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_I2C4_I2C_SCL ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_i2c4_scl_o_arbiter (
     .in_i(port_mux_sel_i2c4_scl_o_req),
     .cnt_o(port_mux_sel_i2c4_scl_o_arbitrated),
     .empty_o(port_mux_sel_i2c4_scl_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c4_scl_o_no_connection) begin
        port_signals_pad2soc_o.i2c4.scl_o = 1'b1;
     end else begin
        unique case (port_mux_sel_i2c4_scl_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.i2c4.scl_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c4.scl_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group gpio58

  // Port Signal gpio_o
  logic [10:0] port_mux_sel_gpio58_gpio_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_gpio58_gpio_o_arbitrated;
  logic port_mux_sel_gpio58_gpio_o_no_connection;

   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio58_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_GPIO58_GPIO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_gpio58_gpio_o_arbiter (
     .in_i(port_mux_sel_gpio58_gpio_o_req),
     .cnt_o(port_mux_sel_gpio58_gpio_o_arbitrated),
     .empty_o(port_mux_sel_gpio58_gpio_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio58_gpio_o_no_connection) begin
        port_signals_pad2soc_o.gpio58.gpio_o = 1'b1;
     end else begin
        unique case (port_mux_sel_gpio58_gpio_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.gpio58.gpio_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio58.gpio_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group gpio59

  // Port Signal gpio_o
  logic [10:0] port_mux_sel_gpio59_gpio_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_gpio59_gpio_o_arbitrated;
  logic port_mux_sel_gpio59_gpio_o_no_connection;

   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio59_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_GPIO59_GPIO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_gpio59_gpio_o_arbiter (
     .in_i(port_mux_sel_gpio59_gpio_o_req),
     .cnt_o(port_mux_sel_gpio59_gpio_o_arbitrated),
     .empty_o(port_mux_sel_gpio59_gpio_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio59_gpio_o_no_connection) begin
        port_signals_pad2soc_o.gpio59.gpio_o = 1'b1;
     end else begin
        unique case (port_mux_sel_gpio59_gpio_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.gpio59.gpio_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio59.gpio_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group gpio60

  // Port Signal gpio_o
  logic [10:0] port_mux_sel_gpio60_gpio_o_req;
  logic [PORT_MUX_GROUP_MX_CAM1_SEL_WIDTH-1:0] port_mux_sel_gpio60_gpio_o_arbitrated;
  logic port_mux_sel_gpio60_gpio_o_no_connection;

   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0] = s_reg2hw.pad_mx_cam1_0_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_0_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1] = s_reg2hw.pad_mx_cam1_1_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_1_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2] = s_reg2hw.pad_mx_cam1_2_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_2_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3] = s_reg2hw.pad_mx_cam1_3_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_3_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4] = s_reg2hw.pad_mx_cam1_4_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_4_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5] = s_reg2hw.pad_mx_cam1_5_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_5_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6] = s_reg2hw.pad_mx_cam1_6_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_6_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7] = s_reg2hw.pad_mx_cam1_7_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_7_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8] = s_reg2hw.pad_mx_cam1_8_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_8_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9] = s_reg2hw.pad_mx_cam1_9_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_9_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio60_gpio_o_req[PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10] = s_reg2hw.pad_mx_cam1_10_mux_sel.q == PAD_MUX_GROUP_MX_CAM1_PAD_MX_CAM1_10_SEL_GPIO60_GPIO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(11),
     .MODE(1'b0)
   ) i_port_muxsel_gpio60_gpio_o_arbiter (
     .in_i(port_mux_sel_gpio60_gpio_o_req),
     .cnt_o(port_mux_sel_gpio60_gpio_o_arbitrated),
     .empty_o(port_mux_sel_gpio60_gpio_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio60_gpio_o_no_connection) begin
        port_signals_pad2soc_o.gpio60.gpio_o = 1'b1;
     end else begin
        unique case (port_mux_sel_gpio60_gpio_o_arbitrated)
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_0: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_1: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_2: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_3: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_4: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_5: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_6: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_7: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_8: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_9: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_CAM1_SEL_PAD_MX_CAM1_10: begin
            port_signals_pad2soc_o.gpio60.gpio_o = pads_to_mux_i.pad_mx_cam1_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio60.gpio_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group sdio1


  // Port Signal cmd_o
  logic [7:0] port_mux_sel_sdio1_cmd_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_sdio1_cmd_o_arbitrated;
  logic port_mux_sel_sdio1_cmd_o_no_connection;

   assign port_mux_sel_sdio1_cmd_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_CMD ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_cmd_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_CMD ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_cmd_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_CMD ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_cmd_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_CMD ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_cmd_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_CMD ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_cmd_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_CMD ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_cmd_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_CMD ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_cmd_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_CMD ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_sdio1_cmd_o_arbiter (
     .in_i(port_mux_sel_sdio1_cmd_o_req),
     .cnt_o(port_mux_sel_sdio1_cmd_o_arbitrated),
     .empty_o(port_mux_sel_sdio1_cmd_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_sdio1_cmd_o_no_connection) begin
        port_signals_pad2soc_o.sdio1.cmd_o = 1'b1;
     end else begin
        unique case (port_mux_sel_sdio1_cmd_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.sdio1.cmd_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.sdio1.cmd_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.sdio1.cmd_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.sdio1.cmd_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.sdio1.cmd_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.sdio1.cmd_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.sdio1.cmd_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.sdio1.cmd_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.sdio1.cmd_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data0_o
  logic [7:0] port_mux_sel_sdio1_data0_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_sdio1_data0_o_arbitrated;
  logic port_mux_sel_sdio1_data0_o_no_connection;

   assign port_mux_sel_sdio1_data0_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_DATA0 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data0_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_DATA0 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data0_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_DATA0 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data0_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_DATA0 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data0_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_DATA0 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data0_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_DATA0 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data0_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_DATA0 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data0_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_DATA0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_sdio1_data0_o_arbiter (
     .in_i(port_mux_sel_sdio1_data0_o_req),
     .cnt_o(port_mux_sel_sdio1_data0_o_arbitrated),
     .empty_o(port_mux_sel_sdio1_data0_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_sdio1_data0_o_no_connection) begin
        port_signals_pad2soc_o.sdio1.data0_o = 1'b1;
     end else begin
        unique case (port_mux_sel_sdio1_data0_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.sdio1.data0_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.sdio1.data0_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.sdio1.data0_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.sdio1.data0_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.sdio1.data0_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.sdio1.data0_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.sdio1.data0_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.sdio1.data0_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.sdio1.data0_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data1_o
  logic [7:0] port_mux_sel_sdio1_data1_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_sdio1_data1_o_arbitrated;
  logic port_mux_sel_sdio1_data1_o_no_connection;

   assign port_mux_sel_sdio1_data1_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_DATA1 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data1_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_DATA1 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data1_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_DATA1 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data1_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_DATA1 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data1_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_DATA1 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data1_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_DATA1 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data1_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_DATA1 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data1_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_DATA1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_sdio1_data1_o_arbiter (
     .in_i(port_mux_sel_sdio1_data1_o_req),
     .cnt_o(port_mux_sel_sdio1_data1_o_arbitrated),
     .empty_o(port_mux_sel_sdio1_data1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_sdio1_data1_o_no_connection) begin
        port_signals_pad2soc_o.sdio1.data1_o = 1'b1;
     end else begin
        unique case (port_mux_sel_sdio1_data1_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.sdio1.data1_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.sdio1.data1_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.sdio1.data1_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.sdio1.data1_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.sdio1.data1_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.sdio1.data1_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.sdio1.data1_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.sdio1.data1_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.sdio1.data1_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data2_o
  logic [7:0] port_mux_sel_sdio1_data2_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_sdio1_data2_o_arbitrated;
  logic port_mux_sel_sdio1_data2_o_no_connection;

   assign port_mux_sel_sdio1_data2_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_DATA2 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data2_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_DATA2 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data2_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_DATA2 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data2_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_DATA2 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data2_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_DATA2 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data2_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_DATA2 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data2_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_DATA2 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data2_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_DATA2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_sdio1_data2_o_arbiter (
     .in_i(port_mux_sel_sdio1_data2_o_req),
     .cnt_o(port_mux_sel_sdio1_data2_o_arbitrated),
     .empty_o(port_mux_sel_sdio1_data2_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_sdio1_data2_o_no_connection) begin
        port_signals_pad2soc_o.sdio1.data2_o = 1'b1;
     end else begin
        unique case (port_mux_sel_sdio1_data2_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.sdio1.data2_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.sdio1.data2_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.sdio1.data2_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.sdio1.data2_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.sdio1.data2_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.sdio1.data2_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.sdio1.data2_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.sdio1.data2_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.sdio1.data2_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal data3_o
  logic [7:0] port_mux_sel_sdio1_data3_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_sdio1_data3_o_arbitrated;
  logic port_mux_sel_sdio1_data3_o_no_connection;

   assign port_mux_sel_sdio1_data3_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_SDIO1_SDIO_DATA3 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data3_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_SDIO1_SDIO_DATA3 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data3_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_SDIO1_SDIO_DATA3 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data3_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_SDIO1_SDIO_DATA3 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data3_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_SDIO1_SDIO_DATA3 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data3_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_SDIO1_SDIO_DATA3 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data3_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_SDIO1_SDIO_DATA3 ? 1'b1 : 1'b0;
   assign port_mux_sel_sdio1_data3_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_SDIO1_SDIO_DATA3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_sdio1_data3_o_arbiter (
     .in_i(port_mux_sel_sdio1_data3_o_req),
     .cnt_o(port_mux_sel_sdio1_data3_o_arbitrated),
     .empty_o(port_mux_sel_sdio1_data3_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_sdio1_data3_o_no_connection) begin
        port_signals_pad2soc_o.sdio1.data3_o = 1'b1;
     end else begin
        unique case (port_mux_sel_sdio1_data3_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.sdio1.data3_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.sdio1.data3_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.sdio1.data3_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.sdio1.data3_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.sdio1.data3_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.sdio1.data3_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.sdio1.data3_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.sdio1.data3_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.sdio1.data3_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group uart5


  // Port Signal rx_o
  logic [7:0] port_mux_sel_uart5_rx_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_uart5_rx_o_arbitrated;
  logic port_mux_sel_uart5_rx_o_no_connection;

   assign port_mux_sel_uart5_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_UART5_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_UART5_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_UART5_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_UART5_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_UART5_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_UART5_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_UART5_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_UART5_UART_RX ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_uart5_rx_o_arbiter (
     .in_i(port_mux_sel_uart5_rx_o_req),
     .cnt_o(port_mux_sel_uart5_rx_o_arbitrated),
     .empty_o(port_mux_sel_uart5_rx_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_uart5_rx_o_no_connection) begin
        port_signals_pad2soc_o.uart5.rx_o = 1'b1;
     end else begin
        unique case (port_mux_sel_uart5_rx_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.uart5.rx_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.uart5.rx_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.uart5.rx_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.uart5.rx_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.uart5.rx_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.uart5.rx_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.uart5.rx_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.uart5.rx_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.uart5.rx_o = 1'b1;
          end
       endcase
     end
   end



  // Port Signal cts_o
  logic [7:0] port_mux_sel_uart5_cts_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_uart5_cts_o_arbitrated;
  logic port_mux_sel_uart5_cts_o_no_connection;

   assign port_mux_sel_uart5_cts_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_UART5_UART_CTS ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_cts_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_UART5_UART_CTS ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_cts_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_UART5_UART_CTS ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_cts_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_UART5_UART_CTS ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_cts_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_UART5_UART_CTS ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_cts_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_UART5_UART_CTS ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_cts_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_UART5_UART_CTS ? 1'b1 : 1'b0;
   assign port_mux_sel_uart5_cts_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_UART5_UART_CTS ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_uart5_cts_o_arbiter (
     .in_i(port_mux_sel_uart5_cts_o_req),
     .cnt_o(port_mux_sel_uart5_cts_o_arbitrated),
     .empty_o(port_mux_sel_uart5_cts_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_uart5_cts_o_no_connection) begin
        port_signals_pad2soc_o.uart5.cts_o = 1'b1;
     end else begin
        unique case (port_mux_sel_uart5_cts_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.uart5.cts_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.uart5.cts_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.uart5.cts_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.uart5.cts_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.uart5.cts_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.uart5.cts_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.uart5.cts_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.uart5.cts_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.uart5.cts_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group uart6


  // Port Signal rx_o
  logic [7:0] port_mux_sel_uart6_rx_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_uart6_rx_o_arbitrated;
  logic port_mux_sel_uart6_rx_o_no_connection;

   assign port_mux_sel_uart6_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_UART6_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart6_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_UART6_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart6_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_UART6_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart6_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_UART6_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart6_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_UART6_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart6_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_UART6_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart6_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_UART6_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart6_rx_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_UART6_UART_RX ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_uart6_rx_o_arbiter (
     .in_i(port_mux_sel_uart6_rx_o_req),
     .cnt_o(port_mux_sel_uart6_rx_o_arbitrated),
     .empty_o(port_mux_sel_uart6_rx_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_uart6_rx_o_no_connection) begin
        port_signals_pad2soc_o.uart6.rx_o = 1'b1;
     end else begin
        unique case (port_mux_sel_uart6_rx_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.uart6.rx_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.uart6.rx_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.uart6.rx_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.uart6.rx_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.uart6.rx_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.uart6.rx_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.uart6.rx_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.uart6.rx_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.uart6.rx_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group gpio61

  // Port Signal gpio_o
  logic [7:0] port_mux_sel_gpio61_gpio_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_gpio61_gpio_o_arbitrated;
  logic port_mux_sel_gpio61_gpio_o_no_connection;

   assign port_mux_sel_gpio61_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_GPIO61_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio61_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_GPIO61_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio61_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_GPIO61_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio61_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_GPIO61_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio61_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_GPIO61_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio61_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_GPIO61_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio61_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_GPIO61_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio61_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_GPIO61_GPIO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_gpio61_gpio_o_arbiter (
     .in_i(port_mux_sel_gpio61_gpio_o_req),
     .cnt_o(port_mux_sel_gpio61_gpio_o_arbitrated),
     .empty_o(port_mux_sel_gpio61_gpio_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio61_gpio_o_no_connection) begin
        port_signals_pad2soc_o.gpio61.gpio_o = 1'b1;
     end else begin
        unique case (port_mux_sel_gpio61_gpio_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.gpio61.gpio_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.gpio61.gpio_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.gpio61.gpio_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.gpio61.gpio_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.gpio61.gpio_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.gpio61.gpio_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.gpio61.gpio_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.gpio61.gpio_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio61.gpio_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group gpio62

  // Port Signal gpio_o
  logic [7:0] port_mux_sel_gpio62_gpio_o_req;
  logic [PORT_MUX_GROUP_MX_SDIO1_SEL_WIDTH-1:0] port_mux_sel_gpio62_gpio_o_arbitrated;
  logic port_mux_sel_gpio62_gpio_o_no_connection;

   assign port_mux_sel_gpio62_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0] = s_reg2hw.pad_mx_sdio1_0_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_0_SEL_GPIO62_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio62_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1] = s_reg2hw.pad_mx_sdio1_1_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_1_SEL_GPIO62_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio62_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2] = s_reg2hw.pad_mx_sdio1_2_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_2_SEL_GPIO62_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio62_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3] = s_reg2hw.pad_mx_sdio1_3_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_3_SEL_GPIO62_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio62_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4] = s_reg2hw.pad_mx_sdio1_4_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_4_SEL_GPIO62_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio62_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5] = s_reg2hw.pad_mx_sdio1_5_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_5_SEL_GPIO62_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio62_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6] = s_reg2hw.pad_mx_sdio1_6_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_6_SEL_GPIO62_GPIO ? 1'b1 : 1'b0;
   assign port_mux_sel_gpio62_gpio_o_req[PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7] = s_reg2hw.pad_mx_sdio1_7_mux_sel.q == PAD_MUX_GROUP_MX_SDIO1_PAD_MX_SDIO1_7_SEL_GPIO62_GPIO ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(8),
     .MODE(1'b0)
   ) i_port_muxsel_gpio62_gpio_o_arbiter (
     .in_i(port_mux_sel_gpio62_gpio_o_req),
     .cnt_o(port_mux_sel_gpio62_gpio_o_arbitrated),
     .empty_o(port_mux_sel_gpio62_gpio_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio62_gpio_o_no_connection) begin
        port_signals_pad2soc_o.gpio62.gpio_o = 1'b1;
     end else begin
        unique case (port_mux_sel_gpio62_gpio_o_arbitrated)
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_0: begin
            port_signals_pad2soc_o.gpio62.gpio_o = pads_to_mux_i.pad_mx_sdio1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_1: begin
            port_signals_pad2soc_o.gpio62.gpio_o = pads_to_mux_i.pad_mx_sdio1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_2: begin
            port_signals_pad2soc_o.gpio62.gpio_o = pads_to_mux_i.pad_mx_sdio1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_3: begin
            port_signals_pad2soc_o.gpio62.gpio_o = pads_to_mux_i.pad_mx_sdio1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_4: begin
            port_signals_pad2soc_o.gpio62.gpio_o = pads_to_mux_i.pad_mx_sdio1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_5: begin
            port_signals_pad2soc_o.gpio62.gpio_o = pads_to_mux_i.pad_mx_sdio1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_6: begin
            port_signals_pad2soc_o.gpio62.gpio_o = pads_to_mux_i.pad_mx_sdio1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_SDIO1_SEL_PAD_MX_SDIO1_7: begin
            port_signals_pad2soc_o.gpio62.gpio_o = pads_to_mux_i.pad_mx_sdio1_7.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio62.gpio_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group hyper1





  // Port Signal rwds_o
  logic [12:0] port_mux_sel_hyper1_rwds_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_hyper1_rwds_o_arbitrated;
  logic port_mux_sel_hyper1_rwds_o_no_connection;

   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_rwds_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_RWDS ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_hyper1_rwds_o_arbiter (
     .in_i(port_mux_sel_hyper1_rwds_o_req),
     .cnt_o(port_mux_sel_hyper1_rwds_o_arbitrated),
     .empty_o(port_mux_sel_hyper1_rwds_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_hyper1_rwds_o_no_connection) begin
        port_signals_pad2soc_o.hyper1.rwds_o = 1'b0;
     end else begin
        unique case (port_mux_sel_hyper1_rwds_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.hyper1.rwds_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.hyper1.rwds_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal dq0_o
  logic [12:0] port_mux_sel_hyper1_dq0_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_hyper1_dq0_o_arbitrated;
  logic port_mux_sel_hyper1_dq0_o_no_connection;

   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ0_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_hyper1_dq0_o_arbiter (
     .in_i(port_mux_sel_hyper1_dq0_o_req),
     .cnt_o(port_mux_sel_hyper1_dq0_o_arbitrated),
     .empty_o(port_mux_sel_hyper1_dq0_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_hyper1_dq0_o_no_connection) begin
        port_signals_pad2soc_o.hyper1.dq0_o = 1'b0;
     end else begin
        unique case (port_mux_sel_hyper1_dq0_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.hyper1.dq0_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.hyper1.dq0_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal dq1_o
  logic [12:0] port_mux_sel_hyper1_dq1_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_hyper1_dq1_o_arbitrated;
  logic port_mux_sel_hyper1_dq1_o_no_connection;

   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ1_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_hyper1_dq1_o_arbiter (
     .in_i(port_mux_sel_hyper1_dq1_o_req),
     .cnt_o(port_mux_sel_hyper1_dq1_o_arbitrated),
     .empty_o(port_mux_sel_hyper1_dq1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_hyper1_dq1_o_no_connection) begin
        port_signals_pad2soc_o.hyper1.dq1_o = 1'b0;
     end else begin
        unique case (port_mux_sel_hyper1_dq1_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.hyper1.dq1_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.hyper1.dq1_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal dq2_o
  logic [12:0] port_mux_sel_hyper1_dq2_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_hyper1_dq2_o_arbitrated;
  logic port_mux_sel_hyper1_dq2_o_no_connection;

   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ2_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_hyper1_dq2_o_arbiter (
     .in_i(port_mux_sel_hyper1_dq2_o_req),
     .cnt_o(port_mux_sel_hyper1_dq2_o_arbitrated),
     .empty_o(port_mux_sel_hyper1_dq2_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_hyper1_dq2_o_no_connection) begin
        port_signals_pad2soc_o.hyper1.dq2_o = 1'b0;
     end else begin
        unique case (port_mux_sel_hyper1_dq2_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.hyper1.dq2_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.hyper1.dq2_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal dq3_o
  logic [12:0] port_mux_sel_hyper1_dq3_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_hyper1_dq3_o_arbitrated;
  logic port_mux_sel_hyper1_dq3_o_no_connection;

   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ3_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_hyper1_dq3_o_arbiter (
     .in_i(port_mux_sel_hyper1_dq3_o_req),
     .cnt_o(port_mux_sel_hyper1_dq3_o_arbitrated),
     .empty_o(port_mux_sel_hyper1_dq3_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_hyper1_dq3_o_no_connection) begin
        port_signals_pad2soc_o.hyper1.dq3_o = 1'b0;
     end else begin
        unique case (port_mux_sel_hyper1_dq3_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.hyper1.dq3_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.hyper1.dq3_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal dq4_o
  logic [12:0] port_mux_sel_hyper1_dq4_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_hyper1_dq4_o_arbitrated;
  logic port_mux_sel_hyper1_dq4_o_no_connection;

   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq4_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ4_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_hyper1_dq4_o_arbiter (
     .in_i(port_mux_sel_hyper1_dq4_o_req),
     .cnt_o(port_mux_sel_hyper1_dq4_o_arbitrated),
     .empty_o(port_mux_sel_hyper1_dq4_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_hyper1_dq4_o_no_connection) begin
        port_signals_pad2soc_o.hyper1.dq4_o = 1'b0;
     end else begin
        unique case (port_mux_sel_hyper1_dq4_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.hyper1.dq4_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.hyper1.dq4_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal dq5_o
  logic [12:0] port_mux_sel_hyper1_dq5_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_hyper1_dq5_o_arbitrated;
  logic port_mux_sel_hyper1_dq5_o_no_connection;

   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq5_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ5_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_hyper1_dq5_o_arbiter (
     .in_i(port_mux_sel_hyper1_dq5_o_req),
     .cnt_o(port_mux_sel_hyper1_dq5_o_arbitrated),
     .empty_o(port_mux_sel_hyper1_dq5_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_hyper1_dq5_o_no_connection) begin
        port_signals_pad2soc_o.hyper1.dq5_o = 1'b0;
     end else begin
        unique case (port_mux_sel_hyper1_dq5_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.hyper1.dq5_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.hyper1.dq5_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal dq6_o
  logic [12:0] port_mux_sel_hyper1_dq6_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_hyper1_dq6_o_arbitrated;
  logic port_mux_sel_hyper1_dq6_o_no_connection;

   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq6_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ6_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_hyper1_dq6_o_arbiter (
     .in_i(port_mux_sel_hyper1_dq6_o_req),
     .cnt_o(port_mux_sel_hyper1_dq6_o_arbitrated),
     .empty_o(port_mux_sel_hyper1_dq6_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_hyper1_dq6_o_no_connection) begin
        port_signals_pad2soc_o.hyper1.dq6_o = 1'b0;
     end else begin
        unique case (port_mux_sel_hyper1_dq6_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.hyper1.dq6_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.hyper1.dq6_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal dq7_o
  logic [12:0] port_mux_sel_hyper1_dq7_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_hyper1_dq7_o_arbitrated;
  logic port_mux_sel_hyper1_dq7_o_no_connection;

   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;
   assign port_mux_sel_hyper1_dq7_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_HYPER1_HYPER_DQ7_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_hyper1_dq7_o_arbiter (
     .in_i(port_mux_sel_hyper1_dq7_o_req),
     .cnt_o(port_mux_sel_hyper1_dq7_o_arbitrated),
     .empty_o(port_mux_sel_hyper1_dq7_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_hyper1_dq7_o_no_connection) begin
        port_signals_pad2soc_o.hyper1.dq7_o = 1'b0;
     end else begin
        unique case (port_mux_sel_hyper1_dq7_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.hyper1.dq7_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.hyper1.dq7_o = 1'b0;
          end
       endcase
     end
   end


  // Port Group eth0


  // Port Signal eth_rxcd_o
  logic [12:0] port_mux_sel_eth0_eth_rxcd_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_eth0_eth_rxcd_o_arbitrated;
  logic port_mux_sel_eth0_eth_rxcd_o_no_connection;

   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxcd_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXCK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_eth0_eth_rxcd_o_arbiter (
     .in_i(port_mux_sel_eth0_eth_rxcd_o_req),
     .cnt_o(port_mux_sel_eth0_eth_rxcd_o_arbitrated),
     .empty_o(port_mux_sel_eth0_eth_rxcd_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_eth0_eth_rxcd_o_no_connection) begin
        port_signals_pad2soc_o.eth0.eth_rxcd_o = 1'b0;
     end else begin
        unique case (port_mux_sel_eth0_eth_rxcd_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.eth0.eth_rxcd_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxctl_o
  logic [12:0] port_mux_sel_eth0_eth_rxctl_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_eth0_eth_rxctl_o_arbitrated;
  logic port_mux_sel_eth0_eth_rxctl_o_no_connection;

   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxctl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXCTL ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_eth0_eth_rxctl_o_arbiter (
     .in_i(port_mux_sel_eth0_eth_rxctl_o_req),
     .cnt_o(port_mux_sel_eth0_eth_rxctl_o_arbitrated),
     .empty_o(port_mux_sel_eth0_eth_rxctl_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_eth0_eth_rxctl_o_no_connection) begin
        port_signals_pad2soc_o.eth0.eth_rxctl_o = 1'b0;
     end else begin
        unique case (port_mux_sel_eth0_eth_rxctl_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.eth0.eth_rxctl_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd0_o
  logic [12:0] port_mux_sel_eth0_eth_rxd0_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_eth0_eth_rxd0_o_arbitrated;
  logic port_mux_sel_eth0_eth_rxd0_o_no_connection;

   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd0_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXD0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_eth0_eth_rxd0_o_arbiter (
     .in_i(port_mux_sel_eth0_eth_rxd0_o_req),
     .cnt_o(port_mux_sel_eth0_eth_rxd0_o_arbitrated),
     .empty_o(port_mux_sel_eth0_eth_rxd0_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_eth0_eth_rxd0_o_no_connection) begin
        port_signals_pad2soc_o.eth0.eth_rxd0_o = 1'b0;
     end else begin
        unique case (port_mux_sel_eth0_eth_rxd0_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.eth0.eth_rxd0_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd1_o
  logic [12:0] port_mux_sel_eth0_eth_rxd1_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_eth0_eth_rxd1_o_arbitrated;
  logic port_mux_sel_eth0_eth_rxd1_o_no_connection;

   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd1_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXD1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_eth0_eth_rxd1_o_arbiter (
     .in_i(port_mux_sel_eth0_eth_rxd1_o_req),
     .cnt_o(port_mux_sel_eth0_eth_rxd1_o_arbitrated),
     .empty_o(port_mux_sel_eth0_eth_rxd1_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_eth0_eth_rxd1_o_no_connection) begin
        port_signals_pad2soc_o.eth0.eth_rxd1_o = 1'b0;
     end else begin
        unique case (port_mux_sel_eth0_eth_rxd1_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.eth0.eth_rxd1_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd2_o
  logic [12:0] port_mux_sel_eth0_eth_rxd2_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_eth0_eth_rxd2_o_arbitrated;
  logic port_mux_sel_eth0_eth_rxd2_o_no_connection;

   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd2_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXD2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_eth0_eth_rxd2_o_arbiter (
     .in_i(port_mux_sel_eth0_eth_rxd2_o_req),
     .cnt_o(port_mux_sel_eth0_eth_rxd2_o_arbitrated),
     .empty_o(port_mux_sel_eth0_eth_rxd2_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_eth0_eth_rxd2_o_no_connection) begin
        port_signals_pad2soc_o.eth0.eth_rxd2_o = 1'b0;
     end else begin
        unique case (port_mux_sel_eth0_eth_rxd2_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.eth0.eth_rxd2_o = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd3_o
  logic [12:0] port_mux_sel_eth0_eth_rxd3_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_eth0_eth_rxd3_o_arbitrated;
  logic port_mux_sel_eth0_eth_rxd3_o_no_connection;

   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;
   assign port_mux_sel_eth0_eth_rxd3_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_ETH0_ETH_RXD3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_eth0_eth_rxd3_o_arbiter (
     .in_i(port_mux_sel_eth0_eth_rxd3_o_req),
     .cnt_o(port_mux_sel_eth0_eth_rxd3_o_arbitrated),
     .empty_o(port_mux_sel_eth0_eth_rxd3_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_eth0_eth_rxd3_o_no_connection) begin
        port_signals_pad2soc_o.eth0.eth_rxd3_o = 1'b0;
     end else begin
        unique case (port_mux_sel_eth0_eth_rxd3_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.eth0.eth_rxd3_o = 1'b0;
          end
       endcase
     end
   end







  // Port Group uart7


  // Port Signal rx_o
  logic [12:0] port_mux_sel_uart7_rx_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_uart7_rx_o_arbitrated;
  logic port_mux_sel_uart7_rx_o_no_connection;

   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_UART7_UART_RX ? 1'b1 : 1'b0;
   assign port_mux_sel_uart7_rx_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_UART7_UART_RX ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_uart7_rx_o_arbiter (
     .in_i(port_mux_sel_uart7_rx_o_req),
     .cnt_o(port_mux_sel_uart7_rx_o_arbitrated),
     .empty_o(port_mux_sel_uart7_rx_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_uart7_rx_o_no_connection) begin
        port_signals_pad2soc_o.uart7.rx_o = 1'b1;
     end else begin
        unique case (port_mux_sel_uart7_rx_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.uart7.rx_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.uart7.rx_o = 1'b1;
          end
       endcase
     end
   end

  // Port Group i2c5

  // Port Signal sda_o
  logic [12:0] port_mux_sel_i2c5_sda_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_i2c5_sda_o_arbitrated;
  logic port_mux_sel_i2c5_sda_o_no_connection;

   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_sda_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_I2C5_I2C_SDA ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_i2c5_sda_o_arbiter (
     .in_i(port_mux_sel_i2c5_sda_o_req),
     .cnt_o(port_mux_sel_i2c5_sda_o_arbitrated),
     .empty_o(port_mux_sel_i2c5_sda_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c5_sda_o_no_connection) begin
        port_signals_pad2soc_o.i2c5.sda_o = 1'b1;
     end else begin
        unique case (port_mux_sel_i2c5_sda_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.i2c5.sda_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c5.sda_o = 1'b1;
          end
       endcase
     end
   end


  // Port Signal scl_o
  logic [12:0] port_mux_sel_i2c5_scl_o_req;
  logic [PORT_MUX_GROUP_MX_HYPER_SEL_WIDTH-1:0] port_mux_sel_i2c5_scl_o_arbitrated;
  logic port_mux_sel_i2c5_scl_o_no_connection;

   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0] = s_reg2hw.pad_mx_hyper1_0_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_0_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1] = s_reg2hw.pad_mx_hyper1_1_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_1_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2] = s_reg2hw.pad_mx_hyper1_2_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_2_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3] = s_reg2hw.pad_mx_hyper1_3_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_3_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4] = s_reg2hw.pad_mx_hyper1_4_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_4_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5] = s_reg2hw.pad_mx_hyper1_5_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_5_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6] = s_reg2hw.pad_mx_hyper1_6_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_6_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7] = s_reg2hw.pad_mx_hyper1_7_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_7_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8] = s_reg2hw.pad_mx_hyper1_8_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_8_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9] = s_reg2hw.pad_mx_hyper1_9_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_9_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10] = s_reg2hw.pad_mx_hyper1_10_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_10_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11] = s_reg2hw.pad_mx_hyper1_11_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_11_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;
   assign port_mux_sel_i2c5_scl_o_req[PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12] = s_reg2hw.pad_mx_hyper1_12_mux_sel.q == PAD_MUX_GROUP_MX_HYPER_PAD_MX_HYPER1_12_SEL_I2C5_I2C_SCL ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(13),
     .MODE(1'b0)
   ) i_port_muxsel_i2c5_scl_o_arbiter (
     .in_i(port_mux_sel_i2c5_scl_o_req),
     .cnt_o(port_mux_sel_i2c5_scl_o_arbitrated),
     .empty_o(port_mux_sel_i2c5_scl_o_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c5_scl_o_no_connection) begin
        port_signals_pad2soc_o.i2c5.scl_o = 1'b1;
     end else begin
        unique case (port_mux_sel_i2c5_scl_o_arbitrated)
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_0: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_0.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_1: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_1.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_2: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_2.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_3: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_3.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_4: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_4.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_5: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_5.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_6: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_6.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_7: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_7.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_8: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_8.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_9: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_9.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_10: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_10.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_11: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_11.pad2chip;
          end
          PORT_MUX_GROUP_MX_HYPER_SEL_PAD_MX_HYPER1_12: begin
            port_signals_pad2soc_o.i2c5.scl_o = pads_to_mux_i.pad_mx_hyper1_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c5.scl_o = 1'b1;
          end
       endcase
     end
   end

endmodule : alsaqr_periph_padframe_periphs_muxer
