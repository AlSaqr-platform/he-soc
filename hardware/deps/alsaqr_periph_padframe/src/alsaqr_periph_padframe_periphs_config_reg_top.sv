// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module alsaqr_periph_padframe_periphs_config_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 10
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output alsaqr_periph_padframe_periphs_config_reg_pkg::alsaqr_periph_padframe_periphs_config_reg2hw_t reg2hw, // Write


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import alsaqr_periph_padframe_periphs_config_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic a_00_cfg_chip2pad_qs;
  logic a_00_cfg_chip2pad_wd;
  logic a_00_cfg_chip2pad_we;
  logic [1:0] a_00_cfg_drv_qs;
  logic [1:0] a_00_cfg_drv_wd;
  logic a_00_cfg_drv_we;
  logic a_00_cfg_oen_qs;
  logic a_00_cfg_oen_wd;
  logic a_00_cfg_oen_we;
  logic a_00_cfg_puen_qs;
  logic a_00_cfg_puen_wd;
  logic a_00_cfg_puen_we;
  logic a_00_cfg_slw_qs;
  logic a_00_cfg_slw_wd;
  logic a_00_cfg_slw_we;
  logic a_00_cfg_smt_qs;
  logic a_00_cfg_smt_wd;
  logic a_00_cfg_smt_we;
  logic [1:0] a_00_mux_sel_qs;
  logic [1:0] a_00_mux_sel_wd;
  logic a_00_mux_sel_we;
  logic a_01_cfg_chip2pad_qs;
  logic a_01_cfg_chip2pad_wd;
  logic a_01_cfg_chip2pad_we;
  logic [1:0] a_01_cfg_drv_qs;
  logic [1:0] a_01_cfg_drv_wd;
  logic a_01_cfg_drv_we;
  logic a_01_cfg_oen_qs;
  logic a_01_cfg_oen_wd;
  logic a_01_cfg_oen_we;
  logic a_01_cfg_puen_qs;
  logic a_01_cfg_puen_wd;
  logic a_01_cfg_puen_we;
  logic a_01_cfg_slw_qs;
  logic a_01_cfg_slw_wd;
  logic a_01_cfg_slw_we;
  logic a_01_cfg_smt_qs;
  logic a_01_cfg_smt_wd;
  logic a_01_cfg_smt_we;
  logic [1:0] a_01_mux_sel_qs;
  logic [1:0] a_01_mux_sel_wd;
  logic a_01_mux_sel_we;
  logic a_02_cfg_chip2pad_qs;
  logic a_02_cfg_chip2pad_wd;
  logic a_02_cfg_chip2pad_we;
  logic [1:0] a_02_cfg_drv_qs;
  logic [1:0] a_02_cfg_drv_wd;
  logic a_02_cfg_drv_we;
  logic a_02_cfg_oen_qs;
  logic a_02_cfg_oen_wd;
  logic a_02_cfg_oen_we;
  logic a_02_cfg_puen_qs;
  logic a_02_cfg_puen_wd;
  logic a_02_cfg_puen_we;
  logic a_02_cfg_slw_qs;
  logic a_02_cfg_slw_wd;
  logic a_02_cfg_slw_we;
  logic a_02_cfg_smt_qs;
  logic a_02_cfg_smt_wd;
  logic a_02_cfg_smt_we;
  logic [2:0] a_02_mux_sel_qs;
  logic [2:0] a_02_mux_sel_wd;
  logic a_02_mux_sel_we;
  logic a_03_cfg_chip2pad_qs;
  logic a_03_cfg_chip2pad_wd;
  logic a_03_cfg_chip2pad_we;
  logic [1:0] a_03_cfg_drv_qs;
  logic [1:0] a_03_cfg_drv_wd;
  logic a_03_cfg_drv_we;
  logic a_03_cfg_oen_qs;
  logic a_03_cfg_oen_wd;
  logic a_03_cfg_oen_we;
  logic a_03_cfg_puen_qs;
  logic a_03_cfg_puen_wd;
  logic a_03_cfg_puen_we;
  logic a_03_cfg_slw_qs;
  logic a_03_cfg_slw_wd;
  logic a_03_cfg_slw_we;
  logic a_03_cfg_smt_qs;
  logic a_03_cfg_smt_wd;
  logic a_03_cfg_smt_we;
  logic [2:0] a_03_mux_sel_qs;
  logic [2:0] a_03_mux_sel_wd;
  logic a_03_mux_sel_we;
  logic a_04_cfg_chip2pad_qs;
  logic a_04_cfg_chip2pad_wd;
  logic a_04_cfg_chip2pad_we;
  logic [1:0] a_04_cfg_drv_qs;
  logic [1:0] a_04_cfg_drv_wd;
  logic a_04_cfg_drv_we;
  logic a_04_cfg_oen_qs;
  logic a_04_cfg_oen_wd;
  logic a_04_cfg_oen_we;
  logic a_04_cfg_puen_qs;
  logic a_04_cfg_puen_wd;
  logic a_04_cfg_puen_we;
  logic a_04_cfg_slw_qs;
  logic a_04_cfg_slw_wd;
  logic a_04_cfg_slw_we;
  logic a_04_cfg_smt_qs;
  logic a_04_cfg_smt_wd;
  logic a_04_cfg_smt_we;
  logic [2:0] a_04_mux_sel_qs;
  logic [2:0] a_04_mux_sel_wd;
  logic a_04_mux_sel_we;
  logic a_05_cfg_chip2pad_qs;
  logic a_05_cfg_chip2pad_wd;
  logic a_05_cfg_chip2pad_we;
  logic [1:0] a_05_cfg_drv_qs;
  logic [1:0] a_05_cfg_drv_wd;
  logic a_05_cfg_drv_we;
  logic a_05_cfg_oen_qs;
  logic a_05_cfg_oen_wd;
  logic a_05_cfg_oen_we;
  logic a_05_cfg_puen_qs;
  logic a_05_cfg_puen_wd;
  logic a_05_cfg_puen_we;
  logic a_05_cfg_slw_qs;
  logic a_05_cfg_slw_wd;
  logic a_05_cfg_slw_we;
  logic a_05_cfg_smt_qs;
  logic a_05_cfg_smt_wd;
  logic a_05_cfg_smt_we;
  logic [2:0] a_05_mux_sel_qs;
  logic [2:0] a_05_mux_sel_wd;
  logic a_05_mux_sel_we;
  logic a_06_cfg_chip2pad_qs;
  logic a_06_cfg_chip2pad_wd;
  logic a_06_cfg_chip2pad_we;
  logic [1:0] a_06_cfg_drv_qs;
  logic [1:0] a_06_cfg_drv_wd;
  logic a_06_cfg_drv_we;
  logic a_06_cfg_oen_qs;
  logic a_06_cfg_oen_wd;
  logic a_06_cfg_oen_we;
  logic a_06_cfg_puen_qs;
  logic a_06_cfg_puen_wd;
  logic a_06_cfg_puen_we;
  logic a_06_cfg_slw_qs;
  logic a_06_cfg_slw_wd;
  logic a_06_cfg_slw_we;
  logic a_06_cfg_smt_qs;
  logic a_06_cfg_smt_wd;
  logic a_06_cfg_smt_we;
  logic [2:0] a_06_mux_sel_qs;
  logic [2:0] a_06_mux_sel_wd;
  logic a_06_mux_sel_we;
  logic a_07_cfg_chip2pad_qs;
  logic a_07_cfg_chip2pad_wd;
  logic a_07_cfg_chip2pad_we;
  logic [1:0] a_07_cfg_drv_qs;
  logic [1:0] a_07_cfg_drv_wd;
  logic a_07_cfg_drv_we;
  logic a_07_cfg_oen_qs;
  logic a_07_cfg_oen_wd;
  logic a_07_cfg_oen_we;
  logic a_07_cfg_puen_qs;
  logic a_07_cfg_puen_wd;
  logic a_07_cfg_puen_we;
  logic a_07_cfg_slw_qs;
  logic a_07_cfg_slw_wd;
  logic a_07_cfg_slw_we;
  logic a_07_cfg_smt_qs;
  logic a_07_cfg_smt_wd;
  logic a_07_cfg_smt_we;
  logic [2:0] a_07_mux_sel_qs;
  logic [2:0] a_07_mux_sel_wd;
  logic a_07_mux_sel_we;
  logic a_08_cfg_chip2pad_qs;
  logic a_08_cfg_chip2pad_wd;
  logic a_08_cfg_chip2pad_we;
  logic [1:0] a_08_cfg_drv_qs;
  logic [1:0] a_08_cfg_drv_wd;
  logic a_08_cfg_drv_we;
  logic a_08_cfg_oen_qs;
  logic a_08_cfg_oen_wd;
  logic a_08_cfg_oen_we;
  logic a_08_cfg_puen_qs;
  logic a_08_cfg_puen_wd;
  logic a_08_cfg_puen_we;
  logic a_08_cfg_slw_qs;
  logic a_08_cfg_slw_wd;
  logic a_08_cfg_slw_we;
  logic a_08_cfg_smt_qs;
  logic a_08_cfg_smt_wd;
  logic a_08_cfg_smt_we;
  logic [1:0] a_08_mux_sel_qs;
  logic [1:0] a_08_mux_sel_wd;
  logic a_08_mux_sel_we;
  logic a_09_cfg_chip2pad_qs;
  logic a_09_cfg_chip2pad_wd;
  logic a_09_cfg_chip2pad_we;
  logic [1:0] a_09_cfg_drv_qs;
  logic [1:0] a_09_cfg_drv_wd;
  logic a_09_cfg_drv_we;
  logic a_09_cfg_oen_qs;
  logic a_09_cfg_oen_wd;
  logic a_09_cfg_oen_we;
  logic a_09_cfg_puen_qs;
  logic a_09_cfg_puen_wd;
  logic a_09_cfg_puen_we;
  logic a_09_cfg_slw_qs;
  logic a_09_cfg_slw_wd;
  logic a_09_cfg_slw_we;
  logic a_09_cfg_smt_qs;
  logic a_09_cfg_smt_wd;
  logic a_09_cfg_smt_we;
  logic [1:0] a_09_mux_sel_qs;
  logic [1:0] a_09_mux_sel_wd;
  logic a_09_mux_sel_we;
  logic a_10_cfg_chip2pad_qs;
  logic a_10_cfg_chip2pad_wd;
  logic a_10_cfg_chip2pad_we;
  logic [1:0] a_10_cfg_drv_qs;
  logic [1:0] a_10_cfg_drv_wd;
  logic a_10_cfg_drv_we;
  logic a_10_cfg_oen_qs;
  logic a_10_cfg_oen_wd;
  logic a_10_cfg_oen_we;
  logic a_10_cfg_puen_qs;
  logic a_10_cfg_puen_wd;
  logic a_10_cfg_puen_we;
  logic a_10_cfg_slw_qs;
  logic a_10_cfg_slw_wd;
  logic a_10_cfg_slw_we;
  logic a_10_cfg_smt_qs;
  logic a_10_cfg_smt_wd;
  logic a_10_cfg_smt_we;
  logic [1:0] a_10_mux_sel_qs;
  logic [1:0] a_10_mux_sel_wd;
  logic a_10_mux_sel_we;
  logic a_11_cfg_chip2pad_qs;
  logic a_11_cfg_chip2pad_wd;
  logic a_11_cfg_chip2pad_we;
  logic [1:0] a_11_cfg_drv_qs;
  logic [1:0] a_11_cfg_drv_wd;
  logic a_11_cfg_drv_we;
  logic a_11_cfg_oen_qs;
  logic a_11_cfg_oen_wd;
  logic a_11_cfg_oen_we;
  logic a_11_cfg_puen_qs;
  logic a_11_cfg_puen_wd;
  logic a_11_cfg_puen_we;
  logic a_11_cfg_slw_qs;
  logic a_11_cfg_slw_wd;
  logic a_11_cfg_slw_we;
  logic a_11_cfg_smt_qs;
  logic a_11_cfg_smt_wd;
  logic a_11_cfg_smt_we;
  logic [1:0] a_11_mux_sel_qs;
  logic [1:0] a_11_mux_sel_wd;
  logic a_11_mux_sel_we;
  logic a_12_cfg_chip2pad_qs;
  logic a_12_cfg_chip2pad_wd;
  logic a_12_cfg_chip2pad_we;
  logic [1:0] a_12_cfg_drv_qs;
  logic [1:0] a_12_cfg_drv_wd;
  logic a_12_cfg_drv_we;
  logic a_12_cfg_oen_qs;
  logic a_12_cfg_oen_wd;
  logic a_12_cfg_oen_we;
  logic a_12_cfg_puen_qs;
  logic a_12_cfg_puen_wd;
  logic a_12_cfg_puen_we;
  logic a_12_cfg_slw_qs;
  logic a_12_cfg_slw_wd;
  logic a_12_cfg_slw_we;
  logic a_12_cfg_smt_qs;
  logic a_12_cfg_smt_wd;
  logic a_12_cfg_smt_we;
  logic [1:0] a_12_mux_sel_qs;
  logic [1:0] a_12_mux_sel_wd;
  logic a_12_mux_sel_we;
  logic a_13_cfg_chip2pad_qs;
  logic a_13_cfg_chip2pad_wd;
  logic a_13_cfg_chip2pad_we;
  logic [1:0] a_13_cfg_drv_qs;
  logic [1:0] a_13_cfg_drv_wd;
  logic a_13_cfg_drv_we;
  logic a_13_cfg_oen_qs;
  logic a_13_cfg_oen_wd;
  logic a_13_cfg_oen_we;
  logic a_13_cfg_puen_qs;
  logic a_13_cfg_puen_wd;
  logic a_13_cfg_puen_we;
  logic a_13_cfg_slw_qs;
  logic a_13_cfg_slw_wd;
  logic a_13_cfg_slw_we;
  logic a_13_cfg_smt_qs;
  logic a_13_cfg_smt_wd;
  logic a_13_cfg_smt_we;
  logic [1:0] a_13_mux_sel_qs;
  logic [1:0] a_13_mux_sel_wd;
  logic a_13_mux_sel_we;
  logic a_14_cfg_chip2pad_qs;
  logic a_14_cfg_chip2pad_wd;
  logic a_14_cfg_chip2pad_we;
  logic [1:0] a_14_cfg_drv_qs;
  logic [1:0] a_14_cfg_drv_wd;
  logic a_14_cfg_drv_we;
  logic a_14_cfg_oen_qs;
  logic a_14_cfg_oen_wd;
  logic a_14_cfg_oen_we;
  logic a_14_cfg_puen_qs;
  logic a_14_cfg_puen_wd;
  logic a_14_cfg_puen_we;
  logic a_14_cfg_slw_qs;
  logic a_14_cfg_slw_wd;
  logic a_14_cfg_slw_we;
  logic a_14_cfg_smt_qs;
  logic a_14_cfg_smt_wd;
  logic a_14_cfg_smt_we;
  logic [2:0] a_14_mux_sel_qs;
  logic [2:0] a_14_mux_sel_wd;
  logic a_14_mux_sel_we;
  logic a_15_cfg_chip2pad_qs;
  logic a_15_cfg_chip2pad_wd;
  logic a_15_cfg_chip2pad_we;
  logic [1:0] a_15_cfg_drv_qs;
  logic [1:0] a_15_cfg_drv_wd;
  logic a_15_cfg_drv_we;
  logic a_15_cfg_oen_qs;
  logic a_15_cfg_oen_wd;
  logic a_15_cfg_oen_we;
  logic a_15_cfg_puen_qs;
  logic a_15_cfg_puen_wd;
  logic a_15_cfg_puen_we;
  logic a_15_cfg_slw_qs;
  logic a_15_cfg_slw_wd;
  logic a_15_cfg_slw_we;
  logic a_15_cfg_smt_qs;
  logic a_15_cfg_smt_wd;
  logic a_15_cfg_smt_we;
  logic [2:0] a_15_mux_sel_qs;
  logic [2:0] a_15_mux_sel_wd;
  logic a_15_mux_sel_we;
  logic a_16_cfg_chip2pad_qs;
  logic a_16_cfg_chip2pad_wd;
  logic a_16_cfg_chip2pad_we;
  logic [1:0] a_16_cfg_drv_qs;
  logic [1:0] a_16_cfg_drv_wd;
  logic a_16_cfg_drv_we;
  logic a_16_cfg_oen_qs;
  logic a_16_cfg_oen_wd;
  logic a_16_cfg_oen_we;
  logic a_16_cfg_puen_qs;
  logic a_16_cfg_puen_wd;
  logic a_16_cfg_puen_we;
  logic a_16_cfg_slw_qs;
  logic a_16_cfg_slw_wd;
  logic a_16_cfg_slw_we;
  logic a_16_cfg_smt_qs;
  logic a_16_cfg_smt_wd;
  logic a_16_cfg_smt_we;
  logic [2:0] a_16_mux_sel_qs;
  logic [2:0] a_16_mux_sel_wd;
  logic a_16_mux_sel_we;
  logic a_17_cfg_chip2pad_qs;
  logic a_17_cfg_chip2pad_wd;
  logic a_17_cfg_chip2pad_we;
  logic [1:0] a_17_cfg_drv_qs;
  logic [1:0] a_17_cfg_drv_wd;
  logic a_17_cfg_drv_we;
  logic a_17_cfg_oen_qs;
  logic a_17_cfg_oen_wd;
  logic a_17_cfg_oen_we;
  logic a_17_cfg_puen_qs;
  logic a_17_cfg_puen_wd;
  logic a_17_cfg_puen_we;
  logic a_17_cfg_slw_qs;
  logic a_17_cfg_slw_wd;
  logic a_17_cfg_slw_we;
  logic a_17_cfg_smt_qs;
  logic a_17_cfg_smt_wd;
  logic a_17_cfg_smt_we;
  logic [2:0] a_17_mux_sel_qs;
  logic [2:0] a_17_mux_sel_wd;
  logic a_17_mux_sel_we;
  logic a_18_cfg_chip2pad_qs;
  logic a_18_cfg_chip2pad_wd;
  logic a_18_cfg_chip2pad_we;
  logic [1:0] a_18_cfg_drv_qs;
  logic [1:0] a_18_cfg_drv_wd;
  logic a_18_cfg_drv_we;
  logic a_18_cfg_oen_qs;
  logic a_18_cfg_oen_wd;
  logic a_18_cfg_oen_we;
  logic a_18_cfg_puen_qs;
  logic a_18_cfg_puen_wd;
  logic a_18_cfg_puen_we;
  logic a_18_cfg_slw_qs;
  logic a_18_cfg_slw_wd;
  logic a_18_cfg_slw_we;
  logic a_18_cfg_smt_qs;
  logic a_18_cfg_smt_wd;
  logic a_18_cfg_smt_we;
  logic [2:0] a_18_mux_sel_qs;
  logic [2:0] a_18_mux_sel_wd;
  logic a_18_mux_sel_we;
  logic a_19_cfg_chip2pad_qs;
  logic a_19_cfg_chip2pad_wd;
  logic a_19_cfg_chip2pad_we;
  logic [1:0] a_19_cfg_drv_qs;
  logic [1:0] a_19_cfg_drv_wd;
  logic a_19_cfg_drv_we;
  logic a_19_cfg_oen_qs;
  logic a_19_cfg_oen_wd;
  logic a_19_cfg_oen_we;
  logic a_19_cfg_puen_qs;
  logic a_19_cfg_puen_wd;
  logic a_19_cfg_puen_we;
  logic a_19_cfg_slw_qs;
  logic a_19_cfg_slw_wd;
  logic a_19_cfg_slw_we;
  logic a_19_cfg_smt_qs;
  logic a_19_cfg_smt_wd;
  logic a_19_cfg_smt_we;
  logic [2:0] a_19_mux_sel_qs;
  logic [2:0] a_19_mux_sel_wd;
  logic a_19_mux_sel_we;
  logic a_20_cfg_chip2pad_qs;
  logic a_20_cfg_chip2pad_wd;
  logic a_20_cfg_chip2pad_we;
  logic [1:0] a_20_cfg_drv_qs;
  logic [1:0] a_20_cfg_drv_wd;
  logic a_20_cfg_drv_we;
  logic a_20_cfg_oen_qs;
  logic a_20_cfg_oen_wd;
  logic a_20_cfg_oen_we;
  logic a_20_cfg_puen_qs;
  logic a_20_cfg_puen_wd;
  logic a_20_cfg_puen_we;
  logic a_20_cfg_slw_qs;
  logic a_20_cfg_slw_wd;
  logic a_20_cfg_slw_we;
  logic a_20_cfg_smt_qs;
  logic a_20_cfg_smt_wd;
  logic a_20_cfg_smt_we;
  logic [2:0] a_20_mux_sel_qs;
  logic [2:0] a_20_mux_sel_wd;
  logic a_20_mux_sel_we;
  logic a_21_cfg_chip2pad_qs;
  logic a_21_cfg_chip2pad_wd;
  logic a_21_cfg_chip2pad_we;
  logic [1:0] a_21_cfg_drv_qs;
  logic [1:0] a_21_cfg_drv_wd;
  logic a_21_cfg_drv_we;
  logic a_21_cfg_oen_qs;
  logic a_21_cfg_oen_wd;
  logic a_21_cfg_oen_we;
  logic a_21_cfg_puen_qs;
  logic a_21_cfg_puen_wd;
  logic a_21_cfg_puen_we;
  logic a_21_cfg_slw_qs;
  logic a_21_cfg_slw_wd;
  logic a_21_cfg_slw_we;
  logic a_21_cfg_smt_qs;
  logic a_21_cfg_smt_wd;
  logic a_21_cfg_smt_we;
  logic [2:0] a_21_mux_sel_qs;
  logic [2:0] a_21_mux_sel_wd;
  logic a_21_mux_sel_we;
  logic a_22_cfg_chip2pad_qs;
  logic a_22_cfg_chip2pad_wd;
  logic a_22_cfg_chip2pad_we;
  logic [1:0] a_22_cfg_drv_qs;
  logic [1:0] a_22_cfg_drv_wd;
  logic a_22_cfg_drv_we;
  logic a_22_cfg_oen_qs;
  logic a_22_cfg_oen_wd;
  logic a_22_cfg_oen_we;
  logic a_22_cfg_puen_qs;
  logic a_22_cfg_puen_wd;
  logic a_22_cfg_puen_we;
  logic a_22_cfg_slw_qs;
  logic a_22_cfg_slw_wd;
  logic a_22_cfg_slw_we;
  logic a_22_cfg_smt_qs;
  logic a_22_cfg_smt_wd;
  logic a_22_cfg_smt_we;
  logic [2:0] a_22_mux_sel_qs;
  logic [2:0] a_22_mux_sel_wd;
  logic a_22_mux_sel_we;
  logic a_23_cfg_chip2pad_qs;
  logic a_23_cfg_chip2pad_wd;
  logic a_23_cfg_chip2pad_we;
  logic [1:0] a_23_cfg_drv_qs;
  logic [1:0] a_23_cfg_drv_wd;
  logic a_23_cfg_drv_we;
  logic a_23_cfg_oen_qs;
  logic a_23_cfg_oen_wd;
  logic a_23_cfg_oen_we;
  logic a_23_cfg_puen_qs;
  logic a_23_cfg_puen_wd;
  logic a_23_cfg_puen_we;
  logic a_23_cfg_slw_qs;
  logic a_23_cfg_slw_wd;
  logic a_23_cfg_slw_we;
  logic a_23_cfg_smt_qs;
  logic a_23_cfg_smt_wd;
  logic a_23_cfg_smt_we;
  logic [2:0] a_23_mux_sel_qs;
  logic [2:0] a_23_mux_sel_wd;
  logic a_23_mux_sel_we;
  logic a_24_cfg_chip2pad_qs;
  logic a_24_cfg_chip2pad_wd;
  logic a_24_cfg_chip2pad_we;
  logic [1:0] a_24_cfg_drv_qs;
  logic [1:0] a_24_cfg_drv_wd;
  logic a_24_cfg_drv_we;
  logic a_24_cfg_oen_qs;
  logic a_24_cfg_oen_wd;
  logic a_24_cfg_oen_we;
  logic a_24_cfg_puen_qs;
  logic a_24_cfg_puen_wd;
  logic a_24_cfg_puen_we;
  logic a_24_cfg_slw_qs;
  logic a_24_cfg_slw_wd;
  logic a_24_cfg_slw_we;
  logic a_24_cfg_smt_qs;
  logic a_24_cfg_smt_wd;
  logic a_24_cfg_smt_we;
  logic [2:0] a_24_mux_sel_qs;
  logic [2:0] a_24_mux_sel_wd;
  logic a_24_mux_sel_we;
  logic a_25_cfg_chip2pad_qs;
  logic a_25_cfg_chip2pad_wd;
  logic a_25_cfg_chip2pad_we;
  logic [1:0] a_25_cfg_drv_qs;
  logic [1:0] a_25_cfg_drv_wd;
  logic a_25_cfg_drv_we;
  logic a_25_cfg_oen_qs;
  logic a_25_cfg_oen_wd;
  logic a_25_cfg_oen_we;
  logic a_25_cfg_puen_qs;
  logic a_25_cfg_puen_wd;
  logic a_25_cfg_puen_we;
  logic a_25_cfg_slw_qs;
  logic a_25_cfg_slw_wd;
  logic a_25_cfg_slw_we;
  logic a_25_cfg_smt_qs;
  logic a_25_cfg_smt_wd;
  logic a_25_cfg_smt_we;
  logic [2:0] a_25_mux_sel_qs;
  logic [2:0] a_25_mux_sel_wd;
  logic a_25_mux_sel_we;
  logic a_26_cfg_chip2pad_qs;
  logic a_26_cfg_chip2pad_wd;
  logic a_26_cfg_chip2pad_we;
  logic [1:0] a_26_cfg_drv_qs;
  logic [1:0] a_26_cfg_drv_wd;
  logic a_26_cfg_drv_we;
  logic a_26_cfg_oen_qs;
  logic a_26_cfg_oen_wd;
  logic a_26_cfg_oen_we;
  logic a_26_cfg_puen_qs;
  logic a_26_cfg_puen_wd;
  logic a_26_cfg_puen_we;
  logic a_26_cfg_slw_qs;
  logic a_26_cfg_slw_wd;
  logic a_26_cfg_slw_we;
  logic a_26_cfg_smt_qs;
  logic a_26_cfg_smt_wd;
  logic a_26_cfg_smt_we;
  logic [2:0] a_26_mux_sel_qs;
  logic [2:0] a_26_mux_sel_wd;
  logic a_26_mux_sel_we;
  logic a_27_cfg_chip2pad_qs;
  logic a_27_cfg_chip2pad_wd;
  logic a_27_cfg_chip2pad_we;
  logic [1:0] a_27_cfg_drv_qs;
  logic [1:0] a_27_cfg_drv_wd;
  logic a_27_cfg_drv_we;
  logic a_27_cfg_oen_qs;
  logic a_27_cfg_oen_wd;
  logic a_27_cfg_oen_we;
  logic a_27_cfg_puen_qs;
  logic a_27_cfg_puen_wd;
  logic a_27_cfg_puen_we;
  logic a_27_cfg_slw_qs;
  logic a_27_cfg_slw_wd;
  logic a_27_cfg_slw_we;
  logic a_27_cfg_smt_qs;
  logic a_27_cfg_smt_wd;
  logic a_27_cfg_smt_we;
  logic [2:0] a_27_mux_sel_qs;
  logic [2:0] a_27_mux_sel_wd;
  logic a_27_mux_sel_we;
  logic a_28_cfg_chip2pad_qs;
  logic a_28_cfg_chip2pad_wd;
  logic a_28_cfg_chip2pad_we;
  logic [1:0] a_28_cfg_drv_qs;
  logic [1:0] a_28_cfg_drv_wd;
  logic a_28_cfg_drv_we;
  logic a_28_cfg_oen_qs;
  logic a_28_cfg_oen_wd;
  logic a_28_cfg_oen_we;
  logic a_28_cfg_puen_qs;
  logic a_28_cfg_puen_wd;
  logic a_28_cfg_puen_we;
  logic a_28_cfg_slw_qs;
  logic a_28_cfg_slw_wd;
  logic a_28_cfg_slw_we;
  logic a_28_cfg_smt_qs;
  logic a_28_cfg_smt_wd;
  logic a_28_cfg_smt_we;
  logic [2:0] a_28_mux_sel_qs;
  logic [2:0] a_28_mux_sel_wd;
  logic a_28_mux_sel_we;
  logic a_29_cfg_chip2pad_qs;
  logic a_29_cfg_chip2pad_wd;
  logic a_29_cfg_chip2pad_we;
  logic [1:0] a_29_cfg_drv_qs;
  logic [1:0] a_29_cfg_drv_wd;
  logic a_29_cfg_drv_we;
  logic a_29_cfg_oen_qs;
  logic a_29_cfg_oen_wd;
  logic a_29_cfg_oen_we;
  logic a_29_cfg_puen_qs;
  logic a_29_cfg_puen_wd;
  logic a_29_cfg_puen_we;
  logic a_29_cfg_slw_qs;
  logic a_29_cfg_slw_wd;
  logic a_29_cfg_slw_we;
  logic a_29_cfg_smt_qs;
  logic a_29_cfg_smt_wd;
  logic a_29_cfg_smt_we;
  logic [2:0] a_29_mux_sel_qs;
  logic [2:0] a_29_mux_sel_wd;
  logic a_29_mux_sel_we;
  logic b_00_cfg_chip2pad_qs;
  logic b_00_cfg_chip2pad_wd;
  logic b_00_cfg_chip2pad_we;
  logic [1:0] b_00_cfg_drv_qs;
  logic [1:0] b_00_cfg_drv_wd;
  logic b_00_cfg_drv_we;
  logic b_00_cfg_oen_qs;
  logic b_00_cfg_oen_wd;
  logic b_00_cfg_oen_we;
  logic b_00_cfg_puen_qs;
  logic b_00_cfg_puen_wd;
  logic b_00_cfg_puen_we;
  logic b_00_cfg_slw_qs;
  logic b_00_cfg_slw_wd;
  logic b_00_cfg_slw_we;
  logic b_00_cfg_smt_qs;
  logic b_00_cfg_smt_wd;
  logic b_00_cfg_smt_we;
  logic [2:0] b_00_mux_sel_qs;
  logic [2:0] b_00_mux_sel_wd;
  logic b_00_mux_sel_we;
  logic b_01_cfg_chip2pad_qs;
  logic b_01_cfg_chip2pad_wd;
  logic b_01_cfg_chip2pad_we;
  logic [1:0] b_01_cfg_drv_qs;
  logic [1:0] b_01_cfg_drv_wd;
  logic b_01_cfg_drv_we;
  logic b_01_cfg_oen_qs;
  logic b_01_cfg_oen_wd;
  logic b_01_cfg_oen_we;
  logic b_01_cfg_puen_qs;
  logic b_01_cfg_puen_wd;
  logic b_01_cfg_puen_we;
  logic b_01_cfg_slw_qs;
  logic b_01_cfg_slw_wd;
  logic b_01_cfg_slw_we;
  logic b_01_cfg_smt_qs;
  logic b_01_cfg_smt_wd;
  logic b_01_cfg_smt_we;
  logic [2:0] b_01_mux_sel_qs;
  logic [2:0] b_01_mux_sel_wd;
  logic b_01_mux_sel_we;
  logic b_02_cfg_chip2pad_qs;
  logic b_02_cfg_chip2pad_wd;
  logic b_02_cfg_chip2pad_we;
  logic [1:0] b_02_cfg_drv_qs;
  logic [1:0] b_02_cfg_drv_wd;
  logic b_02_cfg_drv_we;
  logic b_02_cfg_oen_qs;
  logic b_02_cfg_oen_wd;
  logic b_02_cfg_oen_we;
  logic b_02_cfg_puen_qs;
  logic b_02_cfg_puen_wd;
  logic b_02_cfg_puen_we;
  logic b_02_cfg_slw_qs;
  logic b_02_cfg_slw_wd;
  logic b_02_cfg_slw_we;
  logic b_02_cfg_smt_qs;
  logic b_02_cfg_smt_wd;
  logic b_02_cfg_smt_we;
  logic [2:0] b_02_mux_sel_qs;
  logic [2:0] b_02_mux_sel_wd;
  logic b_02_mux_sel_we;
  logic b_03_cfg_chip2pad_qs;
  logic b_03_cfg_chip2pad_wd;
  logic b_03_cfg_chip2pad_we;
  logic [1:0] b_03_cfg_drv_qs;
  logic [1:0] b_03_cfg_drv_wd;
  logic b_03_cfg_drv_we;
  logic b_03_cfg_oen_qs;
  logic b_03_cfg_oen_wd;
  logic b_03_cfg_oen_we;
  logic b_03_cfg_puen_qs;
  logic b_03_cfg_puen_wd;
  logic b_03_cfg_puen_we;
  logic b_03_cfg_slw_qs;
  logic b_03_cfg_slw_wd;
  logic b_03_cfg_slw_we;
  logic b_03_cfg_smt_qs;
  logic b_03_cfg_smt_wd;
  logic b_03_cfg_smt_we;
  logic [2:0] b_03_mux_sel_qs;
  logic [2:0] b_03_mux_sel_wd;
  logic b_03_mux_sel_we;
  logic b_04_cfg_chip2pad_qs;
  logic b_04_cfg_chip2pad_wd;
  logic b_04_cfg_chip2pad_we;
  logic [1:0] b_04_cfg_drv_qs;
  logic [1:0] b_04_cfg_drv_wd;
  logic b_04_cfg_drv_we;
  logic b_04_cfg_oen_qs;
  logic b_04_cfg_oen_wd;
  logic b_04_cfg_oen_we;
  logic b_04_cfg_puen_qs;
  logic b_04_cfg_puen_wd;
  logic b_04_cfg_puen_we;
  logic b_04_cfg_slw_qs;
  logic b_04_cfg_slw_wd;
  logic b_04_cfg_slw_we;
  logic b_04_cfg_smt_qs;
  logic b_04_cfg_smt_wd;
  logic b_04_cfg_smt_we;
  logic [2:0] b_04_mux_sel_qs;
  logic [2:0] b_04_mux_sel_wd;
  logic b_04_mux_sel_we;
  logic b_05_cfg_chip2pad_qs;
  logic b_05_cfg_chip2pad_wd;
  logic b_05_cfg_chip2pad_we;
  logic [1:0] b_05_cfg_drv_qs;
  logic [1:0] b_05_cfg_drv_wd;
  logic b_05_cfg_drv_we;
  logic b_05_cfg_oen_qs;
  logic b_05_cfg_oen_wd;
  logic b_05_cfg_oen_we;
  logic b_05_cfg_puen_qs;
  logic b_05_cfg_puen_wd;
  logic b_05_cfg_puen_we;
  logic b_05_cfg_slw_qs;
  logic b_05_cfg_slw_wd;
  logic b_05_cfg_slw_we;
  logic b_05_cfg_smt_qs;
  logic b_05_cfg_smt_wd;
  logic b_05_cfg_smt_we;
  logic [2:0] b_05_mux_sel_qs;
  logic [2:0] b_05_mux_sel_wd;
  logic b_05_mux_sel_we;
  logic b_06_cfg_chip2pad_qs;
  logic b_06_cfg_chip2pad_wd;
  logic b_06_cfg_chip2pad_we;
  logic [1:0] b_06_cfg_drv_qs;
  logic [1:0] b_06_cfg_drv_wd;
  logic b_06_cfg_drv_we;
  logic b_06_cfg_oen_qs;
  logic b_06_cfg_oen_wd;
  logic b_06_cfg_oen_we;
  logic b_06_cfg_puen_qs;
  logic b_06_cfg_puen_wd;
  logic b_06_cfg_puen_we;
  logic b_06_cfg_slw_qs;
  logic b_06_cfg_slw_wd;
  logic b_06_cfg_slw_we;
  logic b_06_cfg_smt_qs;
  logic b_06_cfg_smt_wd;
  logic b_06_cfg_smt_we;
  logic [2:0] b_06_mux_sel_qs;
  logic [2:0] b_06_mux_sel_wd;
  logic b_06_mux_sel_we;
  logic b_07_cfg_chip2pad_qs;
  logic b_07_cfg_chip2pad_wd;
  logic b_07_cfg_chip2pad_we;
  logic [1:0] b_07_cfg_drv_qs;
  logic [1:0] b_07_cfg_drv_wd;
  logic b_07_cfg_drv_we;
  logic b_07_cfg_oen_qs;
  logic b_07_cfg_oen_wd;
  logic b_07_cfg_oen_we;
  logic b_07_cfg_puen_qs;
  logic b_07_cfg_puen_wd;
  logic b_07_cfg_puen_we;
  logic b_07_cfg_slw_qs;
  logic b_07_cfg_slw_wd;
  logic b_07_cfg_slw_we;
  logic b_07_cfg_smt_qs;
  logic b_07_cfg_smt_wd;
  logic b_07_cfg_smt_we;
  logic [2:0] b_07_mux_sel_qs;
  logic [2:0] b_07_mux_sel_wd;
  logic b_07_mux_sel_we;
  logic b_08_cfg_chip2pad_qs;
  logic b_08_cfg_chip2pad_wd;
  logic b_08_cfg_chip2pad_we;
  logic [1:0] b_08_cfg_drv_qs;
  logic [1:0] b_08_cfg_drv_wd;
  logic b_08_cfg_drv_we;
  logic b_08_cfg_oen_qs;
  logic b_08_cfg_oen_wd;
  logic b_08_cfg_oen_we;
  logic b_08_cfg_puen_qs;
  logic b_08_cfg_puen_wd;
  logic b_08_cfg_puen_we;
  logic b_08_cfg_slw_qs;
  logic b_08_cfg_slw_wd;
  logic b_08_cfg_slw_we;
  logic b_08_cfg_smt_qs;
  logic b_08_cfg_smt_wd;
  logic b_08_cfg_smt_we;
  logic [2:0] b_08_mux_sel_qs;
  logic [2:0] b_08_mux_sel_wd;
  logic b_08_mux_sel_we;
  logic b_09_cfg_chip2pad_qs;
  logic b_09_cfg_chip2pad_wd;
  logic b_09_cfg_chip2pad_we;
  logic [1:0] b_09_cfg_drv_qs;
  logic [1:0] b_09_cfg_drv_wd;
  logic b_09_cfg_drv_we;
  logic b_09_cfg_oen_qs;
  logic b_09_cfg_oen_wd;
  logic b_09_cfg_oen_we;
  logic b_09_cfg_puen_qs;
  logic b_09_cfg_puen_wd;
  logic b_09_cfg_puen_we;
  logic b_09_cfg_slw_qs;
  logic b_09_cfg_slw_wd;
  logic b_09_cfg_slw_we;
  logic b_09_cfg_smt_qs;
  logic b_09_cfg_smt_wd;
  logic b_09_cfg_smt_we;
  logic [2:0] b_09_mux_sel_qs;
  logic [2:0] b_09_mux_sel_wd;
  logic b_09_mux_sel_we;
  logic b_10_cfg_chip2pad_qs;
  logic b_10_cfg_chip2pad_wd;
  logic b_10_cfg_chip2pad_we;
  logic [1:0] b_10_cfg_drv_qs;
  logic [1:0] b_10_cfg_drv_wd;
  logic b_10_cfg_drv_we;
  logic b_10_cfg_oen_qs;
  logic b_10_cfg_oen_wd;
  logic b_10_cfg_oen_we;
  logic b_10_cfg_puen_qs;
  logic b_10_cfg_puen_wd;
  logic b_10_cfg_puen_we;
  logic b_10_cfg_slw_qs;
  logic b_10_cfg_slw_wd;
  logic b_10_cfg_slw_we;
  logic b_10_cfg_smt_qs;
  logic b_10_cfg_smt_wd;
  logic b_10_cfg_smt_we;
  logic [2:0] b_10_mux_sel_qs;
  logic [2:0] b_10_mux_sel_wd;
  logic b_10_mux_sel_we;
  logic b_11_cfg_chip2pad_qs;
  logic b_11_cfg_chip2pad_wd;
  logic b_11_cfg_chip2pad_we;
  logic [1:0] b_11_cfg_drv_qs;
  logic [1:0] b_11_cfg_drv_wd;
  logic b_11_cfg_drv_we;
  logic b_11_cfg_oen_qs;
  logic b_11_cfg_oen_wd;
  logic b_11_cfg_oen_we;
  logic b_11_cfg_puen_qs;
  logic b_11_cfg_puen_wd;
  logic b_11_cfg_puen_we;
  logic b_11_cfg_slw_qs;
  logic b_11_cfg_slw_wd;
  logic b_11_cfg_slw_we;
  logic b_11_cfg_smt_qs;
  logic b_11_cfg_smt_wd;
  logic b_11_cfg_smt_we;
  logic [2:0] b_11_mux_sel_qs;
  logic [2:0] b_11_mux_sel_wd;
  logic b_11_mux_sel_we;
  logic b_12_cfg_chip2pad_qs;
  logic b_12_cfg_chip2pad_wd;
  logic b_12_cfg_chip2pad_we;
  logic [1:0] b_12_cfg_drv_qs;
  logic [1:0] b_12_cfg_drv_wd;
  logic b_12_cfg_drv_we;
  logic b_12_cfg_oen_qs;
  logic b_12_cfg_oen_wd;
  logic b_12_cfg_oen_we;
  logic b_12_cfg_puen_qs;
  logic b_12_cfg_puen_wd;
  logic b_12_cfg_puen_we;
  logic b_12_cfg_slw_qs;
  logic b_12_cfg_slw_wd;
  logic b_12_cfg_slw_we;
  logic b_12_cfg_smt_qs;
  logic b_12_cfg_smt_wd;
  logic b_12_cfg_smt_we;
  logic [2:0] b_12_mux_sel_qs;
  logic [2:0] b_12_mux_sel_wd;
  logic b_12_mux_sel_we;
  logic b_13_cfg_chip2pad_qs;
  logic b_13_cfg_chip2pad_wd;
  logic b_13_cfg_chip2pad_we;
  logic [1:0] b_13_cfg_drv_qs;
  logic [1:0] b_13_cfg_drv_wd;
  logic b_13_cfg_drv_we;
  logic b_13_cfg_oen_qs;
  logic b_13_cfg_oen_wd;
  logic b_13_cfg_oen_we;
  logic b_13_cfg_puen_qs;
  logic b_13_cfg_puen_wd;
  logic b_13_cfg_puen_we;
  logic b_13_cfg_slw_qs;
  logic b_13_cfg_slw_wd;
  logic b_13_cfg_slw_we;
  logic b_13_cfg_smt_qs;
  logic b_13_cfg_smt_wd;
  logic b_13_cfg_smt_we;
  logic [2:0] b_13_mux_sel_qs;
  logic [2:0] b_13_mux_sel_wd;
  logic b_13_mux_sel_we;
  logic b_14_cfg_chip2pad_qs;
  logic b_14_cfg_chip2pad_wd;
  logic b_14_cfg_chip2pad_we;
  logic [1:0] b_14_cfg_drv_qs;
  logic [1:0] b_14_cfg_drv_wd;
  logic b_14_cfg_drv_we;
  logic b_14_cfg_oen_qs;
  logic b_14_cfg_oen_wd;
  logic b_14_cfg_oen_we;
  logic b_14_cfg_puen_qs;
  logic b_14_cfg_puen_wd;
  logic b_14_cfg_puen_we;
  logic b_14_cfg_slw_qs;
  logic b_14_cfg_slw_wd;
  logic b_14_cfg_slw_we;
  logic b_14_cfg_smt_qs;
  logic b_14_cfg_smt_wd;
  logic b_14_cfg_smt_we;
  logic [2:0] b_14_mux_sel_qs;
  logic [2:0] b_14_mux_sel_wd;
  logic b_14_mux_sel_we;
  logic b_15_cfg_chip2pad_qs;
  logic b_15_cfg_chip2pad_wd;
  logic b_15_cfg_chip2pad_we;
  logic [1:0] b_15_cfg_drv_qs;
  logic [1:0] b_15_cfg_drv_wd;
  logic b_15_cfg_drv_we;
  logic b_15_cfg_oen_qs;
  logic b_15_cfg_oen_wd;
  logic b_15_cfg_oen_we;
  logic b_15_cfg_puen_qs;
  logic b_15_cfg_puen_wd;
  logic b_15_cfg_puen_we;
  logic b_15_cfg_slw_qs;
  logic b_15_cfg_slw_wd;
  logic b_15_cfg_slw_we;
  logic b_15_cfg_smt_qs;
  logic b_15_cfg_smt_wd;
  logic b_15_cfg_smt_we;
  logic [2:0] b_15_mux_sel_qs;
  logic [2:0] b_15_mux_sel_wd;
  logic b_15_mux_sel_we;
  logic b_16_cfg_chip2pad_qs;
  logic b_16_cfg_chip2pad_wd;
  logic b_16_cfg_chip2pad_we;
  logic [1:0] b_16_cfg_drv_qs;
  logic [1:0] b_16_cfg_drv_wd;
  logic b_16_cfg_drv_we;
  logic b_16_cfg_oen_qs;
  logic b_16_cfg_oen_wd;
  logic b_16_cfg_oen_we;
  logic b_16_cfg_puen_qs;
  logic b_16_cfg_puen_wd;
  logic b_16_cfg_puen_we;
  logic b_16_cfg_slw_qs;
  logic b_16_cfg_slw_wd;
  logic b_16_cfg_slw_we;
  logic b_16_cfg_smt_qs;
  logic b_16_cfg_smt_wd;
  logic b_16_cfg_smt_we;
  logic [2:0] b_16_mux_sel_qs;
  logic [2:0] b_16_mux_sel_wd;
  logic b_16_mux_sel_we;
  logic b_17_cfg_chip2pad_qs;
  logic b_17_cfg_chip2pad_wd;
  logic b_17_cfg_chip2pad_we;
  logic [1:0] b_17_cfg_drv_qs;
  logic [1:0] b_17_cfg_drv_wd;
  logic b_17_cfg_drv_we;
  logic b_17_cfg_oen_qs;
  logic b_17_cfg_oen_wd;
  logic b_17_cfg_oen_we;
  logic b_17_cfg_puen_qs;
  logic b_17_cfg_puen_wd;
  logic b_17_cfg_puen_we;
  logic b_17_cfg_slw_qs;
  logic b_17_cfg_slw_wd;
  logic b_17_cfg_slw_we;
  logic b_17_cfg_smt_qs;
  logic b_17_cfg_smt_wd;
  logic b_17_cfg_smt_we;
  logic [2:0] b_17_mux_sel_qs;
  logic [2:0] b_17_mux_sel_wd;
  logic b_17_mux_sel_we;
  logic b_18_cfg_chip2pad_qs;
  logic b_18_cfg_chip2pad_wd;
  logic b_18_cfg_chip2pad_we;
  logic [1:0] b_18_cfg_drv_qs;
  logic [1:0] b_18_cfg_drv_wd;
  logic b_18_cfg_drv_we;
  logic b_18_cfg_oen_qs;
  logic b_18_cfg_oen_wd;
  logic b_18_cfg_oen_we;
  logic b_18_cfg_puen_qs;
  logic b_18_cfg_puen_wd;
  logic b_18_cfg_puen_we;
  logic b_18_cfg_slw_qs;
  logic b_18_cfg_slw_wd;
  logic b_18_cfg_slw_we;
  logic b_18_cfg_smt_qs;
  logic b_18_cfg_smt_wd;
  logic b_18_cfg_smt_we;
  logic [2:0] b_18_mux_sel_qs;
  logic [2:0] b_18_mux_sel_wd;
  logic b_18_mux_sel_we;
  logic b_19_cfg_chip2pad_qs;
  logic b_19_cfg_chip2pad_wd;
  logic b_19_cfg_chip2pad_we;
  logic [1:0] b_19_cfg_drv_qs;
  logic [1:0] b_19_cfg_drv_wd;
  logic b_19_cfg_drv_we;
  logic b_19_cfg_oen_qs;
  logic b_19_cfg_oen_wd;
  logic b_19_cfg_oen_we;
  logic b_19_cfg_puen_qs;
  logic b_19_cfg_puen_wd;
  logic b_19_cfg_puen_we;
  logic b_19_cfg_slw_qs;
  logic b_19_cfg_slw_wd;
  logic b_19_cfg_slw_we;
  logic b_19_cfg_smt_qs;
  logic b_19_cfg_smt_wd;
  logic b_19_cfg_smt_we;
  logic [2:0] b_19_mux_sel_qs;
  logic [2:0] b_19_mux_sel_wd;
  logic b_19_mux_sel_we;
  logic b_20_cfg_chip2pad_qs;
  logic b_20_cfg_chip2pad_wd;
  logic b_20_cfg_chip2pad_we;
  logic [1:0] b_20_cfg_drv_qs;
  logic [1:0] b_20_cfg_drv_wd;
  logic b_20_cfg_drv_we;
  logic b_20_cfg_oen_qs;
  logic b_20_cfg_oen_wd;
  logic b_20_cfg_oen_we;
  logic b_20_cfg_puen_qs;
  logic b_20_cfg_puen_wd;
  logic b_20_cfg_puen_we;
  logic b_20_cfg_slw_qs;
  logic b_20_cfg_slw_wd;
  logic b_20_cfg_slw_we;
  logic b_20_cfg_smt_qs;
  logic b_20_cfg_smt_wd;
  logic b_20_cfg_smt_we;
  logic [2:0] b_20_mux_sel_qs;
  logic [2:0] b_20_mux_sel_wd;
  logic b_20_mux_sel_we;
  logic b_21_cfg_chip2pad_qs;
  logic b_21_cfg_chip2pad_wd;
  logic b_21_cfg_chip2pad_we;
  logic [1:0] b_21_cfg_drv_qs;
  logic [1:0] b_21_cfg_drv_wd;
  logic b_21_cfg_drv_we;
  logic b_21_cfg_oen_qs;
  logic b_21_cfg_oen_wd;
  logic b_21_cfg_oen_we;
  logic b_21_cfg_puen_qs;
  logic b_21_cfg_puen_wd;
  logic b_21_cfg_puen_we;
  logic b_21_cfg_slw_qs;
  logic b_21_cfg_slw_wd;
  logic b_21_cfg_slw_we;
  logic b_21_cfg_smt_qs;
  logic b_21_cfg_smt_wd;
  logic b_21_cfg_smt_we;
  logic [2:0] b_21_mux_sel_qs;
  logic [2:0] b_21_mux_sel_wd;
  logic b_21_mux_sel_we;
  logic b_22_cfg_chip2pad_qs;
  logic b_22_cfg_chip2pad_wd;
  logic b_22_cfg_chip2pad_we;
  logic [1:0] b_22_cfg_drv_qs;
  logic [1:0] b_22_cfg_drv_wd;
  logic b_22_cfg_drv_we;
  logic b_22_cfg_oen_qs;
  logic b_22_cfg_oen_wd;
  logic b_22_cfg_oen_we;
  logic b_22_cfg_puen_qs;
  logic b_22_cfg_puen_wd;
  logic b_22_cfg_puen_we;
  logic b_22_cfg_slw_qs;
  logic b_22_cfg_slw_wd;
  logic b_22_cfg_slw_we;
  logic b_22_cfg_smt_qs;
  logic b_22_cfg_smt_wd;
  logic b_22_cfg_smt_we;
  logic [2:0] b_22_mux_sel_qs;
  logic [2:0] b_22_mux_sel_wd;
  logic b_22_mux_sel_we;
  logic b_23_cfg_chip2pad_qs;
  logic b_23_cfg_chip2pad_wd;
  logic b_23_cfg_chip2pad_we;
  logic [1:0] b_23_cfg_drv_qs;
  logic [1:0] b_23_cfg_drv_wd;
  logic b_23_cfg_drv_we;
  logic b_23_cfg_oen_qs;
  logic b_23_cfg_oen_wd;
  logic b_23_cfg_oen_we;
  logic b_23_cfg_puen_qs;
  logic b_23_cfg_puen_wd;
  logic b_23_cfg_puen_we;
  logic b_23_cfg_slw_qs;
  logic b_23_cfg_slw_wd;
  logic b_23_cfg_slw_we;
  logic b_23_cfg_smt_qs;
  logic b_23_cfg_smt_wd;
  logic b_23_cfg_smt_we;
  logic [2:0] b_23_mux_sel_qs;
  logic [2:0] b_23_mux_sel_wd;
  logic b_23_mux_sel_we;
  logic b_24_cfg_chip2pad_qs;
  logic b_24_cfg_chip2pad_wd;
  logic b_24_cfg_chip2pad_we;
  logic [1:0] b_24_cfg_drv_qs;
  logic [1:0] b_24_cfg_drv_wd;
  logic b_24_cfg_drv_we;
  logic b_24_cfg_oen_qs;
  logic b_24_cfg_oen_wd;
  logic b_24_cfg_oen_we;
  logic b_24_cfg_puen_qs;
  logic b_24_cfg_puen_wd;
  logic b_24_cfg_puen_we;
  logic b_24_cfg_slw_qs;
  logic b_24_cfg_slw_wd;
  logic b_24_cfg_slw_we;
  logic b_24_cfg_smt_qs;
  logic b_24_cfg_smt_wd;
  logic b_24_cfg_smt_we;
  logic [2:0] b_24_mux_sel_qs;
  logic [2:0] b_24_mux_sel_wd;
  logic b_24_mux_sel_we;
  logic b_25_cfg_chip2pad_qs;
  logic b_25_cfg_chip2pad_wd;
  logic b_25_cfg_chip2pad_we;
  logic [1:0] b_25_cfg_drv_qs;
  logic [1:0] b_25_cfg_drv_wd;
  logic b_25_cfg_drv_we;
  logic b_25_cfg_oen_qs;
  logic b_25_cfg_oen_wd;
  logic b_25_cfg_oen_we;
  logic b_25_cfg_puen_qs;
  logic b_25_cfg_puen_wd;
  logic b_25_cfg_puen_we;
  logic b_25_cfg_slw_qs;
  logic b_25_cfg_slw_wd;
  logic b_25_cfg_slw_we;
  logic b_25_cfg_smt_qs;
  logic b_25_cfg_smt_wd;
  logic b_25_cfg_smt_we;
  logic [2:0] b_25_mux_sel_qs;
  logic [2:0] b_25_mux_sel_wd;
  logic b_25_mux_sel_we;
  logic b_26_cfg_chip2pad_qs;
  logic b_26_cfg_chip2pad_wd;
  logic b_26_cfg_chip2pad_we;
  logic [1:0] b_26_cfg_drv_qs;
  logic [1:0] b_26_cfg_drv_wd;
  logic b_26_cfg_drv_we;
  logic b_26_cfg_oen_qs;
  logic b_26_cfg_oen_wd;
  logic b_26_cfg_oen_we;
  logic b_26_cfg_puen_qs;
  logic b_26_cfg_puen_wd;
  logic b_26_cfg_puen_we;
  logic b_26_cfg_slw_qs;
  logic b_26_cfg_slw_wd;
  logic b_26_cfg_slw_we;
  logic b_26_cfg_smt_qs;
  logic b_26_cfg_smt_wd;
  logic b_26_cfg_smt_we;
  logic [2:0] b_26_mux_sel_qs;
  logic [2:0] b_26_mux_sel_wd;
  logic b_26_mux_sel_we;
  logic b_27_cfg_chip2pad_qs;
  logic b_27_cfg_chip2pad_wd;
  logic b_27_cfg_chip2pad_we;
  logic [1:0] b_27_cfg_drv_qs;
  logic [1:0] b_27_cfg_drv_wd;
  logic b_27_cfg_drv_we;
  logic b_27_cfg_oen_qs;
  logic b_27_cfg_oen_wd;
  logic b_27_cfg_oen_we;
  logic b_27_cfg_puen_qs;
  logic b_27_cfg_puen_wd;
  logic b_27_cfg_puen_we;
  logic b_27_cfg_slw_qs;
  logic b_27_cfg_slw_wd;
  logic b_27_cfg_slw_we;
  logic b_27_cfg_smt_qs;
  logic b_27_cfg_smt_wd;
  logic b_27_cfg_smt_we;
  logic [2:0] b_27_mux_sel_qs;
  logic [2:0] b_27_mux_sel_wd;
  logic b_27_mux_sel_we;
  logic b_28_cfg_chip2pad_qs;
  logic b_28_cfg_chip2pad_wd;
  logic b_28_cfg_chip2pad_we;
  logic [1:0] b_28_cfg_drv_qs;
  logic [1:0] b_28_cfg_drv_wd;
  logic b_28_cfg_drv_we;
  logic b_28_cfg_oen_qs;
  logic b_28_cfg_oen_wd;
  logic b_28_cfg_oen_we;
  logic b_28_cfg_puen_qs;
  logic b_28_cfg_puen_wd;
  logic b_28_cfg_puen_we;
  logic b_28_cfg_slw_qs;
  logic b_28_cfg_slw_wd;
  logic b_28_cfg_slw_we;
  logic b_28_cfg_smt_qs;
  logic b_28_cfg_smt_wd;
  logic b_28_cfg_smt_we;
  logic [2:0] b_28_mux_sel_qs;
  logic [2:0] b_28_mux_sel_wd;
  logic b_28_mux_sel_we;
  logic b_29_cfg_chip2pad_qs;
  logic b_29_cfg_chip2pad_wd;
  logic b_29_cfg_chip2pad_we;
  logic [1:0] b_29_cfg_drv_qs;
  logic [1:0] b_29_cfg_drv_wd;
  logic b_29_cfg_drv_we;
  logic b_29_cfg_oen_qs;
  logic b_29_cfg_oen_wd;
  logic b_29_cfg_oen_we;
  logic b_29_cfg_puen_qs;
  logic b_29_cfg_puen_wd;
  logic b_29_cfg_puen_we;
  logic b_29_cfg_slw_qs;
  logic b_29_cfg_slw_wd;
  logic b_29_cfg_slw_we;
  logic b_29_cfg_smt_qs;
  logic b_29_cfg_smt_wd;
  logic b_29_cfg_smt_we;
  logic [2:0] b_29_mux_sel_qs;
  logic [2:0] b_29_mux_sel_wd;
  logic b_29_mux_sel_we;
  logic b_30_cfg_chip2pad_qs;
  logic b_30_cfg_chip2pad_wd;
  logic b_30_cfg_chip2pad_we;
  logic [1:0] b_30_cfg_drv_qs;
  logic [1:0] b_30_cfg_drv_wd;
  logic b_30_cfg_drv_we;
  logic b_30_cfg_oen_qs;
  logic b_30_cfg_oen_wd;
  logic b_30_cfg_oen_we;
  logic b_30_cfg_puen_qs;
  logic b_30_cfg_puen_wd;
  logic b_30_cfg_puen_we;
  logic b_30_cfg_slw_qs;
  logic b_30_cfg_slw_wd;
  logic b_30_cfg_slw_we;
  logic b_30_cfg_smt_qs;
  logic b_30_cfg_smt_wd;
  logic b_30_cfg_smt_we;
  logic [2:0] b_30_mux_sel_qs;
  logic [2:0] b_30_mux_sel_wd;
  logic b_30_mux_sel_we;
  logic b_31_cfg_chip2pad_qs;
  logic b_31_cfg_chip2pad_wd;
  logic b_31_cfg_chip2pad_we;
  logic [1:0] b_31_cfg_drv_qs;
  logic [1:0] b_31_cfg_drv_wd;
  logic b_31_cfg_drv_we;
  logic b_31_cfg_oen_qs;
  logic b_31_cfg_oen_wd;
  logic b_31_cfg_oen_we;
  logic b_31_cfg_puen_qs;
  logic b_31_cfg_puen_wd;
  logic b_31_cfg_puen_we;
  logic b_31_cfg_slw_qs;
  logic b_31_cfg_slw_wd;
  logic b_31_cfg_slw_we;
  logic b_31_cfg_smt_qs;
  logic b_31_cfg_smt_wd;
  logic b_31_cfg_smt_we;
  logic [2:0] b_31_mux_sel_qs;
  logic [2:0] b_31_mux_sel_wd;
  logic b_31_mux_sel_we;
  logic b_32_cfg_chip2pad_qs;
  logic b_32_cfg_chip2pad_wd;
  logic b_32_cfg_chip2pad_we;
  logic [1:0] b_32_cfg_drv_qs;
  logic [1:0] b_32_cfg_drv_wd;
  logic b_32_cfg_drv_we;
  logic b_32_cfg_oen_qs;
  logic b_32_cfg_oen_wd;
  logic b_32_cfg_oen_we;
  logic b_32_cfg_puen_qs;
  logic b_32_cfg_puen_wd;
  logic b_32_cfg_puen_we;
  logic b_32_cfg_slw_qs;
  logic b_32_cfg_slw_wd;
  logic b_32_cfg_slw_we;
  logic b_32_cfg_smt_qs;
  logic b_32_cfg_smt_wd;
  logic b_32_cfg_smt_we;
  logic [1:0] b_32_mux_sel_qs;
  logic [1:0] b_32_mux_sel_wd;
  logic b_32_mux_sel_we;
  logic b_33_cfg_chip2pad_qs;
  logic b_33_cfg_chip2pad_wd;
  logic b_33_cfg_chip2pad_we;
  logic [1:0] b_33_cfg_drv_qs;
  logic [1:0] b_33_cfg_drv_wd;
  logic b_33_cfg_drv_we;
  logic b_33_cfg_oen_qs;
  logic b_33_cfg_oen_wd;
  logic b_33_cfg_oen_we;
  logic b_33_cfg_puen_qs;
  logic b_33_cfg_puen_wd;
  logic b_33_cfg_puen_we;
  logic b_33_cfg_slw_qs;
  logic b_33_cfg_slw_wd;
  logic b_33_cfg_slw_we;
  logic b_33_cfg_smt_qs;
  logic b_33_cfg_smt_wd;
  logic b_33_cfg_smt_we;
  logic [1:0] b_33_mux_sel_qs;
  logic [1:0] b_33_mux_sel_wd;
  logic b_33_mux_sel_we;
  logic b_34_cfg_chip2pad_qs;
  logic b_34_cfg_chip2pad_wd;
  logic b_34_cfg_chip2pad_we;
  logic [1:0] b_34_cfg_drv_qs;
  logic [1:0] b_34_cfg_drv_wd;
  logic b_34_cfg_drv_we;
  logic b_34_cfg_oen_qs;
  logic b_34_cfg_oen_wd;
  logic b_34_cfg_oen_we;
  logic b_34_cfg_puen_qs;
  logic b_34_cfg_puen_wd;
  logic b_34_cfg_puen_we;
  logic b_34_cfg_slw_qs;
  logic b_34_cfg_slw_wd;
  logic b_34_cfg_slw_we;
  logic b_34_cfg_smt_qs;
  logic b_34_cfg_smt_wd;
  logic b_34_cfg_smt_we;
  logic [1:0] b_34_mux_sel_qs;
  logic [1:0] b_34_mux_sel_wd;
  logic b_34_mux_sel_we;
  logic b_35_cfg_chip2pad_qs;
  logic b_35_cfg_chip2pad_wd;
  logic b_35_cfg_chip2pad_we;
  logic [1:0] b_35_cfg_drv_qs;
  logic [1:0] b_35_cfg_drv_wd;
  logic b_35_cfg_drv_we;
  logic b_35_cfg_oen_qs;
  logic b_35_cfg_oen_wd;
  logic b_35_cfg_oen_we;
  logic b_35_cfg_puen_qs;
  logic b_35_cfg_puen_wd;
  logic b_35_cfg_puen_we;
  logic b_35_cfg_slw_qs;
  logic b_35_cfg_slw_wd;
  logic b_35_cfg_slw_we;
  logic b_35_cfg_smt_qs;
  logic b_35_cfg_smt_wd;
  logic b_35_cfg_smt_we;
  logic [1:0] b_35_mux_sel_qs;
  logic [1:0] b_35_mux_sel_wd;
  logic b_35_mux_sel_we;
  logic b_36_cfg_chip2pad_qs;
  logic b_36_cfg_chip2pad_wd;
  logic b_36_cfg_chip2pad_we;
  logic [1:0] b_36_cfg_drv_qs;
  logic [1:0] b_36_cfg_drv_wd;
  logic b_36_cfg_drv_we;
  logic b_36_cfg_oen_qs;
  logic b_36_cfg_oen_wd;
  logic b_36_cfg_oen_we;
  logic b_36_cfg_puen_qs;
  logic b_36_cfg_puen_wd;
  logic b_36_cfg_puen_we;
  logic b_36_cfg_slw_qs;
  logic b_36_cfg_slw_wd;
  logic b_36_cfg_slw_we;
  logic b_36_cfg_smt_qs;
  logic b_36_cfg_smt_wd;
  logic b_36_cfg_smt_we;
  logic [1:0] b_36_mux_sel_qs;
  logic [1:0] b_36_mux_sel_wd;
  logic b_36_mux_sel_we;
  logic b_37_cfg_chip2pad_qs;
  logic b_37_cfg_chip2pad_wd;
  logic b_37_cfg_chip2pad_we;
  logic [1:0] b_37_cfg_drv_qs;
  logic [1:0] b_37_cfg_drv_wd;
  logic b_37_cfg_drv_we;
  logic b_37_cfg_oen_qs;
  logic b_37_cfg_oen_wd;
  logic b_37_cfg_oen_we;
  logic b_37_cfg_puen_qs;
  logic b_37_cfg_puen_wd;
  logic b_37_cfg_puen_we;
  logic b_37_cfg_slw_qs;
  logic b_37_cfg_slw_wd;
  logic b_37_cfg_slw_we;
  logic b_37_cfg_smt_qs;
  logic b_37_cfg_smt_wd;
  logic b_37_cfg_smt_we;
  logic [1:0] b_37_mux_sel_qs;
  logic [1:0] b_37_mux_sel_wd;
  logic b_37_mux_sel_we;
  logic b_38_cfg_chip2pad_qs;
  logic b_38_cfg_chip2pad_wd;
  logic b_38_cfg_chip2pad_we;
  logic [1:0] b_38_cfg_drv_qs;
  logic [1:0] b_38_cfg_drv_wd;
  logic b_38_cfg_drv_we;
  logic b_38_cfg_oen_qs;
  logic b_38_cfg_oen_wd;
  logic b_38_cfg_oen_we;
  logic b_38_cfg_puen_qs;
  logic b_38_cfg_puen_wd;
  logic b_38_cfg_puen_we;
  logic b_38_cfg_slw_qs;
  logic b_38_cfg_slw_wd;
  logic b_38_cfg_slw_we;
  logic b_38_cfg_smt_qs;
  logic b_38_cfg_smt_wd;
  logic b_38_cfg_smt_we;
  logic [1:0] b_38_mux_sel_qs;
  logic [1:0] b_38_mux_sel_wd;
  logic b_38_mux_sel_we;
  logic b_39_cfg_chip2pad_qs;
  logic b_39_cfg_chip2pad_wd;
  logic b_39_cfg_chip2pad_we;
  logic [1:0] b_39_cfg_drv_qs;
  logic [1:0] b_39_cfg_drv_wd;
  logic b_39_cfg_drv_we;
  logic b_39_cfg_oen_qs;
  logic b_39_cfg_oen_wd;
  logic b_39_cfg_oen_we;
  logic b_39_cfg_puen_qs;
  logic b_39_cfg_puen_wd;
  logic b_39_cfg_puen_we;
  logic b_39_cfg_slw_qs;
  logic b_39_cfg_slw_wd;
  logic b_39_cfg_slw_we;
  logic b_39_cfg_smt_qs;
  logic b_39_cfg_smt_wd;
  logic b_39_cfg_smt_we;
  logic [1:0] b_39_mux_sel_qs;
  logic [1:0] b_39_mux_sel_wd;
  logic b_39_mux_sel_we;
  logic b_40_cfg_chip2pad_qs;
  logic b_40_cfg_chip2pad_wd;
  logic b_40_cfg_chip2pad_we;
  logic [1:0] b_40_cfg_drv_qs;
  logic [1:0] b_40_cfg_drv_wd;
  logic b_40_cfg_drv_we;
  logic b_40_cfg_oen_qs;
  logic b_40_cfg_oen_wd;
  logic b_40_cfg_oen_we;
  logic b_40_cfg_puen_qs;
  logic b_40_cfg_puen_wd;
  logic b_40_cfg_puen_we;
  logic b_40_cfg_slw_qs;
  logic b_40_cfg_slw_wd;
  logic b_40_cfg_slw_we;
  logic b_40_cfg_smt_qs;
  logic b_40_cfg_smt_wd;
  logic b_40_cfg_smt_we;
  logic [1:0] b_40_mux_sel_qs;
  logic [1:0] b_40_mux_sel_wd;
  logic b_40_mux_sel_we;
  logic b_41_cfg_chip2pad_qs;
  logic b_41_cfg_chip2pad_wd;
  logic b_41_cfg_chip2pad_we;
  logic [1:0] b_41_cfg_drv_qs;
  logic [1:0] b_41_cfg_drv_wd;
  logic b_41_cfg_drv_we;
  logic b_41_cfg_oen_qs;
  logic b_41_cfg_oen_wd;
  logic b_41_cfg_oen_we;
  logic b_41_cfg_puen_qs;
  logic b_41_cfg_puen_wd;
  logic b_41_cfg_puen_we;
  logic b_41_cfg_slw_qs;
  logic b_41_cfg_slw_wd;
  logic b_41_cfg_slw_we;
  logic b_41_cfg_smt_qs;
  logic b_41_cfg_smt_wd;
  logic b_41_cfg_smt_we;
  logic [1:0] b_41_mux_sel_qs;
  logic [1:0] b_41_mux_sel_wd;
  logic b_41_mux_sel_we;
  logic b_42_cfg_chip2pad_qs;
  logic b_42_cfg_chip2pad_wd;
  logic b_42_cfg_chip2pad_we;
  logic [1:0] b_42_cfg_drv_qs;
  logic [1:0] b_42_cfg_drv_wd;
  logic b_42_cfg_drv_we;
  logic b_42_cfg_oen_qs;
  logic b_42_cfg_oen_wd;
  logic b_42_cfg_oen_we;
  logic b_42_cfg_puen_qs;
  logic b_42_cfg_puen_wd;
  logic b_42_cfg_puen_we;
  logic b_42_cfg_slw_qs;
  logic b_42_cfg_slw_wd;
  logic b_42_cfg_slw_we;
  logic b_42_cfg_smt_qs;
  logic b_42_cfg_smt_wd;
  logic b_42_cfg_smt_we;
  logic [1:0] b_42_mux_sel_qs;
  logic [1:0] b_42_mux_sel_wd;
  logic b_42_mux_sel_we;
  logic b_43_cfg_chip2pad_qs;
  logic b_43_cfg_chip2pad_wd;
  logic b_43_cfg_chip2pad_we;
  logic [1:0] b_43_cfg_drv_qs;
  logic [1:0] b_43_cfg_drv_wd;
  logic b_43_cfg_drv_we;
  logic b_43_cfg_oen_qs;
  logic b_43_cfg_oen_wd;
  logic b_43_cfg_oen_we;
  logic b_43_cfg_puen_qs;
  logic b_43_cfg_puen_wd;
  logic b_43_cfg_puen_we;
  logic b_43_cfg_slw_qs;
  logic b_43_cfg_slw_wd;
  logic b_43_cfg_slw_we;
  logic b_43_cfg_smt_qs;
  logic b_43_cfg_smt_wd;
  logic b_43_cfg_smt_we;
  logic [1:0] b_43_mux_sel_qs;
  logic [1:0] b_43_mux_sel_wd;
  logic b_43_mux_sel_we;
  logic b_44_cfg_chip2pad_qs;
  logic b_44_cfg_chip2pad_wd;
  logic b_44_cfg_chip2pad_we;
  logic [1:0] b_44_cfg_drv_qs;
  logic [1:0] b_44_cfg_drv_wd;
  logic b_44_cfg_drv_we;
  logic b_44_cfg_oen_qs;
  logic b_44_cfg_oen_wd;
  logic b_44_cfg_oen_we;
  logic b_44_cfg_puen_qs;
  logic b_44_cfg_puen_wd;
  logic b_44_cfg_puen_we;
  logic b_44_cfg_slw_qs;
  logic b_44_cfg_slw_wd;
  logic b_44_cfg_slw_we;
  logic b_44_cfg_smt_qs;
  logic b_44_cfg_smt_wd;
  logic b_44_cfg_smt_we;
  logic [1:0] b_44_mux_sel_qs;
  logic [1:0] b_44_mux_sel_wd;
  logic b_44_mux_sel_we;
  logic b_45_cfg_chip2pad_qs;
  logic b_45_cfg_chip2pad_wd;
  logic b_45_cfg_chip2pad_we;
  logic [1:0] b_45_cfg_drv_qs;
  logic [1:0] b_45_cfg_drv_wd;
  logic b_45_cfg_drv_we;
  logic b_45_cfg_oen_qs;
  logic b_45_cfg_oen_wd;
  logic b_45_cfg_oen_we;
  logic b_45_cfg_puen_qs;
  logic b_45_cfg_puen_wd;
  logic b_45_cfg_puen_we;
  logic b_45_cfg_slw_qs;
  logic b_45_cfg_slw_wd;
  logic b_45_cfg_slw_we;
  logic b_45_cfg_smt_qs;
  logic b_45_cfg_smt_wd;
  logic b_45_cfg_smt_we;
  logic [1:0] b_45_mux_sel_qs;
  logic [1:0] b_45_mux_sel_wd;
  logic b_45_mux_sel_we;
  logic b_46_cfg_chip2pad_qs;
  logic b_46_cfg_chip2pad_wd;
  logic b_46_cfg_chip2pad_we;
  logic [1:0] b_46_cfg_drv_qs;
  logic [1:0] b_46_cfg_drv_wd;
  logic b_46_cfg_drv_we;
  logic b_46_cfg_oen_qs;
  logic b_46_cfg_oen_wd;
  logic b_46_cfg_oen_we;
  logic b_46_cfg_puen_qs;
  logic b_46_cfg_puen_wd;
  logic b_46_cfg_puen_we;
  logic b_46_cfg_slw_qs;
  logic b_46_cfg_slw_wd;
  logic b_46_cfg_slw_we;
  logic b_46_cfg_smt_qs;
  logic b_46_cfg_smt_wd;
  logic b_46_cfg_smt_we;
  logic [1:0] b_46_mux_sel_qs;
  logic [1:0] b_46_mux_sel_wd;
  logic b_46_mux_sel_we;
  logic b_47_cfg_chip2pad_qs;
  logic b_47_cfg_chip2pad_wd;
  logic b_47_cfg_chip2pad_we;
  logic [1:0] b_47_cfg_drv_qs;
  logic [1:0] b_47_cfg_drv_wd;
  logic b_47_cfg_drv_we;
  logic b_47_cfg_oen_qs;
  logic b_47_cfg_oen_wd;
  logic b_47_cfg_oen_we;
  logic b_47_cfg_puen_qs;
  logic b_47_cfg_puen_wd;
  logic b_47_cfg_puen_we;
  logic b_47_cfg_slw_qs;
  logic b_47_cfg_slw_wd;
  logic b_47_cfg_slw_we;
  logic b_47_cfg_smt_qs;
  logic b_47_cfg_smt_wd;
  logic b_47_cfg_smt_we;
  logic [1:0] b_47_mux_sel_qs;
  logic [1:0] b_47_mux_sel_wd;
  logic b_47_mux_sel_we;
  logic ot_spi_00_cfg_chip2pad_qs;
  logic ot_spi_00_cfg_chip2pad_wd;
  logic ot_spi_00_cfg_chip2pad_we;
  logic [1:0] ot_spi_00_cfg_drv_qs;
  logic [1:0] ot_spi_00_cfg_drv_wd;
  logic ot_spi_00_cfg_drv_we;
  logic ot_spi_00_cfg_oen_qs;
  logic ot_spi_00_cfg_oen_wd;
  logic ot_spi_00_cfg_oen_we;
  logic ot_spi_00_cfg_puen_qs;
  logic ot_spi_00_cfg_puen_wd;
  logic ot_spi_00_cfg_puen_we;
  logic ot_spi_00_cfg_slw_qs;
  logic ot_spi_00_cfg_slw_wd;
  logic ot_spi_00_cfg_slw_we;
  logic ot_spi_00_cfg_smt_qs;
  logic ot_spi_00_cfg_smt_wd;
  logic ot_spi_00_cfg_smt_we;
  logic ot_spi_00_mux_sel_qs;
  logic ot_spi_00_mux_sel_wd;
  logic ot_spi_00_mux_sel_we;
  logic ot_spi_01_cfg_chip2pad_qs;
  logic ot_spi_01_cfg_chip2pad_wd;
  logic ot_spi_01_cfg_chip2pad_we;
  logic [1:0] ot_spi_01_cfg_drv_qs;
  logic [1:0] ot_spi_01_cfg_drv_wd;
  logic ot_spi_01_cfg_drv_we;
  logic ot_spi_01_cfg_oen_qs;
  logic ot_spi_01_cfg_oen_wd;
  logic ot_spi_01_cfg_oen_we;
  logic ot_spi_01_cfg_puen_qs;
  logic ot_spi_01_cfg_puen_wd;
  logic ot_spi_01_cfg_puen_we;
  logic ot_spi_01_cfg_slw_qs;
  logic ot_spi_01_cfg_slw_wd;
  logic ot_spi_01_cfg_slw_we;
  logic ot_spi_01_cfg_smt_qs;
  logic ot_spi_01_cfg_smt_wd;
  logic ot_spi_01_cfg_smt_we;
  logic ot_spi_01_mux_sel_qs;
  logic ot_spi_01_mux_sel_wd;
  logic ot_spi_01_mux_sel_we;
  logic ot_spi_02_cfg_chip2pad_qs;
  logic ot_spi_02_cfg_chip2pad_wd;
  logic ot_spi_02_cfg_chip2pad_we;
  logic [1:0] ot_spi_02_cfg_drv_qs;
  logic [1:0] ot_spi_02_cfg_drv_wd;
  logic ot_spi_02_cfg_drv_we;
  logic ot_spi_02_cfg_oen_qs;
  logic ot_spi_02_cfg_oen_wd;
  logic ot_spi_02_cfg_oen_we;
  logic ot_spi_02_cfg_puen_qs;
  logic ot_spi_02_cfg_puen_wd;
  logic ot_spi_02_cfg_puen_we;
  logic ot_spi_02_cfg_slw_qs;
  logic ot_spi_02_cfg_slw_wd;
  logic ot_spi_02_cfg_slw_we;
  logic ot_spi_02_cfg_smt_qs;
  logic ot_spi_02_cfg_smt_wd;
  logic ot_spi_02_cfg_smt_we;
  logic ot_spi_02_mux_sel_qs;
  logic ot_spi_02_mux_sel_wd;
  logic ot_spi_02_mux_sel_we;
  logic ot_spi_03_cfg_chip2pad_qs;
  logic ot_spi_03_cfg_chip2pad_wd;
  logic ot_spi_03_cfg_chip2pad_we;
  logic [1:0] ot_spi_03_cfg_drv_qs;
  logic [1:0] ot_spi_03_cfg_drv_wd;
  logic ot_spi_03_cfg_drv_we;
  logic ot_spi_03_cfg_oen_qs;
  logic ot_spi_03_cfg_oen_wd;
  logic ot_spi_03_cfg_oen_we;
  logic ot_spi_03_cfg_puen_qs;
  logic ot_spi_03_cfg_puen_wd;
  logic ot_spi_03_cfg_puen_we;
  logic ot_spi_03_cfg_slw_qs;
  logic ot_spi_03_cfg_slw_wd;
  logic ot_spi_03_cfg_slw_we;
  logic ot_spi_03_cfg_smt_qs;
  logic ot_spi_03_cfg_smt_wd;
  logic ot_spi_03_cfg_smt_we;
  logic ot_spi_03_mux_sel_qs;
  logic ot_spi_03_mux_sel_wd;
  logic ot_spi_03_mux_sel_we;

  // Register instances
  // R[a_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_00_cfg_chip2pad_we),
    .wd     (a_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_00_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_00_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_00_cfg_drv_we),
    .wd     (a_00_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_00_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_00_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_00_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_00_cfg_oen_we),
    .wd     (a_00_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_00_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_00_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_00_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_00_cfg_puen_we),
    .wd     (a_00_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_00_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_00_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_00_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_00_cfg_slw_we),
    .wd     (a_00_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_00_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_00_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_00_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_00_cfg_smt_we),
    .wd     (a_00_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_00_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_00_cfg_smt_qs)
  );


  // R[a_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_00_mux_sel_we),
    .wd     (a_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_00_mux_sel.q ),

    // to register interface (read)
    .qs     (a_00_mux_sel_qs)
  );


  // R[a_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_01_cfg_chip2pad_we),
    .wd     (a_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_01_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_01_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_01_cfg_drv_we),
    .wd     (a_01_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_01_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_01_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_01_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_01_cfg_oen_we),
    .wd     (a_01_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_01_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_01_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_01_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_01_cfg_puen_we),
    .wd     (a_01_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_01_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_01_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_01_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_01_cfg_slw_we),
    .wd     (a_01_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_01_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_01_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_01_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_01_cfg_smt_we),
    .wd     (a_01_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_01_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_01_cfg_smt_qs)
  );


  // R[a_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_01_mux_sel_we),
    .wd     (a_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_01_mux_sel.q ),

    // to register interface (read)
    .qs     (a_01_mux_sel_qs)
  );


  // R[a_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_02_cfg_chip2pad_we),
    .wd     (a_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_02_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_02_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_02_cfg_drv_we),
    .wd     (a_02_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_02_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_02_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_02_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_02_cfg_oen_we),
    .wd     (a_02_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_02_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_02_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_02_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_02_cfg_puen_we),
    .wd     (a_02_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_02_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_02_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_02_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_02_cfg_slw_we),
    .wd     (a_02_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_02_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_02_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_02_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_02_cfg_smt_we),
    .wd     (a_02_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_02_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_02_cfg_smt_qs)
  );


  // R[a_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_02_mux_sel_we),
    .wd     (a_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_02_mux_sel.q ),

    // to register interface (read)
    .qs     (a_02_mux_sel_qs)
  );


  // R[a_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_03_cfg_chip2pad_we),
    .wd     (a_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_03_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_03_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_03_cfg_drv_we),
    .wd     (a_03_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_03_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_03_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_03_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_03_cfg_oen_we),
    .wd     (a_03_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_03_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_03_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_03_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_03_cfg_puen_we),
    .wd     (a_03_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_03_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_03_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_03_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_03_cfg_slw_we),
    .wd     (a_03_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_03_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_03_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_03_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_03_cfg_smt_we),
    .wd     (a_03_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_03_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_03_cfg_smt_qs)
  );


  // R[a_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_03_mux_sel_we),
    .wd     (a_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_03_mux_sel.q ),

    // to register interface (read)
    .qs     (a_03_mux_sel_qs)
  );


  // R[a_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_04_cfg_chip2pad_we),
    .wd     (a_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_04_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_04_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_04_cfg_drv_we),
    .wd     (a_04_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_04_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_04_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_04_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_04_cfg_oen_we),
    .wd     (a_04_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_04_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_04_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_04_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_04_cfg_puen_we),
    .wd     (a_04_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_04_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_04_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_04_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_04_cfg_slw_we),
    .wd     (a_04_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_04_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_04_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_04_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_04_cfg_smt_we),
    .wd     (a_04_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_04_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_04_cfg_smt_qs)
  );


  // R[a_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_04_mux_sel_we),
    .wd     (a_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_04_mux_sel.q ),

    // to register interface (read)
    .qs     (a_04_mux_sel_qs)
  );


  // R[a_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_05_cfg_chip2pad_we),
    .wd     (a_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_05_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_05_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_05_cfg_drv_we),
    .wd     (a_05_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_05_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_05_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_05_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_05_cfg_oen_we),
    .wd     (a_05_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_05_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_05_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_05_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_05_cfg_puen_we),
    .wd     (a_05_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_05_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_05_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_05_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_05_cfg_slw_we),
    .wd     (a_05_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_05_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_05_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_05_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_05_cfg_smt_we),
    .wd     (a_05_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_05_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_05_cfg_smt_qs)
  );


  // R[a_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_05_mux_sel_we),
    .wd     (a_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_05_mux_sel.q ),

    // to register interface (read)
    .qs     (a_05_mux_sel_qs)
  );


  // R[a_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_06_cfg_chip2pad_we),
    .wd     (a_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_06_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_06_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_06_cfg_drv_we),
    .wd     (a_06_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_06_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_06_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_06_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_06_cfg_oen_we),
    .wd     (a_06_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_06_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_06_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_06_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_06_cfg_puen_we),
    .wd     (a_06_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_06_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_06_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_06_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_06_cfg_slw_we),
    .wd     (a_06_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_06_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_06_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_06_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_06_cfg_smt_we),
    .wd     (a_06_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_06_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_06_cfg_smt_qs)
  );


  // R[a_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_06_mux_sel_we),
    .wd     (a_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_06_mux_sel.q ),

    // to register interface (read)
    .qs     (a_06_mux_sel_qs)
  );


  // R[a_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_07_cfg_chip2pad_we),
    .wd     (a_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_07_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_07_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_07_cfg_drv_we),
    .wd     (a_07_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_07_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_07_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_07_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_07_cfg_oen_we),
    .wd     (a_07_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_07_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_07_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_07_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_07_cfg_puen_we),
    .wd     (a_07_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_07_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_07_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_07_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_07_cfg_slw_we),
    .wd     (a_07_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_07_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_07_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_07_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_07_cfg_smt_we),
    .wd     (a_07_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_07_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_07_cfg_smt_qs)
  );


  // R[a_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_07_mux_sel_we),
    .wd     (a_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_07_mux_sel.q ),

    // to register interface (read)
    .qs     (a_07_mux_sel_qs)
  );


  // R[a_08_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_08_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_08_cfg_chip2pad_we),
    .wd     (a_08_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_08_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_08_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_08_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_08_cfg_drv_we),
    .wd     (a_08_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_08_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_08_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_08_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_08_cfg_oen_we),
    .wd     (a_08_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_08_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_08_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_08_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_08_cfg_puen_we),
    .wd     (a_08_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_08_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_08_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_08_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_08_cfg_slw_we),
    .wd     (a_08_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_08_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_08_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_08_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_08_cfg_smt_we),
    .wd     (a_08_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_08_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_08_cfg_smt_qs)
  );


  // R[a_08_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_08_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_08_mux_sel_we),
    .wd     (a_08_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_08_mux_sel.q ),

    // to register interface (read)
    .qs     (a_08_mux_sel_qs)
  );


  // R[a_09_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_09_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_09_cfg_chip2pad_we),
    .wd     (a_09_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_09_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_09_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_09_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_09_cfg_drv_we),
    .wd     (a_09_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_09_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_09_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_09_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_09_cfg_oen_we),
    .wd     (a_09_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_09_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_09_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_09_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_09_cfg_puen_we),
    .wd     (a_09_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_09_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_09_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_09_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_09_cfg_slw_we),
    .wd     (a_09_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_09_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_09_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_09_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_09_cfg_smt_we),
    .wd     (a_09_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_09_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_09_cfg_smt_qs)
  );


  // R[a_09_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_09_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_09_mux_sel_we),
    .wd     (a_09_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_09_mux_sel.q ),

    // to register interface (read)
    .qs     (a_09_mux_sel_qs)
  );


  // R[a_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_10_cfg_chip2pad_we),
    .wd     (a_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_10_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_10_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_10_cfg_drv_we),
    .wd     (a_10_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_10_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_10_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_10_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_10_cfg_oen_we),
    .wd     (a_10_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_10_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_10_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_10_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_10_cfg_puen_we),
    .wd     (a_10_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_10_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_10_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_10_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_10_cfg_slw_we),
    .wd     (a_10_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_10_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_10_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_10_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_10_cfg_smt_we),
    .wd     (a_10_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_10_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_10_cfg_smt_qs)
  );


  // R[a_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_10_mux_sel_we),
    .wd     (a_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_10_mux_sel.q ),

    // to register interface (read)
    .qs     (a_10_mux_sel_qs)
  );


  // R[a_11_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_11_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_11_cfg_chip2pad_we),
    .wd     (a_11_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_11_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_11_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_11_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_11_cfg_drv_we),
    .wd     (a_11_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_11_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_11_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_11_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_11_cfg_oen_we),
    .wd     (a_11_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_11_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_11_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_11_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_11_cfg_puen_we),
    .wd     (a_11_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_11_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_11_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_11_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_11_cfg_slw_we),
    .wd     (a_11_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_11_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_11_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_11_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_11_cfg_smt_we),
    .wd     (a_11_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_11_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_11_cfg_smt_qs)
  );


  // R[a_11_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_11_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_11_mux_sel_we),
    .wd     (a_11_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_11_mux_sel.q ),

    // to register interface (read)
    .qs     (a_11_mux_sel_qs)
  );


  // R[a_12_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_12_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_12_cfg_chip2pad_we),
    .wd     (a_12_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_12_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_12_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_12_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_12_cfg_drv_we),
    .wd     (a_12_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_12_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_12_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_12_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_12_cfg_oen_we),
    .wd     (a_12_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_12_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_12_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_12_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_12_cfg_puen_we),
    .wd     (a_12_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_12_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_12_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_12_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_12_cfg_slw_we),
    .wd     (a_12_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_12_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_12_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_12_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_12_cfg_smt_we),
    .wd     (a_12_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_12_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_12_cfg_smt_qs)
  );


  // R[a_12_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_12_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_12_mux_sel_we),
    .wd     (a_12_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_12_mux_sel.q ),

    // to register interface (read)
    .qs     (a_12_mux_sel_qs)
  );


  // R[a_13_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_13_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_13_cfg_chip2pad_we),
    .wd     (a_13_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_13_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_13_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_13_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_13_cfg_drv_we),
    .wd     (a_13_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_13_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_13_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_13_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_13_cfg_oen_we),
    .wd     (a_13_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_13_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_13_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_13_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_13_cfg_puen_we),
    .wd     (a_13_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_13_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_13_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_13_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_13_cfg_slw_we),
    .wd     (a_13_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_13_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_13_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_13_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_13_cfg_smt_we),
    .wd     (a_13_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_13_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_13_cfg_smt_qs)
  );


  // R[a_13_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_13_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_13_mux_sel_we),
    .wd     (a_13_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_13_mux_sel.q ),

    // to register interface (read)
    .qs     (a_13_mux_sel_qs)
  );


  // R[a_14_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_14_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_14_cfg_chip2pad_we),
    .wd     (a_14_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_14_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_14_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_14_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_14_cfg_drv_we),
    .wd     (a_14_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_14_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_14_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_14_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_14_cfg_oen_we),
    .wd     (a_14_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_14_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_14_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_14_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_14_cfg_puen_we),
    .wd     (a_14_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_14_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_14_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_14_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_14_cfg_slw_we),
    .wd     (a_14_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_14_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_14_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_14_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_14_cfg_smt_we),
    .wd     (a_14_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_14_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_14_cfg_smt_qs)
  );


  // R[a_14_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_14_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_14_mux_sel_we),
    .wd     (a_14_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_14_mux_sel.q ),

    // to register interface (read)
    .qs     (a_14_mux_sel_qs)
  );


  // R[a_15_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_15_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_15_cfg_chip2pad_we),
    .wd     (a_15_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_15_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_15_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_15_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_15_cfg_drv_we),
    .wd     (a_15_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_15_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_15_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_15_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_15_cfg_oen_we),
    .wd     (a_15_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_15_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_15_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_15_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_15_cfg_puen_we),
    .wd     (a_15_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_15_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_15_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_15_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_15_cfg_slw_we),
    .wd     (a_15_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_15_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_15_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_15_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_15_cfg_smt_we),
    .wd     (a_15_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_15_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_15_cfg_smt_qs)
  );


  // R[a_15_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_15_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_15_mux_sel_we),
    .wd     (a_15_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_15_mux_sel.q ),

    // to register interface (read)
    .qs     (a_15_mux_sel_qs)
  );


  // R[a_16_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_16_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_16_cfg_chip2pad_we),
    .wd     (a_16_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_16_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_16_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_16_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_16_cfg_drv_we),
    .wd     (a_16_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_16_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_16_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_16_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_16_cfg_oen_we),
    .wd     (a_16_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_16_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_16_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_16_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_16_cfg_puen_we),
    .wd     (a_16_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_16_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_16_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_16_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_16_cfg_slw_we),
    .wd     (a_16_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_16_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_16_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_16_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_16_cfg_smt_we),
    .wd     (a_16_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_16_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_16_cfg_smt_qs)
  );


  // R[a_16_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_16_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_16_mux_sel_we),
    .wd     (a_16_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_16_mux_sel.q ),

    // to register interface (read)
    .qs     (a_16_mux_sel_qs)
  );


  // R[a_17_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_17_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_17_cfg_chip2pad_we),
    .wd     (a_17_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_17_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_17_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_17_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_17_cfg_drv_we),
    .wd     (a_17_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_17_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_17_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_17_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_17_cfg_oen_we),
    .wd     (a_17_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_17_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_17_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_17_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_17_cfg_puen_we),
    .wd     (a_17_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_17_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_17_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_17_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_17_cfg_slw_we),
    .wd     (a_17_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_17_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_17_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_17_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_17_cfg_smt_we),
    .wd     (a_17_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_17_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_17_cfg_smt_qs)
  );


  // R[a_17_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_17_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_17_mux_sel_we),
    .wd     (a_17_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_17_mux_sel.q ),

    // to register interface (read)
    .qs     (a_17_mux_sel_qs)
  );


  // R[a_18_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_18_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_18_cfg_chip2pad_we),
    .wd     (a_18_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_18_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_18_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_18_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_18_cfg_drv_we),
    .wd     (a_18_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_18_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_18_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_18_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_18_cfg_oen_we),
    .wd     (a_18_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_18_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_18_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_18_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_18_cfg_puen_we),
    .wd     (a_18_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_18_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_18_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_18_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_18_cfg_slw_we),
    .wd     (a_18_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_18_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_18_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_18_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_18_cfg_smt_we),
    .wd     (a_18_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_18_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_18_cfg_smt_qs)
  );


  // R[a_18_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_18_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_18_mux_sel_we),
    .wd     (a_18_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_18_mux_sel.q ),

    // to register interface (read)
    .qs     (a_18_mux_sel_qs)
  );


  // R[a_19_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_19_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_19_cfg_chip2pad_we),
    .wd     (a_19_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_19_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_19_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_19_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_19_cfg_drv_we),
    .wd     (a_19_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_19_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_19_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_19_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_19_cfg_oen_we),
    .wd     (a_19_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_19_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_19_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_19_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_19_cfg_puen_we),
    .wd     (a_19_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_19_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_19_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_19_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_19_cfg_slw_we),
    .wd     (a_19_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_19_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_19_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_19_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_19_cfg_smt_we),
    .wd     (a_19_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_19_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_19_cfg_smt_qs)
  );


  // R[a_19_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_19_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_19_mux_sel_we),
    .wd     (a_19_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_19_mux_sel.q ),

    // to register interface (read)
    .qs     (a_19_mux_sel_qs)
  );


  // R[a_20_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_20_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_20_cfg_chip2pad_we),
    .wd     (a_20_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_20_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_20_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_20_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_20_cfg_drv_we),
    .wd     (a_20_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_20_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_20_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_20_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_20_cfg_oen_we),
    .wd     (a_20_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_20_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_20_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_20_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_20_cfg_puen_we),
    .wd     (a_20_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_20_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_20_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_20_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_20_cfg_slw_we),
    .wd     (a_20_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_20_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_20_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_20_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_20_cfg_smt_we),
    .wd     (a_20_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_20_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_20_cfg_smt_qs)
  );


  // R[a_20_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_20_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_20_mux_sel_we),
    .wd     (a_20_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_20_mux_sel.q ),

    // to register interface (read)
    .qs     (a_20_mux_sel_qs)
  );


  // R[a_21_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_21_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_21_cfg_chip2pad_we),
    .wd     (a_21_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_21_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_21_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_21_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_21_cfg_drv_we),
    .wd     (a_21_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_21_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_21_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_21_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_21_cfg_oen_we),
    .wd     (a_21_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_21_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_21_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_21_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_21_cfg_puen_we),
    .wd     (a_21_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_21_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_21_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_21_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_21_cfg_slw_we),
    .wd     (a_21_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_21_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_21_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_21_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_21_cfg_smt_we),
    .wd     (a_21_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_21_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_21_cfg_smt_qs)
  );


  // R[a_21_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_21_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_21_mux_sel_we),
    .wd     (a_21_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_21_mux_sel.q ),

    // to register interface (read)
    .qs     (a_21_mux_sel_qs)
  );


  // R[a_22_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_22_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_22_cfg_chip2pad_we),
    .wd     (a_22_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_22_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_22_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_22_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_22_cfg_drv_we),
    .wd     (a_22_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_22_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_22_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_22_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_22_cfg_oen_we),
    .wd     (a_22_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_22_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_22_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_22_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_22_cfg_puen_we),
    .wd     (a_22_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_22_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_22_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_22_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_22_cfg_slw_we),
    .wd     (a_22_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_22_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_22_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_22_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_22_cfg_smt_we),
    .wd     (a_22_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_22_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_22_cfg_smt_qs)
  );


  // R[a_22_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_22_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_22_mux_sel_we),
    .wd     (a_22_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_22_mux_sel.q ),

    // to register interface (read)
    .qs     (a_22_mux_sel_qs)
  );


  // R[a_23_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_23_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_23_cfg_chip2pad_we),
    .wd     (a_23_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_23_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_23_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_23_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_23_cfg_drv_we),
    .wd     (a_23_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_23_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_23_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_23_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_23_cfg_oen_we),
    .wd     (a_23_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_23_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_23_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_23_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_23_cfg_puen_we),
    .wd     (a_23_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_23_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_23_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_23_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_23_cfg_slw_we),
    .wd     (a_23_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_23_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_23_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_23_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_23_cfg_smt_we),
    .wd     (a_23_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_23_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_23_cfg_smt_qs)
  );


  // R[a_23_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_23_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_23_mux_sel_we),
    .wd     (a_23_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_23_mux_sel.q ),

    // to register interface (read)
    .qs     (a_23_mux_sel_qs)
  );


  // R[a_24_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_24_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_24_cfg_chip2pad_we),
    .wd     (a_24_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_24_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_24_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_24_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_24_cfg_drv_we),
    .wd     (a_24_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_24_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_24_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_24_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_24_cfg_oen_we),
    .wd     (a_24_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_24_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_24_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_24_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_24_cfg_puen_we),
    .wd     (a_24_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_24_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_24_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_24_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_24_cfg_slw_we),
    .wd     (a_24_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_24_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_24_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_24_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_24_cfg_smt_we),
    .wd     (a_24_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_24_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_24_cfg_smt_qs)
  );


  // R[a_24_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_24_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_24_mux_sel_we),
    .wd     (a_24_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_24_mux_sel.q ),

    // to register interface (read)
    .qs     (a_24_mux_sel_qs)
  );


  // R[a_25_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_25_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_25_cfg_chip2pad_we),
    .wd     (a_25_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_25_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_25_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_25_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_25_cfg_drv_we),
    .wd     (a_25_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_25_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_25_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_25_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_25_cfg_oen_we),
    .wd     (a_25_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_25_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_25_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_25_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_25_cfg_puen_we),
    .wd     (a_25_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_25_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_25_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_25_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_25_cfg_slw_we),
    .wd     (a_25_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_25_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_25_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_25_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_25_cfg_smt_we),
    .wd     (a_25_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_25_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_25_cfg_smt_qs)
  );


  // R[a_25_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_25_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_25_mux_sel_we),
    .wd     (a_25_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_25_mux_sel.q ),

    // to register interface (read)
    .qs     (a_25_mux_sel_qs)
  );


  // R[a_26_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_26_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_26_cfg_chip2pad_we),
    .wd     (a_26_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_26_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_26_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_26_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_26_cfg_drv_we),
    .wd     (a_26_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_26_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_26_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_26_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_26_cfg_oen_we),
    .wd     (a_26_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_26_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_26_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_26_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_26_cfg_puen_we),
    .wd     (a_26_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_26_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_26_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_26_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_26_cfg_slw_we),
    .wd     (a_26_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_26_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_26_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_26_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_26_cfg_smt_we),
    .wd     (a_26_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_26_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_26_cfg_smt_qs)
  );


  // R[a_26_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_26_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_26_mux_sel_we),
    .wd     (a_26_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_26_mux_sel.q ),

    // to register interface (read)
    .qs     (a_26_mux_sel_qs)
  );


  // R[a_27_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_27_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_27_cfg_chip2pad_we),
    .wd     (a_27_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_27_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_27_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_27_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_27_cfg_drv_we),
    .wd     (a_27_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_27_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_27_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_27_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_27_cfg_oen_we),
    .wd     (a_27_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_27_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_27_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_27_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_27_cfg_puen_we),
    .wd     (a_27_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_27_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_27_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_27_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_27_cfg_slw_we),
    .wd     (a_27_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_27_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_27_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_27_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_27_cfg_smt_we),
    .wd     (a_27_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_27_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_27_cfg_smt_qs)
  );


  // R[a_27_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_27_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_27_mux_sel_we),
    .wd     (a_27_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_27_mux_sel.q ),

    // to register interface (read)
    .qs     (a_27_mux_sel_qs)
  );


  // R[a_28_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_28_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_28_cfg_chip2pad_we),
    .wd     (a_28_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_28_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_28_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_28_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_28_cfg_drv_we),
    .wd     (a_28_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_28_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_28_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_28_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_28_cfg_oen_we),
    .wd     (a_28_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_28_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_28_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_28_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_28_cfg_puen_we),
    .wd     (a_28_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_28_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_28_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_28_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_28_cfg_slw_we),
    .wd     (a_28_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_28_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_28_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_28_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_28_cfg_smt_we),
    .wd     (a_28_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_28_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_28_cfg_smt_qs)
  );


  // R[a_28_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_28_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_28_mux_sel_we),
    .wd     (a_28_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_28_mux_sel.q ),

    // to register interface (read)
    .qs     (a_28_mux_sel_qs)
  );


  // R[a_29_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_29_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_29_cfg_chip2pad_we),
    .wd     (a_29_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_29_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (a_29_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_a_29_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_29_cfg_drv_we),
    .wd     (a_29_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_29_cfg.drv.q ),

    // to register interface (read)
    .qs     (a_29_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_29_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_29_cfg_oen_we),
    .wd     (a_29_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_29_cfg.oen.q ),

    // to register interface (read)
    .qs     (a_29_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_a_29_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_29_cfg_puen_we),
    .wd     (a_29_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_29_cfg.puen.q ),

    // to register interface (read)
    .qs     (a_29_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_29_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_29_cfg_slw_we),
    .wd     (a_29_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_29_cfg.slw.q ),

    // to register interface (read)
    .qs     (a_29_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_a_29_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_29_cfg_smt_we),
    .wd     (a_29_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_29_cfg.smt.q ),

    // to register interface (read)
    .qs     (a_29_cfg_smt_qs)
  );


  // R[a_29_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_a_29_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (a_29_mux_sel_we),
    .wd     (a_29_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.a_29_mux_sel.q ),

    // to register interface (read)
    .qs     (a_29_mux_sel_qs)
  );


  // R[b_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_00_cfg_chip2pad_we),
    .wd     (b_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_00_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_00_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_00_cfg_drv_we),
    .wd     (b_00_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_00_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_00_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_00_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_00_cfg_oen_we),
    .wd     (b_00_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_00_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_00_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_00_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_00_cfg_puen_we),
    .wd     (b_00_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_00_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_00_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_00_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_00_cfg_slw_we),
    .wd     (b_00_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_00_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_00_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_00_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_00_cfg_smt_we),
    .wd     (b_00_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_00_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_00_cfg_smt_qs)
  );


  // R[b_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_00_mux_sel_we),
    .wd     (b_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_00_mux_sel.q ),

    // to register interface (read)
    .qs     (b_00_mux_sel_qs)
  );


  // R[b_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_01_cfg_chip2pad_we),
    .wd     (b_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_01_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_01_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_01_cfg_drv_we),
    .wd     (b_01_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_01_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_01_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_01_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_01_cfg_oen_we),
    .wd     (b_01_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_01_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_01_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_01_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_01_cfg_puen_we),
    .wd     (b_01_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_01_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_01_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_01_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_01_cfg_slw_we),
    .wd     (b_01_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_01_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_01_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_01_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_01_cfg_smt_we),
    .wd     (b_01_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_01_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_01_cfg_smt_qs)
  );


  // R[b_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_01_mux_sel_we),
    .wd     (b_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_01_mux_sel.q ),

    // to register interface (read)
    .qs     (b_01_mux_sel_qs)
  );


  // R[b_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_02_cfg_chip2pad_we),
    .wd     (b_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_02_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_02_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_02_cfg_drv_we),
    .wd     (b_02_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_02_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_02_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_02_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_02_cfg_oen_we),
    .wd     (b_02_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_02_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_02_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_02_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_02_cfg_puen_we),
    .wd     (b_02_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_02_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_02_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_02_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_02_cfg_slw_we),
    .wd     (b_02_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_02_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_02_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_02_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_02_cfg_smt_we),
    .wd     (b_02_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_02_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_02_cfg_smt_qs)
  );


  // R[b_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_02_mux_sel_we),
    .wd     (b_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_02_mux_sel.q ),

    // to register interface (read)
    .qs     (b_02_mux_sel_qs)
  );


  // R[b_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_03_cfg_chip2pad_we),
    .wd     (b_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_03_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_03_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_03_cfg_drv_we),
    .wd     (b_03_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_03_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_03_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_03_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_03_cfg_oen_we),
    .wd     (b_03_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_03_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_03_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_03_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_03_cfg_puen_we),
    .wd     (b_03_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_03_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_03_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_03_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_03_cfg_slw_we),
    .wd     (b_03_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_03_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_03_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_03_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_03_cfg_smt_we),
    .wd     (b_03_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_03_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_03_cfg_smt_qs)
  );


  // R[b_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_03_mux_sel_we),
    .wd     (b_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_03_mux_sel.q ),

    // to register interface (read)
    .qs     (b_03_mux_sel_qs)
  );


  // R[b_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_04_cfg_chip2pad_we),
    .wd     (b_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_04_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_04_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_04_cfg_drv_we),
    .wd     (b_04_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_04_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_04_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_04_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_04_cfg_oen_we),
    .wd     (b_04_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_04_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_04_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_04_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_04_cfg_puen_we),
    .wd     (b_04_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_04_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_04_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_04_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_04_cfg_slw_we),
    .wd     (b_04_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_04_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_04_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_04_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_04_cfg_smt_we),
    .wd     (b_04_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_04_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_04_cfg_smt_qs)
  );


  // R[b_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_04_mux_sel_we),
    .wd     (b_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_04_mux_sel.q ),

    // to register interface (read)
    .qs     (b_04_mux_sel_qs)
  );


  // R[b_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_05_cfg_chip2pad_we),
    .wd     (b_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_05_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_05_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_05_cfg_drv_we),
    .wd     (b_05_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_05_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_05_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_05_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_05_cfg_oen_we),
    .wd     (b_05_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_05_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_05_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_05_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_05_cfg_puen_we),
    .wd     (b_05_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_05_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_05_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_05_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_05_cfg_slw_we),
    .wd     (b_05_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_05_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_05_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_05_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_05_cfg_smt_we),
    .wd     (b_05_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_05_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_05_cfg_smt_qs)
  );


  // R[b_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_05_mux_sel_we),
    .wd     (b_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_05_mux_sel.q ),

    // to register interface (read)
    .qs     (b_05_mux_sel_qs)
  );


  // R[b_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_06_cfg_chip2pad_we),
    .wd     (b_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_06_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_06_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_06_cfg_drv_we),
    .wd     (b_06_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_06_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_06_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_06_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_06_cfg_oen_we),
    .wd     (b_06_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_06_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_06_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_06_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_06_cfg_puen_we),
    .wd     (b_06_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_06_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_06_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_06_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_06_cfg_slw_we),
    .wd     (b_06_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_06_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_06_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_06_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_06_cfg_smt_we),
    .wd     (b_06_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_06_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_06_cfg_smt_qs)
  );


  // R[b_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_06_mux_sel_we),
    .wd     (b_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_06_mux_sel.q ),

    // to register interface (read)
    .qs     (b_06_mux_sel_qs)
  );


  // R[b_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_07_cfg_chip2pad_we),
    .wd     (b_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_07_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_07_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_07_cfg_drv_we),
    .wd     (b_07_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_07_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_07_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_07_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_07_cfg_oen_we),
    .wd     (b_07_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_07_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_07_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_07_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_07_cfg_puen_we),
    .wd     (b_07_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_07_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_07_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_07_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_07_cfg_slw_we),
    .wd     (b_07_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_07_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_07_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_07_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_07_cfg_smt_we),
    .wd     (b_07_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_07_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_07_cfg_smt_qs)
  );


  // R[b_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_07_mux_sel_we),
    .wd     (b_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_07_mux_sel.q ),

    // to register interface (read)
    .qs     (b_07_mux_sel_qs)
  );


  // R[b_08_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_08_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_08_cfg_chip2pad_we),
    .wd     (b_08_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_08_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_08_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_08_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_08_cfg_drv_we),
    .wd     (b_08_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_08_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_08_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_08_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_08_cfg_oen_we),
    .wd     (b_08_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_08_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_08_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_08_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_08_cfg_puen_we),
    .wd     (b_08_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_08_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_08_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_08_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_08_cfg_slw_we),
    .wd     (b_08_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_08_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_08_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_08_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_08_cfg_smt_we),
    .wd     (b_08_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_08_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_08_cfg_smt_qs)
  );


  // R[b_08_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_08_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_08_mux_sel_we),
    .wd     (b_08_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_08_mux_sel.q ),

    // to register interface (read)
    .qs     (b_08_mux_sel_qs)
  );


  // R[b_09_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_09_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_09_cfg_chip2pad_we),
    .wd     (b_09_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_09_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_09_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_09_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_09_cfg_drv_we),
    .wd     (b_09_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_09_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_09_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_09_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_09_cfg_oen_we),
    .wd     (b_09_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_09_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_09_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_09_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_09_cfg_puen_we),
    .wd     (b_09_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_09_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_09_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_09_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_09_cfg_slw_we),
    .wd     (b_09_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_09_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_09_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_09_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_09_cfg_smt_we),
    .wd     (b_09_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_09_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_09_cfg_smt_qs)
  );


  // R[b_09_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_09_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_09_mux_sel_we),
    .wd     (b_09_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_09_mux_sel.q ),

    // to register interface (read)
    .qs     (b_09_mux_sel_qs)
  );


  // R[b_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_10_cfg_chip2pad_we),
    .wd     (b_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_10_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_10_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_10_cfg_drv_we),
    .wd     (b_10_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_10_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_10_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_10_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_10_cfg_oen_we),
    .wd     (b_10_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_10_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_10_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_10_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_10_cfg_puen_we),
    .wd     (b_10_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_10_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_10_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_10_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_10_cfg_slw_we),
    .wd     (b_10_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_10_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_10_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_10_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_10_cfg_smt_we),
    .wd     (b_10_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_10_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_10_cfg_smt_qs)
  );


  // R[b_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_10_mux_sel_we),
    .wd     (b_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_10_mux_sel.q ),

    // to register interface (read)
    .qs     (b_10_mux_sel_qs)
  );


  // R[b_11_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_11_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_11_cfg_chip2pad_we),
    .wd     (b_11_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_11_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_11_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_11_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_11_cfg_drv_we),
    .wd     (b_11_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_11_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_11_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_11_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_11_cfg_oen_we),
    .wd     (b_11_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_11_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_11_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_11_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_11_cfg_puen_we),
    .wd     (b_11_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_11_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_11_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_11_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_11_cfg_slw_we),
    .wd     (b_11_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_11_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_11_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_11_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_11_cfg_smt_we),
    .wd     (b_11_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_11_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_11_cfg_smt_qs)
  );


  // R[b_11_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_11_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_11_mux_sel_we),
    .wd     (b_11_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_11_mux_sel.q ),

    // to register interface (read)
    .qs     (b_11_mux_sel_qs)
  );


  // R[b_12_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_12_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_12_cfg_chip2pad_we),
    .wd     (b_12_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_12_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_12_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_12_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_12_cfg_drv_we),
    .wd     (b_12_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_12_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_12_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_12_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_12_cfg_oen_we),
    .wd     (b_12_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_12_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_12_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_12_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_12_cfg_puen_we),
    .wd     (b_12_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_12_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_12_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_12_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_12_cfg_slw_we),
    .wd     (b_12_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_12_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_12_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_12_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_12_cfg_smt_we),
    .wd     (b_12_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_12_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_12_cfg_smt_qs)
  );


  // R[b_12_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_12_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_12_mux_sel_we),
    .wd     (b_12_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_12_mux_sel.q ),

    // to register interface (read)
    .qs     (b_12_mux_sel_qs)
  );


  // R[b_13_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_13_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_13_cfg_chip2pad_we),
    .wd     (b_13_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_13_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_13_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_13_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_13_cfg_drv_we),
    .wd     (b_13_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_13_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_13_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_13_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_13_cfg_oen_we),
    .wd     (b_13_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_13_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_13_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_13_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_13_cfg_puen_we),
    .wd     (b_13_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_13_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_13_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_13_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_13_cfg_slw_we),
    .wd     (b_13_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_13_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_13_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_13_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_13_cfg_smt_we),
    .wd     (b_13_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_13_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_13_cfg_smt_qs)
  );


  // R[b_13_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_13_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_13_mux_sel_we),
    .wd     (b_13_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_13_mux_sel.q ),

    // to register interface (read)
    .qs     (b_13_mux_sel_qs)
  );


  // R[b_14_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_14_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_14_cfg_chip2pad_we),
    .wd     (b_14_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_14_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_14_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_14_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_14_cfg_drv_we),
    .wd     (b_14_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_14_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_14_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_14_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_14_cfg_oen_we),
    .wd     (b_14_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_14_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_14_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_14_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_14_cfg_puen_we),
    .wd     (b_14_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_14_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_14_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_14_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_14_cfg_slw_we),
    .wd     (b_14_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_14_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_14_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_14_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_14_cfg_smt_we),
    .wd     (b_14_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_14_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_14_cfg_smt_qs)
  );


  // R[b_14_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_14_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_14_mux_sel_we),
    .wd     (b_14_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_14_mux_sel.q ),

    // to register interface (read)
    .qs     (b_14_mux_sel_qs)
  );


  // R[b_15_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_15_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_15_cfg_chip2pad_we),
    .wd     (b_15_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_15_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_15_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_15_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_15_cfg_drv_we),
    .wd     (b_15_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_15_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_15_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_15_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_15_cfg_oen_we),
    .wd     (b_15_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_15_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_15_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_15_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_15_cfg_puen_we),
    .wd     (b_15_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_15_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_15_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_15_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_15_cfg_slw_we),
    .wd     (b_15_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_15_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_15_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_15_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_15_cfg_smt_we),
    .wd     (b_15_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_15_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_15_cfg_smt_qs)
  );


  // R[b_15_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_15_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_15_mux_sel_we),
    .wd     (b_15_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_15_mux_sel.q ),

    // to register interface (read)
    .qs     (b_15_mux_sel_qs)
  );


  // R[b_16_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_16_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_16_cfg_chip2pad_we),
    .wd     (b_16_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_16_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_16_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_16_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_16_cfg_drv_we),
    .wd     (b_16_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_16_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_16_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_16_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_16_cfg_oen_we),
    .wd     (b_16_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_16_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_16_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_16_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_16_cfg_puen_we),
    .wd     (b_16_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_16_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_16_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_16_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_16_cfg_slw_we),
    .wd     (b_16_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_16_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_16_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_16_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_16_cfg_smt_we),
    .wd     (b_16_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_16_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_16_cfg_smt_qs)
  );


  // R[b_16_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_16_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_16_mux_sel_we),
    .wd     (b_16_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_16_mux_sel.q ),

    // to register interface (read)
    .qs     (b_16_mux_sel_qs)
  );


  // R[b_17_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_17_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_17_cfg_chip2pad_we),
    .wd     (b_17_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_17_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_17_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_17_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_17_cfg_drv_we),
    .wd     (b_17_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_17_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_17_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_17_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_17_cfg_oen_we),
    .wd     (b_17_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_17_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_17_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_17_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_17_cfg_puen_we),
    .wd     (b_17_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_17_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_17_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_17_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_17_cfg_slw_we),
    .wd     (b_17_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_17_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_17_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_17_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_17_cfg_smt_we),
    .wd     (b_17_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_17_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_17_cfg_smt_qs)
  );


  // R[b_17_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_17_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_17_mux_sel_we),
    .wd     (b_17_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_17_mux_sel.q ),

    // to register interface (read)
    .qs     (b_17_mux_sel_qs)
  );


  // R[b_18_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_18_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_18_cfg_chip2pad_we),
    .wd     (b_18_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_18_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_18_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_18_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_18_cfg_drv_we),
    .wd     (b_18_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_18_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_18_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_18_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_18_cfg_oen_we),
    .wd     (b_18_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_18_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_18_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_18_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_18_cfg_puen_we),
    .wd     (b_18_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_18_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_18_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_18_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_18_cfg_slw_we),
    .wd     (b_18_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_18_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_18_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_18_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_18_cfg_smt_we),
    .wd     (b_18_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_18_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_18_cfg_smt_qs)
  );


  // R[b_18_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_18_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_18_mux_sel_we),
    .wd     (b_18_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_18_mux_sel.q ),

    // to register interface (read)
    .qs     (b_18_mux_sel_qs)
  );


  // R[b_19_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_19_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_19_cfg_chip2pad_we),
    .wd     (b_19_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_19_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_19_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_19_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_19_cfg_drv_we),
    .wd     (b_19_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_19_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_19_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_19_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_19_cfg_oen_we),
    .wd     (b_19_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_19_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_19_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_19_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_19_cfg_puen_we),
    .wd     (b_19_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_19_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_19_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_19_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_19_cfg_slw_we),
    .wd     (b_19_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_19_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_19_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_19_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_19_cfg_smt_we),
    .wd     (b_19_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_19_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_19_cfg_smt_qs)
  );


  // R[b_19_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_19_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_19_mux_sel_we),
    .wd     (b_19_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_19_mux_sel.q ),

    // to register interface (read)
    .qs     (b_19_mux_sel_qs)
  );


  // R[b_20_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_20_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_20_cfg_chip2pad_we),
    .wd     (b_20_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_20_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_20_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_20_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_20_cfg_drv_we),
    .wd     (b_20_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_20_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_20_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_20_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_20_cfg_oen_we),
    .wd     (b_20_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_20_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_20_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_20_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_20_cfg_puen_we),
    .wd     (b_20_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_20_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_20_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_20_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_20_cfg_slw_we),
    .wd     (b_20_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_20_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_20_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_20_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_20_cfg_smt_we),
    .wd     (b_20_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_20_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_20_cfg_smt_qs)
  );


  // R[b_20_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_20_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_20_mux_sel_we),
    .wd     (b_20_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_20_mux_sel.q ),

    // to register interface (read)
    .qs     (b_20_mux_sel_qs)
  );


  // R[b_21_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_21_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_21_cfg_chip2pad_we),
    .wd     (b_21_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_21_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_21_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_21_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_21_cfg_drv_we),
    .wd     (b_21_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_21_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_21_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_21_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_21_cfg_oen_we),
    .wd     (b_21_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_21_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_21_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_21_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_21_cfg_puen_we),
    .wd     (b_21_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_21_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_21_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_21_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_21_cfg_slw_we),
    .wd     (b_21_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_21_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_21_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_21_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_21_cfg_smt_we),
    .wd     (b_21_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_21_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_21_cfg_smt_qs)
  );


  // R[b_21_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_21_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_21_mux_sel_we),
    .wd     (b_21_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_21_mux_sel.q ),

    // to register interface (read)
    .qs     (b_21_mux_sel_qs)
  );


  // R[b_22_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_22_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_22_cfg_chip2pad_we),
    .wd     (b_22_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_22_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_22_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_22_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_22_cfg_drv_we),
    .wd     (b_22_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_22_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_22_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_22_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_22_cfg_oen_we),
    .wd     (b_22_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_22_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_22_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_22_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_22_cfg_puen_we),
    .wd     (b_22_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_22_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_22_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_22_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_22_cfg_slw_we),
    .wd     (b_22_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_22_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_22_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_22_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_22_cfg_smt_we),
    .wd     (b_22_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_22_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_22_cfg_smt_qs)
  );


  // R[b_22_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_22_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_22_mux_sel_we),
    .wd     (b_22_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_22_mux_sel.q ),

    // to register interface (read)
    .qs     (b_22_mux_sel_qs)
  );


  // R[b_23_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_23_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_23_cfg_chip2pad_we),
    .wd     (b_23_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_23_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_23_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_23_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_23_cfg_drv_we),
    .wd     (b_23_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_23_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_23_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_23_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_23_cfg_oen_we),
    .wd     (b_23_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_23_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_23_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_23_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_23_cfg_puen_we),
    .wd     (b_23_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_23_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_23_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_23_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_23_cfg_slw_we),
    .wd     (b_23_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_23_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_23_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_23_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_23_cfg_smt_we),
    .wd     (b_23_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_23_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_23_cfg_smt_qs)
  );


  // R[b_23_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_23_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_23_mux_sel_we),
    .wd     (b_23_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_23_mux_sel.q ),

    // to register interface (read)
    .qs     (b_23_mux_sel_qs)
  );


  // R[b_24_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_24_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_24_cfg_chip2pad_we),
    .wd     (b_24_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_24_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_24_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_24_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_24_cfg_drv_we),
    .wd     (b_24_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_24_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_24_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_24_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_24_cfg_oen_we),
    .wd     (b_24_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_24_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_24_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_24_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_24_cfg_puen_we),
    .wd     (b_24_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_24_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_24_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_24_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_24_cfg_slw_we),
    .wd     (b_24_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_24_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_24_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_24_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_24_cfg_smt_we),
    .wd     (b_24_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_24_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_24_cfg_smt_qs)
  );


  // R[b_24_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_24_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_24_mux_sel_we),
    .wd     (b_24_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_24_mux_sel.q ),

    // to register interface (read)
    .qs     (b_24_mux_sel_qs)
  );


  // R[b_25_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_25_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_25_cfg_chip2pad_we),
    .wd     (b_25_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_25_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_25_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_25_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_25_cfg_drv_we),
    .wd     (b_25_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_25_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_25_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_25_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_25_cfg_oen_we),
    .wd     (b_25_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_25_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_25_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_25_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_25_cfg_puen_we),
    .wd     (b_25_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_25_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_25_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_25_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_25_cfg_slw_we),
    .wd     (b_25_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_25_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_25_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_25_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_25_cfg_smt_we),
    .wd     (b_25_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_25_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_25_cfg_smt_qs)
  );


  // R[b_25_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_25_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_25_mux_sel_we),
    .wd     (b_25_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_25_mux_sel.q ),

    // to register interface (read)
    .qs     (b_25_mux_sel_qs)
  );


  // R[b_26_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_26_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_26_cfg_chip2pad_we),
    .wd     (b_26_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_26_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_26_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_26_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_26_cfg_drv_we),
    .wd     (b_26_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_26_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_26_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_26_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_26_cfg_oen_we),
    .wd     (b_26_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_26_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_26_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_26_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_26_cfg_puen_we),
    .wd     (b_26_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_26_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_26_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_26_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_26_cfg_slw_we),
    .wd     (b_26_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_26_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_26_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_26_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_26_cfg_smt_we),
    .wd     (b_26_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_26_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_26_cfg_smt_qs)
  );


  // R[b_26_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_26_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_26_mux_sel_we),
    .wd     (b_26_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_26_mux_sel.q ),

    // to register interface (read)
    .qs     (b_26_mux_sel_qs)
  );


  // R[b_27_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_27_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_27_cfg_chip2pad_we),
    .wd     (b_27_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_27_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_27_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_27_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_27_cfg_drv_we),
    .wd     (b_27_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_27_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_27_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_27_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_27_cfg_oen_we),
    .wd     (b_27_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_27_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_27_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_27_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_27_cfg_puen_we),
    .wd     (b_27_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_27_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_27_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_27_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_27_cfg_slw_we),
    .wd     (b_27_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_27_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_27_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_27_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_27_cfg_smt_we),
    .wd     (b_27_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_27_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_27_cfg_smt_qs)
  );


  // R[b_27_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_27_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_27_mux_sel_we),
    .wd     (b_27_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_27_mux_sel.q ),

    // to register interface (read)
    .qs     (b_27_mux_sel_qs)
  );


  // R[b_28_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_28_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_28_cfg_chip2pad_we),
    .wd     (b_28_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_28_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_28_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_28_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_28_cfg_drv_we),
    .wd     (b_28_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_28_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_28_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_28_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_28_cfg_oen_we),
    .wd     (b_28_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_28_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_28_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_28_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_28_cfg_puen_we),
    .wd     (b_28_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_28_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_28_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_28_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_28_cfg_slw_we),
    .wd     (b_28_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_28_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_28_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_28_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_28_cfg_smt_we),
    .wd     (b_28_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_28_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_28_cfg_smt_qs)
  );


  // R[b_28_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_28_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_28_mux_sel_we),
    .wd     (b_28_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_28_mux_sel.q ),

    // to register interface (read)
    .qs     (b_28_mux_sel_qs)
  );


  // R[b_29_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_29_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_29_cfg_chip2pad_we),
    .wd     (b_29_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_29_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_29_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_29_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_29_cfg_drv_we),
    .wd     (b_29_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_29_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_29_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_29_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_29_cfg_oen_we),
    .wd     (b_29_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_29_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_29_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_29_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_29_cfg_puen_we),
    .wd     (b_29_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_29_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_29_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_29_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_29_cfg_slw_we),
    .wd     (b_29_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_29_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_29_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_29_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_29_cfg_smt_we),
    .wd     (b_29_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_29_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_29_cfg_smt_qs)
  );


  // R[b_29_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_29_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_29_mux_sel_we),
    .wd     (b_29_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_29_mux_sel.q ),

    // to register interface (read)
    .qs     (b_29_mux_sel_qs)
  );


  // R[b_30_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_30_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_30_cfg_chip2pad_we),
    .wd     (b_30_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_30_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_30_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_30_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_30_cfg_drv_we),
    .wd     (b_30_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_30_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_30_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_30_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_30_cfg_oen_we),
    .wd     (b_30_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_30_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_30_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_30_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_30_cfg_puen_we),
    .wd     (b_30_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_30_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_30_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_30_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_30_cfg_slw_we),
    .wd     (b_30_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_30_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_30_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_30_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_30_cfg_smt_we),
    .wd     (b_30_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_30_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_30_cfg_smt_qs)
  );


  // R[b_30_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_30_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_30_mux_sel_we),
    .wd     (b_30_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_30_mux_sel.q ),

    // to register interface (read)
    .qs     (b_30_mux_sel_qs)
  );


  // R[b_31_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_31_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_31_cfg_chip2pad_we),
    .wd     (b_31_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_31_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_31_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_31_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_31_cfg_drv_we),
    .wd     (b_31_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_31_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_31_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_31_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_31_cfg_oen_we),
    .wd     (b_31_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_31_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_31_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_31_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_31_cfg_puen_we),
    .wd     (b_31_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_31_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_31_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_31_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_31_cfg_slw_we),
    .wd     (b_31_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_31_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_31_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_31_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_31_cfg_smt_we),
    .wd     (b_31_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_31_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_31_cfg_smt_qs)
  );


  // R[b_31_mux_sel]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_b_31_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_31_mux_sel_we),
    .wd     (b_31_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_31_mux_sel.q ),

    // to register interface (read)
    .qs     (b_31_mux_sel_qs)
  );


  // R[b_32_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_32_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_32_cfg_chip2pad_we),
    .wd     (b_32_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_32_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_32_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_32_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_32_cfg_drv_we),
    .wd     (b_32_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_32_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_32_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_32_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_32_cfg_oen_we),
    .wd     (b_32_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_32_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_32_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_32_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_32_cfg_puen_we),
    .wd     (b_32_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_32_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_32_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_32_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_32_cfg_slw_we),
    .wd     (b_32_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_32_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_32_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_32_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_32_cfg_smt_we),
    .wd     (b_32_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_32_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_32_cfg_smt_qs)
  );


  // R[b_32_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_32_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_32_mux_sel_we),
    .wd     (b_32_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_32_mux_sel.q ),

    // to register interface (read)
    .qs     (b_32_mux_sel_qs)
  );


  // R[b_33_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_33_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_33_cfg_chip2pad_we),
    .wd     (b_33_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_33_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_33_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_33_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_33_cfg_drv_we),
    .wd     (b_33_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_33_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_33_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_33_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_33_cfg_oen_we),
    .wd     (b_33_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_33_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_33_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_33_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_33_cfg_puen_we),
    .wd     (b_33_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_33_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_33_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_33_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_33_cfg_slw_we),
    .wd     (b_33_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_33_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_33_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_33_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_33_cfg_smt_we),
    .wd     (b_33_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_33_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_33_cfg_smt_qs)
  );


  // R[b_33_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_33_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_33_mux_sel_we),
    .wd     (b_33_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_33_mux_sel.q ),

    // to register interface (read)
    .qs     (b_33_mux_sel_qs)
  );


  // R[b_34_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_34_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_34_cfg_chip2pad_we),
    .wd     (b_34_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_34_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_34_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_34_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_34_cfg_drv_we),
    .wd     (b_34_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_34_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_34_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_34_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_34_cfg_oen_we),
    .wd     (b_34_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_34_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_34_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_34_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_34_cfg_puen_we),
    .wd     (b_34_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_34_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_34_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_34_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_34_cfg_slw_we),
    .wd     (b_34_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_34_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_34_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_34_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_34_cfg_smt_we),
    .wd     (b_34_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_34_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_34_cfg_smt_qs)
  );


  // R[b_34_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_34_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_34_mux_sel_we),
    .wd     (b_34_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_34_mux_sel.q ),

    // to register interface (read)
    .qs     (b_34_mux_sel_qs)
  );


  // R[b_35_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_35_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_35_cfg_chip2pad_we),
    .wd     (b_35_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_35_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_35_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_35_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_35_cfg_drv_we),
    .wd     (b_35_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_35_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_35_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_35_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_35_cfg_oen_we),
    .wd     (b_35_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_35_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_35_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_35_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_35_cfg_puen_we),
    .wd     (b_35_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_35_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_35_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_35_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_35_cfg_slw_we),
    .wd     (b_35_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_35_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_35_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_35_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_35_cfg_smt_we),
    .wd     (b_35_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_35_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_35_cfg_smt_qs)
  );


  // R[b_35_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_35_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_35_mux_sel_we),
    .wd     (b_35_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_35_mux_sel.q ),

    // to register interface (read)
    .qs     (b_35_mux_sel_qs)
  );


  // R[b_36_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_36_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_36_cfg_chip2pad_we),
    .wd     (b_36_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_36_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_36_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_36_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_36_cfg_drv_we),
    .wd     (b_36_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_36_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_36_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_36_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_36_cfg_oen_we),
    .wd     (b_36_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_36_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_36_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_36_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_36_cfg_puen_we),
    .wd     (b_36_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_36_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_36_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_36_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_36_cfg_slw_we),
    .wd     (b_36_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_36_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_36_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_36_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_36_cfg_smt_we),
    .wd     (b_36_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_36_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_36_cfg_smt_qs)
  );


  // R[b_36_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_36_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_36_mux_sel_we),
    .wd     (b_36_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_36_mux_sel.q ),

    // to register interface (read)
    .qs     (b_36_mux_sel_qs)
  );


  // R[b_37_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_37_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_37_cfg_chip2pad_we),
    .wd     (b_37_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_37_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_37_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_37_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_37_cfg_drv_we),
    .wd     (b_37_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_37_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_37_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_37_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_37_cfg_oen_we),
    .wd     (b_37_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_37_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_37_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_37_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_37_cfg_puen_we),
    .wd     (b_37_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_37_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_37_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_37_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_37_cfg_slw_we),
    .wd     (b_37_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_37_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_37_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_37_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_37_cfg_smt_we),
    .wd     (b_37_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_37_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_37_cfg_smt_qs)
  );


  // R[b_37_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_37_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_37_mux_sel_we),
    .wd     (b_37_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_37_mux_sel.q ),

    // to register interface (read)
    .qs     (b_37_mux_sel_qs)
  );


  // R[b_38_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_38_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_38_cfg_chip2pad_we),
    .wd     (b_38_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_38_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_38_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_38_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_38_cfg_drv_we),
    .wd     (b_38_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_38_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_38_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_38_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_38_cfg_oen_we),
    .wd     (b_38_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_38_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_38_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_38_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_38_cfg_puen_we),
    .wd     (b_38_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_38_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_38_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_38_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_38_cfg_slw_we),
    .wd     (b_38_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_38_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_38_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_38_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_38_cfg_smt_we),
    .wd     (b_38_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_38_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_38_cfg_smt_qs)
  );


  // R[b_38_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_38_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_38_mux_sel_we),
    .wd     (b_38_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_38_mux_sel.q ),

    // to register interface (read)
    .qs     (b_38_mux_sel_qs)
  );


  // R[b_39_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_39_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_39_cfg_chip2pad_we),
    .wd     (b_39_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_39_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_39_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_39_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_39_cfg_drv_we),
    .wd     (b_39_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_39_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_39_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_39_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_39_cfg_oen_we),
    .wd     (b_39_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_39_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_39_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_39_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_39_cfg_puen_we),
    .wd     (b_39_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_39_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_39_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_39_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_39_cfg_slw_we),
    .wd     (b_39_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_39_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_39_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_39_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_39_cfg_smt_we),
    .wd     (b_39_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_39_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_39_cfg_smt_qs)
  );


  // R[b_39_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_39_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_39_mux_sel_we),
    .wd     (b_39_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_39_mux_sel.q ),

    // to register interface (read)
    .qs     (b_39_mux_sel_qs)
  );


  // R[b_40_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_40_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_40_cfg_chip2pad_we),
    .wd     (b_40_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_40_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_40_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_40_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_40_cfg_drv_we),
    .wd     (b_40_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_40_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_40_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_40_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_40_cfg_oen_we),
    .wd     (b_40_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_40_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_40_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_40_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_40_cfg_puen_we),
    .wd     (b_40_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_40_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_40_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_40_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_40_cfg_slw_we),
    .wd     (b_40_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_40_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_40_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_40_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_40_cfg_smt_we),
    .wd     (b_40_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_40_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_40_cfg_smt_qs)
  );


  // R[b_40_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_40_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_40_mux_sel_we),
    .wd     (b_40_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_40_mux_sel.q ),

    // to register interface (read)
    .qs     (b_40_mux_sel_qs)
  );


  // R[b_41_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_41_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_41_cfg_chip2pad_we),
    .wd     (b_41_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_41_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_41_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_41_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_41_cfg_drv_we),
    .wd     (b_41_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_41_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_41_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_41_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_41_cfg_oen_we),
    .wd     (b_41_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_41_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_41_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_41_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_41_cfg_puen_we),
    .wd     (b_41_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_41_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_41_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_41_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_41_cfg_slw_we),
    .wd     (b_41_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_41_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_41_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_41_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_41_cfg_smt_we),
    .wd     (b_41_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_41_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_41_cfg_smt_qs)
  );


  // R[b_41_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_41_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_41_mux_sel_we),
    .wd     (b_41_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_41_mux_sel.q ),

    // to register interface (read)
    .qs     (b_41_mux_sel_qs)
  );


  // R[b_42_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_42_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_42_cfg_chip2pad_we),
    .wd     (b_42_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_42_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_42_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_42_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_42_cfg_drv_we),
    .wd     (b_42_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_42_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_42_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_42_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_42_cfg_oen_we),
    .wd     (b_42_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_42_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_42_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_42_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_42_cfg_puen_we),
    .wd     (b_42_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_42_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_42_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_42_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_42_cfg_slw_we),
    .wd     (b_42_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_42_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_42_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_42_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_42_cfg_smt_we),
    .wd     (b_42_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_42_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_42_cfg_smt_qs)
  );


  // R[b_42_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_42_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_42_mux_sel_we),
    .wd     (b_42_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_42_mux_sel.q ),

    // to register interface (read)
    .qs     (b_42_mux_sel_qs)
  );


  // R[b_43_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_43_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_43_cfg_chip2pad_we),
    .wd     (b_43_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_43_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_43_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_43_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_43_cfg_drv_we),
    .wd     (b_43_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_43_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_43_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_43_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_43_cfg_oen_we),
    .wd     (b_43_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_43_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_43_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_43_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_43_cfg_puen_we),
    .wd     (b_43_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_43_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_43_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_43_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_43_cfg_slw_we),
    .wd     (b_43_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_43_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_43_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_43_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_43_cfg_smt_we),
    .wd     (b_43_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_43_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_43_cfg_smt_qs)
  );


  // R[b_43_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_43_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_43_mux_sel_we),
    .wd     (b_43_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_43_mux_sel.q ),

    // to register interface (read)
    .qs     (b_43_mux_sel_qs)
  );


  // R[b_44_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_44_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_44_cfg_chip2pad_we),
    .wd     (b_44_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_44_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_44_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_44_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_44_cfg_drv_we),
    .wd     (b_44_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_44_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_44_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_44_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_44_cfg_oen_we),
    .wd     (b_44_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_44_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_44_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_44_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_44_cfg_puen_we),
    .wd     (b_44_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_44_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_44_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_44_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_44_cfg_slw_we),
    .wd     (b_44_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_44_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_44_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_44_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_44_cfg_smt_we),
    .wd     (b_44_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_44_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_44_cfg_smt_qs)
  );


  // R[b_44_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_44_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_44_mux_sel_we),
    .wd     (b_44_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_44_mux_sel.q ),

    // to register interface (read)
    .qs     (b_44_mux_sel_qs)
  );


  // R[b_45_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_45_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_45_cfg_chip2pad_we),
    .wd     (b_45_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_45_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_45_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_45_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_45_cfg_drv_we),
    .wd     (b_45_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_45_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_45_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_45_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_45_cfg_oen_we),
    .wd     (b_45_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_45_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_45_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_45_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_45_cfg_puen_we),
    .wd     (b_45_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_45_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_45_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_45_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_45_cfg_slw_we),
    .wd     (b_45_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_45_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_45_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_45_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_45_cfg_smt_we),
    .wd     (b_45_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_45_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_45_cfg_smt_qs)
  );


  // R[b_45_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_45_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_45_mux_sel_we),
    .wd     (b_45_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_45_mux_sel.q ),

    // to register interface (read)
    .qs     (b_45_mux_sel_qs)
  );


  // R[b_46_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_46_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_46_cfg_chip2pad_we),
    .wd     (b_46_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_46_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_46_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_46_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_46_cfg_drv_we),
    .wd     (b_46_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_46_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_46_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_46_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_46_cfg_oen_we),
    .wd     (b_46_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_46_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_46_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_46_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_46_cfg_puen_we),
    .wd     (b_46_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_46_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_46_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_46_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_46_cfg_slw_we),
    .wd     (b_46_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_46_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_46_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_46_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_46_cfg_smt_we),
    .wd     (b_46_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_46_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_46_cfg_smt_qs)
  );


  // R[b_46_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_46_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_46_mux_sel_we),
    .wd     (b_46_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_46_mux_sel.q ),

    // to register interface (read)
    .qs     (b_46_mux_sel_qs)
  );


  // R[b_47_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_47_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_47_cfg_chip2pad_we),
    .wd     (b_47_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_47_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (b_47_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_47_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_47_cfg_drv_we),
    .wd     (b_47_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_47_cfg.drv.q ),

    // to register interface (read)
    .qs     (b_47_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_47_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_47_cfg_oen_we),
    .wd     (b_47_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_47_cfg.oen.q ),

    // to register interface (read)
    .qs     (b_47_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_b_47_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_47_cfg_puen_we),
    .wd     (b_47_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_47_cfg.puen.q ),

    // to register interface (read)
    .qs     (b_47_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_47_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_47_cfg_slw_we),
    .wd     (b_47_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_47_cfg.slw.q ),

    // to register interface (read)
    .qs     (b_47_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_b_47_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_47_cfg_smt_we),
    .wd     (b_47_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_47_cfg.smt.q ),

    // to register interface (read)
    .qs     (b_47_cfg_smt_qs)
  );


  // R[b_47_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_b_47_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (b_47_mux_sel_we),
    .wd     (b_47_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.b_47_mux_sel.q ),

    // to register interface (read)
    .qs     (b_47_mux_sel_qs)
  );


  // R[ot_spi_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_00_cfg_chip2pad_we),
    .wd     (ot_spi_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (ot_spi_00_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ot_spi_00_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_00_cfg_drv_we),
    .wd     (ot_spi_00_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_00_cfg.drv.q ),

    // to register interface (read)
    .qs     (ot_spi_00_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ot_spi_00_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_00_cfg_oen_we),
    .wd     (ot_spi_00_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_00_cfg.oen.q ),

    // to register interface (read)
    .qs     (ot_spi_00_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ot_spi_00_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_00_cfg_puen_we),
    .wd     (ot_spi_00_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_00_cfg.puen.q ),

    // to register interface (read)
    .qs     (ot_spi_00_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_00_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_00_cfg_slw_we),
    .wd     (ot_spi_00_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_00_cfg.slw.q ),

    // to register interface (read)
    .qs     (ot_spi_00_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_00_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_00_cfg_smt_we),
    .wd     (ot_spi_00_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_00_cfg.smt.q ),

    // to register interface (read)
    .qs     (ot_spi_00_cfg_smt_qs)
  );


  // R[ot_spi_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_00_mux_sel_we),
    .wd     (ot_spi_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_00_mux_sel.q ),

    // to register interface (read)
    .qs     (ot_spi_00_mux_sel_qs)
  );


  // R[ot_spi_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_01_cfg_chip2pad_we),
    .wd     (ot_spi_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (ot_spi_01_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ot_spi_01_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_01_cfg_drv_we),
    .wd     (ot_spi_01_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_01_cfg.drv.q ),

    // to register interface (read)
    .qs     (ot_spi_01_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ot_spi_01_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_01_cfg_oen_we),
    .wd     (ot_spi_01_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_01_cfg.oen.q ),

    // to register interface (read)
    .qs     (ot_spi_01_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ot_spi_01_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_01_cfg_puen_we),
    .wd     (ot_spi_01_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_01_cfg.puen.q ),

    // to register interface (read)
    .qs     (ot_spi_01_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_01_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_01_cfg_slw_we),
    .wd     (ot_spi_01_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_01_cfg.slw.q ),

    // to register interface (read)
    .qs     (ot_spi_01_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_01_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_01_cfg_smt_we),
    .wd     (ot_spi_01_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_01_cfg.smt.q ),

    // to register interface (read)
    .qs     (ot_spi_01_cfg_smt_qs)
  );


  // R[ot_spi_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_01_mux_sel_we),
    .wd     (ot_spi_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_01_mux_sel.q ),

    // to register interface (read)
    .qs     (ot_spi_01_mux_sel_qs)
  );


  // R[ot_spi_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_02_cfg_chip2pad_we),
    .wd     (ot_spi_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (ot_spi_02_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ot_spi_02_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_02_cfg_drv_we),
    .wd     (ot_spi_02_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_02_cfg.drv.q ),

    // to register interface (read)
    .qs     (ot_spi_02_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ot_spi_02_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_02_cfg_oen_we),
    .wd     (ot_spi_02_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_02_cfg.oen.q ),

    // to register interface (read)
    .qs     (ot_spi_02_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ot_spi_02_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_02_cfg_puen_we),
    .wd     (ot_spi_02_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_02_cfg.puen.q ),

    // to register interface (read)
    .qs     (ot_spi_02_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_02_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_02_cfg_slw_we),
    .wd     (ot_spi_02_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_02_cfg.slw.q ),

    // to register interface (read)
    .qs     (ot_spi_02_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_02_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_02_cfg_smt_we),
    .wd     (ot_spi_02_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_02_cfg.smt.q ),

    // to register interface (read)
    .qs     (ot_spi_02_cfg_smt_qs)
  );


  // R[ot_spi_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_02_mux_sel_we),
    .wd     (ot_spi_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_02_mux_sel.q ),

    // to register interface (read)
    .qs     (ot_spi_02_mux_sel_qs)
  );


  // R[ot_spi_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_03_cfg_chip2pad_we),
    .wd     (ot_spi_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (ot_spi_03_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ot_spi_03_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_03_cfg_drv_we),
    .wd     (ot_spi_03_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_03_cfg.drv.q ),

    // to register interface (read)
    .qs     (ot_spi_03_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ot_spi_03_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_03_cfg_oen_we),
    .wd     (ot_spi_03_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_03_cfg.oen.q ),

    // to register interface (read)
    .qs     (ot_spi_03_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ot_spi_03_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_03_cfg_puen_we),
    .wd     (ot_spi_03_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_03_cfg.puen.q ),

    // to register interface (read)
    .qs     (ot_spi_03_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_03_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_03_cfg_slw_we),
    .wd     (ot_spi_03_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_03_cfg.slw.q ),

    // to register interface (read)
    .qs     (ot_spi_03_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_03_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_03_cfg_smt_we),
    .wd     (ot_spi_03_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_03_cfg.smt.q ),

    // to register interface (read)
    .qs     (ot_spi_03_cfg_smt_qs)
  );


  // R[ot_spi_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ot_spi_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ot_spi_03_mux_sel_we),
    .wd     (ot_spi_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ot_spi_03_mux_sel.q ),

    // to register interface (read)
    .qs     (ot_spi_03_mux_sel_qs)
  );




  logic [163:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_00_CFG_OFFSET);
    addr_hit[  1] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_00_MUX_SEL_OFFSET);
    addr_hit[  2] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_01_CFG_OFFSET);
    addr_hit[  3] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_01_MUX_SEL_OFFSET);
    addr_hit[  4] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_02_CFG_OFFSET);
    addr_hit[  5] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_02_MUX_SEL_OFFSET);
    addr_hit[  6] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_03_CFG_OFFSET);
    addr_hit[  7] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_03_MUX_SEL_OFFSET);
    addr_hit[  8] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_04_CFG_OFFSET);
    addr_hit[  9] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_04_MUX_SEL_OFFSET);
    addr_hit[ 10] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_05_CFG_OFFSET);
    addr_hit[ 11] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_05_MUX_SEL_OFFSET);
    addr_hit[ 12] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_06_CFG_OFFSET);
    addr_hit[ 13] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_06_MUX_SEL_OFFSET);
    addr_hit[ 14] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_07_CFG_OFFSET);
    addr_hit[ 15] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_07_MUX_SEL_OFFSET);
    addr_hit[ 16] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_08_CFG_OFFSET);
    addr_hit[ 17] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_08_MUX_SEL_OFFSET);
    addr_hit[ 18] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_09_CFG_OFFSET);
    addr_hit[ 19] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_09_MUX_SEL_OFFSET);
    addr_hit[ 20] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_10_CFG_OFFSET);
    addr_hit[ 21] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_10_MUX_SEL_OFFSET);
    addr_hit[ 22] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_11_CFG_OFFSET);
    addr_hit[ 23] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_11_MUX_SEL_OFFSET);
    addr_hit[ 24] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_12_CFG_OFFSET);
    addr_hit[ 25] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_12_MUX_SEL_OFFSET);
    addr_hit[ 26] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_13_CFG_OFFSET);
    addr_hit[ 27] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_13_MUX_SEL_OFFSET);
    addr_hit[ 28] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_14_CFG_OFFSET);
    addr_hit[ 29] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_14_MUX_SEL_OFFSET);
    addr_hit[ 30] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_15_CFG_OFFSET);
    addr_hit[ 31] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_15_MUX_SEL_OFFSET);
    addr_hit[ 32] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_16_CFG_OFFSET);
    addr_hit[ 33] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_16_MUX_SEL_OFFSET);
    addr_hit[ 34] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_17_CFG_OFFSET);
    addr_hit[ 35] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_17_MUX_SEL_OFFSET);
    addr_hit[ 36] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_18_CFG_OFFSET);
    addr_hit[ 37] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_18_MUX_SEL_OFFSET);
    addr_hit[ 38] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_19_CFG_OFFSET);
    addr_hit[ 39] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_19_MUX_SEL_OFFSET);
    addr_hit[ 40] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_20_CFG_OFFSET);
    addr_hit[ 41] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_20_MUX_SEL_OFFSET);
    addr_hit[ 42] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_21_CFG_OFFSET);
    addr_hit[ 43] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_21_MUX_SEL_OFFSET);
    addr_hit[ 44] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_22_CFG_OFFSET);
    addr_hit[ 45] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_22_MUX_SEL_OFFSET);
    addr_hit[ 46] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_23_CFG_OFFSET);
    addr_hit[ 47] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_23_MUX_SEL_OFFSET);
    addr_hit[ 48] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_24_CFG_OFFSET);
    addr_hit[ 49] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_24_MUX_SEL_OFFSET);
    addr_hit[ 50] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_25_CFG_OFFSET);
    addr_hit[ 51] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_25_MUX_SEL_OFFSET);
    addr_hit[ 52] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_26_CFG_OFFSET);
    addr_hit[ 53] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_26_MUX_SEL_OFFSET);
    addr_hit[ 54] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_27_CFG_OFFSET);
    addr_hit[ 55] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_27_MUX_SEL_OFFSET);
    addr_hit[ 56] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_28_CFG_OFFSET);
    addr_hit[ 57] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_28_MUX_SEL_OFFSET);
    addr_hit[ 58] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_29_CFG_OFFSET);
    addr_hit[ 59] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_A_29_MUX_SEL_OFFSET);
    addr_hit[ 60] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_00_CFG_OFFSET);
    addr_hit[ 61] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_00_MUX_SEL_OFFSET);
    addr_hit[ 62] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_01_CFG_OFFSET);
    addr_hit[ 63] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_01_MUX_SEL_OFFSET);
    addr_hit[ 64] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_02_CFG_OFFSET);
    addr_hit[ 65] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_02_MUX_SEL_OFFSET);
    addr_hit[ 66] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_03_CFG_OFFSET);
    addr_hit[ 67] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_03_MUX_SEL_OFFSET);
    addr_hit[ 68] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_04_CFG_OFFSET);
    addr_hit[ 69] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_04_MUX_SEL_OFFSET);
    addr_hit[ 70] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_05_CFG_OFFSET);
    addr_hit[ 71] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_05_MUX_SEL_OFFSET);
    addr_hit[ 72] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_06_CFG_OFFSET);
    addr_hit[ 73] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_06_MUX_SEL_OFFSET);
    addr_hit[ 74] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_07_CFG_OFFSET);
    addr_hit[ 75] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_07_MUX_SEL_OFFSET);
    addr_hit[ 76] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_08_CFG_OFFSET);
    addr_hit[ 77] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_08_MUX_SEL_OFFSET);
    addr_hit[ 78] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_09_CFG_OFFSET);
    addr_hit[ 79] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_09_MUX_SEL_OFFSET);
    addr_hit[ 80] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_10_CFG_OFFSET);
    addr_hit[ 81] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_10_MUX_SEL_OFFSET);
    addr_hit[ 82] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_11_CFG_OFFSET);
    addr_hit[ 83] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_11_MUX_SEL_OFFSET);
    addr_hit[ 84] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_12_CFG_OFFSET);
    addr_hit[ 85] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_12_MUX_SEL_OFFSET);
    addr_hit[ 86] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_13_CFG_OFFSET);
    addr_hit[ 87] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_13_MUX_SEL_OFFSET);
    addr_hit[ 88] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_14_CFG_OFFSET);
    addr_hit[ 89] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_14_MUX_SEL_OFFSET);
    addr_hit[ 90] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_15_CFG_OFFSET);
    addr_hit[ 91] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_15_MUX_SEL_OFFSET);
    addr_hit[ 92] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_16_CFG_OFFSET);
    addr_hit[ 93] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_16_MUX_SEL_OFFSET);
    addr_hit[ 94] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_17_CFG_OFFSET);
    addr_hit[ 95] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_17_MUX_SEL_OFFSET);
    addr_hit[ 96] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_18_CFG_OFFSET);
    addr_hit[ 97] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_18_MUX_SEL_OFFSET);
    addr_hit[ 98] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_19_CFG_OFFSET);
    addr_hit[ 99] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_19_MUX_SEL_OFFSET);
    addr_hit[100] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_20_CFG_OFFSET);
    addr_hit[101] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_20_MUX_SEL_OFFSET);
    addr_hit[102] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_21_CFG_OFFSET);
    addr_hit[103] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_21_MUX_SEL_OFFSET);
    addr_hit[104] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_22_CFG_OFFSET);
    addr_hit[105] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_22_MUX_SEL_OFFSET);
    addr_hit[106] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_23_CFG_OFFSET);
    addr_hit[107] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_23_MUX_SEL_OFFSET);
    addr_hit[108] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_24_CFG_OFFSET);
    addr_hit[109] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_24_MUX_SEL_OFFSET);
    addr_hit[110] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_25_CFG_OFFSET);
    addr_hit[111] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_25_MUX_SEL_OFFSET);
    addr_hit[112] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_26_CFG_OFFSET);
    addr_hit[113] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_26_MUX_SEL_OFFSET);
    addr_hit[114] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_27_CFG_OFFSET);
    addr_hit[115] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_27_MUX_SEL_OFFSET);
    addr_hit[116] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_28_CFG_OFFSET);
    addr_hit[117] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_28_MUX_SEL_OFFSET);
    addr_hit[118] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_29_CFG_OFFSET);
    addr_hit[119] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_29_MUX_SEL_OFFSET);
    addr_hit[120] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_30_CFG_OFFSET);
    addr_hit[121] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_30_MUX_SEL_OFFSET);
    addr_hit[122] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_31_CFG_OFFSET);
    addr_hit[123] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_31_MUX_SEL_OFFSET);
    addr_hit[124] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_32_CFG_OFFSET);
    addr_hit[125] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_32_MUX_SEL_OFFSET);
    addr_hit[126] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_33_CFG_OFFSET);
    addr_hit[127] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_33_MUX_SEL_OFFSET);
    addr_hit[128] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_34_CFG_OFFSET);
    addr_hit[129] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_34_MUX_SEL_OFFSET);
    addr_hit[130] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_35_CFG_OFFSET);
    addr_hit[131] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_35_MUX_SEL_OFFSET);
    addr_hit[132] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_36_CFG_OFFSET);
    addr_hit[133] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_36_MUX_SEL_OFFSET);
    addr_hit[134] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_37_CFG_OFFSET);
    addr_hit[135] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_37_MUX_SEL_OFFSET);
    addr_hit[136] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_38_CFG_OFFSET);
    addr_hit[137] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_38_MUX_SEL_OFFSET);
    addr_hit[138] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_39_CFG_OFFSET);
    addr_hit[139] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_39_MUX_SEL_OFFSET);
    addr_hit[140] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_40_CFG_OFFSET);
    addr_hit[141] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_40_MUX_SEL_OFFSET);
    addr_hit[142] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_41_CFG_OFFSET);
    addr_hit[143] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_41_MUX_SEL_OFFSET);
    addr_hit[144] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_42_CFG_OFFSET);
    addr_hit[145] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_42_MUX_SEL_OFFSET);
    addr_hit[146] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_43_CFG_OFFSET);
    addr_hit[147] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_43_MUX_SEL_OFFSET);
    addr_hit[148] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_44_CFG_OFFSET);
    addr_hit[149] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_44_MUX_SEL_OFFSET);
    addr_hit[150] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_45_CFG_OFFSET);
    addr_hit[151] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_45_MUX_SEL_OFFSET);
    addr_hit[152] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_46_CFG_OFFSET);
    addr_hit[153] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_46_MUX_SEL_OFFSET);
    addr_hit[154] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_47_CFG_OFFSET);
    addr_hit[155] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_B_47_MUX_SEL_OFFSET);
    addr_hit[156] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_OT_SPI_00_CFG_OFFSET);
    addr_hit[157] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_OT_SPI_00_MUX_SEL_OFFSET);
    addr_hit[158] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_OT_SPI_01_CFG_OFFSET);
    addr_hit[159] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_OT_SPI_01_MUX_SEL_OFFSET);
    addr_hit[160] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_OT_SPI_02_CFG_OFFSET);
    addr_hit[161] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_OT_SPI_02_MUX_SEL_OFFSET);
    addr_hit[162] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_OT_SPI_03_CFG_OFFSET);
    addr_hit[163] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_OT_SPI_03_MUX_SEL_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[118] & ~reg_be))) |
               (addr_hit[119] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[119] & ~reg_be))) |
               (addr_hit[120] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[120] & ~reg_be))) |
               (addr_hit[121] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[121] & ~reg_be))) |
               (addr_hit[122] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[122] & ~reg_be))) |
               (addr_hit[123] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[123] & ~reg_be))) |
               (addr_hit[124] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[124] & ~reg_be))) |
               (addr_hit[125] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[125] & ~reg_be))) |
               (addr_hit[126] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[126] & ~reg_be))) |
               (addr_hit[127] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[127] & ~reg_be))) |
               (addr_hit[128] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[128] & ~reg_be))) |
               (addr_hit[129] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[129] & ~reg_be))) |
               (addr_hit[130] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[130] & ~reg_be))) |
               (addr_hit[131] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[131] & ~reg_be))) |
               (addr_hit[132] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[132] & ~reg_be))) |
               (addr_hit[133] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[133] & ~reg_be))) |
               (addr_hit[134] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[134] & ~reg_be))) |
               (addr_hit[135] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[135] & ~reg_be))) |
               (addr_hit[136] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[136] & ~reg_be))) |
               (addr_hit[137] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[137] & ~reg_be))) |
               (addr_hit[138] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[138] & ~reg_be))) |
               (addr_hit[139] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[139] & ~reg_be))) |
               (addr_hit[140] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[140] & ~reg_be))) |
               (addr_hit[141] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[141] & ~reg_be))) |
               (addr_hit[142] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[142] & ~reg_be))) |
               (addr_hit[143] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[143] & ~reg_be))) |
               (addr_hit[144] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[144] & ~reg_be))) |
               (addr_hit[145] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[145] & ~reg_be))) |
               (addr_hit[146] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[146] & ~reg_be))) |
               (addr_hit[147] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[147] & ~reg_be))) |
               (addr_hit[148] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[148] & ~reg_be))) |
               (addr_hit[149] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[149] & ~reg_be))) |
               (addr_hit[150] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[150] & ~reg_be))) |
               (addr_hit[151] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[151] & ~reg_be))) |
               (addr_hit[152] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[152] & ~reg_be))) |
               (addr_hit[153] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[153] & ~reg_be))) |
               (addr_hit[154] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[154] & ~reg_be))) |
               (addr_hit[155] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[155] & ~reg_be))) |
               (addr_hit[156] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[156] & ~reg_be))) |
               (addr_hit[157] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[157] & ~reg_be))) |
               (addr_hit[158] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[158] & ~reg_be))) |
               (addr_hit[159] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[159] & ~reg_be))) |
               (addr_hit[160] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[160] & ~reg_be))) |
               (addr_hit[161] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[161] & ~reg_be))) |
               (addr_hit[162] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[162] & ~reg_be))) |
               (addr_hit[163] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[163] & ~reg_be)))));
  end

  assign a_00_cfg_chip2pad_we = addr_hit[0] & reg_we & !reg_error;
  assign a_00_cfg_chip2pad_wd = reg_wdata[0];

  assign a_00_cfg_drv_we = addr_hit[0] & reg_we & !reg_error;
  assign a_00_cfg_drv_wd = reg_wdata[2:1];

  assign a_00_cfg_oen_we = addr_hit[0] & reg_we & !reg_error;
  assign a_00_cfg_oen_wd = reg_wdata[3];

  assign a_00_cfg_puen_we = addr_hit[0] & reg_we & !reg_error;
  assign a_00_cfg_puen_wd = reg_wdata[4];

  assign a_00_cfg_slw_we = addr_hit[0] & reg_we & !reg_error;
  assign a_00_cfg_slw_wd = reg_wdata[5];

  assign a_00_cfg_smt_we = addr_hit[0] & reg_we & !reg_error;
  assign a_00_cfg_smt_wd = reg_wdata[6];

  assign a_00_mux_sel_we = addr_hit[1] & reg_we & !reg_error;
  assign a_00_mux_sel_wd = reg_wdata[1:0];

  assign a_01_cfg_chip2pad_we = addr_hit[2] & reg_we & !reg_error;
  assign a_01_cfg_chip2pad_wd = reg_wdata[0];

  assign a_01_cfg_drv_we = addr_hit[2] & reg_we & !reg_error;
  assign a_01_cfg_drv_wd = reg_wdata[2:1];

  assign a_01_cfg_oen_we = addr_hit[2] & reg_we & !reg_error;
  assign a_01_cfg_oen_wd = reg_wdata[3];

  assign a_01_cfg_puen_we = addr_hit[2] & reg_we & !reg_error;
  assign a_01_cfg_puen_wd = reg_wdata[4];

  assign a_01_cfg_slw_we = addr_hit[2] & reg_we & !reg_error;
  assign a_01_cfg_slw_wd = reg_wdata[5];

  assign a_01_cfg_smt_we = addr_hit[2] & reg_we & !reg_error;
  assign a_01_cfg_smt_wd = reg_wdata[6];

  assign a_01_mux_sel_we = addr_hit[3] & reg_we & !reg_error;
  assign a_01_mux_sel_wd = reg_wdata[1:0];

  assign a_02_cfg_chip2pad_we = addr_hit[4] & reg_we & !reg_error;
  assign a_02_cfg_chip2pad_wd = reg_wdata[0];

  assign a_02_cfg_drv_we = addr_hit[4] & reg_we & !reg_error;
  assign a_02_cfg_drv_wd = reg_wdata[2:1];

  assign a_02_cfg_oen_we = addr_hit[4] & reg_we & !reg_error;
  assign a_02_cfg_oen_wd = reg_wdata[3];

  assign a_02_cfg_puen_we = addr_hit[4] & reg_we & !reg_error;
  assign a_02_cfg_puen_wd = reg_wdata[4];

  assign a_02_cfg_slw_we = addr_hit[4] & reg_we & !reg_error;
  assign a_02_cfg_slw_wd = reg_wdata[5];

  assign a_02_cfg_smt_we = addr_hit[4] & reg_we & !reg_error;
  assign a_02_cfg_smt_wd = reg_wdata[6];

  assign a_02_mux_sel_we = addr_hit[5] & reg_we & !reg_error;
  assign a_02_mux_sel_wd = reg_wdata[2:0];

  assign a_03_cfg_chip2pad_we = addr_hit[6] & reg_we & !reg_error;
  assign a_03_cfg_chip2pad_wd = reg_wdata[0];

  assign a_03_cfg_drv_we = addr_hit[6] & reg_we & !reg_error;
  assign a_03_cfg_drv_wd = reg_wdata[2:1];

  assign a_03_cfg_oen_we = addr_hit[6] & reg_we & !reg_error;
  assign a_03_cfg_oen_wd = reg_wdata[3];

  assign a_03_cfg_puen_we = addr_hit[6] & reg_we & !reg_error;
  assign a_03_cfg_puen_wd = reg_wdata[4];

  assign a_03_cfg_slw_we = addr_hit[6] & reg_we & !reg_error;
  assign a_03_cfg_slw_wd = reg_wdata[5];

  assign a_03_cfg_smt_we = addr_hit[6] & reg_we & !reg_error;
  assign a_03_cfg_smt_wd = reg_wdata[6];

  assign a_03_mux_sel_we = addr_hit[7] & reg_we & !reg_error;
  assign a_03_mux_sel_wd = reg_wdata[2:0];

  assign a_04_cfg_chip2pad_we = addr_hit[8] & reg_we & !reg_error;
  assign a_04_cfg_chip2pad_wd = reg_wdata[0];

  assign a_04_cfg_drv_we = addr_hit[8] & reg_we & !reg_error;
  assign a_04_cfg_drv_wd = reg_wdata[2:1];

  assign a_04_cfg_oen_we = addr_hit[8] & reg_we & !reg_error;
  assign a_04_cfg_oen_wd = reg_wdata[3];

  assign a_04_cfg_puen_we = addr_hit[8] & reg_we & !reg_error;
  assign a_04_cfg_puen_wd = reg_wdata[4];

  assign a_04_cfg_slw_we = addr_hit[8] & reg_we & !reg_error;
  assign a_04_cfg_slw_wd = reg_wdata[5];

  assign a_04_cfg_smt_we = addr_hit[8] & reg_we & !reg_error;
  assign a_04_cfg_smt_wd = reg_wdata[6];

  assign a_04_mux_sel_we = addr_hit[9] & reg_we & !reg_error;
  assign a_04_mux_sel_wd = reg_wdata[2:0];

  assign a_05_cfg_chip2pad_we = addr_hit[10] & reg_we & !reg_error;
  assign a_05_cfg_chip2pad_wd = reg_wdata[0];

  assign a_05_cfg_drv_we = addr_hit[10] & reg_we & !reg_error;
  assign a_05_cfg_drv_wd = reg_wdata[2:1];

  assign a_05_cfg_oen_we = addr_hit[10] & reg_we & !reg_error;
  assign a_05_cfg_oen_wd = reg_wdata[3];

  assign a_05_cfg_puen_we = addr_hit[10] & reg_we & !reg_error;
  assign a_05_cfg_puen_wd = reg_wdata[4];

  assign a_05_cfg_slw_we = addr_hit[10] & reg_we & !reg_error;
  assign a_05_cfg_slw_wd = reg_wdata[5];

  assign a_05_cfg_smt_we = addr_hit[10] & reg_we & !reg_error;
  assign a_05_cfg_smt_wd = reg_wdata[6];

  assign a_05_mux_sel_we = addr_hit[11] & reg_we & !reg_error;
  assign a_05_mux_sel_wd = reg_wdata[2:0];

  assign a_06_cfg_chip2pad_we = addr_hit[12] & reg_we & !reg_error;
  assign a_06_cfg_chip2pad_wd = reg_wdata[0];

  assign a_06_cfg_drv_we = addr_hit[12] & reg_we & !reg_error;
  assign a_06_cfg_drv_wd = reg_wdata[2:1];

  assign a_06_cfg_oen_we = addr_hit[12] & reg_we & !reg_error;
  assign a_06_cfg_oen_wd = reg_wdata[3];

  assign a_06_cfg_puen_we = addr_hit[12] & reg_we & !reg_error;
  assign a_06_cfg_puen_wd = reg_wdata[4];

  assign a_06_cfg_slw_we = addr_hit[12] & reg_we & !reg_error;
  assign a_06_cfg_slw_wd = reg_wdata[5];

  assign a_06_cfg_smt_we = addr_hit[12] & reg_we & !reg_error;
  assign a_06_cfg_smt_wd = reg_wdata[6];

  assign a_06_mux_sel_we = addr_hit[13] & reg_we & !reg_error;
  assign a_06_mux_sel_wd = reg_wdata[2:0];

  assign a_07_cfg_chip2pad_we = addr_hit[14] & reg_we & !reg_error;
  assign a_07_cfg_chip2pad_wd = reg_wdata[0];

  assign a_07_cfg_drv_we = addr_hit[14] & reg_we & !reg_error;
  assign a_07_cfg_drv_wd = reg_wdata[2:1];

  assign a_07_cfg_oen_we = addr_hit[14] & reg_we & !reg_error;
  assign a_07_cfg_oen_wd = reg_wdata[3];

  assign a_07_cfg_puen_we = addr_hit[14] & reg_we & !reg_error;
  assign a_07_cfg_puen_wd = reg_wdata[4];

  assign a_07_cfg_slw_we = addr_hit[14] & reg_we & !reg_error;
  assign a_07_cfg_slw_wd = reg_wdata[5];

  assign a_07_cfg_smt_we = addr_hit[14] & reg_we & !reg_error;
  assign a_07_cfg_smt_wd = reg_wdata[6];

  assign a_07_mux_sel_we = addr_hit[15] & reg_we & !reg_error;
  assign a_07_mux_sel_wd = reg_wdata[2:0];

  assign a_08_cfg_chip2pad_we = addr_hit[16] & reg_we & !reg_error;
  assign a_08_cfg_chip2pad_wd = reg_wdata[0];

  assign a_08_cfg_drv_we = addr_hit[16] & reg_we & !reg_error;
  assign a_08_cfg_drv_wd = reg_wdata[2:1];

  assign a_08_cfg_oen_we = addr_hit[16] & reg_we & !reg_error;
  assign a_08_cfg_oen_wd = reg_wdata[3];

  assign a_08_cfg_puen_we = addr_hit[16] & reg_we & !reg_error;
  assign a_08_cfg_puen_wd = reg_wdata[4];

  assign a_08_cfg_slw_we = addr_hit[16] & reg_we & !reg_error;
  assign a_08_cfg_slw_wd = reg_wdata[5];

  assign a_08_cfg_smt_we = addr_hit[16] & reg_we & !reg_error;
  assign a_08_cfg_smt_wd = reg_wdata[6];

  assign a_08_mux_sel_we = addr_hit[17] & reg_we & !reg_error;
  assign a_08_mux_sel_wd = reg_wdata[1:0];

  assign a_09_cfg_chip2pad_we = addr_hit[18] & reg_we & !reg_error;
  assign a_09_cfg_chip2pad_wd = reg_wdata[0];

  assign a_09_cfg_drv_we = addr_hit[18] & reg_we & !reg_error;
  assign a_09_cfg_drv_wd = reg_wdata[2:1];

  assign a_09_cfg_oen_we = addr_hit[18] & reg_we & !reg_error;
  assign a_09_cfg_oen_wd = reg_wdata[3];

  assign a_09_cfg_puen_we = addr_hit[18] & reg_we & !reg_error;
  assign a_09_cfg_puen_wd = reg_wdata[4];

  assign a_09_cfg_slw_we = addr_hit[18] & reg_we & !reg_error;
  assign a_09_cfg_slw_wd = reg_wdata[5];

  assign a_09_cfg_smt_we = addr_hit[18] & reg_we & !reg_error;
  assign a_09_cfg_smt_wd = reg_wdata[6];

  assign a_09_mux_sel_we = addr_hit[19] & reg_we & !reg_error;
  assign a_09_mux_sel_wd = reg_wdata[1:0];

  assign a_10_cfg_chip2pad_we = addr_hit[20] & reg_we & !reg_error;
  assign a_10_cfg_chip2pad_wd = reg_wdata[0];

  assign a_10_cfg_drv_we = addr_hit[20] & reg_we & !reg_error;
  assign a_10_cfg_drv_wd = reg_wdata[2:1];

  assign a_10_cfg_oen_we = addr_hit[20] & reg_we & !reg_error;
  assign a_10_cfg_oen_wd = reg_wdata[3];

  assign a_10_cfg_puen_we = addr_hit[20] & reg_we & !reg_error;
  assign a_10_cfg_puen_wd = reg_wdata[4];

  assign a_10_cfg_slw_we = addr_hit[20] & reg_we & !reg_error;
  assign a_10_cfg_slw_wd = reg_wdata[5];

  assign a_10_cfg_smt_we = addr_hit[20] & reg_we & !reg_error;
  assign a_10_cfg_smt_wd = reg_wdata[6];

  assign a_10_mux_sel_we = addr_hit[21] & reg_we & !reg_error;
  assign a_10_mux_sel_wd = reg_wdata[1:0];

  assign a_11_cfg_chip2pad_we = addr_hit[22] & reg_we & !reg_error;
  assign a_11_cfg_chip2pad_wd = reg_wdata[0];

  assign a_11_cfg_drv_we = addr_hit[22] & reg_we & !reg_error;
  assign a_11_cfg_drv_wd = reg_wdata[2:1];

  assign a_11_cfg_oen_we = addr_hit[22] & reg_we & !reg_error;
  assign a_11_cfg_oen_wd = reg_wdata[3];

  assign a_11_cfg_puen_we = addr_hit[22] & reg_we & !reg_error;
  assign a_11_cfg_puen_wd = reg_wdata[4];

  assign a_11_cfg_slw_we = addr_hit[22] & reg_we & !reg_error;
  assign a_11_cfg_slw_wd = reg_wdata[5];

  assign a_11_cfg_smt_we = addr_hit[22] & reg_we & !reg_error;
  assign a_11_cfg_smt_wd = reg_wdata[6];

  assign a_11_mux_sel_we = addr_hit[23] & reg_we & !reg_error;
  assign a_11_mux_sel_wd = reg_wdata[1:0];

  assign a_12_cfg_chip2pad_we = addr_hit[24] & reg_we & !reg_error;
  assign a_12_cfg_chip2pad_wd = reg_wdata[0];

  assign a_12_cfg_drv_we = addr_hit[24] & reg_we & !reg_error;
  assign a_12_cfg_drv_wd = reg_wdata[2:1];

  assign a_12_cfg_oen_we = addr_hit[24] & reg_we & !reg_error;
  assign a_12_cfg_oen_wd = reg_wdata[3];

  assign a_12_cfg_puen_we = addr_hit[24] & reg_we & !reg_error;
  assign a_12_cfg_puen_wd = reg_wdata[4];

  assign a_12_cfg_slw_we = addr_hit[24] & reg_we & !reg_error;
  assign a_12_cfg_slw_wd = reg_wdata[5];

  assign a_12_cfg_smt_we = addr_hit[24] & reg_we & !reg_error;
  assign a_12_cfg_smt_wd = reg_wdata[6];

  assign a_12_mux_sel_we = addr_hit[25] & reg_we & !reg_error;
  assign a_12_mux_sel_wd = reg_wdata[1:0];

  assign a_13_cfg_chip2pad_we = addr_hit[26] & reg_we & !reg_error;
  assign a_13_cfg_chip2pad_wd = reg_wdata[0];

  assign a_13_cfg_drv_we = addr_hit[26] & reg_we & !reg_error;
  assign a_13_cfg_drv_wd = reg_wdata[2:1];

  assign a_13_cfg_oen_we = addr_hit[26] & reg_we & !reg_error;
  assign a_13_cfg_oen_wd = reg_wdata[3];

  assign a_13_cfg_puen_we = addr_hit[26] & reg_we & !reg_error;
  assign a_13_cfg_puen_wd = reg_wdata[4];

  assign a_13_cfg_slw_we = addr_hit[26] & reg_we & !reg_error;
  assign a_13_cfg_slw_wd = reg_wdata[5];

  assign a_13_cfg_smt_we = addr_hit[26] & reg_we & !reg_error;
  assign a_13_cfg_smt_wd = reg_wdata[6];

  assign a_13_mux_sel_we = addr_hit[27] & reg_we & !reg_error;
  assign a_13_mux_sel_wd = reg_wdata[1:0];

  assign a_14_cfg_chip2pad_we = addr_hit[28] & reg_we & !reg_error;
  assign a_14_cfg_chip2pad_wd = reg_wdata[0];

  assign a_14_cfg_drv_we = addr_hit[28] & reg_we & !reg_error;
  assign a_14_cfg_drv_wd = reg_wdata[2:1];

  assign a_14_cfg_oen_we = addr_hit[28] & reg_we & !reg_error;
  assign a_14_cfg_oen_wd = reg_wdata[3];

  assign a_14_cfg_puen_we = addr_hit[28] & reg_we & !reg_error;
  assign a_14_cfg_puen_wd = reg_wdata[4];

  assign a_14_cfg_slw_we = addr_hit[28] & reg_we & !reg_error;
  assign a_14_cfg_slw_wd = reg_wdata[5];

  assign a_14_cfg_smt_we = addr_hit[28] & reg_we & !reg_error;
  assign a_14_cfg_smt_wd = reg_wdata[6];

  assign a_14_mux_sel_we = addr_hit[29] & reg_we & !reg_error;
  assign a_14_mux_sel_wd = reg_wdata[2:0];

  assign a_15_cfg_chip2pad_we = addr_hit[30] & reg_we & !reg_error;
  assign a_15_cfg_chip2pad_wd = reg_wdata[0];

  assign a_15_cfg_drv_we = addr_hit[30] & reg_we & !reg_error;
  assign a_15_cfg_drv_wd = reg_wdata[2:1];

  assign a_15_cfg_oen_we = addr_hit[30] & reg_we & !reg_error;
  assign a_15_cfg_oen_wd = reg_wdata[3];

  assign a_15_cfg_puen_we = addr_hit[30] & reg_we & !reg_error;
  assign a_15_cfg_puen_wd = reg_wdata[4];

  assign a_15_cfg_slw_we = addr_hit[30] & reg_we & !reg_error;
  assign a_15_cfg_slw_wd = reg_wdata[5];

  assign a_15_cfg_smt_we = addr_hit[30] & reg_we & !reg_error;
  assign a_15_cfg_smt_wd = reg_wdata[6];

  assign a_15_mux_sel_we = addr_hit[31] & reg_we & !reg_error;
  assign a_15_mux_sel_wd = reg_wdata[2:0];

  assign a_16_cfg_chip2pad_we = addr_hit[32] & reg_we & !reg_error;
  assign a_16_cfg_chip2pad_wd = reg_wdata[0];

  assign a_16_cfg_drv_we = addr_hit[32] & reg_we & !reg_error;
  assign a_16_cfg_drv_wd = reg_wdata[2:1];

  assign a_16_cfg_oen_we = addr_hit[32] & reg_we & !reg_error;
  assign a_16_cfg_oen_wd = reg_wdata[3];

  assign a_16_cfg_puen_we = addr_hit[32] & reg_we & !reg_error;
  assign a_16_cfg_puen_wd = reg_wdata[4];

  assign a_16_cfg_slw_we = addr_hit[32] & reg_we & !reg_error;
  assign a_16_cfg_slw_wd = reg_wdata[5];

  assign a_16_cfg_smt_we = addr_hit[32] & reg_we & !reg_error;
  assign a_16_cfg_smt_wd = reg_wdata[6];

  assign a_16_mux_sel_we = addr_hit[33] & reg_we & !reg_error;
  assign a_16_mux_sel_wd = reg_wdata[2:0];

  assign a_17_cfg_chip2pad_we = addr_hit[34] & reg_we & !reg_error;
  assign a_17_cfg_chip2pad_wd = reg_wdata[0];

  assign a_17_cfg_drv_we = addr_hit[34] & reg_we & !reg_error;
  assign a_17_cfg_drv_wd = reg_wdata[2:1];

  assign a_17_cfg_oen_we = addr_hit[34] & reg_we & !reg_error;
  assign a_17_cfg_oen_wd = reg_wdata[3];

  assign a_17_cfg_puen_we = addr_hit[34] & reg_we & !reg_error;
  assign a_17_cfg_puen_wd = reg_wdata[4];

  assign a_17_cfg_slw_we = addr_hit[34] & reg_we & !reg_error;
  assign a_17_cfg_slw_wd = reg_wdata[5];

  assign a_17_cfg_smt_we = addr_hit[34] & reg_we & !reg_error;
  assign a_17_cfg_smt_wd = reg_wdata[6];

  assign a_17_mux_sel_we = addr_hit[35] & reg_we & !reg_error;
  assign a_17_mux_sel_wd = reg_wdata[2:0];

  assign a_18_cfg_chip2pad_we = addr_hit[36] & reg_we & !reg_error;
  assign a_18_cfg_chip2pad_wd = reg_wdata[0];

  assign a_18_cfg_drv_we = addr_hit[36] & reg_we & !reg_error;
  assign a_18_cfg_drv_wd = reg_wdata[2:1];

  assign a_18_cfg_oen_we = addr_hit[36] & reg_we & !reg_error;
  assign a_18_cfg_oen_wd = reg_wdata[3];

  assign a_18_cfg_puen_we = addr_hit[36] & reg_we & !reg_error;
  assign a_18_cfg_puen_wd = reg_wdata[4];

  assign a_18_cfg_slw_we = addr_hit[36] & reg_we & !reg_error;
  assign a_18_cfg_slw_wd = reg_wdata[5];

  assign a_18_cfg_smt_we = addr_hit[36] & reg_we & !reg_error;
  assign a_18_cfg_smt_wd = reg_wdata[6];

  assign a_18_mux_sel_we = addr_hit[37] & reg_we & !reg_error;
  assign a_18_mux_sel_wd = reg_wdata[2:0];

  assign a_19_cfg_chip2pad_we = addr_hit[38] & reg_we & !reg_error;
  assign a_19_cfg_chip2pad_wd = reg_wdata[0];

  assign a_19_cfg_drv_we = addr_hit[38] & reg_we & !reg_error;
  assign a_19_cfg_drv_wd = reg_wdata[2:1];

  assign a_19_cfg_oen_we = addr_hit[38] & reg_we & !reg_error;
  assign a_19_cfg_oen_wd = reg_wdata[3];

  assign a_19_cfg_puen_we = addr_hit[38] & reg_we & !reg_error;
  assign a_19_cfg_puen_wd = reg_wdata[4];

  assign a_19_cfg_slw_we = addr_hit[38] & reg_we & !reg_error;
  assign a_19_cfg_slw_wd = reg_wdata[5];

  assign a_19_cfg_smt_we = addr_hit[38] & reg_we & !reg_error;
  assign a_19_cfg_smt_wd = reg_wdata[6];

  assign a_19_mux_sel_we = addr_hit[39] & reg_we & !reg_error;
  assign a_19_mux_sel_wd = reg_wdata[2:0];

  assign a_20_cfg_chip2pad_we = addr_hit[40] & reg_we & !reg_error;
  assign a_20_cfg_chip2pad_wd = reg_wdata[0];

  assign a_20_cfg_drv_we = addr_hit[40] & reg_we & !reg_error;
  assign a_20_cfg_drv_wd = reg_wdata[2:1];

  assign a_20_cfg_oen_we = addr_hit[40] & reg_we & !reg_error;
  assign a_20_cfg_oen_wd = reg_wdata[3];

  assign a_20_cfg_puen_we = addr_hit[40] & reg_we & !reg_error;
  assign a_20_cfg_puen_wd = reg_wdata[4];

  assign a_20_cfg_slw_we = addr_hit[40] & reg_we & !reg_error;
  assign a_20_cfg_slw_wd = reg_wdata[5];

  assign a_20_cfg_smt_we = addr_hit[40] & reg_we & !reg_error;
  assign a_20_cfg_smt_wd = reg_wdata[6];

  assign a_20_mux_sel_we = addr_hit[41] & reg_we & !reg_error;
  assign a_20_mux_sel_wd = reg_wdata[2:0];

  assign a_21_cfg_chip2pad_we = addr_hit[42] & reg_we & !reg_error;
  assign a_21_cfg_chip2pad_wd = reg_wdata[0];

  assign a_21_cfg_drv_we = addr_hit[42] & reg_we & !reg_error;
  assign a_21_cfg_drv_wd = reg_wdata[2:1];

  assign a_21_cfg_oen_we = addr_hit[42] & reg_we & !reg_error;
  assign a_21_cfg_oen_wd = reg_wdata[3];

  assign a_21_cfg_puen_we = addr_hit[42] & reg_we & !reg_error;
  assign a_21_cfg_puen_wd = reg_wdata[4];

  assign a_21_cfg_slw_we = addr_hit[42] & reg_we & !reg_error;
  assign a_21_cfg_slw_wd = reg_wdata[5];

  assign a_21_cfg_smt_we = addr_hit[42] & reg_we & !reg_error;
  assign a_21_cfg_smt_wd = reg_wdata[6];

  assign a_21_mux_sel_we = addr_hit[43] & reg_we & !reg_error;
  assign a_21_mux_sel_wd = reg_wdata[2:0];

  assign a_22_cfg_chip2pad_we = addr_hit[44] & reg_we & !reg_error;
  assign a_22_cfg_chip2pad_wd = reg_wdata[0];

  assign a_22_cfg_drv_we = addr_hit[44] & reg_we & !reg_error;
  assign a_22_cfg_drv_wd = reg_wdata[2:1];

  assign a_22_cfg_oen_we = addr_hit[44] & reg_we & !reg_error;
  assign a_22_cfg_oen_wd = reg_wdata[3];

  assign a_22_cfg_puen_we = addr_hit[44] & reg_we & !reg_error;
  assign a_22_cfg_puen_wd = reg_wdata[4];

  assign a_22_cfg_slw_we = addr_hit[44] & reg_we & !reg_error;
  assign a_22_cfg_slw_wd = reg_wdata[5];

  assign a_22_cfg_smt_we = addr_hit[44] & reg_we & !reg_error;
  assign a_22_cfg_smt_wd = reg_wdata[6];

  assign a_22_mux_sel_we = addr_hit[45] & reg_we & !reg_error;
  assign a_22_mux_sel_wd = reg_wdata[2:0];

  assign a_23_cfg_chip2pad_we = addr_hit[46] & reg_we & !reg_error;
  assign a_23_cfg_chip2pad_wd = reg_wdata[0];

  assign a_23_cfg_drv_we = addr_hit[46] & reg_we & !reg_error;
  assign a_23_cfg_drv_wd = reg_wdata[2:1];

  assign a_23_cfg_oen_we = addr_hit[46] & reg_we & !reg_error;
  assign a_23_cfg_oen_wd = reg_wdata[3];

  assign a_23_cfg_puen_we = addr_hit[46] & reg_we & !reg_error;
  assign a_23_cfg_puen_wd = reg_wdata[4];

  assign a_23_cfg_slw_we = addr_hit[46] & reg_we & !reg_error;
  assign a_23_cfg_slw_wd = reg_wdata[5];

  assign a_23_cfg_smt_we = addr_hit[46] & reg_we & !reg_error;
  assign a_23_cfg_smt_wd = reg_wdata[6];

  assign a_23_mux_sel_we = addr_hit[47] & reg_we & !reg_error;
  assign a_23_mux_sel_wd = reg_wdata[2:0];

  assign a_24_cfg_chip2pad_we = addr_hit[48] & reg_we & !reg_error;
  assign a_24_cfg_chip2pad_wd = reg_wdata[0];

  assign a_24_cfg_drv_we = addr_hit[48] & reg_we & !reg_error;
  assign a_24_cfg_drv_wd = reg_wdata[2:1];

  assign a_24_cfg_oen_we = addr_hit[48] & reg_we & !reg_error;
  assign a_24_cfg_oen_wd = reg_wdata[3];

  assign a_24_cfg_puen_we = addr_hit[48] & reg_we & !reg_error;
  assign a_24_cfg_puen_wd = reg_wdata[4];

  assign a_24_cfg_slw_we = addr_hit[48] & reg_we & !reg_error;
  assign a_24_cfg_slw_wd = reg_wdata[5];

  assign a_24_cfg_smt_we = addr_hit[48] & reg_we & !reg_error;
  assign a_24_cfg_smt_wd = reg_wdata[6];

  assign a_24_mux_sel_we = addr_hit[49] & reg_we & !reg_error;
  assign a_24_mux_sel_wd = reg_wdata[2:0];

  assign a_25_cfg_chip2pad_we = addr_hit[50] & reg_we & !reg_error;
  assign a_25_cfg_chip2pad_wd = reg_wdata[0];

  assign a_25_cfg_drv_we = addr_hit[50] & reg_we & !reg_error;
  assign a_25_cfg_drv_wd = reg_wdata[2:1];

  assign a_25_cfg_oen_we = addr_hit[50] & reg_we & !reg_error;
  assign a_25_cfg_oen_wd = reg_wdata[3];

  assign a_25_cfg_puen_we = addr_hit[50] & reg_we & !reg_error;
  assign a_25_cfg_puen_wd = reg_wdata[4];

  assign a_25_cfg_slw_we = addr_hit[50] & reg_we & !reg_error;
  assign a_25_cfg_slw_wd = reg_wdata[5];

  assign a_25_cfg_smt_we = addr_hit[50] & reg_we & !reg_error;
  assign a_25_cfg_smt_wd = reg_wdata[6];

  assign a_25_mux_sel_we = addr_hit[51] & reg_we & !reg_error;
  assign a_25_mux_sel_wd = reg_wdata[2:0];

  assign a_26_cfg_chip2pad_we = addr_hit[52] & reg_we & !reg_error;
  assign a_26_cfg_chip2pad_wd = reg_wdata[0];

  assign a_26_cfg_drv_we = addr_hit[52] & reg_we & !reg_error;
  assign a_26_cfg_drv_wd = reg_wdata[2:1];

  assign a_26_cfg_oen_we = addr_hit[52] & reg_we & !reg_error;
  assign a_26_cfg_oen_wd = reg_wdata[3];

  assign a_26_cfg_puen_we = addr_hit[52] & reg_we & !reg_error;
  assign a_26_cfg_puen_wd = reg_wdata[4];

  assign a_26_cfg_slw_we = addr_hit[52] & reg_we & !reg_error;
  assign a_26_cfg_slw_wd = reg_wdata[5];

  assign a_26_cfg_smt_we = addr_hit[52] & reg_we & !reg_error;
  assign a_26_cfg_smt_wd = reg_wdata[6];

  assign a_26_mux_sel_we = addr_hit[53] & reg_we & !reg_error;
  assign a_26_mux_sel_wd = reg_wdata[2:0];

  assign a_27_cfg_chip2pad_we = addr_hit[54] & reg_we & !reg_error;
  assign a_27_cfg_chip2pad_wd = reg_wdata[0];

  assign a_27_cfg_drv_we = addr_hit[54] & reg_we & !reg_error;
  assign a_27_cfg_drv_wd = reg_wdata[2:1];

  assign a_27_cfg_oen_we = addr_hit[54] & reg_we & !reg_error;
  assign a_27_cfg_oen_wd = reg_wdata[3];

  assign a_27_cfg_puen_we = addr_hit[54] & reg_we & !reg_error;
  assign a_27_cfg_puen_wd = reg_wdata[4];

  assign a_27_cfg_slw_we = addr_hit[54] & reg_we & !reg_error;
  assign a_27_cfg_slw_wd = reg_wdata[5];

  assign a_27_cfg_smt_we = addr_hit[54] & reg_we & !reg_error;
  assign a_27_cfg_smt_wd = reg_wdata[6];

  assign a_27_mux_sel_we = addr_hit[55] & reg_we & !reg_error;
  assign a_27_mux_sel_wd = reg_wdata[2:0];

  assign a_28_cfg_chip2pad_we = addr_hit[56] & reg_we & !reg_error;
  assign a_28_cfg_chip2pad_wd = reg_wdata[0];

  assign a_28_cfg_drv_we = addr_hit[56] & reg_we & !reg_error;
  assign a_28_cfg_drv_wd = reg_wdata[2:1];

  assign a_28_cfg_oen_we = addr_hit[56] & reg_we & !reg_error;
  assign a_28_cfg_oen_wd = reg_wdata[3];

  assign a_28_cfg_puen_we = addr_hit[56] & reg_we & !reg_error;
  assign a_28_cfg_puen_wd = reg_wdata[4];

  assign a_28_cfg_slw_we = addr_hit[56] & reg_we & !reg_error;
  assign a_28_cfg_slw_wd = reg_wdata[5];

  assign a_28_cfg_smt_we = addr_hit[56] & reg_we & !reg_error;
  assign a_28_cfg_smt_wd = reg_wdata[6];

  assign a_28_mux_sel_we = addr_hit[57] & reg_we & !reg_error;
  assign a_28_mux_sel_wd = reg_wdata[2:0];

  assign a_29_cfg_chip2pad_we = addr_hit[58] & reg_we & !reg_error;
  assign a_29_cfg_chip2pad_wd = reg_wdata[0];

  assign a_29_cfg_drv_we = addr_hit[58] & reg_we & !reg_error;
  assign a_29_cfg_drv_wd = reg_wdata[2:1];

  assign a_29_cfg_oen_we = addr_hit[58] & reg_we & !reg_error;
  assign a_29_cfg_oen_wd = reg_wdata[3];

  assign a_29_cfg_puen_we = addr_hit[58] & reg_we & !reg_error;
  assign a_29_cfg_puen_wd = reg_wdata[4];

  assign a_29_cfg_slw_we = addr_hit[58] & reg_we & !reg_error;
  assign a_29_cfg_slw_wd = reg_wdata[5];

  assign a_29_cfg_smt_we = addr_hit[58] & reg_we & !reg_error;
  assign a_29_cfg_smt_wd = reg_wdata[6];

  assign a_29_mux_sel_we = addr_hit[59] & reg_we & !reg_error;
  assign a_29_mux_sel_wd = reg_wdata[2:0];

  assign b_00_cfg_chip2pad_we = addr_hit[60] & reg_we & !reg_error;
  assign b_00_cfg_chip2pad_wd = reg_wdata[0];

  assign b_00_cfg_drv_we = addr_hit[60] & reg_we & !reg_error;
  assign b_00_cfg_drv_wd = reg_wdata[2:1];

  assign b_00_cfg_oen_we = addr_hit[60] & reg_we & !reg_error;
  assign b_00_cfg_oen_wd = reg_wdata[3];

  assign b_00_cfg_puen_we = addr_hit[60] & reg_we & !reg_error;
  assign b_00_cfg_puen_wd = reg_wdata[4];

  assign b_00_cfg_slw_we = addr_hit[60] & reg_we & !reg_error;
  assign b_00_cfg_slw_wd = reg_wdata[5];

  assign b_00_cfg_smt_we = addr_hit[60] & reg_we & !reg_error;
  assign b_00_cfg_smt_wd = reg_wdata[6];

  assign b_00_mux_sel_we = addr_hit[61] & reg_we & !reg_error;
  assign b_00_mux_sel_wd = reg_wdata[2:0];

  assign b_01_cfg_chip2pad_we = addr_hit[62] & reg_we & !reg_error;
  assign b_01_cfg_chip2pad_wd = reg_wdata[0];

  assign b_01_cfg_drv_we = addr_hit[62] & reg_we & !reg_error;
  assign b_01_cfg_drv_wd = reg_wdata[2:1];

  assign b_01_cfg_oen_we = addr_hit[62] & reg_we & !reg_error;
  assign b_01_cfg_oen_wd = reg_wdata[3];

  assign b_01_cfg_puen_we = addr_hit[62] & reg_we & !reg_error;
  assign b_01_cfg_puen_wd = reg_wdata[4];

  assign b_01_cfg_slw_we = addr_hit[62] & reg_we & !reg_error;
  assign b_01_cfg_slw_wd = reg_wdata[5];

  assign b_01_cfg_smt_we = addr_hit[62] & reg_we & !reg_error;
  assign b_01_cfg_smt_wd = reg_wdata[6];

  assign b_01_mux_sel_we = addr_hit[63] & reg_we & !reg_error;
  assign b_01_mux_sel_wd = reg_wdata[2:0];

  assign b_02_cfg_chip2pad_we = addr_hit[64] & reg_we & !reg_error;
  assign b_02_cfg_chip2pad_wd = reg_wdata[0];

  assign b_02_cfg_drv_we = addr_hit[64] & reg_we & !reg_error;
  assign b_02_cfg_drv_wd = reg_wdata[2:1];

  assign b_02_cfg_oen_we = addr_hit[64] & reg_we & !reg_error;
  assign b_02_cfg_oen_wd = reg_wdata[3];

  assign b_02_cfg_puen_we = addr_hit[64] & reg_we & !reg_error;
  assign b_02_cfg_puen_wd = reg_wdata[4];

  assign b_02_cfg_slw_we = addr_hit[64] & reg_we & !reg_error;
  assign b_02_cfg_slw_wd = reg_wdata[5];

  assign b_02_cfg_smt_we = addr_hit[64] & reg_we & !reg_error;
  assign b_02_cfg_smt_wd = reg_wdata[6];

  assign b_02_mux_sel_we = addr_hit[65] & reg_we & !reg_error;
  assign b_02_mux_sel_wd = reg_wdata[2:0];

  assign b_03_cfg_chip2pad_we = addr_hit[66] & reg_we & !reg_error;
  assign b_03_cfg_chip2pad_wd = reg_wdata[0];

  assign b_03_cfg_drv_we = addr_hit[66] & reg_we & !reg_error;
  assign b_03_cfg_drv_wd = reg_wdata[2:1];

  assign b_03_cfg_oen_we = addr_hit[66] & reg_we & !reg_error;
  assign b_03_cfg_oen_wd = reg_wdata[3];

  assign b_03_cfg_puen_we = addr_hit[66] & reg_we & !reg_error;
  assign b_03_cfg_puen_wd = reg_wdata[4];

  assign b_03_cfg_slw_we = addr_hit[66] & reg_we & !reg_error;
  assign b_03_cfg_slw_wd = reg_wdata[5];

  assign b_03_cfg_smt_we = addr_hit[66] & reg_we & !reg_error;
  assign b_03_cfg_smt_wd = reg_wdata[6];

  assign b_03_mux_sel_we = addr_hit[67] & reg_we & !reg_error;
  assign b_03_mux_sel_wd = reg_wdata[2:0];

  assign b_04_cfg_chip2pad_we = addr_hit[68] & reg_we & !reg_error;
  assign b_04_cfg_chip2pad_wd = reg_wdata[0];

  assign b_04_cfg_drv_we = addr_hit[68] & reg_we & !reg_error;
  assign b_04_cfg_drv_wd = reg_wdata[2:1];

  assign b_04_cfg_oen_we = addr_hit[68] & reg_we & !reg_error;
  assign b_04_cfg_oen_wd = reg_wdata[3];

  assign b_04_cfg_puen_we = addr_hit[68] & reg_we & !reg_error;
  assign b_04_cfg_puen_wd = reg_wdata[4];

  assign b_04_cfg_slw_we = addr_hit[68] & reg_we & !reg_error;
  assign b_04_cfg_slw_wd = reg_wdata[5];

  assign b_04_cfg_smt_we = addr_hit[68] & reg_we & !reg_error;
  assign b_04_cfg_smt_wd = reg_wdata[6];

  assign b_04_mux_sel_we = addr_hit[69] & reg_we & !reg_error;
  assign b_04_mux_sel_wd = reg_wdata[2:0];

  assign b_05_cfg_chip2pad_we = addr_hit[70] & reg_we & !reg_error;
  assign b_05_cfg_chip2pad_wd = reg_wdata[0];

  assign b_05_cfg_drv_we = addr_hit[70] & reg_we & !reg_error;
  assign b_05_cfg_drv_wd = reg_wdata[2:1];

  assign b_05_cfg_oen_we = addr_hit[70] & reg_we & !reg_error;
  assign b_05_cfg_oen_wd = reg_wdata[3];

  assign b_05_cfg_puen_we = addr_hit[70] & reg_we & !reg_error;
  assign b_05_cfg_puen_wd = reg_wdata[4];

  assign b_05_cfg_slw_we = addr_hit[70] & reg_we & !reg_error;
  assign b_05_cfg_slw_wd = reg_wdata[5];

  assign b_05_cfg_smt_we = addr_hit[70] & reg_we & !reg_error;
  assign b_05_cfg_smt_wd = reg_wdata[6];

  assign b_05_mux_sel_we = addr_hit[71] & reg_we & !reg_error;
  assign b_05_mux_sel_wd = reg_wdata[2:0];

  assign b_06_cfg_chip2pad_we = addr_hit[72] & reg_we & !reg_error;
  assign b_06_cfg_chip2pad_wd = reg_wdata[0];

  assign b_06_cfg_drv_we = addr_hit[72] & reg_we & !reg_error;
  assign b_06_cfg_drv_wd = reg_wdata[2:1];

  assign b_06_cfg_oen_we = addr_hit[72] & reg_we & !reg_error;
  assign b_06_cfg_oen_wd = reg_wdata[3];

  assign b_06_cfg_puen_we = addr_hit[72] & reg_we & !reg_error;
  assign b_06_cfg_puen_wd = reg_wdata[4];

  assign b_06_cfg_slw_we = addr_hit[72] & reg_we & !reg_error;
  assign b_06_cfg_slw_wd = reg_wdata[5];

  assign b_06_cfg_smt_we = addr_hit[72] & reg_we & !reg_error;
  assign b_06_cfg_smt_wd = reg_wdata[6];

  assign b_06_mux_sel_we = addr_hit[73] & reg_we & !reg_error;
  assign b_06_mux_sel_wd = reg_wdata[2:0];

  assign b_07_cfg_chip2pad_we = addr_hit[74] & reg_we & !reg_error;
  assign b_07_cfg_chip2pad_wd = reg_wdata[0];

  assign b_07_cfg_drv_we = addr_hit[74] & reg_we & !reg_error;
  assign b_07_cfg_drv_wd = reg_wdata[2:1];

  assign b_07_cfg_oen_we = addr_hit[74] & reg_we & !reg_error;
  assign b_07_cfg_oen_wd = reg_wdata[3];

  assign b_07_cfg_puen_we = addr_hit[74] & reg_we & !reg_error;
  assign b_07_cfg_puen_wd = reg_wdata[4];

  assign b_07_cfg_slw_we = addr_hit[74] & reg_we & !reg_error;
  assign b_07_cfg_slw_wd = reg_wdata[5];

  assign b_07_cfg_smt_we = addr_hit[74] & reg_we & !reg_error;
  assign b_07_cfg_smt_wd = reg_wdata[6];

  assign b_07_mux_sel_we = addr_hit[75] & reg_we & !reg_error;
  assign b_07_mux_sel_wd = reg_wdata[2:0];

  assign b_08_cfg_chip2pad_we = addr_hit[76] & reg_we & !reg_error;
  assign b_08_cfg_chip2pad_wd = reg_wdata[0];

  assign b_08_cfg_drv_we = addr_hit[76] & reg_we & !reg_error;
  assign b_08_cfg_drv_wd = reg_wdata[2:1];

  assign b_08_cfg_oen_we = addr_hit[76] & reg_we & !reg_error;
  assign b_08_cfg_oen_wd = reg_wdata[3];

  assign b_08_cfg_puen_we = addr_hit[76] & reg_we & !reg_error;
  assign b_08_cfg_puen_wd = reg_wdata[4];

  assign b_08_cfg_slw_we = addr_hit[76] & reg_we & !reg_error;
  assign b_08_cfg_slw_wd = reg_wdata[5];

  assign b_08_cfg_smt_we = addr_hit[76] & reg_we & !reg_error;
  assign b_08_cfg_smt_wd = reg_wdata[6];

  assign b_08_mux_sel_we = addr_hit[77] & reg_we & !reg_error;
  assign b_08_mux_sel_wd = reg_wdata[2:0];

  assign b_09_cfg_chip2pad_we = addr_hit[78] & reg_we & !reg_error;
  assign b_09_cfg_chip2pad_wd = reg_wdata[0];

  assign b_09_cfg_drv_we = addr_hit[78] & reg_we & !reg_error;
  assign b_09_cfg_drv_wd = reg_wdata[2:1];

  assign b_09_cfg_oen_we = addr_hit[78] & reg_we & !reg_error;
  assign b_09_cfg_oen_wd = reg_wdata[3];

  assign b_09_cfg_puen_we = addr_hit[78] & reg_we & !reg_error;
  assign b_09_cfg_puen_wd = reg_wdata[4];

  assign b_09_cfg_slw_we = addr_hit[78] & reg_we & !reg_error;
  assign b_09_cfg_slw_wd = reg_wdata[5];

  assign b_09_cfg_smt_we = addr_hit[78] & reg_we & !reg_error;
  assign b_09_cfg_smt_wd = reg_wdata[6];

  assign b_09_mux_sel_we = addr_hit[79] & reg_we & !reg_error;
  assign b_09_mux_sel_wd = reg_wdata[2:0];

  assign b_10_cfg_chip2pad_we = addr_hit[80] & reg_we & !reg_error;
  assign b_10_cfg_chip2pad_wd = reg_wdata[0];

  assign b_10_cfg_drv_we = addr_hit[80] & reg_we & !reg_error;
  assign b_10_cfg_drv_wd = reg_wdata[2:1];

  assign b_10_cfg_oen_we = addr_hit[80] & reg_we & !reg_error;
  assign b_10_cfg_oen_wd = reg_wdata[3];

  assign b_10_cfg_puen_we = addr_hit[80] & reg_we & !reg_error;
  assign b_10_cfg_puen_wd = reg_wdata[4];

  assign b_10_cfg_slw_we = addr_hit[80] & reg_we & !reg_error;
  assign b_10_cfg_slw_wd = reg_wdata[5];

  assign b_10_cfg_smt_we = addr_hit[80] & reg_we & !reg_error;
  assign b_10_cfg_smt_wd = reg_wdata[6];

  assign b_10_mux_sel_we = addr_hit[81] & reg_we & !reg_error;
  assign b_10_mux_sel_wd = reg_wdata[2:0];

  assign b_11_cfg_chip2pad_we = addr_hit[82] & reg_we & !reg_error;
  assign b_11_cfg_chip2pad_wd = reg_wdata[0];

  assign b_11_cfg_drv_we = addr_hit[82] & reg_we & !reg_error;
  assign b_11_cfg_drv_wd = reg_wdata[2:1];

  assign b_11_cfg_oen_we = addr_hit[82] & reg_we & !reg_error;
  assign b_11_cfg_oen_wd = reg_wdata[3];

  assign b_11_cfg_puen_we = addr_hit[82] & reg_we & !reg_error;
  assign b_11_cfg_puen_wd = reg_wdata[4];

  assign b_11_cfg_slw_we = addr_hit[82] & reg_we & !reg_error;
  assign b_11_cfg_slw_wd = reg_wdata[5];

  assign b_11_cfg_smt_we = addr_hit[82] & reg_we & !reg_error;
  assign b_11_cfg_smt_wd = reg_wdata[6];

  assign b_11_mux_sel_we = addr_hit[83] & reg_we & !reg_error;
  assign b_11_mux_sel_wd = reg_wdata[2:0];

  assign b_12_cfg_chip2pad_we = addr_hit[84] & reg_we & !reg_error;
  assign b_12_cfg_chip2pad_wd = reg_wdata[0];

  assign b_12_cfg_drv_we = addr_hit[84] & reg_we & !reg_error;
  assign b_12_cfg_drv_wd = reg_wdata[2:1];

  assign b_12_cfg_oen_we = addr_hit[84] & reg_we & !reg_error;
  assign b_12_cfg_oen_wd = reg_wdata[3];

  assign b_12_cfg_puen_we = addr_hit[84] & reg_we & !reg_error;
  assign b_12_cfg_puen_wd = reg_wdata[4];

  assign b_12_cfg_slw_we = addr_hit[84] & reg_we & !reg_error;
  assign b_12_cfg_slw_wd = reg_wdata[5];

  assign b_12_cfg_smt_we = addr_hit[84] & reg_we & !reg_error;
  assign b_12_cfg_smt_wd = reg_wdata[6];

  assign b_12_mux_sel_we = addr_hit[85] & reg_we & !reg_error;
  assign b_12_mux_sel_wd = reg_wdata[2:0];

  assign b_13_cfg_chip2pad_we = addr_hit[86] & reg_we & !reg_error;
  assign b_13_cfg_chip2pad_wd = reg_wdata[0];

  assign b_13_cfg_drv_we = addr_hit[86] & reg_we & !reg_error;
  assign b_13_cfg_drv_wd = reg_wdata[2:1];

  assign b_13_cfg_oen_we = addr_hit[86] & reg_we & !reg_error;
  assign b_13_cfg_oen_wd = reg_wdata[3];

  assign b_13_cfg_puen_we = addr_hit[86] & reg_we & !reg_error;
  assign b_13_cfg_puen_wd = reg_wdata[4];

  assign b_13_cfg_slw_we = addr_hit[86] & reg_we & !reg_error;
  assign b_13_cfg_slw_wd = reg_wdata[5];

  assign b_13_cfg_smt_we = addr_hit[86] & reg_we & !reg_error;
  assign b_13_cfg_smt_wd = reg_wdata[6];

  assign b_13_mux_sel_we = addr_hit[87] & reg_we & !reg_error;
  assign b_13_mux_sel_wd = reg_wdata[2:0];

  assign b_14_cfg_chip2pad_we = addr_hit[88] & reg_we & !reg_error;
  assign b_14_cfg_chip2pad_wd = reg_wdata[0];

  assign b_14_cfg_drv_we = addr_hit[88] & reg_we & !reg_error;
  assign b_14_cfg_drv_wd = reg_wdata[2:1];

  assign b_14_cfg_oen_we = addr_hit[88] & reg_we & !reg_error;
  assign b_14_cfg_oen_wd = reg_wdata[3];

  assign b_14_cfg_puen_we = addr_hit[88] & reg_we & !reg_error;
  assign b_14_cfg_puen_wd = reg_wdata[4];

  assign b_14_cfg_slw_we = addr_hit[88] & reg_we & !reg_error;
  assign b_14_cfg_slw_wd = reg_wdata[5];

  assign b_14_cfg_smt_we = addr_hit[88] & reg_we & !reg_error;
  assign b_14_cfg_smt_wd = reg_wdata[6];

  assign b_14_mux_sel_we = addr_hit[89] & reg_we & !reg_error;
  assign b_14_mux_sel_wd = reg_wdata[2:0];

  assign b_15_cfg_chip2pad_we = addr_hit[90] & reg_we & !reg_error;
  assign b_15_cfg_chip2pad_wd = reg_wdata[0];

  assign b_15_cfg_drv_we = addr_hit[90] & reg_we & !reg_error;
  assign b_15_cfg_drv_wd = reg_wdata[2:1];

  assign b_15_cfg_oen_we = addr_hit[90] & reg_we & !reg_error;
  assign b_15_cfg_oen_wd = reg_wdata[3];

  assign b_15_cfg_puen_we = addr_hit[90] & reg_we & !reg_error;
  assign b_15_cfg_puen_wd = reg_wdata[4];

  assign b_15_cfg_slw_we = addr_hit[90] & reg_we & !reg_error;
  assign b_15_cfg_slw_wd = reg_wdata[5];

  assign b_15_cfg_smt_we = addr_hit[90] & reg_we & !reg_error;
  assign b_15_cfg_smt_wd = reg_wdata[6];

  assign b_15_mux_sel_we = addr_hit[91] & reg_we & !reg_error;
  assign b_15_mux_sel_wd = reg_wdata[2:0];

  assign b_16_cfg_chip2pad_we = addr_hit[92] & reg_we & !reg_error;
  assign b_16_cfg_chip2pad_wd = reg_wdata[0];

  assign b_16_cfg_drv_we = addr_hit[92] & reg_we & !reg_error;
  assign b_16_cfg_drv_wd = reg_wdata[2:1];

  assign b_16_cfg_oen_we = addr_hit[92] & reg_we & !reg_error;
  assign b_16_cfg_oen_wd = reg_wdata[3];

  assign b_16_cfg_puen_we = addr_hit[92] & reg_we & !reg_error;
  assign b_16_cfg_puen_wd = reg_wdata[4];

  assign b_16_cfg_slw_we = addr_hit[92] & reg_we & !reg_error;
  assign b_16_cfg_slw_wd = reg_wdata[5];

  assign b_16_cfg_smt_we = addr_hit[92] & reg_we & !reg_error;
  assign b_16_cfg_smt_wd = reg_wdata[6];

  assign b_16_mux_sel_we = addr_hit[93] & reg_we & !reg_error;
  assign b_16_mux_sel_wd = reg_wdata[2:0];

  assign b_17_cfg_chip2pad_we = addr_hit[94] & reg_we & !reg_error;
  assign b_17_cfg_chip2pad_wd = reg_wdata[0];

  assign b_17_cfg_drv_we = addr_hit[94] & reg_we & !reg_error;
  assign b_17_cfg_drv_wd = reg_wdata[2:1];

  assign b_17_cfg_oen_we = addr_hit[94] & reg_we & !reg_error;
  assign b_17_cfg_oen_wd = reg_wdata[3];

  assign b_17_cfg_puen_we = addr_hit[94] & reg_we & !reg_error;
  assign b_17_cfg_puen_wd = reg_wdata[4];

  assign b_17_cfg_slw_we = addr_hit[94] & reg_we & !reg_error;
  assign b_17_cfg_slw_wd = reg_wdata[5];

  assign b_17_cfg_smt_we = addr_hit[94] & reg_we & !reg_error;
  assign b_17_cfg_smt_wd = reg_wdata[6];

  assign b_17_mux_sel_we = addr_hit[95] & reg_we & !reg_error;
  assign b_17_mux_sel_wd = reg_wdata[2:0];

  assign b_18_cfg_chip2pad_we = addr_hit[96] & reg_we & !reg_error;
  assign b_18_cfg_chip2pad_wd = reg_wdata[0];

  assign b_18_cfg_drv_we = addr_hit[96] & reg_we & !reg_error;
  assign b_18_cfg_drv_wd = reg_wdata[2:1];

  assign b_18_cfg_oen_we = addr_hit[96] & reg_we & !reg_error;
  assign b_18_cfg_oen_wd = reg_wdata[3];

  assign b_18_cfg_puen_we = addr_hit[96] & reg_we & !reg_error;
  assign b_18_cfg_puen_wd = reg_wdata[4];

  assign b_18_cfg_slw_we = addr_hit[96] & reg_we & !reg_error;
  assign b_18_cfg_slw_wd = reg_wdata[5];

  assign b_18_cfg_smt_we = addr_hit[96] & reg_we & !reg_error;
  assign b_18_cfg_smt_wd = reg_wdata[6];

  assign b_18_mux_sel_we = addr_hit[97] & reg_we & !reg_error;
  assign b_18_mux_sel_wd = reg_wdata[2:0];

  assign b_19_cfg_chip2pad_we = addr_hit[98] & reg_we & !reg_error;
  assign b_19_cfg_chip2pad_wd = reg_wdata[0];

  assign b_19_cfg_drv_we = addr_hit[98] & reg_we & !reg_error;
  assign b_19_cfg_drv_wd = reg_wdata[2:1];

  assign b_19_cfg_oen_we = addr_hit[98] & reg_we & !reg_error;
  assign b_19_cfg_oen_wd = reg_wdata[3];

  assign b_19_cfg_puen_we = addr_hit[98] & reg_we & !reg_error;
  assign b_19_cfg_puen_wd = reg_wdata[4];

  assign b_19_cfg_slw_we = addr_hit[98] & reg_we & !reg_error;
  assign b_19_cfg_slw_wd = reg_wdata[5];

  assign b_19_cfg_smt_we = addr_hit[98] & reg_we & !reg_error;
  assign b_19_cfg_smt_wd = reg_wdata[6];

  assign b_19_mux_sel_we = addr_hit[99] & reg_we & !reg_error;
  assign b_19_mux_sel_wd = reg_wdata[2:0];

  assign b_20_cfg_chip2pad_we = addr_hit[100] & reg_we & !reg_error;
  assign b_20_cfg_chip2pad_wd = reg_wdata[0];

  assign b_20_cfg_drv_we = addr_hit[100] & reg_we & !reg_error;
  assign b_20_cfg_drv_wd = reg_wdata[2:1];

  assign b_20_cfg_oen_we = addr_hit[100] & reg_we & !reg_error;
  assign b_20_cfg_oen_wd = reg_wdata[3];

  assign b_20_cfg_puen_we = addr_hit[100] & reg_we & !reg_error;
  assign b_20_cfg_puen_wd = reg_wdata[4];

  assign b_20_cfg_slw_we = addr_hit[100] & reg_we & !reg_error;
  assign b_20_cfg_slw_wd = reg_wdata[5];

  assign b_20_cfg_smt_we = addr_hit[100] & reg_we & !reg_error;
  assign b_20_cfg_smt_wd = reg_wdata[6];

  assign b_20_mux_sel_we = addr_hit[101] & reg_we & !reg_error;
  assign b_20_mux_sel_wd = reg_wdata[2:0];

  assign b_21_cfg_chip2pad_we = addr_hit[102] & reg_we & !reg_error;
  assign b_21_cfg_chip2pad_wd = reg_wdata[0];

  assign b_21_cfg_drv_we = addr_hit[102] & reg_we & !reg_error;
  assign b_21_cfg_drv_wd = reg_wdata[2:1];

  assign b_21_cfg_oen_we = addr_hit[102] & reg_we & !reg_error;
  assign b_21_cfg_oen_wd = reg_wdata[3];

  assign b_21_cfg_puen_we = addr_hit[102] & reg_we & !reg_error;
  assign b_21_cfg_puen_wd = reg_wdata[4];

  assign b_21_cfg_slw_we = addr_hit[102] & reg_we & !reg_error;
  assign b_21_cfg_slw_wd = reg_wdata[5];

  assign b_21_cfg_smt_we = addr_hit[102] & reg_we & !reg_error;
  assign b_21_cfg_smt_wd = reg_wdata[6];

  assign b_21_mux_sel_we = addr_hit[103] & reg_we & !reg_error;
  assign b_21_mux_sel_wd = reg_wdata[2:0];

  assign b_22_cfg_chip2pad_we = addr_hit[104] & reg_we & !reg_error;
  assign b_22_cfg_chip2pad_wd = reg_wdata[0];

  assign b_22_cfg_drv_we = addr_hit[104] & reg_we & !reg_error;
  assign b_22_cfg_drv_wd = reg_wdata[2:1];

  assign b_22_cfg_oen_we = addr_hit[104] & reg_we & !reg_error;
  assign b_22_cfg_oen_wd = reg_wdata[3];

  assign b_22_cfg_puen_we = addr_hit[104] & reg_we & !reg_error;
  assign b_22_cfg_puen_wd = reg_wdata[4];

  assign b_22_cfg_slw_we = addr_hit[104] & reg_we & !reg_error;
  assign b_22_cfg_slw_wd = reg_wdata[5];

  assign b_22_cfg_smt_we = addr_hit[104] & reg_we & !reg_error;
  assign b_22_cfg_smt_wd = reg_wdata[6];

  assign b_22_mux_sel_we = addr_hit[105] & reg_we & !reg_error;
  assign b_22_mux_sel_wd = reg_wdata[2:0];

  assign b_23_cfg_chip2pad_we = addr_hit[106] & reg_we & !reg_error;
  assign b_23_cfg_chip2pad_wd = reg_wdata[0];

  assign b_23_cfg_drv_we = addr_hit[106] & reg_we & !reg_error;
  assign b_23_cfg_drv_wd = reg_wdata[2:1];

  assign b_23_cfg_oen_we = addr_hit[106] & reg_we & !reg_error;
  assign b_23_cfg_oen_wd = reg_wdata[3];

  assign b_23_cfg_puen_we = addr_hit[106] & reg_we & !reg_error;
  assign b_23_cfg_puen_wd = reg_wdata[4];

  assign b_23_cfg_slw_we = addr_hit[106] & reg_we & !reg_error;
  assign b_23_cfg_slw_wd = reg_wdata[5];

  assign b_23_cfg_smt_we = addr_hit[106] & reg_we & !reg_error;
  assign b_23_cfg_smt_wd = reg_wdata[6];

  assign b_23_mux_sel_we = addr_hit[107] & reg_we & !reg_error;
  assign b_23_mux_sel_wd = reg_wdata[2:0];

  assign b_24_cfg_chip2pad_we = addr_hit[108] & reg_we & !reg_error;
  assign b_24_cfg_chip2pad_wd = reg_wdata[0];

  assign b_24_cfg_drv_we = addr_hit[108] & reg_we & !reg_error;
  assign b_24_cfg_drv_wd = reg_wdata[2:1];

  assign b_24_cfg_oen_we = addr_hit[108] & reg_we & !reg_error;
  assign b_24_cfg_oen_wd = reg_wdata[3];

  assign b_24_cfg_puen_we = addr_hit[108] & reg_we & !reg_error;
  assign b_24_cfg_puen_wd = reg_wdata[4];

  assign b_24_cfg_slw_we = addr_hit[108] & reg_we & !reg_error;
  assign b_24_cfg_slw_wd = reg_wdata[5];

  assign b_24_cfg_smt_we = addr_hit[108] & reg_we & !reg_error;
  assign b_24_cfg_smt_wd = reg_wdata[6];

  assign b_24_mux_sel_we = addr_hit[109] & reg_we & !reg_error;
  assign b_24_mux_sel_wd = reg_wdata[2:0];

  assign b_25_cfg_chip2pad_we = addr_hit[110] & reg_we & !reg_error;
  assign b_25_cfg_chip2pad_wd = reg_wdata[0];

  assign b_25_cfg_drv_we = addr_hit[110] & reg_we & !reg_error;
  assign b_25_cfg_drv_wd = reg_wdata[2:1];

  assign b_25_cfg_oen_we = addr_hit[110] & reg_we & !reg_error;
  assign b_25_cfg_oen_wd = reg_wdata[3];

  assign b_25_cfg_puen_we = addr_hit[110] & reg_we & !reg_error;
  assign b_25_cfg_puen_wd = reg_wdata[4];

  assign b_25_cfg_slw_we = addr_hit[110] & reg_we & !reg_error;
  assign b_25_cfg_slw_wd = reg_wdata[5];

  assign b_25_cfg_smt_we = addr_hit[110] & reg_we & !reg_error;
  assign b_25_cfg_smt_wd = reg_wdata[6];

  assign b_25_mux_sel_we = addr_hit[111] & reg_we & !reg_error;
  assign b_25_mux_sel_wd = reg_wdata[2:0];

  assign b_26_cfg_chip2pad_we = addr_hit[112] & reg_we & !reg_error;
  assign b_26_cfg_chip2pad_wd = reg_wdata[0];

  assign b_26_cfg_drv_we = addr_hit[112] & reg_we & !reg_error;
  assign b_26_cfg_drv_wd = reg_wdata[2:1];

  assign b_26_cfg_oen_we = addr_hit[112] & reg_we & !reg_error;
  assign b_26_cfg_oen_wd = reg_wdata[3];

  assign b_26_cfg_puen_we = addr_hit[112] & reg_we & !reg_error;
  assign b_26_cfg_puen_wd = reg_wdata[4];

  assign b_26_cfg_slw_we = addr_hit[112] & reg_we & !reg_error;
  assign b_26_cfg_slw_wd = reg_wdata[5];

  assign b_26_cfg_smt_we = addr_hit[112] & reg_we & !reg_error;
  assign b_26_cfg_smt_wd = reg_wdata[6];

  assign b_26_mux_sel_we = addr_hit[113] & reg_we & !reg_error;
  assign b_26_mux_sel_wd = reg_wdata[2:0];

  assign b_27_cfg_chip2pad_we = addr_hit[114] & reg_we & !reg_error;
  assign b_27_cfg_chip2pad_wd = reg_wdata[0];

  assign b_27_cfg_drv_we = addr_hit[114] & reg_we & !reg_error;
  assign b_27_cfg_drv_wd = reg_wdata[2:1];

  assign b_27_cfg_oen_we = addr_hit[114] & reg_we & !reg_error;
  assign b_27_cfg_oen_wd = reg_wdata[3];

  assign b_27_cfg_puen_we = addr_hit[114] & reg_we & !reg_error;
  assign b_27_cfg_puen_wd = reg_wdata[4];

  assign b_27_cfg_slw_we = addr_hit[114] & reg_we & !reg_error;
  assign b_27_cfg_slw_wd = reg_wdata[5];

  assign b_27_cfg_smt_we = addr_hit[114] & reg_we & !reg_error;
  assign b_27_cfg_smt_wd = reg_wdata[6];

  assign b_27_mux_sel_we = addr_hit[115] & reg_we & !reg_error;
  assign b_27_mux_sel_wd = reg_wdata[2:0];

  assign b_28_cfg_chip2pad_we = addr_hit[116] & reg_we & !reg_error;
  assign b_28_cfg_chip2pad_wd = reg_wdata[0];

  assign b_28_cfg_drv_we = addr_hit[116] & reg_we & !reg_error;
  assign b_28_cfg_drv_wd = reg_wdata[2:1];

  assign b_28_cfg_oen_we = addr_hit[116] & reg_we & !reg_error;
  assign b_28_cfg_oen_wd = reg_wdata[3];

  assign b_28_cfg_puen_we = addr_hit[116] & reg_we & !reg_error;
  assign b_28_cfg_puen_wd = reg_wdata[4];

  assign b_28_cfg_slw_we = addr_hit[116] & reg_we & !reg_error;
  assign b_28_cfg_slw_wd = reg_wdata[5];

  assign b_28_cfg_smt_we = addr_hit[116] & reg_we & !reg_error;
  assign b_28_cfg_smt_wd = reg_wdata[6];

  assign b_28_mux_sel_we = addr_hit[117] & reg_we & !reg_error;
  assign b_28_mux_sel_wd = reg_wdata[2:0];

  assign b_29_cfg_chip2pad_we = addr_hit[118] & reg_we & !reg_error;
  assign b_29_cfg_chip2pad_wd = reg_wdata[0];

  assign b_29_cfg_drv_we = addr_hit[118] & reg_we & !reg_error;
  assign b_29_cfg_drv_wd = reg_wdata[2:1];

  assign b_29_cfg_oen_we = addr_hit[118] & reg_we & !reg_error;
  assign b_29_cfg_oen_wd = reg_wdata[3];

  assign b_29_cfg_puen_we = addr_hit[118] & reg_we & !reg_error;
  assign b_29_cfg_puen_wd = reg_wdata[4];

  assign b_29_cfg_slw_we = addr_hit[118] & reg_we & !reg_error;
  assign b_29_cfg_slw_wd = reg_wdata[5];

  assign b_29_cfg_smt_we = addr_hit[118] & reg_we & !reg_error;
  assign b_29_cfg_smt_wd = reg_wdata[6];

  assign b_29_mux_sel_we = addr_hit[119] & reg_we & !reg_error;
  assign b_29_mux_sel_wd = reg_wdata[2:0];

  assign b_30_cfg_chip2pad_we = addr_hit[120] & reg_we & !reg_error;
  assign b_30_cfg_chip2pad_wd = reg_wdata[0];

  assign b_30_cfg_drv_we = addr_hit[120] & reg_we & !reg_error;
  assign b_30_cfg_drv_wd = reg_wdata[2:1];

  assign b_30_cfg_oen_we = addr_hit[120] & reg_we & !reg_error;
  assign b_30_cfg_oen_wd = reg_wdata[3];

  assign b_30_cfg_puen_we = addr_hit[120] & reg_we & !reg_error;
  assign b_30_cfg_puen_wd = reg_wdata[4];

  assign b_30_cfg_slw_we = addr_hit[120] & reg_we & !reg_error;
  assign b_30_cfg_slw_wd = reg_wdata[5];

  assign b_30_cfg_smt_we = addr_hit[120] & reg_we & !reg_error;
  assign b_30_cfg_smt_wd = reg_wdata[6];

  assign b_30_mux_sel_we = addr_hit[121] & reg_we & !reg_error;
  assign b_30_mux_sel_wd = reg_wdata[2:0];

  assign b_31_cfg_chip2pad_we = addr_hit[122] & reg_we & !reg_error;
  assign b_31_cfg_chip2pad_wd = reg_wdata[0];

  assign b_31_cfg_drv_we = addr_hit[122] & reg_we & !reg_error;
  assign b_31_cfg_drv_wd = reg_wdata[2:1];

  assign b_31_cfg_oen_we = addr_hit[122] & reg_we & !reg_error;
  assign b_31_cfg_oen_wd = reg_wdata[3];

  assign b_31_cfg_puen_we = addr_hit[122] & reg_we & !reg_error;
  assign b_31_cfg_puen_wd = reg_wdata[4];

  assign b_31_cfg_slw_we = addr_hit[122] & reg_we & !reg_error;
  assign b_31_cfg_slw_wd = reg_wdata[5];

  assign b_31_cfg_smt_we = addr_hit[122] & reg_we & !reg_error;
  assign b_31_cfg_smt_wd = reg_wdata[6];

  assign b_31_mux_sel_we = addr_hit[123] & reg_we & !reg_error;
  assign b_31_mux_sel_wd = reg_wdata[2:0];

  assign b_32_cfg_chip2pad_we = addr_hit[124] & reg_we & !reg_error;
  assign b_32_cfg_chip2pad_wd = reg_wdata[0];

  assign b_32_cfg_drv_we = addr_hit[124] & reg_we & !reg_error;
  assign b_32_cfg_drv_wd = reg_wdata[2:1];

  assign b_32_cfg_oen_we = addr_hit[124] & reg_we & !reg_error;
  assign b_32_cfg_oen_wd = reg_wdata[3];

  assign b_32_cfg_puen_we = addr_hit[124] & reg_we & !reg_error;
  assign b_32_cfg_puen_wd = reg_wdata[4];

  assign b_32_cfg_slw_we = addr_hit[124] & reg_we & !reg_error;
  assign b_32_cfg_slw_wd = reg_wdata[5];

  assign b_32_cfg_smt_we = addr_hit[124] & reg_we & !reg_error;
  assign b_32_cfg_smt_wd = reg_wdata[6];

  assign b_32_mux_sel_we = addr_hit[125] & reg_we & !reg_error;
  assign b_32_mux_sel_wd = reg_wdata[1:0];

  assign b_33_cfg_chip2pad_we = addr_hit[126] & reg_we & !reg_error;
  assign b_33_cfg_chip2pad_wd = reg_wdata[0];

  assign b_33_cfg_drv_we = addr_hit[126] & reg_we & !reg_error;
  assign b_33_cfg_drv_wd = reg_wdata[2:1];

  assign b_33_cfg_oen_we = addr_hit[126] & reg_we & !reg_error;
  assign b_33_cfg_oen_wd = reg_wdata[3];

  assign b_33_cfg_puen_we = addr_hit[126] & reg_we & !reg_error;
  assign b_33_cfg_puen_wd = reg_wdata[4];

  assign b_33_cfg_slw_we = addr_hit[126] & reg_we & !reg_error;
  assign b_33_cfg_slw_wd = reg_wdata[5];

  assign b_33_cfg_smt_we = addr_hit[126] & reg_we & !reg_error;
  assign b_33_cfg_smt_wd = reg_wdata[6];

  assign b_33_mux_sel_we = addr_hit[127] & reg_we & !reg_error;
  assign b_33_mux_sel_wd = reg_wdata[1:0];

  assign b_34_cfg_chip2pad_we = addr_hit[128] & reg_we & !reg_error;
  assign b_34_cfg_chip2pad_wd = reg_wdata[0];

  assign b_34_cfg_drv_we = addr_hit[128] & reg_we & !reg_error;
  assign b_34_cfg_drv_wd = reg_wdata[2:1];

  assign b_34_cfg_oen_we = addr_hit[128] & reg_we & !reg_error;
  assign b_34_cfg_oen_wd = reg_wdata[3];

  assign b_34_cfg_puen_we = addr_hit[128] & reg_we & !reg_error;
  assign b_34_cfg_puen_wd = reg_wdata[4];

  assign b_34_cfg_slw_we = addr_hit[128] & reg_we & !reg_error;
  assign b_34_cfg_slw_wd = reg_wdata[5];

  assign b_34_cfg_smt_we = addr_hit[128] & reg_we & !reg_error;
  assign b_34_cfg_smt_wd = reg_wdata[6];

  assign b_34_mux_sel_we = addr_hit[129] & reg_we & !reg_error;
  assign b_34_mux_sel_wd = reg_wdata[1:0];

  assign b_35_cfg_chip2pad_we = addr_hit[130] & reg_we & !reg_error;
  assign b_35_cfg_chip2pad_wd = reg_wdata[0];

  assign b_35_cfg_drv_we = addr_hit[130] & reg_we & !reg_error;
  assign b_35_cfg_drv_wd = reg_wdata[2:1];

  assign b_35_cfg_oen_we = addr_hit[130] & reg_we & !reg_error;
  assign b_35_cfg_oen_wd = reg_wdata[3];

  assign b_35_cfg_puen_we = addr_hit[130] & reg_we & !reg_error;
  assign b_35_cfg_puen_wd = reg_wdata[4];

  assign b_35_cfg_slw_we = addr_hit[130] & reg_we & !reg_error;
  assign b_35_cfg_slw_wd = reg_wdata[5];

  assign b_35_cfg_smt_we = addr_hit[130] & reg_we & !reg_error;
  assign b_35_cfg_smt_wd = reg_wdata[6];

  assign b_35_mux_sel_we = addr_hit[131] & reg_we & !reg_error;
  assign b_35_mux_sel_wd = reg_wdata[1:0];

  assign b_36_cfg_chip2pad_we = addr_hit[132] & reg_we & !reg_error;
  assign b_36_cfg_chip2pad_wd = reg_wdata[0];

  assign b_36_cfg_drv_we = addr_hit[132] & reg_we & !reg_error;
  assign b_36_cfg_drv_wd = reg_wdata[2:1];

  assign b_36_cfg_oen_we = addr_hit[132] & reg_we & !reg_error;
  assign b_36_cfg_oen_wd = reg_wdata[3];

  assign b_36_cfg_puen_we = addr_hit[132] & reg_we & !reg_error;
  assign b_36_cfg_puen_wd = reg_wdata[4];

  assign b_36_cfg_slw_we = addr_hit[132] & reg_we & !reg_error;
  assign b_36_cfg_slw_wd = reg_wdata[5];

  assign b_36_cfg_smt_we = addr_hit[132] & reg_we & !reg_error;
  assign b_36_cfg_smt_wd = reg_wdata[6];

  assign b_36_mux_sel_we = addr_hit[133] & reg_we & !reg_error;
  assign b_36_mux_sel_wd = reg_wdata[1:0];

  assign b_37_cfg_chip2pad_we = addr_hit[134] & reg_we & !reg_error;
  assign b_37_cfg_chip2pad_wd = reg_wdata[0];

  assign b_37_cfg_drv_we = addr_hit[134] & reg_we & !reg_error;
  assign b_37_cfg_drv_wd = reg_wdata[2:1];

  assign b_37_cfg_oen_we = addr_hit[134] & reg_we & !reg_error;
  assign b_37_cfg_oen_wd = reg_wdata[3];

  assign b_37_cfg_puen_we = addr_hit[134] & reg_we & !reg_error;
  assign b_37_cfg_puen_wd = reg_wdata[4];

  assign b_37_cfg_slw_we = addr_hit[134] & reg_we & !reg_error;
  assign b_37_cfg_slw_wd = reg_wdata[5];

  assign b_37_cfg_smt_we = addr_hit[134] & reg_we & !reg_error;
  assign b_37_cfg_smt_wd = reg_wdata[6];

  assign b_37_mux_sel_we = addr_hit[135] & reg_we & !reg_error;
  assign b_37_mux_sel_wd = reg_wdata[1:0];

  assign b_38_cfg_chip2pad_we = addr_hit[136] & reg_we & !reg_error;
  assign b_38_cfg_chip2pad_wd = reg_wdata[0];

  assign b_38_cfg_drv_we = addr_hit[136] & reg_we & !reg_error;
  assign b_38_cfg_drv_wd = reg_wdata[2:1];

  assign b_38_cfg_oen_we = addr_hit[136] & reg_we & !reg_error;
  assign b_38_cfg_oen_wd = reg_wdata[3];

  assign b_38_cfg_puen_we = addr_hit[136] & reg_we & !reg_error;
  assign b_38_cfg_puen_wd = reg_wdata[4];

  assign b_38_cfg_slw_we = addr_hit[136] & reg_we & !reg_error;
  assign b_38_cfg_slw_wd = reg_wdata[5];

  assign b_38_cfg_smt_we = addr_hit[136] & reg_we & !reg_error;
  assign b_38_cfg_smt_wd = reg_wdata[6];

  assign b_38_mux_sel_we = addr_hit[137] & reg_we & !reg_error;
  assign b_38_mux_sel_wd = reg_wdata[1:0];

  assign b_39_cfg_chip2pad_we = addr_hit[138] & reg_we & !reg_error;
  assign b_39_cfg_chip2pad_wd = reg_wdata[0];

  assign b_39_cfg_drv_we = addr_hit[138] & reg_we & !reg_error;
  assign b_39_cfg_drv_wd = reg_wdata[2:1];

  assign b_39_cfg_oen_we = addr_hit[138] & reg_we & !reg_error;
  assign b_39_cfg_oen_wd = reg_wdata[3];

  assign b_39_cfg_puen_we = addr_hit[138] & reg_we & !reg_error;
  assign b_39_cfg_puen_wd = reg_wdata[4];

  assign b_39_cfg_slw_we = addr_hit[138] & reg_we & !reg_error;
  assign b_39_cfg_slw_wd = reg_wdata[5];

  assign b_39_cfg_smt_we = addr_hit[138] & reg_we & !reg_error;
  assign b_39_cfg_smt_wd = reg_wdata[6];

  assign b_39_mux_sel_we = addr_hit[139] & reg_we & !reg_error;
  assign b_39_mux_sel_wd = reg_wdata[1:0];

  assign b_40_cfg_chip2pad_we = addr_hit[140] & reg_we & !reg_error;
  assign b_40_cfg_chip2pad_wd = reg_wdata[0];

  assign b_40_cfg_drv_we = addr_hit[140] & reg_we & !reg_error;
  assign b_40_cfg_drv_wd = reg_wdata[2:1];

  assign b_40_cfg_oen_we = addr_hit[140] & reg_we & !reg_error;
  assign b_40_cfg_oen_wd = reg_wdata[3];

  assign b_40_cfg_puen_we = addr_hit[140] & reg_we & !reg_error;
  assign b_40_cfg_puen_wd = reg_wdata[4];

  assign b_40_cfg_slw_we = addr_hit[140] & reg_we & !reg_error;
  assign b_40_cfg_slw_wd = reg_wdata[5];

  assign b_40_cfg_smt_we = addr_hit[140] & reg_we & !reg_error;
  assign b_40_cfg_smt_wd = reg_wdata[6];

  assign b_40_mux_sel_we = addr_hit[141] & reg_we & !reg_error;
  assign b_40_mux_sel_wd = reg_wdata[1:0];

  assign b_41_cfg_chip2pad_we = addr_hit[142] & reg_we & !reg_error;
  assign b_41_cfg_chip2pad_wd = reg_wdata[0];

  assign b_41_cfg_drv_we = addr_hit[142] & reg_we & !reg_error;
  assign b_41_cfg_drv_wd = reg_wdata[2:1];

  assign b_41_cfg_oen_we = addr_hit[142] & reg_we & !reg_error;
  assign b_41_cfg_oen_wd = reg_wdata[3];

  assign b_41_cfg_puen_we = addr_hit[142] & reg_we & !reg_error;
  assign b_41_cfg_puen_wd = reg_wdata[4];

  assign b_41_cfg_slw_we = addr_hit[142] & reg_we & !reg_error;
  assign b_41_cfg_slw_wd = reg_wdata[5];

  assign b_41_cfg_smt_we = addr_hit[142] & reg_we & !reg_error;
  assign b_41_cfg_smt_wd = reg_wdata[6];

  assign b_41_mux_sel_we = addr_hit[143] & reg_we & !reg_error;
  assign b_41_mux_sel_wd = reg_wdata[1:0];

  assign b_42_cfg_chip2pad_we = addr_hit[144] & reg_we & !reg_error;
  assign b_42_cfg_chip2pad_wd = reg_wdata[0];

  assign b_42_cfg_drv_we = addr_hit[144] & reg_we & !reg_error;
  assign b_42_cfg_drv_wd = reg_wdata[2:1];

  assign b_42_cfg_oen_we = addr_hit[144] & reg_we & !reg_error;
  assign b_42_cfg_oen_wd = reg_wdata[3];

  assign b_42_cfg_puen_we = addr_hit[144] & reg_we & !reg_error;
  assign b_42_cfg_puen_wd = reg_wdata[4];

  assign b_42_cfg_slw_we = addr_hit[144] & reg_we & !reg_error;
  assign b_42_cfg_slw_wd = reg_wdata[5];

  assign b_42_cfg_smt_we = addr_hit[144] & reg_we & !reg_error;
  assign b_42_cfg_smt_wd = reg_wdata[6];

  assign b_42_mux_sel_we = addr_hit[145] & reg_we & !reg_error;
  assign b_42_mux_sel_wd = reg_wdata[1:0];

  assign b_43_cfg_chip2pad_we = addr_hit[146] & reg_we & !reg_error;
  assign b_43_cfg_chip2pad_wd = reg_wdata[0];

  assign b_43_cfg_drv_we = addr_hit[146] & reg_we & !reg_error;
  assign b_43_cfg_drv_wd = reg_wdata[2:1];

  assign b_43_cfg_oen_we = addr_hit[146] & reg_we & !reg_error;
  assign b_43_cfg_oen_wd = reg_wdata[3];

  assign b_43_cfg_puen_we = addr_hit[146] & reg_we & !reg_error;
  assign b_43_cfg_puen_wd = reg_wdata[4];

  assign b_43_cfg_slw_we = addr_hit[146] & reg_we & !reg_error;
  assign b_43_cfg_slw_wd = reg_wdata[5];

  assign b_43_cfg_smt_we = addr_hit[146] & reg_we & !reg_error;
  assign b_43_cfg_smt_wd = reg_wdata[6];

  assign b_43_mux_sel_we = addr_hit[147] & reg_we & !reg_error;
  assign b_43_mux_sel_wd = reg_wdata[1:0];

  assign b_44_cfg_chip2pad_we = addr_hit[148] & reg_we & !reg_error;
  assign b_44_cfg_chip2pad_wd = reg_wdata[0];

  assign b_44_cfg_drv_we = addr_hit[148] & reg_we & !reg_error;
  assign b_44_cfg_drv_wd = reg_wdata[2:1];

  assign b_44_cfg_oen_we = addr_hit[148] & reg_we & !reg_error;
  assign b_44_cfg_oen_wd = reg_wdata[3];

  assign b_44_cfg_puen_we = addr_hit[148] & reg_we & !reg_error;
  assign b_44_cfg_puen_wd = reg_wdata[4];

  assign b_44_cfg_slw_we = addr_hit[148] & reg_we & !reg_error;
  assign b_44_cfg_slw_wd = reg_wdata[5];

  assign b_44_cfg_smt_we = addr_hit[148] & reg_we & !reg_error;
  assign b_44_cfg_smt_wd = reg_wdata[6];

  assign b_44_mux_sel_we = addr_hit[149] & reg_we & !reg_error;
  assign b_44_mux_sel_wd = reg_wdata[1:0];

  assign b_45_cfg_chip2pad_we = addr_hit[150] & reg_we & !reg_error;
  assign b_45_cfg_chip2pad_wd = reg_wdata[0];

  assign b_45_cfg_drv_we = addr_hit[150] & reg_we & !reg_error;
  assign b_45_cfg_drv_wd = reg_wdata[2:1];

  assign b_45_cfg_oen_we = addr_hit[150] & reg_we & !reg_error;
  assign b_45_cfg_oen_wd = reg_wdata[3];

  assign b_45_cfg_puen_we = addr_hit[150] & reg_we & !reg_error;
  assign b_45_cfg_puen_wd = reg_wdata[4];

  assign b_45_cfg_slw_we = addr_hit[150] & reg_we & !reg_error;
  assign b_45_cfg_slw_wd = reg_wdata[5];

  assign b_45_cfg_smt_we = addr_hit[150] & reg_we & !reg_error;
  assign b_45_cfg_smt_wd = reg_wdata[6];

  assign b_45_mux_sel_we = addr_hit[151] & reg_we & !reg_error;
  assign b_45_mux_sel_wd = reg_wdata[1:0];

  assign b_46_cfg_chip2pad_we = addr_hit[152] & reg_we & !reg_error;
  assign b_46_cfg_chip2pad_wd = reg_wdata[0];

  assign b_46_cfg_drv_we = addr_hit[152] & reg_we & !reg_error;
  assign b_46_cfg_drv_wd = reg_wdata[2:1];

  assign b_46_cfg_oen_we = addr_hit[152] & reg_we & !reg_error;
  assign b_46_cfg_oen_wd = reg_wdata[3];

  assign b_46_cfg_puen_we = addr_hit[152] & reg_we & !reg_error;
  assign b_46_cfg_puen_wd = reg_wdata[4];

  assign b_46_cfg_slw_we = addr_hit[152] & reg_we & !reg_error;
  assign b_46_cfg_slw_wd = reg_wdata[5];

  assign b_46_cfg_smt_we = addr_hit[152] & reg_we & !reg_error;
  assign b_46_cfg_smt_wd = reg_wdata[6];

  assign b_46_mux_sel_we = addr_hit[153] & reg_we & !reg_error;
  assign b_46_mux_sel_wd = reg_wdata[1:0];

  assign b_47_cfg_chip2pad_we = addr_hit[154] & reg_we & !reg_error;
  assign b_47_cfg_chip2pad_wd = reg_wdata[0];

  assign b_47_cfg_drv_we = addr_hit[154] & reg_we & !reg_error;
  assign b_47_cfg_drv_wd = reg_wdata[2:1];

  assign b_47_cfg_oen_we = addr_hit[154] & reg_we & !reg_error;
  assign b_47_cfg_oen_wd = reg_wdata[3];

  assign b_47_cfg_puen_we = addr_hit[154] & reg_we & !reg_error;
  assign b_47_cfg_puen_wd = reg_wdata[4];

  assign b_47_cfg_slw_we = addr_hit[154] & reg_we & !reg_error;
  assign b_47_cfg_slw_wd = reg_wdata[5];

  assign b_47_cfg_smt_we = addr_hit[154] & reg_we & !reg_error;
  assign b_47_cfg_smt_wd = reg_wdata[6];

  assign b_47_mux_sel_we = addr_hit[155] & reg_we & !reg_error;
  assign b_47_mux_sel_wd = reg_wdata[1:0];

  assign ot_spi_00_cfg_chip2pad_we = addr_hit[156] & reg_we & !reg_error;
  assign ot_spi_00_cfg_chip2pad_wd = reg_wdata[0];

  assign ot_spi_00_cfg_drv_we = addr_hit[156] & reg_we & !reg_error;
  assign ot_spi_00_cfg_drv_wd = reg_wdata[2:1];

  assign ot_spi_00_cfg_oen_we = addr_hit[156] & reg_we & !reg_error;
  assign ot_spi_00_cfg_oen_wd = reg_wdata[3];

  assign ot_spi_00_cfg_puen_we = addr_hit[156] & reg_we & !reg_error;
  assign ot_spi_00_cfg_puen_wd = reg_wdata[4];

  assign ot_spi_00_cfg_slw_we = addr_hit[156] & reg_we & !reg_error;
  assign ot_spi_00_cfg_slw_wd = reg_wdata[5];

  assign ot_spi_00_cfg_smt_we = addr_hit[156] & reg_we & !reg_error;
  assign ot_spi_00_cfg_smt_wd = reg_wdata[6];

  assign ot_spi_00_mux_sel_we = addr_hit[157] & reg_we & !reg_error;
  assign ot_spi_00_mux_sel_wd = reg_wdata[0];

  assign ot_spi_01_cfg_chip2pad_we = addr_hit[158] & reg_we & !reg_error;
  assign ot_spi_01_cfg_chip2pad_wd = reg_wdata[0];

  assign ot_spi_01_cfg_drv_we = addr_hit[158] & reg_we & !reg_error;
  assign ot_spi_01_cfg_drv_wd = reg_wdata[2:1];

  assign ot_spi_01_cfg_oen_we = addr_hit[158] & reg_we & !reg_error;
  assign ot_spi_01_cfg_oen_wd = reg_wdata[3];

  assign ot_spi_01_cfg_puen_we = addr_hit[158] & reg_we & !reg_error;
  assign ot_spi_01_cfg_puen_wd = reg_wdata[4];

  assign ot_spi_01_cfg_slw_we = addr_hit[158] & reg_we & !reg_error;
  assign ot_spi_01_cfg_slw_wd = reg_wdata[5];

  assign ot_spi_01_cfg_smt_we = addr_hit[158] & reg_we & !reg_error;
  assign ot_spi_01_cfg_smt_wd = reg_wdata[6];

  assign ot_spi_01_mux_sel_we = addr_hit[159] & reg_we & !reg_error;
  assign ot_spi_01_mux_sel_wd = reg_wdata[0];

  assign ot_spi_02_cfg_chip2pad_we = addr_hit[160] & reg_we & !reg_error;
  assign ot_spi_02_cfg_chip2pad_wd = reg_wdata[0];

  assign ot_spi_02_cfg_drv_we = addr_hit[160] & reg_we & !reg_error;
  assign ot_spi_02_cfg_drv_wd = reg_wdata[2:1];

  assign ot_spi_02_cfg_oen_we = addr_hit[160] & reg_we & !reg_error;
  assign ot_spi_02_cfg_oen_wd = reg_wdata[3];

  assign ot_spi_02_cfg_puen_we = addr_hit[160] & reg_we & !reg_error;
  assign ot_spi_02_cfg_puen_wd = reg_wdata[4];

  assign ot_spi_02_cfg_slw_we = addr_hit[160] & reg_we & !reg_error;
  assign ot_spi_02_cfg_slw_wd = reg_wdata[5];

  assign ot_spi_02_cfg_smt_we = addr_hit[160] & reg_we & !reg_error;
  assign ot_spi_02_cfg_smt_wd = reg_wdata[6];

  assign ot_spi_02_mux_sel_we = addr_hit[161] & reg_we & !reg_error;
  assign ot_spi_02_mux_sel_wd = reg_wdata[0];

  assign ot_spi_03_cfg_chip2pad_we = addr_hit[162] & reg_we & !reg_error;
  assign ot_spi_03_cfg_chip2pad_wd = reg_wdata[0];

  assign ot_spi_03_cfg_drv_we = addr_hit[162] & reg_we & !reg_error;
  assign ot_spi_03_cfg_drv_wd = reg_wdata[2:1];

  assign ot_spi_03_cfg_oen_we = addr_hit[162] & reg_we & !reg_error;
  assign ot_spi_03_cfg_oen_wd = reg_wdata[3];

  assign ot_spi_03_cfg_puen_we = addr_hit[162] & reg_we & !reg_error;
  assign ot_spi_03_cfg_puen_wd = reg_wdata[4];

  assign ot_spi_03_cfg_slw_we = addr_hit[162] & reg_we & !reg_error;
  assign ot_spi_03_cfg_slw_wd = reg_wdata[5];

  assign ot_spi_03_cfg_smt_we = addr_hit[162] & reg_we & !reg_error;
  assign ot_spi_03_cfg_smt_wd = reg_wdata[6];

  assign ot_spi_03_mux_sel_we = addr_hit[163] & reg_we & !reg_error;
  assign ot_spi_03_mux_sel_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = a_00_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_00_cfg_drv_qs;
        reg_rdata_next[3] = a_00_cfg_oen_qs;
        reg_rdata_next[4] = a_00_cfg_puen_qs;
        reg_rdata_next[5] = a_00_cfg_slw_qs;
        reg_rdata_next[6] = a_00_cfg_smt_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[1:0] = a_00_mux_sel_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = a_01_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_01_cfg_drv_qs;
        reg_rdata_next[3] = a_01_cfg_oen_qs;
        reg_rdata_next[4] = a_01_cfg_puen_qs;
        reg_rdata_next[5] = a_01_cfg_slw_qs;
        reg_rdata_next[6] = a_01_cfg_smt_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[1:0] = a_01_mux_sel_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = a_02_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_02_cfg_drv_qs;
        reg_rdata_next[3] = a_02_cfg_oen_qs;
        reg_rdata_next[4] = a_02_cfg_puen_qs;
        reg_rdata_next[5] = a_02_cfg_slw_qs;
        reg_rdata_next[6] = a_02_cfg_smt_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[2:0] = a_02_mux_sel_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = a_03_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_03_cfg_drv_qs;
        reg_rdata_next[3] = a_03_cfg_oen_qs;
        reg_rdata_next[4] = a_03_cfg_puen_qs;
        reg_rdata_next[5] = a_03_cfg_slw_qs;
        reg_rdata_next[6] = a_03_cfg_smt_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[2:0] = a_03_mux_sel_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = a_04_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_04_cfg_drv_qs;
        reg_rdata_next[3] = a_04_cfg_oen_qs;
        reg_rdata_next[4] = a_04_cfg_puen_qs;
        reg_rdata_next[5] = a_04_cfg_slw_qs;
        reg_rdata_next[6] = a_04_cfg_smt_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[2:0] = a_04_mux_sel_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = a_05_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_05_cfg_drv_qs;
        reg_rdata_next[3] = a_05_cfg_oen_qs;
        reg_rdata_next[4] = a_05_cfg_puen_qs;
        reg_rdata_next[5] = a_05_cfg_slw_qs;
        reg_rdata_next[6] = a_05_cfg_smt_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[2:0] = a_05_mux_sel_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = a_06_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_06_cfg_drv_qs;
        reg_rdata_next[3] = a_06_cfg_oen_qs;
        reg_rdata_next[4] = a_06_cfg_puen_qs;
        reg_rdata_next[5] = a_06_cfg_slw_qs;
        reg_rdata_next[6] = a_06_cfg_smt_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[2:0] = a_06_mux_sel_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = a_07_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_07_cfg_drv_qs;
        reg_rdata_next[3] = a_07_cfg_oen_qs;
        reg_rdata_next[4] = a_07_cfg_puen_qs;
        reg_rdata_next[5] = a_07_cfg_slw_qs;
        reg_rdata_next[6] = a_07_cfg_smt_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[2:0] = a_07_mux_sel_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = a_08_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_08_cfg_drv_qs;
        reg_rdata_next[3] = a_08_cfg_oen_qs;
        reg_rdata_next[4] = a_08_cfg_puen_qs;
        reg_rdata_next[5] = a_08_cfg_slw_qs;
        reg_rdata_next[6] = a_08_cfg_smt_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[1:0] = a_08_mux_sel_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = a_09_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_09_cfg_drv_qs;
        reg_rdata_next[3] = a_09_cfg_oen_qs;
        reg_rdata_next[4] = a_09_cfg_puen_qs;
        reg_rdata_next[5] = a_09_cfg_slw_qs;
        reg_rdata_next[6] = a_09_cfg_smt_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[1:0] = a_09_mux_sel_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = a_10_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_10_cfg_drv_qs;
        reg_rdata_next[3] = a_10_cfg_oen_qs;
        reg_rdata_next[4] = a_10_cfg_puen_qs;
        reg_rdata_next[5] = a_10_cfg_slw_qs;
        reg_rdata_next[6] = a_10_cfg_smt_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[1:0] = a_10_mux_sel_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = a_11_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_11_cfg_drv_qs;
        reg_rdata_next[3] = a_11_cfg_oen_qs;
        reg_rdata_next[4] = a_11_cfg_puen_qs;
        reg_rdata_next[5] = a_11_cfg_slw_qs;
        reg_rdata_next[6] = a_11_cfg_smt_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[1:0] = a_11_mux_sel_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = a_12_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_12_cfg_drv_qs;
        reg_rdata_next[3] = a_12_cfg_oen_qs;
        reg_rdata_next[4] = a_12_cfg_puen_qs;
        reg_rdata_next[5] = a_12_cfg_slw_qs;
        reg_rdata_next[6] = a_12_cfg_smt_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[1:0] = a_12_mux_sel_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = a_13_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_13_cfg_drv_qs;
        reg_rdata_next[3] = a_13_cfg_oen_qs;
        reg_rdata_next[4] = a_13_cfg_puen_qs;
        reg_rdata_next[5] = a_13_cfg_slw_qs;
        reg_rdata_next[6] = a_13_cfg_smt_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[1:0] = a_13_mux_sel_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = a_14_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_14_cfg_drv_qs;
        reg_rdata_next[3] = a_14_cfg_oen_qs;
        reg_rdata_next[4] = a_14_cfg_puen_qs;
        reg_rdata_next[5] = a_14_cfg_slw_qs;
        reg_rdata_next[6] = a_14_cfg_smt_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[2:0] = a_14_mux_sel_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = a_15_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_15_cfg_drv_qs;
        reg_rdata_next[3] = a_15_cfg_oen_qs;
        reg_rdata_next[4] = a_15_cfg_puen_qs;
        reg_rdata_next[5] = a_15_cfg_slw_qs;
        reg_rdata_next[6] = a_15_cfg_smt_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[2:0] = a_15_mux_sel_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = a_16_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_16_cfg_drv_qs;
        reg_rdata_next[3] = a_16_cfg_oen_qs;
        reg_rdata_next[4] = a_16_cfg_puen_qs;
        reg_rdata_next[5] = a_16_cfg_slw_qs;
        reg_rdata_next[6] = a_16_cfg_smt_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[2:0] = a_16_mux_sel_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = a_17_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_17_cfg_drv_qs;
        reg_rdata_next[3] = a_17_cfg_oen_qs;
        reg_rdata_next[4] = a_17_cfg_puen_qs;
        reg_rdata_next[5] = a_17_cfg_slw_qs;
        reg_rdata_next[6] = a_17_cfg_smt_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[2:0] = a_17_mux_sel_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = a_18_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_18_cfg_drv_qs;
        reg_rdata_next[3] = a_18_cfg_oen_qs;
        reg_rdata_next[4] = a_18_cfg_puen_qs;
        reg_rdata_next[5] = a_18_cfg_slw_qs;
        reg_rdata_next[6] = a_18_cfg_smt_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[2:0] = a_18_mux_sel_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = a_19_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_19_cfg_drv_qs;
        reg_rdata_next[3] = a_19_cfg_oen_qs;
        reg_rdata_next[4] = a_19_cfg_puen_qs;
        reg_rdata_next[5] = a_19_cfg_slw_qs;
        reg_rdata_next[6] = a_19_cfg_smt_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[2:0] = a_19_mux_sel_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0] = a_20_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_20_cfg_drv_qs;
        reg_rdata_next[3] = a_20_cfg_oen_qs;
        reg_rdata_next[4] = a_20_cfg_puen_qs;
        reg_rdata_next[5] = a_20_cfg_slw_qs;
        reg_rdata_next[6] = a_20_cfg_smt_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[2:0] = a_20_mux_sel_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = a_21_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_21_cfg_drv_qs;
        reg_rdata_next[3] = a_21_cfg_oen_qs;
        reg_rdata_next[4] = a_21_cfg_puen_qs;
        reg_rdata_next[5] = a_21_cfg_slw_qs;
        reg_rdata_next[6] = a_21_cfg_smt_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[2:0] = a_21_mux_sel_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = a_22_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_22_cfg_drv_qs;
        reg_rdata_next[3] = a_22_cfg_oen_qs;
        reg_rdata_next[4] = a_22_cfg_puen_qs;
        reg_rdata_next[5] = a_22_cfg_slw_qs;
        reg_rdata_next[6] = a_22_cfg_smt_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[2:0] = a_22_mux_sel_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = a_23_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_23_cfg_drv_qs;
        reg_rdata_next[3] = a_23_cfg_oen_qs;
        reg_rdata_next[4] = a_23_cfg_puen_qs;
        reg_rdata_next[5] = a_23_cfg_slw_qs;
        reg_rdata_next[6] = a_23_cfg_smt_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[2:0] = a_23_mux_sel_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = a_24_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_24_cfg_drv_qs;
        reg_rdata_next[3] = a_24_cfg_oen_qs;
        reg_rdata_next[4] = a_24_cfg_puen_qs;
        reg_rdata_next[5] = a_24_cfg_slw_qs;
        reg_rdata_next[6] = a_24_cfg_smt_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[2:0] = a_24_mux_sel_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = a_25_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_25_cfg_drv_qs;
        reg_rdata_next[3] = a_25_cfg_oen_qs;
        reg_rdata_next[4] = a_25_cfg_puen_qs;
        reg_rdata_next[5] = a_25_cfg_slw_qs;
        reg_rdata_next[6] = a_25_cfg_smt_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[2:0] = a_25_mux_sel_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[0] = a_26_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_26_cfg_drv_qs;
        reg_rdata_next[3] = a_26_cfg_oen_qs;
        reg_rdata_next[4] = a_26_cfg_puen_qs;
        reg_rdata_next[5] = a_26_cfg_slw_qs;
        reg_rdata_next[6] = a_26_cfg_smt_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[2:0] = a_26_mux_sel_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = a_27_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_27_cfg_drv_qs;
        reg_rdata_next[3] = a_27_cfg_oen_qs;
        reg_rdata_next[4] = a_27_cfg_puen_qs;
        reg_rdata_next[5] = a_27_cfg_slw_qs;
        reg_rdata_next[6] = a_27_cfg_smt_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[2:0] = a_27_mux_sel_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = a_28_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_28_cfg_drv_qs;
        reg_rdata_next[3] = a_28_cfg_oen_qs;
        reg_rdata_next[4] = a_28_cfg_puen_qs;
        reg_rdata_next[5] = a_28_cfg_slw_qs;
        reg_rdata_next[6] = a_28_cfg_smt_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[2:0] = a_28_mux_sel_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = a_29_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = a_29_cfg_drv_qs;
        reg_rdata_next[3] = a_29_cfg_oen_qs;
        reg_rdata_next[4] = a_29_cfg_puen_qs;
        reg_rdata_next[5] = a_29_cfg_slw_qs;
        reg_rdata_next[6] = a_29_cfg_smt_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[2:0] = a_29_mux_sel_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[0] = b_00_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_00_cfg_drv_qs;
        reg_rdata_next[3] = b_00_cfg_oen_qs;
        reg_rdata_next[4] = b_00_cfg_puen_qs;
        reg_rdata_next[5] = b_00_cfg_slw_qs;
        reg_rdata_next[6] = b_00_cfg_smt_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[2:0] = b_00_mux_sel_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[0] = b_01_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_01_cfg_drv_qs;
        reg_rdata_next[3] = b_01_cfg_oen_qs;
        reg_rdata_next[4] = b_01_cfg_puen_qs;
        reg_rdata_next[5] = b_01_cfg_slw_qs;
        reg_rdata_next[6] = b_01_cfg_smt_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[2:0] = b_01_mux_sel_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[0] = b_02_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_02_cfg_drv_qs;
        reg_rdata_next[3] = b_02_cfg_oen_qs;
        reg_rdata_next[4] = b_02_cfg_puen_qs;
        reg_rdata_next[5] = b_02_cfg_slw_qs;
        reg_rdata_next[6] = b_02_cfg_smt_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[2:0] = b_02_mux_sel_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[0] = b_03_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_03_cfg_drv_qs;
        reg_rdata_next[3] = b_03_cfg_oen_qs;
        reg_rdata_next[4] = b_03_cfg_puen_qs;
        reg_rdata_next[5] = b_03_cfg_slw_qs;
        reg_rdata_next[6] = b_03_cfg_smt_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[2:0] = b_03_mux_sel_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[0] = b_04_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_04_cfg_drv_qs;
        reg_rdata_next[3] = b_04_cfg_oen_qs;
        reg_rdata_next[4] = b_04_cfg_puen_qs;
        reg_rdata_next[5] = b_04_cfg_slw_qs;
        reg_rdata_next[6] = b_04_cfg_smt_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[2:0] = b_04_mux_sel_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[0] = b_05_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_05_cfg_drv_qs;
        reg_rdata_next[3] = b_05_cfg_oen_qs;
        reg_rdata_next[4] = b_05_cfg_puen_qs;
        reg_rdata_next[5] = b_05_cfg_slw_qs;
        reg_rdata_next[6] = b_05_cfg_smt_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[2:0] = b_05_mux_sel_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[0] = b_06_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_06_cfg_drv_qs;
        reg_rdata_next[3] = b_06_cfg_oen_qs;
        reg_rdata_next[4] = b_06_cfg_puen_qs;
        reg_rdata_next[5] = b_06_cfg_slw_qs;
        reg_rdata_next[6] = b_06_cfg_smt_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[2:0] = b_06_mux_sel_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[0] = b_07_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_07_cfg_drv_qs;
        reg_rdata_next[3] = b_07_cfg_oen_qs;
        reg_rdata_next[4] = b_07_cfg_puen_qs;
        reg_rdata_next[5] = b_07_cfg_slw_qs;
        reg_rdata_next[6] = b_07_cfg_smt_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[2:0] = b_07_mux_sel_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[0] = b_08_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_08_cfg_drv_qs;
        reg_rdata_next[3] = b_08_cfg_oen_qs;
        reg_rdata_next[4] = b_08_cfg_puen_qs;
        reg_rdata_next[5] = b_08_cfg_slw_qs;
        reg_rdata_next[6] = b_08_cfg_smt_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[2:0] = b_08_mux_sel_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[0] = b_09_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_09_cfg_drv_qs;
        reg_rdata_next[3] = b_09_cfg_oen_qs;
        reg_rdata_next[4] = b_09_cfg_puen_qs;
        reg_rdata_next[5] = b_09_cfg_slw_qs;
        reg_rdata_next[6] = b_09_cfg_smt_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[2:0] = b_09_mux_sel_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[0] = b_10_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_10_cfg_drv_qs;
        reg_rdata_next[3] = b_10_cfg_oen_qs;
        reg_rdata_next[4] = b_10_cfg_puen_qs;
        reg_rdata_next[5] = b_10_cfg_slw_qs;
        reg_rdata_next[6] = b_10_cfg_smt_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[2:0] = b_10_mux_sel_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[0] = b_11_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_11_cfg_drv_qs;
        reg_rdata_next[3] = b_11_cfg_oen_qs;
        reg_rdata_next[4] = b_11_cfg_puen_qs;
        reg_rdata_next[5] = b_11_cfg_slw_qs;
        reg_rdata_next[6] = b_11_cfg_smt_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[2:0] = b_11_mux_sel_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = b_12_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_12_cfg_drv_qs;
        reg_rdata_next[3] = b_12_cfg_oen_qs;
        reg_rdata_next[4] = b_12_cfg_puen_qs;
        reg_rdata_next[5] = b_12_cfg_slw_qs;
        reg_rdata_next[6] = b_12_cfg_smt_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[2:0] = b_12_mux_sel_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[0] = b_13_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_13_cfg_drv_qs;
        reg_rdata_next[3] = b_13_cfg_oen_qs;
        reg_rdata_next[4] = b_13_cfg_puen_qs;
        reg_rdata_next[5] = b_13_cfg_slw_qs;
        reg_rdata_next[6] = b_13_cfg_smt_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[2:0] = b_13_mux_sel_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[0] = b_14_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_14_cfg_drv_qs;
        reg_rdata_next[3] = b_14_cfg_oen_qs;
        reg_rdata_next[4] = b_14_cfg_puen_qs;
        reg_rdata_next[5] = b_14_cfg_slw_qs;
        reg_rdata_next[6] = b_14_cfg_smt_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[2:0] = b_14_mux_sel_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = b_15_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_15_cfg_drv_qs;
        reg_rdata_next[3] = b_15_cfg_oen_qs;
        reg_rdata_next[4] = b_15_cfg_puen_qs;
        reg_rdata_next[5] = b_15_cfg_slw_qs;
        reg_rdata_next[6] = b_15_cfg_smt_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[2:0] = b_15_mux_sel_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = b_16_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_16_cfg_drv_qs;
        reg_rdata_next[3] = b_16_cfg_oen_qs;
        reg_rdata_next[4] = b_16_cfg_puen_qs;
        reg_rdata_next[5] = b_16_cfg_slw_qs;
        reg_rdata_next[6] = b_16_cfg_smt_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[2:0] = b_16_mux_sel_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[0] = b_17_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_17_cfg_drv_qs;
        reg_rdata_next[3] = b_17_cfg_oen_qs;
        reg_rdata_next[4] = b_17_cfg_puen_qs;
        reg_rdata_next[5] = b_17_cfg_slw_qs;
        reg_rdata_next[6] = b_17_cfg_smt_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[2:0] = b_17_mux_sel_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[0] = b_18_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_18_cfg_drv_qs;
        reg_rdata_next[3] = b_18_cfg_oen_qs;
        reg_rdata_next[4] = b_18_cfg_puen_qs;
        reg_rdata_next[5] = b_18_cfg_slw_qs;
        reg_rdata_next[6] = b_18_cfg_smt_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[2:0] = b_18_mux_sel_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[0] = b_19_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_19_cfg_drv_qs;
        reg_rdata_next[3] = b_19_cfg_oen_qs;
        reg_rdata_next[4] = b_19_cfg_puen_qs;
        reg_rdata_next[5] = b_19_cfg_slw_qs;
        reg_rdata_next[6] = b_19_cfg_smt_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[2:0] = b_19_mux_sel_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[0] = b_20_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_20_cfg_drv_qs;
        reg_rdata_next[3] = b_20_cfg_oen_qs;
        reg_rdata_next[4] = b_20_cfg_puen_qs;
        reg_rdata_next[5] = b_20_cfg_slw_qs;
        reg_rdata_next[6] = b_20_cfg_smt_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[2:0] = b_20_mux_sel_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[0] = b_21_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_21_cfg_drv_qs;
        reg_rdata_next[3] = b_21_cfg_oen_qs;
        reg_rdata_next[4] = b_21_cfg_puen_qs;
        reg_rdata_next[5] = b_21_cfg_slw_qs;
        reg_rdata_next[6] = b_21_cfg_smt_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[2:0] = b_21_mux_sel_qs;
      end

      addr_hit[104]: begin
        reg_rdata_next[0] = b_22_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_22_cfg_drv_qs;
        reg_rdata_next[3] = b_22_cfg_oen_qs;
        reg_rdata_next[4] = b_22_cfg_puen_qs;
        reg_rdata_next[5] = b_22_cfg_slw_qs;
        reg_rdata_next[6] = b_22_cfg_smt_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[2:0] = b_22_mux_sel_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[0] = b_23_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_23_cfg_drv_qs;
        reg_rdata_next[3] = b_23_cfg_oen_qs;
        reg_rdata_next[4] = b_23_cfg_puen_qs;
        reg_rdata_next[5] = b_23_cfg_slw_qs;
        reg_rdata_next[6] = b_23_cfg_smt_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[2:0] = b_23_mux_sel_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[0] = b_24_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_24_cfg_drv_qs;
        reg_rdata_next[3] = b_24_cfg_oen_qs;
        reg_rdata_next[4] = b_24_cfg_puen_qs;
        reg_rdata_next[5] = b_24_cfg_slw_qs;
        reg_rdata_next[6] = b_24_cfg_smt_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[2:0] = b_24_mux_sel_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[0] = b_25_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_25_cfg_drv_qs;
        reg_rdata_next[3] = b_25_cfg_oen_qs;
        reg_rdata_next[4] = b_25_cfg_puen_qs;
        reg_rdata_next[5] = b_25_cfg_slw_qs;
        reg_rdata_next[6] = b_25_cfg_smt_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[2:0] = b_25_mux_sel_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[0] = b_26_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_26_cfg_drv_qs;
        reg_rdata_next[3] = b_26_cfg_oen_qs;
        reg_rdata_next[4] = b_26_cfg_puen_qs;
        reg_rdata_next[5] = b_26_cfg_slw_qs;
        reg_rdata_next[6] = b_26_cfg_smt_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[2:0] = b_26_mux_sel_qs;
      end

      addr_hit[114]: begin
        reg_rdata_next[0] = b_27_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_27_cfg_drv_qs;
        reg_rdata_next[3] = b_27_cfg_oen_qs;
        reg_rdata_next[4] = b_27_cfg_puen_qs;
        reg_rdata_next[5] = b_27_cfg_slw_qs;
        reg_rdata_next[6] = b_27_cfg_smt_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[2:0] = b_27_mux_sel_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[0] = b_28_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_28_cfg_drv_qs;
        reg_rdata_next[3] = b_28_cfg_oen_qs;
        reg_rdata_next[4] = b_28_cfg_puen_qs;
        reg_rdata_next[5] = b_28_cfg_slw_qs;
        reg_rdata_next[6] = b_28_cfg_smt_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[2:0] = b_28_mux_sel_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[0] = b_29_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_29_cfg_drv_qs;
        reg_rdata_next[3] = b_29_cfg_oen_qs;
        reg_rdata_next[4] = b_29_cfg_puen_qs;
        reg_rdata_next[5] = b_29_cfg_slw_qs;
        reg_rdata_next[6] = b_29_cfg_smt_qs;
      end

      addr_hit[119]: begin
        reg_rdata_next[2:0] = b_29_mux_sel_qs;
      end

      addr_hit[120]: begin
        reg_rdata_next[0] = b_30_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_30_cfg_drv_qs;
        reg_rdata_next[3] = b_30_cfg_oen_qs;
        reg_rdata_next[4] = b_30_cfg_puen_qs;
        reg_rdata_next[5] = b_30_cfg_slw_qs;
        reg_rdata_next[6] = b_30_cfg_smt_qs;
      end

      addr_hit[121]: begin
        reg_rdata_next[2:0] = b_30_mux_sel_qs;
      end

      addr_hit[122]: begin
        reg_rdata_next[0] = b_31_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_31_cfg_drv_qs;
        reg_rdata_next[3] = b_31_cfg_oen_qs;
        reg_rdata_next[4] = b_31_cfg_puen_qs;
        reg_rdata_next[5] = b_31_cfg_slw_qs;
        reg_rdata_next[6] = b_31_cfg_smt_qs;
      end

      addr_hit[123]: begin
        reg_rdata_next[2:0] = b_31_mux_sel_qs;
      end

      addr_hit[124]: begin
        reg_rdata_next[0] = b_32_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_32_cfg_drv_qs;
        reg_rdata_next[3] = b_32_cfg_oen_qs;
        reg_rdata_next[4] = b_32_cfg_puen_qs;
        reg_rdata_next[5] = b_32_cfg_slw_qs;
        reg_rdata_next[6] = b_32_cfg_smt_qs;
      end

      addr_hit[125]: begin
        reg_rdata_next[1:0] = b_32_mux_sel_qs;
      end

      addr_hit[126]: begin
        reg_rdata_next[0] = b_33_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_33_cfg_drv_qs;
        reg_rdata_next[3] = b_33_cfg_oen_qs;
        reg_rdata_next[4] = b_33_cfg_puen_qs;
        reg_rdata_next[5] = b_33_cfg_slw_qs;
        reg_rdata_next[6] = b_33_cfg_smt_qs;
      end

      addr_hit[127]: begin
        reg_rdata_next[1:0] = b_33_mux_sel_qs;
      end

      addr_hit[128]: begin
        reg_rdata_next[0] = b_34_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_34_cfg_drv_qs;
        reg_rdata_next[3] = b_34_cfg_oen_qs;
        reg_rdata_next[4] = b_34_cfg_puen_qs;
        reg_rdata_next[5] = b_34_cfg_slw_qs;
        reg_rdata_next[6] = b_34_cfg_smt_qs;
      end

      addr_hit[129]: begin
        reg_rdata_next[1:0] = b_34_mux_sel_qs;
      end

      addr_hit[130]: begin
        reg_rdata_next[0] = b_35_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_35_cfg_drv_qs;
        reg_rdata_next[3] = b_35_cfg_oen_qs;
        reg_rdata_next[4] = b_35_cfg_puen_qs;
        reg_rdata_next[5] = b_35_cfg_slw_qs;
        reg_rdata_next[6] = b_35_cfg_smt_qs;
      end

      addr_hit[131]: begin
        reg_rdata_next[1:0] = b_35_mux_sel_qs;
      end

      addr_hit[132]: begin
        reg_rdata_next[0] = b_36_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_36_cfg_drv_qs;
        reg_rdata_next[3] = b_36_cfg_oen_qs;
        reg_rdata_next[4] = b_36_cfg_puen_qs;
        reg_rdata_next[5] = b_36_cfg_slw_qs;
        reg_rdata_next[6] = b_36_cfg_smt_qs;
      end

      addr_hit[133]: begin
        reg_rdata_next[1:0] = b_36_mux_sel_qs;
      end

      addr_hit[134]: begin
        reg_rdata_next[0] = b_37_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_37_cfg_drv_qs;
        reg_rdata_next[3] = b_37_cfg_oen_qs;
        reg_rdata_next[4] = b_37_cfg_puen_qs;
        reg_rdata_next[5] = b_37_cfg_slw_qs;
        reg_rdata_next[6] = b_37_cfg_smt_qs;
      end

      addr_hit[135]: begin
        reg_rdata_next[1:0] = b_37_mux_sel_qs;
      end

      addr_hit[136]: begin
        reg_rdata_next[0] = b_38_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_38_cfg_drv_qs;
        reg_rdata_next[3] = b_38_cfg_oen_qs;
        reg_rdata_next[4] = b_38_cfg_puen_qs;
        reg_rdata_next[5] = b_38_cfg_slw_qs;
        reg_rdata_next[6] = b_38_cfg_smt_qs;
      end

      addr_hit[137]: begin
        reg_rdata_next[1:0] = b_38_mux_sel_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[0] = b_39_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_39_cfg_drv_qs;
        reg_rdata_next[3] = b_39_cfg_oen_qs;
        reg_rdata_next[4] = b_39_cfg_puen_qs;
        reg_rdata_next[5] = b_39_cfg_slw_qs;
        reg_rdata_next[6] = b_39_cfg_smt_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[1:0] = b_39_mux_sel_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[0] = b_40_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_40_cfg_drv_qs;
        reg_rdata_next[3] = b_40_cfg_oen_qs;
        reg_rdata_next[4] = b_40_cfg_puen_qs;
        reg_rdata_next[5] = b_40_cfg_slw_qs;
        reg_rdata_next[6] = b_40_cfg_smt_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[1:0] = b_40_mux_sel_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[0] = b_41_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_41_cfg_drv_qs;
        reg_rdata_next[3] = b_41_cfg_oen_qs;
        reg_rdata_next[4] = b_41_cfg_puen_qs;
        reg_rdata_next[5] = b_41_cfg_slw_qs;
        reg_rdata_next[6] = b_41_cfg_smt_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[1:0] = b_41_mux_sel_qs;
      end

      addr_hit[144]: begin
        reg_rdata_next[0] = b_42_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_42_cfg_drv_qs;
        reg_rdata_next[3] = b_42_cfg_oen_qs;
        reg_rdata_next[4] = b_42_cfg_puen_qs;
        reg_rdata_next[5] = b_42_cfg_slw_qs;
        reg_rdata_next[6] = b_42_cfg_smt_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[1:0] = b_42_mux_sel_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[0] = b_43_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_43_cfg_drv_qs;
        reg_rdata_next[3] = b_43_cfg_oen_qs;
        reg_rdata_next[4] = b_43_cfg_puen_qs;
        reg_rdata_next[5] = b_43_cfg_slw_qs;
        reg_rdata_next[6] = b_43_cfg_smt_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[1:0] = b_43_mux_sel_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[0] = b_44_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_44_cfg_drv_qs;
        reg_rdata_next[3] = b_44_cfg_oen_qs;
        reg_rdata_next[4] = b_44_cfg_puen_qs;
        reg_rdata_next[5] = b_44_cfg_slw_qs;
        reg_rdata_next[6] = b_44_cfg_smt_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[1:0] = b_44_mux_sel_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[0] = b_45_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_45_cfg_drv_qs;
        reg_rdata_next[3] = b_45_cfg_oen_qs;
        reg_rdata_next[4] = b_45_cfg_puen_qs;
        reg_rdata_next[5] = b_45_cfg_slw_qs;
        reg_rdata_next[6] = b_45_cfg_smt_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[1:0] = b_45_mux_sel_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[0] = b_46_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_46_cfg_drv_qs;
        reg_rdata_next[3] = b_46_cfg_oen_qs;
        reg_rdata_next[4] = b_46_cfg_puen_qs;
        reg_rdata_next[5] = b_46_cfg_slw_qs;
        reg_rdata_next[6] = b_46_cfg_smt_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[1:0] = b_46_mux_sel_qs;
      end

      addr_hit[154]: begin
        reg_rdata_next[0] = b_47_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = b_47_cfg_drv_qs;
        reg_rdata_next[3] = b_47_cfg_oen_qs;
        reg_rdata_next[4] = b_47_cfg_puen_qs;
        reg_rdata_next[5] = b_47_cfg_slw_qs;
        reg_rdata_next[6] = b_47_cfg_smt_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[1:0] = b_47_mux_sel_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[0] = ot_spi_00_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = ot_spi_00_cfg_drv_qs;
        reg_rdata_next[3] = ot_spi_00_cfg_oen_qs;
        reg_rdata_next[4] = ot_spi_00_cfg_puen_qs;
        reg_rdata_next[5] = ot_spi_00_cfg_slw_qs;
        reg_rdata_next[6] = ot_spi_00_cfg_smt_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[0] = ot_spi_00_mux_sel_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[0] = ot_spi_01_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = ot_spi_01_cfg_drv_qs;
        reg_rdata_next[3] = ot_spi_01_cfg_oen_qs;
        reg_rdata_next[4] = ot_spi_01_cfg_puen_qs;
        reg_rdata_next[5] = ot_spi_01_cfg_slw_qs;
        reg_rdata_next[6] = ot_spi_01_cfg_smt_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[0] = ot_spi_01_mux_sel_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[0] = ot_spi_02_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = ot_spi_02_cfg_drv_qs;
        reg_rdata_next[3] = ot_spi_02_cfg_oen_qs;
        reg_rdata_next[4] = ot_spi_02_cfg_puen_qs;
        reg_rdata_next[5] = ot_spi_02_cfg_slw_qs;
        reg_rdata_next[6] = ot_spi_02_cfg_smt_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[0] = ot_spi_02_mux_sel_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[0] = ot_spi_03_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = ot_spi_03_cfg_drv_qs;
        reg_rdata_next[3] = ot_spi_03_cfg_oen_qs;
        reg_rdata_next[4] = ot_spi_03_cfg_puen_qs;
        reg_rdata_next[5] = ot_spi_03_cfg_slw_qs;
        reg_rdata_next[6] = ot_spi_03_cfg_smt_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[0] = ot_spi_03_mux_sel_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
