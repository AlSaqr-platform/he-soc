// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module alsaqr_periph_padframe_periphs_config_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 10
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output alsaqr_periph_padframe_periphs_config_reg_pkg::alsaqr_periph_padframe_periphs_config_reg2hw_t reg2hw, // Write


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import alsaqr_periph_padframe_periphs_config_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic pad_gpio_b_00_cfg_chip2pad_qs;
  logic pad_gpio_b_00_cfg_chip2pad_wd;
  logic pad_gpio_b_00_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_00_cfg_drv_qs;
  logic [1:0] pad_gpio_b_00_cfg_drv_wd;
  logic pad_gpio_b_00_cfg_drv_we;
  logic pad_gpio_b_00_cfg_oen_qs;
  logic pad_gpio_b_00_cfg_oen_wd;
  logic pad_gpio_b_00_cfg_oen_we;
  logic pad_gpio_b_00_cfg_puen_qs;
  logic pad_gpio_b_00_cfg_puen_wd;
  logic pad_gpio_b_00_cfg_puen_we;
  logic pad_gpio_b_00_cfg_slw_qs;
  logic pad_gpio_b_00_cfg_slw_wd;
  logic pad_gpio_b_00_cfg_slw_we;
  logic pad_gpio_b_00_cfg_smt_qs;
  logic pad_gpio_b_00_cfg_smt_wd;
  logic pad_gpio_b_00_cfg_smt_we;
  logic [1:0] pad_gpio_b_00_mux_sel_qs;
  logic [1:0] pad_gpio_b_00_mux_sel_wd;
  logic pad_gpio_b_00_mux_sel_we;
  logic pad_gpio_b_01_cfg_chip2pad_qs;
  logic pad_gpio_b_01_cfg_chip2pad_wd;
  logic pad_gpio_b_01_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_01_cfg_drv_qs;
  logic [1:0] pad_gpio_b_01_cfg_drv_wd;
  logic pad_gpio_b_01_cfg_drv_we;
  logic pad_gpio_b_01_cfg_oen_qs;
  logic pad_gpio_b_01_cfg_oen_wd;
  logic pad_gpio_b_01_cfg_oen_we;
  logic pad_gpio_b_01_cfg_puen_qs;
  logic pad_gpio_b_01_cfg_puen_wd;
  logic pad_gpio_b_01_cfg_puen_we;
  logic pad_gpio_b_01_cfg_slw_qs;
  logic pad_gpio_b_01_cfg_slw_wd;
  logic pad_gpio_b_01_cfg_slw_we;
  logic pad_gpio_b_01_cfg_smt_qs;
  logic pad_gpio_b_01_cfg_smt_wd;
  logic pad_gpio_b_01_cfg_smt_we;
  logic [1:0] pad_gpio_b_01_mux_sel_qs;
  logic [1:0] pad_gpio_b_01_mux_sel_wd;
  logic pad_gpio_b_01_mux_sel_we;
  logic pad_gpio_b_02_cfg_chip2pad_qs;
  logic pad_gpio_b_02_cfg_chip2pad_wd;
  logic pad_gpio_b_02_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_02_cfg_drv_qs;
  logic [1:0] pad_gpio_b_02_cfg_drv_wd;
  logic pad_gpio_b_02_cfg_drv_we;
  logic pad_gpio_b_02_cfg_oen_qs;
  logic pad_gpio_b_02_cfg_oen_wd;
  logic pad_gpio_b_02_cfg_oen_we;
  logic pad_gpio_b_02_cfg_puen_qs;
  logic pad_gpio_b_02_cfg_puen_wd;
  logic pad_gpio_b_02_cfg_puen_we;
  logic pad_gpio_b_02_cfg_slw_qs;
  logic pad_gpio_b_02_cfg_slw_wd;
  logic pad_gpio_b_02_cfg_slw_we;
  logic pad_gpio_b_02_cfg_smt_qs;
  logic pad_gpio_b_02_cfg_smt_wd;
  logic pad_gpio_b_02_cfg_smt_we;
  logic [1:0] pad_gpio_b_02_mux_sel_qs;
  logic [1:0] pad_gpio_b_02_mux_sel_wd;
  logic pad_gpio_b_02_mux_sel_we;
  logic pad_gpio_b_03_cfg_chip2pad_qs;
  logic pad_gpio_b_03_cfg_chip2pad_wd;
  logic pad_gpio_b_03_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_03_cfg_drv_qs;
  logic [1:0] pad_gpio_b_03_cfg_drv_wd;
  logic pad_gpio_b_03_cfg_drv_we;
  logic pad_gpio_b_03_cfg_oen_qs;
  logic pad_gpio_b_03_cfg_oen_wd;
  logic pad_gpio_b_03_cfg_oen_we;
  logic pad_gpio_b_03_cfg_puen_qs;
  logic pad_gpio_b_03_cfg_puen_wd;
  logic pad_gpio_b_03_cfg_puen_we;
  logic pad_gpio_b_03_cfg_slw_qs;
  logic pad_gpio_b_03_cfg_slw_wd;
  logic pad_gpio_b_03_cfg_slw_we;
  logic pad_gpio_b_03_cfg_smt_qs;
  logic pad_gpio_b_03_cfg_smt_wd;
  logic pad_gpio_b_03_cfg_smt_we;
  logic [1:0] pad_gpio_b_03_mux_sel_qs;
  logic [1:0] pad_gpio_b_03_mux_sel_wd;
  logic pad_gpio_b_03_mux_sel_we;
  logic pad_gpio_b_04_cfg_chip2pad_qs;
  logic pad_gpio_b_04_cfg_chip2pad_wd;
  logic pad_gpio_b_04_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_04_cfg_drv_qs;
  logic [1:0] pad_gpio_b_04_cfg_drv_wd;
  logic pad_gpio_b_04_cfg_drv_we;
  logic pad_gpio_b_04_cfg_oen_qs;
  logic pad_gpio_b_04_cfg_oen_wd;
  logic pad_gpio_b_04_cfg_oen_we;
  logic pad_gpio_b_04_cfg_puen_qs;
  logic pad_gpio_b_04_cfg_puen_wd;
  logic pad_gpio_b_04_cfg_puen_we;
  logic pad_gpio_b_04_cfg_slw_qs;
  logic pad_gpio_b_04_cfg_slw_wd;
  logic pad_gpio_b_04_cfg_slw_we;
  logic pad_gpio_b_04_cfg_smt_qs;
  logic pad_gpio_b_04_cfg_smt_wd;
  logic pad_gpio_b_04_cfg_smt_we;
  logic [1:0] pad_gpio_b_04_mux_sel_qs;
  logic [1:0] pad_gpio_b_04_mux_sel_wd;
  logic pad_gpio_b_04_mux_sel_we;
  logic pad_gpio_b_05_cfg_chip2pad_qs;
  logic pad_gpio_b_05_cfg_chip2pad_wd;
  logic pad_gpio_b_05_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_05_cfg_drv_qs;
  logic [1:0] pad_gpio_b_05_cfg_drv_wd;
  logic pad_gpio_b_05_cfg_drv_we;
  logic pad_gpio_b_05_cfg_oen_qs;
  logic pad_gpio_b_05_cfg_oen_wd;
  logic pad_gpio_b_05_cfg_oen_we;
  logic pad_gpio_b_05_cfg_puen_qs;
  logic pad_gpio_b_05_cfg_puen_wd;
  logic pad_gpio_b_05_cfg_puen_we;
  logic pad_gpio_b_05_cfg_slw_qs;
  logic pad_gpio_b_05_cfg_slw_wd;
  logic pad_gpio_b_05_cfg_slw_we;
  logic pad_gpio_b_05_cfg_smt_qs;
  logic pad_gpio_b_05_cfg_smt_wd;
  logic pad_gpio_b_05_cfg_smt_we;
  logic [1:0] pad_gpio_b_05_mux_sel_qs;
  logic [1:0] pad_gpio_b_05_mux_sel_wd;
  logic pad_gpio_b_05_mux_sel_we;
  logic pad_gpio_b_06_cfg_chip2pad_qs;
  logic pad_gpio_b_06_cfg_chip2pad_wd;
  logic pad_gpio_b_06_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_06_cfg_drv_qs;
  logic [1:0] pad_gpio_b_06_cfg_drv_wd;
  logic pad_gpio_b_06_cfg_drv_we;
  logic pad_gpio_b_06_cfg_oen_qs;
  logic pad_gpio_b_06_cfg_oen_wd;
  logic pad_gpio_b_06_cfg_oen_we;
  logic pad_gpio_b_06_cfg_puen_qs;
  logic pad_gpio_b_06_cfg_puen_wd;
  logic pad_gpio_b_06_cfg_puen_we;
  logic pad_gpio_b_06_cfg_slw_qs;
  logic pad_gpio_b_06_cfg_slw_wd;
  logic pad_gpio_b_06_cfg_slw_we;
  logic pad_gpio_b_06_cfg_smt_qs;
  logic pad_gpio_b_06_cfg_smt_wd;
  logic pad_gpio_b_06_cfg_smt_we;
  logic [1:0] pad_gpio_b_06_mux_sel_qs;
  logic [1:0] pad_gpio_b_06_mux_sel_wd;
  logic pad_gpio_b_06_mux_sel_we;
  logic pad_gpio_b_07_cfg_chip2pad_qs;
  logic pad_gpio_b_07_cfg_chip2pad_wd;
  logic pad_gpio_b_07_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_07_cfg_drv_qs;
  logic [1:0] pad_gpio_b_07_cfg_drv_wd;
  logic pad_gpio_b_07_cfg_drv_we;
  logic pad_gpio_b_07_cfg_oen_qs;
  logic pad_gpio_b_07_cfg_oen_wd;
  logic pad_gpio_b_07_cfg_oen_we;
  logic pad_gpio_b_07_cfg_puen_qs;
  logic pad_gpio_b_07_cfg_puen_wd;
  logic pad_gpio_b_07_cfg_puen_we;
  logic pad_gpio_b_07_cfg_slw_qs;
  logic pad_gpio_b_07_cfg_slw_wd;
  logic pad_gpio_b_07_cfg_slw_we;
  logic pad_gpio_b_07_cfg_smt_qs;
  logic pad_gpio_b_07_cfg_smt_wd;
  logic pad_gpio_b_07_cfg_smt_we;
  logic [1:0] pad_gpio_b_07_mux_sel_qs;
  logic [1:0] pad_gpio_b_07_mux_sel_wd;
  logic pad_gpio_b_07_mux_sel_we;
  logic pad_gpio_b_08_cfg_chip2pad_qs;
  logic pad_gpio_b_08_cfg_chip2pad_wd;
  logic pad_gpio_b_08_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_08_cfg_drv_qs;
  logic [1:0] pad_gpio_b_08_cfg_drv_wd;
  logic pad_gpio_b_08_cfg_drv_we;
  logic pad_gpio_b_08_cfg_oen_qs;
  logic pad_gpio_b_08_cfg_oen_wd;
  logic pad_gpio_b_08_cfg_oen_we;
  logic pad_gpio_b_08_cfg_puen_qs;
  logic pad_gpio_b_08_cfg_puen_wd;
  logic pad_gpio_b_08_cfg_puen_we;
  logic pad_gpio_b_08_cfg_slw_qs;
  logic pad_gpio_b_08_cfg_slw_wd;
  logic pad_gpio_b_08_cfg_slw_we;
  logic pad_gpio_b_08_cfg_smt_qs;
  logic pad_gpio_b_08_cfg_smt_wd;
  logic pad_gpio_b_08_cfg_smt_we;
  logic [1:0] pad_gpio_b_08_mux_sel_qs;
  logic [1:0] pad_gpio_b_08_mux_sel_wd;
  logic pad_gpio_b_08_mux_sel_we;
  logic pad_gpio_b_09_cfg_chip2pad_qs;
  logic pad_gpio_b_09_cfg_chip2pad_wd;
  logic pad_gpio_b_09_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_09_cfg_drv_qs;
  logic [1:0] pad_gpio_b_09_cfg_drv_wd;
  logic pad_gpio_b_09_cfg_drv_we;
  logic pad_gpio_b_09_cfg_oen_qs;
  logic pad_gpio_b_09_cfg_oen_wd;
  logic pad_gpio_b_09_cfg_oen_we;
  logic pad_gpio_b_09_cfg_puen_qs;
  logic pad_gpio_b_09_cfg_puen_wd;
  logic pad_gpio_b_09_cfg_puen_we;
  logic pad_gpio_b_09_cfg_slw_qs;
  logic pad_gpio_b_09_cfg_slw_wd;
  logic pad_gpio_b_09_cfg_slw_we;
  logic pad_gpio_b_09_cfg_smt_qs;
  logic pad_gpio_b_09_cfg_smt_wd;
  logic pad_gpio_b_09_cfg_smt_we;
  logic [1:0] pad_gpio_b_09_mux_sel_qs;
  logic [1:0] pad_gpio_b_09_mux_sel_wd;
  logic pad_gpio_b_09_mux_sel_we;
  logic pad_gpio_b_10_cfg_chip2pad_qs;
  logic pad_gpio_b_10_cfg_chip2pad_wd;
  logic pad_gpio_b_10_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_10_cfg_drv_qs;
  logic [1:0] pad_gpio_b_10_cfg_drv_wd;
  logic pad_gpio_b_10_cfg_drv_we;
  logic pad_gpio_b_10_cfg_oen_qs;
  logic pad_gpio_b_10_cfg_oen_wd;
  logic pad_gpio_b_10_cfg_oen_we;
  logic pad_gpio_b_10_cfg_puen_qs;
  logic pad_gpio_b_10_cfg_puen_wd;
  logic pad_gpio_b_10_cfg_puen_we;
  logic pad_gpio_b_10_cfg_slw_qs;
  logic pad_gpio_b_10_cfg_slw_wd;
  logic pad_gpio_b_10_cfg_slw_we;
  logic pad_gpio_b_10_cfg_smt_qs;
  logic pad_gpio_b_10_cfg_smt_wd;
  logic pad_gpio_b_10_cfg_smt_we;
  logic [1:0] pad_gpio_b_10_mux_sel_qs;
  logic [1:0] pad_gpio_b_10_mux_sel_wd;
  logic pad_gpio_b_10_mux_sel_we;
  logic pad_gpio_b_11_cfg_chip2pad_qs;
  logic pad_gpio_b_11_cfg_chip2pad_wd;
  logic pad_gpio_b_11_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_11_cfg_drv_qs;
  logic [1:0] pad_gpio_b_11_cfg_drv_wd;
  logic pad_gpio_b_11_cfg_drv_we;
  logic pad_gpio_b_11_cfg_oen_qs;
  logic pad_gpio_b_11_cfg_oen_wd;
  logic pad_gpio_b_11_cfg_oen_we;
  logic pad_gpio_b_11_cfg_puen_qs;
  logic pad_gpio_b_11_cfg_puen_wd;
  logic pad_gpio_b_11_cfg_puen_we;
  logic pad_gpio_b_11_cfg_slw_qs;
  logic pad_gpio_b_11_cfg_slw_wd;
  logic pad_gpio_b_11_cfg_slw_we;
  logic pad_gpio_b_11_cfg_smt_qs;
  logic pad_gpio_b_11_cfg_smt_wd;
  logic pad_gpio_b_11_cfg_smt_we;
  logic [1:0] pad_gpio_b_11_mux_sel_qs;
  logic [1:0] pad_gpio_b_11_mux_sel_wd;
  logic pad_gpio_b_11_mux_sel_we;
  logic pad_gpio_b_12_cfg_chip2pad_qs;
  logic pad_gpio_b_12_cfg_chip2pad_wd;
  logic pad_gpio_b_12_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_12_cfg_drv_qs;
  logic [1:0] pad_gpio_b_12_cfg_drv_wd;
  logic pad_gpio_b_12_cfg_drv_we;
  logic pad_gpio_b_12_cfg_oen_qs;
  logic pad_gpio_b_12_cfg_oen_wd;
  logic pad_gpio_b_12_cfg_oen_we;
  logic pad_gpio_b_12_cfg_puen_qs;
  logic pad_gpio_b_12_cfg_puen_wd;
  logic pad_gpio_b_12_cfg_puen_we;
  logic pad_gpio_b_12_cfg_slw_qs;
  logic pad_gpio_b_12_cfg_slw_wd;
  logic pad_gpio_b_12_cfg_slw_we;
  logic pad_gpio_b_12_cfg_smt_qs;
  logic pad_gpio_b_12_cfg_smt_wd;
  logic pad_gpio_b_12_cfg_smt_we;
  logic [1:0] pad_gpio_b_12_mux_sel_qs;
  logic [1:0] pad_gpio_b_12_mux_sel_wd;
  logic pad_gpio_b_12_mux_sel_we;
  logic pad_gpio_b_13_cfg_chip2pad_qs;
  logic pad_gpio_b_13_cfg_chip2pad_wd;
  logic pad_gpio_b_13_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_13_cfg_drv_qs;
  logic [1:0] pad_gpio_b_13_cfg_drv_wd;
  logic pad_gpio_b_13_cfg_drv_we;
  logic pad_gpio_b_13_cfg_oen_qs;
  logic pad_gpio_b_13_cfg_oen_wd;
  logic pad_gpio_b_13_cfg_oen_we;
  logic pad_gpio_b_13_cfg_puen_qs;
  logic pad_gpio_b_13_cfg_puen_wd;
  logic pad_gpio_b_13_cfg_puen_we;
  logic pad_gpio_b_13_cfg_slw_qs;
  logic pad_gpio_b_13_cfg_slw_wd;
  logic pad_gpio_b_13_cfg_slw_we;
  logic pad_gpio_b_13_cfg_smt_qs;
  logic pad_gpio_b_13_cfg_smt_wd;
  logic pad_gpio_b_13_cfg_smt_we;
  logic [1:0] pad_gpio_b_13_mux_sel_qs;
  logic [1:0] pad_gpio_b_13_mux_sel_wd;
  logic pad_gpio_b_13_mux_sel_we;
  logic pad_gpio_b_14_cfg_chip2pad_qs;
  logic pad_gpio_b_14_cfg_chip2pad_wd;
  logic pad_gpio_b_14_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_14_cfg_drv_qs;
  logic [1:0] pad_gpio_b_14_cfg_drv_wd;
  logic pad_gpio_b_14_cfg_drv_we;
  logic pad_gpio_b_14_cfg_oen_qs;
  logic pad_gpio_b_14_cfg_oen_wd;
  logic pad_gpio_b_14_cfg_oen_we;
  logic pad_gpio_b_14_cfg_puen_qs;
  logic pad_gpio_b_14_cfg_puen_wd;
  logic pad_gpio_b_14_cfg_puen_we;
  logic pad_gpio_b_14_cfg_slw_qs;
  logic pad_gpio_b_14_cfg_slw_wd;
  logic pad_gpio_b_14_cfg_slw_we;
  logic pad_gpio_b_14_cfg_smt_qs;
  logic pad_gpio_b_14_cfg_smt_wd;
  logic pad_gpio_b_14_cfg_smt_we;
  logic [1:0] pad_gpio_b_14_mux_sel_qs;
  logic [1:0] pad_gpio_b_14_mux_sel_wd;
  logic pad_gpio_b_14_mux_sel_we;
  logic pad_gpio_b_15_cfg_chip2pad_qs;
  logic pad_gpio_b_15_cfg_chip2pad_wd;
  logic pad_gpio_b_15_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_15_cfg_drv_qs;
  logic [1:0] pad_gpio_b_15_cfg_drv_wd;
  logic pad_gpio_b_15_cfg_drv_we;
  logic pad_gpio_b_15_cfg_oen_qs;
  logic pad_gpio_b_15_cfg_oen_wd;
  logic pad_gpio_b_15_cfg_oen_we;
  logic pad_gpio_b_15_cfg_puen_qs;
  logic pad_gpio_b_15_cfg_puen_wd;
  logic pad_gpio_b_15_cfg_puen_we;
  logic pad_gpio_b_15_cfg_slw_qs;
  logic pad_gpio_b_15_cfg_slw_wd;
  logic pad_gpio_b_15_cfg_slw_we;
  logic pad_gpio_b_15_cfg_smt_qs;
  logic pad_gpio_b_15_cfg_smt_wd;
  logic pad_gpio_b_15_cfg_smt_we;
  logic [1:0] pad_gpio_b_15_mux_sel_qs;
  logic [1:0] pad_gpio_b_15_mux_sel_wd;
  logic pad_gpio_b_15_mux_sel_we;
  logic pad_gpio_b_16_cfg_chip2pad_qs;
  logic pad_gpio_b_16_cfg_chip2pad_wd;
  logic pad_gpio_b_16_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_16_cfg_drv_qs;
  logic [1:0] pad_gpio_b_16_cfg_drv_wd;
  logic pad_gpio_b_16_cfg_drv_we;
  logic pad_gpio_b_16_cfg_oen_qs;
  logic pad_gpio_b_16_cfg_oen_wd;
  logic pad_gpio_b_16_cfg_oen_we;
  logic pad_gpio_b_16_cfg_puen_qs;
  logic pad_gpio_b_16_cfg_puen_wd;
  logic pad_gpio_b_16_cfg_puen_we;
  logic pad_gpio_b_16_cfg_slw_qs;
  logic pad_gpio_b_16_cfg_slw_wd;
  logic pad_gpio_b_16_cfg_slw_we;
  logic pad_gpio_b_16_cfg_smt_qs;
  logic pad_gpio_b_16_cfg_smt_wd;
  logic pad_gpio_b_16_cfg_smt_we;
  logic [1:0] pad_gpio_b_16_mux_sel_qs;
  logic [1:0] pad_gpio_b_16_mux_sel_wd;
  logic pad_gpio_b_16_mux_sel_we;
  logic pad_gpio_b_17_cfg_chip2pad_qs;
  logic pad_gpio_b_17_cfg_chip2pad_wd;
  logic pad_gpio_b_17_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_17_cfg_drv_qs;
  logic [1:0] pad_gpio_b_17_cfg_drv_wd;
  logic pad_gpio_b_17_cfg_drv_we;
  logic pad_gpio_b_17_cfg_oen_qs;
  logic pad_gpio_b_17_cfg_oen_wd;
  logic pad_gpio_b_17_cfg_oen_we;
  logic pad_gpio_b_17_cfg_puen_qs;
  logic pad_gpio_b_17_cfg_puen_wd;
  logic pad_gpio_b_17_cfg_puen_we;
  logic pad_gpio_b_17_cfg_slw_qs;
  logic pad_gpio_b_17_cfg_slw_wd;
  logic pad_gpio_b_17_cfg_slw_we;
  logic pad_gpio_b_17_cfg_smt_qs;
  logic pad_gpio_b_17_cfg_smt_wd;
  logic pad_gpio_b_17_cfg_smt_we;
  logic [1:0] pad_gpio_b_17_mux_sel_qs;
  logic [1:0] pad_gpio_b_17_mux_sel_wd;
  logic pad_gpio_b_17_mux_sel_we;
  logic pad_gpio_b_18_cfg_chip2pad_qs;
  logic pad_gpio_b_18_cfg_chip2pad_wd;
  logic pad_gpio_b_18_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_18_cfg_drv_qs;
  logic [1:0] pad_gpio_b_18_cfg_drv_wd;
  logic pad_gpio_b_18_cfg_drv_we;
  logic pad_gpio_b_18_cfg_oen_qs;
  logic pad_gpio_b_18_cfg_oen_wd;
  logic pad_gpio_b_18_cfg_oen_we;
  logic pad_gpio_b_18_cfg_puen_qs;
  logic pad_gpio_b_18_cfg_puen_wd;
  logic pad_gpio_b_18_cfg_puen_we;
  logic pad_gpio_b_18_cfg_slw_qs;
  logic pad_gpio_b_18_cfg_slw_wd;
  logic pad_gpio_b_18_cfg_slw_we;
  logic pad_gpio_b_18_cfg_smt_qs;
  logic pad_gpio_b_18_cfg_smt_wd;
  logic pad_gpio_b_18_cfg_smt_we;
  logic [1:0] pad_gpio_b_18_mux_sel_qs;
  logic [1:0] pad_gpio_b_18_mux_sel_wd;
  logic pad_gpio_b_18_mux_sel_we;
  logic pad_gpio_b_19_cfg_chip2pad_qs;
  logic pad_gpio_b_19_cfg_chip2pad_wd;
  logic pad_gpio_b_19_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_19_cfg_drv_qs;
  logic [1:0] pad_gpio_b_19_cfg_drv_wd;
  logic pad_gpio_b_19_cfg_drv_we;
  logic pad_gpio_b_19_cfg_oen_qs;
  logic pad_gpio_b_19_cfg_oen_wd;
  logic pad_gpio_b_19_cfg_oen_we;
  logic pad_gpio_b_19_cfg_puen_qs;
  logic pad_gpio_b_19_cfg_puen_wd;
  logic pad_gpio_b_19_cfg_puen_we;
  logic pad_gpio_b_19_cfg_slw_qs;
  logic pad_gpio_b_19_cfg_slw_wd;
  logic pad_gpio_b_19_cfg_slw_we;
  logic pad_gpio_b_19_cfg_smt_qs;
  logic pad_gpio_b_19_cfg_smt_wd;
  logic pad_gpio_b_19_cfg_smt_we;
  logic [1:0] pad_gpio_b_19_mux_sel_qs;
  logic [1:0] pad_gpio_b_19_mux_sel_wd;
  logic pad_gpio_b_19_mux_sel_we;
  logic pad_gpio_b_20_cfg_chip2pad_qs;
  logic pad_gpio_b_20_cfg_chip2pad_wd;
  logic pad_gpio_b_20_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_20_cfg_drv_qs;
  logic [1:0] pad_gpio_b_20_cfg_drv_wd;
  logic pad_gpio_b_20_cfg_drv_we;
  logic pad_gpio_b_20_cfg_oen_qs;
  logic pad_gpio_b_20_cfg_oen_wd;
  logic pad_gpio_b_20_cfg_oen_we;
  logic pad_gpio_b_20_cfg_puen_qs;
  logic pad_gpio_b_20_cfg_puen_wd;
  logic pad_gpio_b_20_cfg_puen_we;
  logic pad_gpio_b_20_cfg_slw_qs;
  logic pad_gpio_b_20_cfg_slw_wd;
  logic pad_gpio_b_20_cfg_slw_we;
  logic pad_gpio_b_20_cfg_smt_qs;
  logic pad_gpio_b_20_cfg_smt_wd;
  logic pad_gpio_b_20_cfg_smt_we;
  logic [1:0] pad_gpio_b_20_mux_sel_qs;
  logic [1:0] pad_gpio_b_20_mux_sel_wd;
  logic pad_gpio_b_20_mux_sel_we;
  logic pad_gpio_b_21_cfg_chip2pad_qs;
  logic pad_gpio_b_21_cfg_chip2pad_wd;
  logic pad_gpio_b_21_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_21_cfg_drv_qs;
  logic [1:0] pad_gpio_b_21_cfg_drv_wd;
  logic pad_gpio_b_21_cfg_drv_we;
  logic pad_gpio_b_21_cfg_oen_qs;
  logic pad_gpio_b_21_cfg_oen_wd;
  logic pad_gpio_b_21_cfg_oen_we;
  logic pad_gpio_b_21_cfg_puen_qs;
  logic pad_gpio_b_21_cfg_puen_wd;
  logic pad_gpio_b_21_cfg_puen_we;
  logic pad_gpio_b_21_cfg_slw_qs;
  logic pad_gpio_b_21_cfg_slw_wd;
  logic pad_gpio_b_21_cfg_slw_we;
  logic pad_gpio_b_21_cfg_smt_qs;
  logic pad_gpio_b_21_cfg_smt_wd;
  logic pad_gpio_b_21_cfg_smt_we;
  logic [1:0] pad_gpio_b_21_mux_sel_qs;
  logic [1:0] pad_gpio_b_21_mux_sel_wd;
  logic pad_gpio_b_21_mux_sel_we;
  logic pad_gpio_b_22_cfg_chip2pad_qs;
  logic pad_gpio_b_22_cfg_chip2pad_wd;
  logic pad_gpio_b_22_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_22_cfg_drv_qs;
  logic [1:0] pad_gpio_b_22_cfg_drv_wd;
  logic pad_gpio_b_22_cfg_drv_we;
  logic pad_gpio_b_22_cfg_oen_qs;
  logic pad_gpio_b_22_cfg_oen_wd;
  logic pad_gpio_b_22_cfg_oen_we;
  logic pad_gpio_b_22_cfg_puen_qs;
  logic pad_gpio_b_22_cfg_puen_wd;
  logic pad_gpio_b_22_cfg_puen_we;
  logic pad_gpio_b_22_cfg_slw_qs;
  logic pad_gpio_b_22_cfg_slw_wd;
  logic pad_gpio_b_22_cfg_slw_we;
  logic pad_gpio_b_22_cfg_smt_qs;
  logic pad_gpio_b_22_cfg_smt_wd;
  logic pad_gpio_b_22_cfg_smt_we;
  logic [1:0] pad_gpio_b_22_mux_sel_qs;
  logic [1:0] pad_gpio_b_22_mux_sel_wd;
  logic pad_gpio_b_22_mux_sel_we;
  logic pad_gpio_b_23_cfg_chip2pad_qs;
  logic pad_gpio_b_23_cfg_chip2pad_wd;
  logic pad_gpio_b_23_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_23_cfg_drv_qs;
  logic [1:0] pad_gpio_b_23_cfg_drv_wd;
  logic pad_gpio_b_23_cfg_drv_we;
  logic pad_gpio_b_23_cfg_oen_qs;
  logic pad_gpio_b_23_cfg_oen_wd;
  logic pad_gpio_b_23_cfg_oen_we;
  logic pad_gpio_b_23_cfg_puen_qs;
  logic pad_gpio_b_23_cfg_puen_wd;
  logic pad_gpio_b_23_cfg_puen_we;
  logic pad_gpio_b_23_cfg_slw_qs;
  logic pad_gpio_b_23_cfg_slw_wd;
  logic pad_gpio_b_23_cfg_slw_we;
  logic pad_gpio_b_23_cfg_smt_qs;
  logic pad_gpio_b_23_cfg_smt_wd;
  logic pad_gpio_b_23_cfg_smt_we;
  logic [1:0] pad_gpio_b_23_mux_sel_qs;
  logic [1:0] pad_gpio_b_23_mux_sel_wd;
  logic pad_gpio_b_23_mux_sel_we;
  logic pad_gpio_b_24_cfg_chip2pad_qs;
  logic pad_gpio_b_24_cfg_chip2pad_wd;
  logic pad_gpio_b_24_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_24_cfg_drv_qs;
  logic [1:0] pad_gpio_b_24_cfg_drv_wd;
  logic pad_gpio_b_24_cfg_drv_we;
  logic pad_gpio_b_24_cfg_oen_qs;
  logic pad_gpio_b_24_cfg_oen_wd;
  logic pad_gpio_b_24_cfg_oen_we;
  logic pad_gpio_b_24_cfg_puen_qs;
  logic pad_gpio_b_24_cfg_puen_wd;
  logic pad_gpio_b_24_cfg_puen_we;
  logic pad_gpio_b_24_cfg_slw_qs;
  logic pad_gpio_b_24_cfg_slw_wd;
  logic pad_gpio_b_24_cfg_slw_we;
  logic pad_gpio_b_24_cfg_smt_qs;
  logic pad_gpio_b_24_cfg_smt_wd;
  logic pad_gpio_b_24_cfg_smt_we;
  logic [1:0] pad_gpio_b_24_mux_sel_qs;
  logic [1:0] pad_gpio_b_24_mux_sel_wd;
  logic pad_gpio_b_24_mux_sel_we;
  logic pad_gpio_b_25_cfg_chip2pad_qs;
  logic pad_gpio_b_25_cfg_chip2pad_wd;
  logic pad_gpio_b_25_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_25_cfg_drv_qs;
  logic [1:0] pad_gpio_b_25_cfg_drv_wd;
  logic pad_gpio_b_25_cfg_drv_we;
  logic pad_gpio_b_25_cfg_oen_qs;
  logic pad_gpio_b_25_cfg_oen_wd;
  logic pad_gpio_b_25_cfg_oen_we;
  logic pad_gpio_b_25_cfg_puen_qs;
  logic pad_gpio_b_25_cfg_puen_wd;
  logic pad_gpio_b_25_cfg_puen_we;
  logic pad_gpio_b_25_cfg_slw_qs;
  logic pad_gpio_b_25_cfg_slw_wd;
  logic pad_gpio_b_25_cfg_slw_we;
  logic pad_gpio_b_25_cfg_smt_qs;
  logic pad_gpio_b_25_cfg_smt_wd;
  logic pad_gpio_b_25_cfg_smt_we;
  logic [1:0] pad_gpio_b_25_mux_sel_qs;
  logic [1:0] pad_gpio_b_25_mux_sel_wd;
  logic pad_gpio_b_25_mux_sel_we;
  logic pad_gpio_b_26_cfg_chip2pad_qs;
  logic pad_gpio_b_26_cfg_chip2pad_wd;
  logic pad_gpio_b_26_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_26_cfg_drv_qs;
  logic [1:0] pad_gpio_b_26_cfg_drv_wd;
  logic pad_gpio_b_26_cfg_drv_we;
  logic pad_gpio_b_26_cfg_oen_qs;
  logic pad_gpio_b_26_cfg_oen_wd;
  logic pad_gpio_b_26_cfg_oen_we;
  logic pad_gpio_b_26_cfg_puen_qs;
  logic pad_gpio_b_26_cfg_puen_wd;
  logic pad_gpio_b_26_cfg_puen_we;
  logic pad_gpio_b_26_cfg_slw_qs;
  logic pad_gpio_b_26_cfg_slw_wd;
  logic pad_gpio_b_26_cfg_slw_we;
  logic pad_gpio_b_26_cfg_smt_qs;
  logic pad_gpio_b_26_cfg_smt_wd;
  logic pad_gpio_b_26_cfg_smt_we;
  logic [1:0] pad_gpio_b_26_mux_sel_qs;
  logic [1:0] pad_gpio_b_26_mux_sel_wd;
  logic pad_gpio_b_26_mux_sel_we;
  logic pad_gpio_b_27_cfg_chip2pad_qs;
  logic pad_gpio_b_27_cfg_chip2pad_wd;
  logic pad_gpio_b_27_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_27_cfg_drv_qs;
  logic [1:0] pad_gpio_b_27_cfg_drv_wd;
  logic pad_gpio_b_27_cfg_drv_we;
  logic pad_gpio_b_27_cfg_oen_qs;
  logic pad_gpio_b_27_cfg_oen_wd;
  logic pad_gpio_b_27_cfg_oen_we;
  logic pad_gpio_b_27_cfg_puen_qs;
  logic pad_gpio_b_27_cfg_puen_wd;
  logic pad_gpio_b_27_cfg_puen_we;
  logic pad_gpio_b_27_cfg_slw_qs;
  logic pad_gpio_b_27_cfg_slw_wd;
  logic pad_gpio_b_27_cfg_slw_we;
  logic pad_gpio_b_27_cfg_smt_qs;
  logic pad_gpio_b_27_cfg_smt_wd;
  logic pad_gpio_b_27_cfg_smt_we;
  logic [1:0] pad_gpio_b_27_mux_sel_qs;
  logic [1:0] pad_gpio_b_27_mux_sel_wd;
  logic pad_gpio_b_27_mux_sel_we;
  logic pad_gpio_b_28_cfg_chip2pad_qs;
  logic pad_gpio_b_28_cfg_chip2pad_wd;
  logic pad_gpio_b_28_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_28_cfg_drv_qs;
  logic [1:0] pad_gpio_b_28_cfg_drv_wd;
  logic pad_gpio_b_28_cfg_drv_we;
  logic pad_gpio_b_28_cfg_oen_qs;
  logic pad_gpio_b_28_cfg_oen_wd;
  logic pad_gpio_b_28_cfg_oen_we;
  logic pad_gpio_b_28_cfg_puen_qs;
  logic pad_gpio_b_28_cfg_puen_wd;
  logic pad_gpio_b_28_cfg_puen_we;
  logic pad_gpio_b_28_cfg_slw_qs;
  logic pad_gpio_b_28_cfg_slw_wd;
  logic pad_gpio_b_28_cfg_slw_we;
  logic pad_gpio_b_28_cfg_smt_qs;
  logic pad_gpio_b_28_cfg_smt_wd;
  logic pad_gpio_b_28_cfg_smt_we;
  logic [1:0] pad_gpio_b_28_mux_sel_qs;
  logic [1:0] pad_gpio_b_28_mux_sel_wd;
  logic pad_gpio_b_28_mux_sel_we;
  logic pad_gpio_b_29_cfg_chip2pad_qs;
  logic pad_gpio_b_29_cfg_chip2pad_wd;
  logic pad_gpio_b_29_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_29_cfg_drv_qs;
  logic [1:0] pad_gpio_b_29_cfg_drv_wd;
  logic pad_gpio_b_29_cfg_drv_we;
  logic pad_gpio_b_29_cfg_oen_qs;
  logic pad_gpio_b_29_cfg_oen_wd;
  logic pad_gpio_b_29_cfg_oen_we;
  logic pad_gpio_b_29_cfg_puen_qs;
  logic pad_gpio_b_29_cfg_puen_wd;
  logic pad_gpio_b_29_cfg_puen_we;
  logic pad_gpio_b_29_cfg_slw_qs;
  logic pad_gpio_b_29_cfg_slw_wd;
  logic pad_gpio_b_29_cfg_slw_we;
  logic pad_gpio_b_29_cfg_smt_qs;
  logic pad_gpio_b_29_cfg_smt_wd;
  logic pad_gpio_b_29_cfg_smt_we;
  logic [1:0] pad_gpio_b_29_mux_sel_qs;
  logic [1:0] pad_gpio_b_29_mux_sel_wd;
  logic pad_gpio_b_29_mux_sel_we;
  logic pad_gpio_b_30_cfg_chip2pad_qs;
  logic pad_gpio_b_30_cfg_chip2pad_wd;
  logic pad_gpio_b_30_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_30_cfg_drv_qs;
  logic [1:0] pad_gpio_b_30_cfg_drv_wd;
  logic pad_gpio_b_30_cfg_drv_we;
  logic pad_gpio_b_30_cfg_oen_qs;
  logic pad_gpio_b_30_cfg_oen_wd;
  logic pad_gpio_b_30_cfg_oen_we;
  logic pad_gpio_b_30_cfg_puen_qs;
  logic pad_gpio_b_30_cfg_puen_wd;
  logic pad_gpio_b_30_cfg_puen_we;
  logic pad_gpio_b_30_cfg_slw_qs;
  logic pad_gpio_b_30_cfg_slw_wd;
  logic pad_gpio_b_30_cfg_slw_we;
  logic pad_gpio_b_30_cfg_smt_qs;
  logic pad_gpio_b_30_cfg_smt_wd;
  logic pad_gpio_b_30_cfg_smt_we;
  logic [1:0] pad_gpio_b_30_mux_sel_qs;
  logic [1:0] pad_gpio_b_30_mux_sel_wd;
  logic pad_gpio_b_30_mux_sel_we;
  logic pad_gpio_b_31_cfg_chip2pad_qs;
  logic pad_gpio_b_31_cfg_chip2pad_wd;
  logic pad_gpio_b_31_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_31_cfg_drv_qs;
  logic [1:0] pad_gpio_b_31_cfg_drv_wd;
  logic pad_gpio_b_31_cfg_drv_we;
  logic pad_gpio_b_31_cfg_oen_qs;
  logic pad_gpio_b_31_cfg_oen_wd;
  logic pad_gpio_b_31_cfg_oen_we;
  logic pad_gpio_b_31_cfg_puen_qs;
  logic pad_gpio_b_31_cfg_puen_wd;
  logic pad_gpio_b_31_cfg_puen_we;
  logic pad_gpio_b_31_cfg_slw_qs;
  logic pad_gpio_b_31_cfg_slw_wd;
  logic pad_gpio_b_31_cfg_slw_we;
  logic pad_gpio_b_31_cfg_smt_qs;
  logic pad_gpio_b_31_cfg_smt_wd;
  logic pad_gpio_b_31_cfg_smt_we;
  logic [1:0] pad_gpio_b_31_mux_sel_qs;
  logic [1:0] pad_gpio_b_31_mux_sel_wd;
  logic pad_gpio_b_31_mux_sel_we;
  logic pad_gpio_b_32_cfg_chip2pad_qs;
  logic pad_gpio_b_32_cfg_chip2pad_wd;
  logic pad_gpio_b_32_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_32_cfg_drv_qs;
  logic [1:0] pad_gpio_b_32_cfg_drv_wd;
  logic pad_gpio_b_32_cfg_drv_we;
  logic pad_gpio_b_32_cfg_oen_qs;
  logic pad_gpio_b_32_cfg_oen_wd;
  logic pad_gpio_b_32_cfg_oen_we;
  logic pad_gpio_b_32_cfg_puen_qs;
  logic pad_gpio_b_32_cfg_puen_wd;
  logic pad_gpio_b_32_cfg_puen_we;
  logic pad_gpio_b_32_cfg_slw_qs;
  logic pad_gpio_b_32_cfg_slw_wd;
  logic pad_gpio_b_32_cfg_slw_we;
  logic pad_gpio_b_32_cfg_smt_qs;
  logic pad_gpio_b_32_cfg_smt_wd;
  logic pad_gpio_b_32_cfg_smt_we;
  logic [1:0] pad_gpio_b_32_mux_sel_qs;
  logic [1:0] pad_gpio_b_32_mux_sel_wd;
  logic pad_gpio_b_32_mux_sel_we;
  logic pad_gpio_b_33_cfg_chip2pad_qs;
  logic pad_gpio_b_33_cfg_chip2pad_wd;
  logic pad_gpio_b_33_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_33_cfg_drv_qs;
  logic [1:0] pad_gpio_b_33_cfg_drv_wd;
  logic pad_gpio_b_33_cfg_drv_we;
  logic pad_gpio_b_33_cfg_oen_qs;
  logic pad_gpio_b_33_cfg_oen_wd;
  logic pad_gpio_b_33_cfg_oen_we;
  logic pad_gpio_b_33_cfg_puen_qs;
  logic pad_gpio_b_33_cfg_puen_wd;
  logic pad_gpio_b_33_cfg_puen_we;
  logic pad_gpio_b_33_cfg_slw_qs;
  logic pad_gpio_b_33_cfg_slw_wd;
  logic pad_gpio_b_33_cfg_slw_we;
  logic pad_gpio_b_33_cfg_smt_qs;
  logic pad_gpio_b_33_cfg_smt_wd;
  logic pad_gpio_b_33_cfg_smt_we;
  logic [1:0] pad_gpio_b_33_mux_sel_qs;
  logic [1:0] pad_gpio_b_33_mux_sel_wd;
  logic pad_gpio_b_33_mux_sel_we;
  logic pad_gpio_b_34_cfg_chip2pad_qs;
  logic pad_gpio_b_34_cfg_chip2pad_wd;
  logic pad_gpio_b_34_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_34_cfg_drv_qs;
  logic [1:0] pad_gpio_b_34_cfg_drv_wd;
  logic pad_gpio_b_34_cfg_drv_we;
  logic pad_gpio_b_34_cfg_oen_qs;
  logic pad_gpio_b_34_cfg_oen_wd;
  logic pad_gpio_b_34_cfg_oen_we;
  logic pad_gpio_b_34_cfg_puen_qs;
  logic pad_gpio_b_34_cfg_puen_wd;
  logic pad_gpio_b_34_cfg_puen_we;
  logic pad_gpio_b_34_cfg_slw_qs;
  logic pad_gpio_b_34_cfg_slw_wd;
  logic pad_gpio_b_34_cfg_slw_we;
  logic pad_gpio_b_34_cfg_smt_qs;
  logic pad_gpio_b_34_cfg_smt_wd;
  logic pad_gpio_b_34_cfg_smt_we;
  logic [1:0] pad_gpio_b_34_mux_sel_qs;
  logic [1:0] pad_gpio_b_34_mux_sel_wd;
  logic pad_gpio_b_34_mux_sel_we;
  logic pad_gpio_b_35_cfg_chip2pad_qs;
  logic pad_gpio_b_35_cfg_chip2pad_wd;
  logic pad_gpio_b_35_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_35_cfg_drv_qs;
  logic [1:0] pad_gpio_b_35_cfg_drv_wd;
  logic pad_gpio_b_35_cfg_drv_we;
  logic pad_gpio_b_35_cfg_oen_qs;
  logic pad_gpio_b_35_cfg_oen_wd;
  logic pad_gpio_b_35_cfg_oen_we;
  logic pad_gpio_b_35_cfg_puen_qs;
  logic pad_gpio_b_35_cfg_puen_wd;
  logic pad_gpio_b_35_cfg_puen_we;
  logic pad_gpio_b_35_cfg_slw_qs;
  logic pad_gpio_b_35_cfg_slw_wd;
  logic pad_gpio_b_35_cfg_slw_we;
  logic pad_gpio_b_35_cfg_smt_qs;
  logic pad_gpio_b_35_cfg_smt_wd;
  logic pad_gpio_b_35_cfg_smt_we;
  logic [1:0] pad_gpio_b_35_mux_sel_qs;
  logic [1:0] pad_gpio_b_35_mux_sel_wd;
  logic pad_gpio_b_35_mux_sel_we;
  logic pad_gpio_b_36_cfg_chip2pad_qs;
  logic pad_gpio_b_36_cfg_chip2pad_wd;
  logic pad_gpio_b_36_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_36_cfg_drv_qs;
  logic [1:0] pad_gpio_b_36_cfg_drv_wd;
  logic pad_gpio_b_36_cfg_drv_we;
  logic pad_gpio_b_36_cfg_oen_qs;
  logic pad_gpio_b_36_cfg_oen_wd;
  logic pad_gpio_b_36_cfg_oen_we;
  logic pad_gpio_b_36_cfg_puen_qs;
  logic pad_gpio_b_36_cfg_puen_wd;
  logic pad_gpio_b_36_cfg_puen_we;
  logic pad_gpio_b_36_cfg_slw_qs;
  logic pad_gpio_b_36_cfg_slw_wd;
  logic pad_gpio_b_36_cfg_slw_we;
  logic pad_gpio_b_36_cfg_smt_qs;
  logic pad_gpio_b_36_cfg_smt_wd;
  logic pad_gpio_b_36_cfg_smt_we;
  logic [1:0] pad_gpio_b_36_mux_sel_qs;
  logic [1:0] pad_gpio_b_36_mux_sel_wd;
  logic pad_gpio_b_36_mux_sel_we;
  logic pad_gpio_b_37_cfg_chip2pad_qs;
  logic pad_gpio_b_37_cfg_chip2pad_wd;
  logic pad_gpio_b_37_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_37_cfg_drv_qs;
  logic [1:0] pad_gpio_b_37_cfg_drv_wd;
  logic pad_gpio_b_37_cfg_drv_we;
  logic pad_gpio_b_37_cfg_oen_qs;
  logic pad_gpio_b_37_cfg_oen_wd;
  logic pad_gpio_b_37_cfg_oen_we;
  logic pad_gpio_b_37_cfg_puen_qs;
  logic pad_gpio_b_37_cfg_puen_wd;
  logic pad_gpio_b_37_cfg_puen_we;
  logic pad_gpio_b_37_cfg_slw_qs;
  logic pad_gpio_b_37_cfg_slw_wd;
  logic pad_gpio_b_37_cfg_slw_we;
  logic pad_gpio_b_37_cfg_smt_qs;
  logic pad_gpio_b_37_cfg_smt_wd;
  logic pad_gpio_b_37_cfg_smt_we;
  logic [1:0] pad_gpio_b_37_mux_sel_qs;
  logic [1:0] pad_gpio_b_37_mux_sel_wd;
  logic pad_gpio_b_37_mux_sel_we;
  logic pad_gpio_b_38_cfg_chip2pad_qs;
  logic pad_gpio_b_38_cfg_chip2pad_wd;
  logic pad_gpio_b_38_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_38_cfg_drv_qs;
  logic [1:0] pad_gpio_b_38_cfg_drv_wd;
  logic pad_gpio_b_38_cfg_drv_we;
  logic pad_gpio_b_38_cfg_oen_qs;
  logic pad_gpio_b_38_cfg_oen_wd;
  logic pad_gpio_b_38_cfg_oen_we;
  logic pad_gpio_b_38_cfg_puen_qs;
  logic pad_gpio_b_38_cfg_puen_wd;
  logic pad_gpio_b_38_cfg_puen_we;
  logic pad_gpio_b_38_cfg_slw_qs;
  logic pad_gpio_b_38_cfg_slw_wd;
  logic pad_gpio_b_38_cfg_slw_we;
  logic pad_gpio_b_38_cfg_smt_qs;
  logic pad_gpio_b_38_cfg_smt_wd;
  logic pad_gpio_b_38_cfg_smt_we;
  logic [1:0] pad_gpio_b_38_mux_sel_qs;
  logic [1:0] pad_gpio_b_38_mux_sel_wd;
  logic pad_gpio_b_38_mux_sel_we;
  logic pad_gpio_b_39_cfg_chip2pad_qs;
  logic pad_gpio_b_39_cfg_chip2pad_wd;
  logic pad_gpio_b_39_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_39_cfg_drv_qs;
  logic [1:0] pad_gpio_b_39_cfg_drv_wd;
  logic pad_gpio_b_39_cfg_drv_we;
  logic pad_gpio_b_39_cfg_oen_qs;
  logic pad_gpio_b_39_cfg_oen_wd;
  logic pad_gpio_b_39_cfg_oen_we;
  logic pad_gpio_b_39_cfg_puen_qs;
  logic pad_gpio_b_39_cfg_puen_wd;
  logic pad_gpio_b_39_cfg_puen_we;
  logic pad_gpio_b_39_cfg_slw_qs;
  logic pad_gpio_b_39_cfg_slw_wd;
  logic pad_gpio_b_39_cfg_slw_we;
  logic pad_gpio_b_39_cfg_smt_qs;
  logic pad_gpio_b_39_cfg_smt_wd;
  logic pad_gpio_b_39_cfg_smt_we;
  logic [1:0] pad_gpio_b_39_mux_sel_qs;
  logic [1:0] pad_gpio_b_39_mux_sel_wd;
  logic pad_gpio_b_39_mux_sel_we;
  logic pad_gpio_b_40_cfg_chip2pad_qs;
  logic pad_gpio_b_40_cfg_chip2pad_wd;
  logic pad_gpio_b_40_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_40_cfg_drv_qs;
  logic [1:0] pad_gpio_b_40_cfg_drv_wd;
  logic pad_gpio_b_40_cfg_drv_we;
  logic pad_gpio_b_40_cfg_oen_qs;
  logic pad_gpio_b_40_cfg_oen_wd;
  logic pad_gpio_b_40_cfg_oen_we;
  logic pad_gpio_b_40_cfg_puen_qs;
  logic pad_gpio_b_40_cfg_puen_wd;
  logic pad_gpio_b_40_cfg_puen_we;
  logic pad_gpio_b_40_cfg_slw_qs;
  logic pad_gpio_b_40_cfg_slw_wd;
  logic pad_gpio_b_40_cfg_slw_we;
  logic pad_gpio_b_40_cfg_smt_qs;
  logic pad_gpio_b_40_cfg_smt_wd;
  logic pad_gpio_b_40_cfg_smt_we;
  logic [1:0] pad_gpio_b_40_mux_sel_qs;
  logic [1:0] pad_gpio_b_40_mux_sel_wd;
  logic pad_gpio_b_40_mux_sel_we;
  logic pad_gpio_b_41_cfg_chip2pad_qs;
  logic pad_gpio_b_41_cfg_chip2pad_wd;
  logic pad_gpio_b_41_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_41_cfg_drv_qs;
  logic [1:0] pad_gpio_b_41_cfg_drv_wd;
  logic pad_gpio_b_41_cfg_drv_we;
  logic pad_gpio_b_41_cfg_oen_qs;
  logic pad_gpio_b_41_cfg_oen_wd;
  logic pad_gpio_b_41_cfg_oen_we;
  logic pad_gpio_b_41_cfg_puen_qs;
  logic pad_gpio_b_41_cfg_puen_wd;
  logic pad_gpio_b_41_cfg_puen_we;
  logic pad_gpio_b_41_cfg_slw_qs;
  logic pad_gpio_b_41_cfg_slw_wd;
  logic pad_gpio_b_41_cfg_slw_we;
  logic pad_gpio_b_41_cfg_smt_qs;
  logic pad_gpio_b_41_cfg_smt_wd;
  logic pad_gpio_b_41_cfg_smt_we;
  logic [1:0] pad_gpio_b_41_mux_sel_qs;
  logic [1:0] pad_gpio_b_41_mux_sel_wd;
  logic pad_gpio_b_41_mux_sel_we;
  logic pad_gpio_b_42_cfg_chip2pad_qs;
  logic pad_gpio_b_42_cfg_chip2pad_wd;
  logic pad_gpio_b_42_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_42_cfg_drv_qs;
  logic [1:0] pad_gpio_b_42_cfg_drv_wd;
  logic pad_gpio_b_42_cfg_drv_we;
  logic pad_gpio_b_42_cfg_oen_qs;
  logic pad_gpio_b_42_cfg_oen_wd;
  logic pad_gpio_b_42_cfg_oen_we;
  logic pad_gpio_b_42_cfg_puen_qs;
  logic pad_gpio_b_42_cfg_puen_wd;
  logic pad_gpio_b_42_cfg_puen_we;
  logic pad_gpio_b_42_cfg_slw_qs;
  logic pad_gpio_b_42_cfg_slw_wd;
  logic pad_gpio_b_42_cfg_slw_we;
  logic pad_gpio_b_42_cfg_smt_qs;
  logic pad_gpio_b_42_cfg_smt_wd;
  logic pad_gpio_b_42_cfg_smt_we;
  logic [1:0] pad_gpio_b_42_mux_sel_qs;
  logic [1:0] pad_gpio_b_42_mux_sel_wd;
  logic pad_gpio_b_42_mux_sel_we;
  logic pad_gpio_b_43_cfg_chip2pad_qs;
  logic pad_gpio_b_43_cfg_chip2pad_wd;
  logic pad_gpio_b_43_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_43_cfg_drv_qs;
  logic [1:0] pad_gpio_b_43_cfg_drv_wd;
  logic pad_gpio_b_43_cfg_drv_we;
  logic pad_gpio_b_43_cfg_oen_qs;
  logic pad_gpio_b_43_cfg_oen_wd;
  logic pad_gpio_b_43_cfg_oen_we;
  logic pad_gpio_b_43_cfg_puen_qs;
  logic pad_gpio_b_43_cfg_puen_wd;
  logic pad_gpio_b_43_cfg_puen_we;
  logic pad_gpio_b_43_cfg_slw_qs;
  logic pad_gpio_b_43_cfg_slw_wd;
  logic pad_gpio_b_43_cfg_slw_we;
  logic pad_gpio_b_43_cfg_smt_qs;
  logic pad_gpio_b_43_cfg_smt_wd;
  logic pad_gpio_b_43_cfg_smt_we;
  logic [1:0] pad_gpio_b_43_mux_sel_qs;
  logic [1:0] pad_gpio_b_43_mux_sel_wd;
  logic pad_gpio_b_43_mux_sel_we;
  logic pad_gpio_b_44_cfg_chip2pad_qs;
  logic pad_gpio_b_44_cfg_chip2pad_wd;
  logic pad_gpio_b_44_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_44_cfg_drv_qs;
  logic [1:0] pad_gpio_b_44_cfg_drv_wd;
  logic pad_gpio_b_44_cfg_drv_we;
  logic pad_gpio_b_44_cfg_oen_qs;
  logic pad_gpio_b_44_cfg_oen_wd;
  logic pad_gpio_b_44_cfg_oen_we;
  logic pad_gpio_b_44_cfg_puen_qs;
  logic pad_gpio_b_44_cfg_puen_wd;
  logic pad_gpio_b_44_cfg_puen_we;
  logic pad_gpio_b_44_cfg_slw_qs;
  logic pad_gpio_b_44_cfg_slw_wd;
  logic pad_gpio_b_44_cfg_slw_we;
  logic pad_gpio_b_44_cfg_smt_qs;
  logic pad_gpio_b_44_cfg_smt_wd;
  logic pad_gpio_b_44_cfg_smt_we;
  logic [1:0] pad_gpio_b_44_mux_sel_qs;
  logic [1:0] pad_gpio_b_44_mux_sel_wd;
  logic pad_gpio_b_44_mux_sel_we;
  logic pad_gpio_b_45_cfg_chip2pad_qs;
  logic pad_gpio_b_45_cfg_chip2pad_wd;
  logic pad_gpio_b_45_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_45_cfg_drv_qs;
  logic [1:0] pad_gpio_b_45_cfg_drv_wd;
  logic pad_gpio_b_45_cfg_drv_we;
  logic pad_gpio_b_45_cfg_oen_qs;
  logic pad_gpio_b_45_cfg_oen_wd;
  logic pad_gpio_b_45_cfg_oen_we;
  logic pad_gpio_b_45_cfg_puen_qs;
  logic pad_gpio_b_45_cfg_puen_wd;
  logic pad_gpio_b_45_cfg_puen_we;
  logic pad_gpio_b_45_cfg_slw_qs;
  logic pad_gpio_b_45_cfg_slw_wd;
  logic pad_gpio_b_45_cfg_slw_we;
  logic pad_gpio_b_45_cfg_smt_qs;
  logic pad_gpio_b_45_cfg_smt_wd;
  logic pad_gpio_b_45_cfg_smt_we;
  logic [1:0] pad_gpio_b_45_mux_sel_qs;
  logic [1:0] pad_gpio_b_45_mux_sel_wd;
  logic pad_gpio_b_45_mux_sel_we;
  logic pad_gpio_b_46_cfg_chip2pad_qs;
  logic pad_gpio_b_46_cfg_chip2pad_wd;
  logic pad_gpio_b_46_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_46_cfg_drv_qs;
  logic [1:0] pad_gpio_b_46_cfg_drv_wd;
  logic pad_gpio_b_46_cfg_drv_we;
  logic pad_gpio_b_46_cfg_oen_qs;
  logic pad_gpio_b_46_cfg_oen_wd;
  logic pad_gpio_b_46_cfg_oen_we;
  logic pad_gpio_b_46_cfg_puen_qs;
  logic pad_gpio_b_46_cfg_puen_wd;
  logic pad_gpio_b_46_cfg_puen_we;
  logic pad_gpio_b_46_cfg_slw_qs;
  logic pad_gpio_b_46_cfg_slw_wd;
  logic pad_gpio_b_46_cfg_slw_we;
  logic pad_gpio_b_46_cfg_smt_qs;
  logic pad_gpio_b_46_cfg_smt_wd;
  logic pad_gpio_b_46_cfg_smt_we;
  logic [1:0] pad_gpio_b_46_mux_sel_qs;
  logic [1:0] pad_gpio_b_46_mux_sel_wd;
  logic pad_gpio_b_46_mux_sel_we;
  logic pad_gpio_b_47_cfg_chip2pad_qs;
  logic pad_gpio_b_47_cfg_chip2pad_wd;
  logic pad_gpio_b_47_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_47_cfg_drv_qs;
  logic [1:0] pad_gpio_b_47_cfg_drv_wd;
  logic pad_gpio_b_47_cfg_drv_we;
  logic pad_gpio_b_47_cfg_oen_qs;
  logic pad_gpio_b_47_cfg_oen_wd;
  logic pad_gpio_b_47_cfg_oen_we;
  logic pad_gpio_b_47_cfg_puen_qs;
  logic pad_gpio_b_47_cfg_puen_wd;
  logic pad_gpio_b_47_cfg_puen_we;
  logic pad_gpio_b_47_cfg_slw_qs;
  logic pad_gpio_b_47_cfg_slw_wd;
  logic pad_gpio_b_47_cfg_slw_we;
  logic pad_gpio_b_47_cfg_smt_qs;
  logic pad_gpio_b_47_cfg_smt_wd;
  logic pad_gpio_b_47_cfg_smt_we;
  logic [1:0] pad_gpio_b_47_mux_sel_qs;
  logic [1:0] pad_gpio_b_47_mux_sel_wd;
  logic pad_gpio_b_47_mux_sel_we;
  logic pad_gpio_b_48_cfg_chip2pad_qs;
  logic pad_gpio_b_48_cfg_chip2pad_wd;
  logic pad_gpio_b_48_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_48_cfg_drv_qs;
  logic [1:0] pad_gpio_b_48_cfg_drv_wd;
  logic pad_gpio_b_48_cfg_drv_we;
  logic pad_gpio_b_48_cfg_oen_qs;
  logic pad_gpio_b_48_cfg_oen_wd;
  logic pad_gpio_b_48_cfg_oen_we;
  logic pad_gpio_b_48_cfg_puen_qs;
  logic pad_gpio_b_48_cfg_puen_wd;
  logic pad_gpio_b_48_cfg_puen_we;
  logic pad_gpio_b_48_cfg_slw_qs;
  logic pad_gpio_b_48_cfg_slw_wd;
  logic pad_gpio_b_48_cfg_slw_we;
  logic pad_gpio_b_48_cfg_smt_qs;
  logic pad_gpio_b_48_cfg_smt_wd;
  logic pad_gpio_b_48_cfg_smt_we;
  logic [1:0] pad_gpio_b_48_mux_sel_qs;
  logic [1:0] pad_gpio_b_48_mux_sel_wd;
  logic pad_gpio_b_48_mux_sel_we;
  logic pad_gpio_b_49_cfg_chip2pad_qs;
  logic pad_gpio_b_49_cfg_chip2pad_wd;
  logic pad_gpio_b_49_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_49_cfg_drv_qs;
  logic [1:0] pad_gpio_b_49_cfg_drv_wd;
  logic pad_gpio_b_49_cfg_drv_we;
  logic pad_gpio_b_49_cfg_oen_qs;
  logic pad_gpio_b_49_cfg_oen_wd;
  logic pad_gpio_b_49_cfg_oen_we;
  logic pad_gpio_b_49_cfg_puen_qs;
  logic pad_gpio_b_49_cfg_puen_wd;
  logic pad_gpio_b_49_cfg_puen_we;
  logic pad_gpio_b_49_cfg_slw_qs;
  logic pad_gpio_b_49_cfg_slw_wd;
  logic pad_gpio_b_49_cfg_slw_we;
  logic pad_gpio_b_49_cfg_smt_qs;
  logic pad_gpio_b_49_cfg_smt_wd;
  logic pad_gpio_b_49_cfg_smt_we;
  logic [1:0] pad_gpio_b_49_mux_sel_qs;
  logic [1:0] pad_gpio_b_49_mux_sel_wd;
  logic pad_gpio_b_49_mux_sel_we;
  logic pad_gpio_b_50_cfg_chip2pad_qs;
  logic pad_gpio_b_50_cfg_chip2pad_wd;
  logic pad_gpio_b_50_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_50_cfg_drv_qs;
  logic [1:0] pad_gpio_b_50_cfg_drv_wd;
  logic pad_gpio_b_50_cfg_drv_we;
  logic pad_gpio_b_50_cfg_oen_qs;
  logic pad_gpio_b_50_cfg_oen_wd;
  logic pad_gpio_b_50_cfg_oen_we;
  logic pad_gpio_b_50_cfg_puen_qs;
  logic pad_gpio_b_50_cfg_puen_wd;
  logic pad_gpio_b_50_cfg_puen_we;
  logic pad_gpio_b_50_cfg_slw_qs;
  logic pad_gpio_b_50_cfg_slw_wd;
  logic pad_gpio_b_50_cfg_slw_we;
  logic pad_gpio_b_50_cfg_smt_qs;
  logic pad_gpio_b_50_cfg_smt_wd;
  logic pad_gpio_b_50_cfg_smt_we;
  logic [1:0] pad_gpio_b_50_mux_sel_qs;
  logic [1:0] pad_gpio_b_50_mux_sel_wd;
  logic pad_gpio_b_50_mux_sel_we;
  logic pad_gpio_b_51_cfg_chip2pad_qs;
  logic pad_gpio_b_51_cfg_chip2pad_wd;
  logic pad_gpio_b_51_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_51_cfg_drv_qs;
  logic [1:0] pad_gpio_b_51_cfg_drv_wd;
  logic pad_gpio_b_51_cfg_drv_we;
  logic pad_gpio_b_51_cfg_oen_qs;
  logic pad_gpio_b_51_cfg_oen_wd;
  logic pad_gpio_b_51_cfg_oen_we;
  logic pad_gpio_b_51_cfg_puen_qs;
  logic pad_gpio_b_51_cfg_puen_wd;
  logic pad_gpio_b_51_cfg_puen_we;
  logic pad_gpio_b_51_cfg_slw_qs;
  logic pad_gpio_b_51_cfg_slw_wd;
  logic pad_gpio_b_51_cfg_slw_we;
  logic pad_gpio_b_51_cfg_smt_qs;
  logic pad_gpio_b_51_cfg_smt_wd;
  logic pad_gpio_b_51_cfg_smt_we;
  logic [1:0] pad_gpio_b_51_mux_sel_qs;
  logic [1:0] pad_gpio_b_51_mux_sel_wd;
  logic pad_gpio_b_51_mux_sel_we;
  logic pad_gpio_b_52_cfg_chip2pad_qs;
  logic pad_gpio_b_52_cfg_chip2pad_wd;
  logic pad_gpio_b_52_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_52_cfg_drv_qs;
  logic [1:0] pad_gpio_b_52_cfg_drv_wd;
  logic pad_gpio_b_52_cfg_drv_we;
  logic pad_gpio_b_52_cfg_oen_qs;
  logic pad_gpio_b_52_cfg_oen_wd;
  logic pad_gpio_b_52_cfg_oen_we;
  logic pad_gpio_b_52_cfg_puen_qs;
  logic pad_gpio_b_52_cfg_puen_wd;
  logic pad_gpio_b_52_cfg_puen_we;
  logic pad_gpio_b_52_cfg_slw_qs;
  logic pad_gpio_b_52_cfg_slw_wd;
  logic pad_gpio_b_52_cfg_slw_we;
  logic pad_gpio_b_52_cfg_smt_qs;
  logic pad_gpio_b_52_cfg_smt_wd;
  logic pad_gpio_b_52_cfg_smt_we;
  logic [1:0] pad_gpio_b_52_mux_sel_qs;
  logic [1:0] pad_gpio_b_52_mux_sel_wd;
  logic pad_gpio_b_52_mux_sel_we;
  logic pad_gpio_b_53_cfg_chip2pad_qs;
  logic pad_gpio_b_53_cfg_chip2pad_wd;
  logic pad_gpio_b_53_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_53_cfg_drv_qs;
  logic [1:0] pad_gpio_b_53_cfg_drv_wd;
  logic pad_gpio_b_53_cfg_drv_we;
  logic pad_gpio_b_53_cfg_oen_qs;
  logic pad_gpio_b_53_cfg_oen_wd;
  logic pad_gpio_b_53_cfg_oen_we;
  logic pad_gpio_b_53_cfg_puen_qs;
  logic pad_gpio_b_53_cfg_puen_wd;
  logic pad_gpio_b_53_cfg_puen_we;
  logic pad_gpio_b_53_cfg_slw_qs;
  logic pad_gpio_b_53_cfg_slw_wd;
  logic pad_gpio_b_53_cfg_slw_we;
  logic pad_gpio_b_53_cfg_smt_qs;
  logic pad_gpio_b_53_cfg_smt_wd;
  logic pad_gpio_b_53_cfg_smt_we;
  logic [1:0] pad_gpio_b_53_mux_sel_qs;
  logic [1:0] pad_gpio_b_53_mux_sel_wd;
  logic pad_gpio_b_53_mux_sel_we;
  logic pad_gpio_b_54_cfg_chip2pad_qs;
  logic pad_gpio_b_54_cfg_chip2pad_wd;
  logic pad_gpio_b_54_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_54_cfg_drv_qs;
  logic [1:0] pad_gpio_b_54_cfg_drv_wd;
  logic pad_gpio_b_54_cfg_drv_we;
  logic pad_gpio_b_54_cfg_oen_qs;
  logic pad_gpio_b_54_cfg_oen_wd;
  logic pad_gpio_b_54_cfg_oen_we;
  logic pad_gpio_b_54_cfg_puen_qs;
  logic pad_gpio_b_54_cfg_puen_wd;
  logic pad_gpio_b_54_cfg_puen_we;
  logic pad_gpio_b_54_cfg_slw_qs;
  logic pad_gpio_b_54_cfg_slw_wd;
  logic pad_gpio_b_54_cfg_slw_we;
  logic pad_gpio_b_54_cfg_smt_qs;
  logic pad_gpio_b_54_cfg_smt_wd;
  logic pad_gpio_b_54_cfg_smt_we;
  logic [1:0] pad_gpio_b_54_mux_sel_qs;
  logic [1:0] pad_gpio_b_54_mux_sel_wd;
  logic pad_gpio_b_54_mux_sel_we;
  logic pad_gpio_b_55_cfg_chip2pad_qs;
  logic pad_gpio_b_55_cfg_chip2pad_wd;
  logic pad_gpio_b_55_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_55_cfg_drv_qs;
  logic [1:0] pad_gpio_b_55_cfg_drv_wd;
  logic pad_gpio_b_55_cfg_drv_we;
  logic pad_gpio_b_55_cfg_oen_qs;
  logic pad_gpio_b_55_cfg_oen_wd;
  logic pad_gpio_b_55_cfg_oen_we;
  logic pad_gpio_b_55_cfg_puen_qs;
  logic pad_gpio_b_55_cfg_puen_wd;
  logic pad_gpio_b_55_cfg_puen_we;
  logic pad_gpio_b_55_cfg_slw_qs;
  logic pad_gpio_b_55_cfg_slw_wd;
  logic pad_gpio_b_55_cfg_slw_we;
  logic pad_gpio_b_55_cfg_smt_qs;
  logic pad_gpio_b_55_cfg_smt_wd;
  logic pad_gpio_b_55_cfg_smt_we;
  logic [1:0] pad_gpio_b_55_mux_sel_qs;
  logic [1:0] pad_gpio_b_55_mux_sel_wd;
  logic pad_gpio_b_55_mux_sel_we;
  logic pad_gpio_b_56_cfg_chip2pad_qs;
  logic pad_gpio_b_56_cfg_chip2pad_wd;
  logic pad_gpio_b_56_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_56_cfg_drv_qs;
  logic [1:0] pad_gpio_b_56_cfg_drv_wd;
  logic pad_gpio_b_56_cfg_drv_we;
  logic pad_gpio_b_56_cfg_oen_qs;
  logic pad_gpio_b_56_cfg_oen_wd;
  logic pad_gpio_b_56_cfg_oen_we;
  logic pad_gpio_b_56_cfg_puen_qs;
  logic pad_gpio_b_56_cfg_puen_wd;
  logic pad_gpio_b_56_cfg_puen_we;
  logic pad_gpio_b_56_cfg_slw_qs;
  logic pad_gpio_b_56_cfg_slw_wd;
  logic pad_gpio_b_56_cfg_slw_we;
  logic pad_gpio_b_56_cfg_smt_qs;
  logic pad_gpio_b_56_cfg_smt_wd;
  logic pad_gpio_b_56_cfg_smt_we;
  logic pad_gpio_b_56_mux_sel_qs;
  logic pad_gpio_b_56_mux_sel_wd;
  logic pad_gpio_b_56_mux_sel_we;
  logic pad_gpio_b_57_cfg_chip2pad_qs;
  logic pad_gpio_b_57_cfg_chip2pad_wd;
  logic pad_gpio_b_57_cfg_chip2pad_we;
  logic [1:0] pad_gpio_b_57_cfg_drv_qs;
  logic [1:0] pad_gpio_b_57_cfg_drv_wd;
  logic pad_gpio_b_57_cfg_drv_we;
  logic pad_gpio_b_57_cfg_oen_qs;
  logic pad_gpio_b_57_cfg_oen_wd;
  logic pad_gpio_b_57_cfg_oen_we;
  logic pad_gpio_b_57_cfg_puen_qs;
  logic pad_gpio_b_57_cfg_puen_wd;
  logic pad_gpio_b_57_cfg_puen_we;
  logic pad_gpio_b_57_cfg_slw_qs;
  logic pad_gpio_b_57_cfg_slw_wd;
  logic pad_gpio_b_57_cfg_slw_we;
  logic pad_gpio_b_57_cfg_smt_qs;
  logic pad_gpio_b_57_cfg_smt_wd;
  logic pad_gpio_b_57_cfg_smt_we;
  logic pad_gpio_b_57_mux_sel_qs;
  logic pad_gpio_b_57_mux_sel_wd;
  logic pad_gpio_b_57_mux_sel_we;
  logic pad_gpio_c_00_cfg_chip2pad_qs;
  logic pad_gpio_c_00_cfg_chip2pad_wd;
  logic pad_gpio_c_00_cfg_chip2pad_we;
  logic [1:0] pad_gpio_c_00_cfg_drv_qs;
  logic [1:0] pad_gpio_c_00_cfg_drv_wd;
  logic pad_gpio_c_00_cfg_drv_we;
  logic pad_gpio_c_00_cfg_oen_qs;
  logic pad_gpio_c_00_cfg_oen_wd;
  logic pad_gpio_c_00_cfg_oen_we;
  logic pad_gpio_c_00_cfg_puen_qs;
  logic pad_gpio_c_00_cfg_puen_wd;
  logic pad_gpio_c_00_cfg_puen_we;
  logic pad_gpio_c_00_cfg_slw_qs;
  logic pad_gpio_c_00_cfg_slw_wd;
  logic pad_gpio_c_00_cfg_slw_we;
  logic pad_gpio_c_00_cfg_smt_qs;
  logic pad_gpio_c_00_cfg_smt_wd;
  logic pad_gpio_c_00_cfg_smt_we;
  logic [1:0] pad_gpio_c_00_mux_sel_qs;
  logic [1:0] pad_gpio_c_00_mux_sel_wd;
  logic pad_gpio_c_00_mux_sel_we;
  logic pad_gpio_c_01_cfg_chip2pad_qs;
  logic pad_gpio_c_01_cfg_chip2pad_wd;
  logic pad_gpio_c_01_cfg_chip2pad_we;
  logic [1:0] pad_gpio_c_01_cfg_drv_qs;
  logic [1:0] pad_gpio_c_01_cfg_drv_wd;
  logic pad_gpio_c_01_cfg_drv_we;
  logic pad_gpio_c_01_cfg_oen_qs;
  logic pad_gpio_c_01_cfg_oen_wd;
  logic pad_gpio_c_01_cfg_oen_we;
  logic pad_gpio_c_01_cfg_puen_qs;
  logic pad_gpio_c_01_cfg_puen_wd;
  logic pad_gpio_c_01_cfg_puen_we;
  logic pad_gpio_c_01_cfg_slw_qs;
  logic pad_gpio_c_01_cfg_slw_wd;
  logic pad_gpio_c_01_cfg_slw_we;
  logic pad_gpio_c_01_cfg_smt_qs;
  logic pad_gpio_c_01_cfg_smt_wd;
  logic pad_gpio_c_01_cfg_smt_we;
  logic [1:0] pad_gpio_c_01_mux_sel_qs;
  logic [1:0] pad_gpio_c_01_mux_sel_wd;
  logic pad_gpio_c_01_mux_sel_we;
  logic pad_gpio_c_02_cfg_chip2pad_qs;
  logic pad_gpio_c_02_cfg_chip2pad_wd;
  logic pad_gpio_c_02_cfg_chip2pad_we;
  logic [1:0] pad_gpio_c_02_cfg_drv_qs;
  logic [1:0] pad_gpio_c_02_cfg_drv_wd;
  logic pad_gpio_c_02_cfg_drv_we;
  logic pad_gpio_c_02_cfg_oen_qs;
  logic pad_gpio_c_02_cfg_oen_wd;
  logic pad_gpio_c_02_cfg_oen_we;
  logic pad_gpio_c_02_cfg_puen_qs;
  logic pad_gpio_c_02_cfg_puen_wd;
  logic pad_gpio_c_02_cfg_puen_we;
  logic pad_gpio_c_02_cfg_slw_qs;
  logic pad_gpio_c_02_cfg_slw_wd;
  logic pad_gpio_c_02_cfg_slw_we;
  logic pad_gpio_c_02_cfg_smt_qs;
  logic pad_gpio_c_02_cfg_smt_wd;
  logic pad_gpio_c_02_cfg_smt_we;
  logic [1:0] pad_gpio_c_02_mux_sel_qs;
  logic [1:0] pad_gpio_c_02_mux_sel_wd;
  logic pad_gpio_c_02_mux_sel_we;
  logic pad_gpio_c_03_cfg_chip2pad_qs;
  logic pad_gpio_c_03_cfg_chip2pad_wd;
  logic pad_gpio_c_03_cfg_chip2pad_we;
  logic [1:0] pad_gpio_c_03_cfg_drv_qs;
  logic [1:0] pad_gpio_c_03_cfg_drv_wd;
  logic pad_gpio_c_03_cfg_drv_we;
  logic pad_gpio_c_03_cfg_oen_qs;
  logic pad_gpio_c_03_cfg_oen_wd;
  logic pad_gpio_c_03_cfg_oen_we;
  logic pad_gpio_c_03_cfg_puen_qs;
  logic pad_gpio_c_03_cfg_puen_wd;
  logic pad_gpio_c_03_cfg_puen_we;
  logic pad_gpio_c_03_cfg_slw_qs;
  logic pad_gpio_c_03_cfg_slw_wd;
  logic pad_gpio_c_03_cfg_slw_we;
  logic pad_gpio_c_03_cfg_smt_qs;
  logic pad_gpio_c_03_cfg_smt_wd;
  logic pad_gpio_c_03_cfg_smt_we;
  logic [1:0] pad_gpio_c_03_mux_sel_qs;
  logic [1:0] pad_gpio_c_03_mux_sel_wd;
  logic pad_gpio_c_03_mux_sel_we;
  logic pad_gpio_d_00_cfg_chip2pad_qs;
  logic pad_gpio_d_00_cfg_chip2pad_wd;
  logic pad_gpio_d_00_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_00_cfg_drv_qs;
  logic [1:0] pad_gpio_d_00_cfg_drv_wd;
  logic pad_gpio_d_00_cfg_drv_we;
  logic pad_gpio_d_00_cfg_oen_qs;
  logic pad_gpio_d_00_cfg_oen_wd;
  logic pad_gpio_d_00_cfg_oen_we;
  logic pad_gpio_d_00_cfg_puen_qs;
  logic pad_gpio_d_00_cfg_puen_wd;
  logic pad_gpio_d_00_cfg_puen_we;
  logic pad_gpio_d_00_cfg_slw_qs;
  logic pad_gpio_d_00_cfg_slw_wd;
  logic pad_gpio_d_00_cfg_slw_we;
  logic pad_gpio_d_00_cfg_smt_qs;
  logic pad_gpio_d_00_cfg_smt_wd;
  logic pad_gpio_d_00_cfg_smt_we;
  logic [1:0] pad_gpio_d_00_mux_sel_qs;
  logic [1:0] pad_gpio_d_00_mux_sel_wd;
  logic pad_gpio_d_00_mux_sel_we;
  logic pad_gpio_d_01_cfg_chip2pad_qs;
  logic pad_gpio_d_01_cfg_chip2pad_wd;
  logic pad_gpio_d_01_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_01_cfg_drv_qs;
  logic [1:0] pad_gpio_d_01_cfg_drv_wd;
  logic pad_gpio_d_01_cfg_drv_we;
  logic pad_gpio_d_01_cfg_oen_qs;
  logic pad_gpio_d_01_cfg_oen_wd;
  logic pad_gpio_d_01_cfg_oen_we;
  logic pad_gpio_d_01_cfg_puen_qs;
  logic pad_gpio_d_01_cfg_puen_wd;
  logic pad_gpio_d_01_cfg_puen_we;
  logic pad_gpio_d_01_cfg_slw_qs;
  logic pad_gpio_d_01_cfg_slw_wd;
  logic pad_gpio_d_01_cfg_slw_we;
  logic pad_gpio_d_01_cfg_smt_qs;
  logic pad_gpio_d_01_cfg_smt_wd;
  logic pad_gpio_d_01_cfg_smt_we;
  logic [1:0] pad_gpio_d_01_mux_sel_qs;
  logic [1:0] pad_gpio_d_01_mux_sel_wd;
  logic pad_gpio_d_01_mux_sel_we;
  logic pad_gpio_d_02_cfg_chip2pad_qs;
  logic pad_gpio_d_02_cfg_chip2pad_wd;
  logic pad_gpio_d_02_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_02_cfg_drv_qs;
  logic [1:0] pad_gpio_d_02_cfg_drv_wd;
  logic pad_gpio_d_02_cfg_drv_we;
  logic pad_gpio_d_02_cfg_oen_qs;
  logic pad_gpio_d_02_cfg_oen_wd;
  logic pad_gpio_d_02_cfg_oen_we;
  logic pad_gpio_d_02_cfg_puen_qs;
  logic pad_gpio_d_02_cfg_puen_wd;
  logic pad_gpio_d_02_cfg_puen_we;
  logic pad_gpio_d_02_cfg_slw_qs;
  logic pad_gpio_d_02_cfg_slw_wd;
  logic pad_gpio_d_02_cfg_slw_we;
  logic pad_gpio_d_02_cfg_smt_qs;
  logic pad_gpio_d_02_cfg_smt_wd;
  logic pad_gpio_d_02_cfg_smt_we;
  logic [1:0] pad_gpio_d_02_mux_sel_qs;
  logic [1:0] pad_gpio_d_02_mux_sel_wd;
  logic pad_gpio_d_02_mux_sel_we;
  logic pad_gpio_d_03_cfg_chip2pad_qs;
  logic pad_gpio_d_03_cfg_chip2pad_wd;
  logic pad_gpio_d_03_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_03_cfg_drv_qs;
  logic [1:0] pad_gpio_d_03_cfg_drv_wd;
  logic pad_gpio_d_03_cfg_drv_we;
  logic pad_gpio_d_03_cfg_oen_qs;
  logic pad_gpio_d_03_cfg_oen_wd;
  logic pad_gpio_d_03_cfg_oen_we;
  logic pad_gpio_d_03_cfg_puen_qs;
  logic pad_gpio_d_03_cfg_puen_wd;
  logic pad_gpio_d_03_cfg_puen_we;
  logic pad_gpio_d_03_cfg_slw_qs;
  logic pad_gpio_d_03_cfg_slw_wd;
  logic pad_gpio_d_03_cfg_slw_we;
  logic pad_gpio_d_03_cfg_smt_qs;
  logic pad_gpio_d_03_cfg_smt_wd;
  logic pad_gpio_d_03_cfg_smt_we;
  logic [1:0] pad_gpio_d_03_mux_sel_qs;
  logic [1:0] pad_gpio_d_03_mux_sel_wd;
  logic pad_gpio_d_03_mux_sel_we;
  logic pad_gpio_d_04_cfg_chip2pad_qs;
  logic pad_gpio_d_04_cfg_chip2pad_wd;
  logic pad_gpio_d_04_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_04_cfg_drv_qs;
  logic [1:0] pad_gpio_d_04_cfg_drv_wd;
  logic pad_gpio_d_04_cfg_drv_we;
  logic pad_gpio_d_04_cfg_oen_qs;
  logic pad_gpio_d_04_cfg_oen_wd;
  logic pad_gpio_d_04_cfg_oen_we;
  logic pad_gpio_d_04_cfg_puen_qs;
  logic pad_gpio_d_04_cfg_puen_wd;
  logic pad_gpio_d_04_cfg_puen_we;
  logic pad_gpio_d_04_cfg_slw_qs;
  logic pad_gpio_d_04_cfg_slw_wd;
  logic pad_gpio_d_04_cfg_slw_we;
  logic pad_gpio_d_04_cfg_smt_qs;
  logic pad_gpio_d_04_cfg_smt_wd;
  logic pad_gpio_d_04_cfg_smt_we;
  logic [1:0] pad_gpio_d_04_mux_sel_qs;
  logic [1:0] pad_gpio_d_04_mux_sel_wd;
  logic pad_gpio_d_04_mux_sel_we;
  logic pad_gpio_d_05_cfg_chip2pad_qs;
  logic pad_gpio_d_05_cfg_chip2pad_wd;
  logic pad_gpio_d_05_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_05_cfg_drv_qs;
  logic [1:0] pad_gpio_d_05_cfg_drv_wd;
  logic pad_gpio_d_05_cfg_drv_we;
  logic pad_gpio_d_05_cfg_oen_qs;
  logic pad_gpio_d_05_cfg_oen_wd;
  logic pad_gpio_d_05_cfg_oen_we;
  logic pad_gpio_d_05_cfg_puen_qs;
  logic pad_gpio_d_05_cfg_puen_wd;
  logic pad_gpio_d_05_cfg_puen_we;
  logic pad_gpio_d_05_cfg_slw_qs;
  logic pad_gpio_d_05_cfg_slw_wd;
  logic pad_gpio_d_05_cfg_slw_we;
  logic pad_gpio_d_05_cfg_smt_qs;
  logic pad_gpio_d_05_cfg_smt_wd;
  logic pad_gpio_d_05_cfg_smt_we;
  logic [1:0] pad_gpio_d_05_mux_sel_qs;
  logic [1:0] pad_gpio_d_05_mux_sel_wd;
  logic pad_gpio_d_05_mux_sel_we;
  logic pad_gpio_d_06_cfg_chip2pad_qs;
  logic pad_gpio_d_06_cfg_chip2pad_wd;
  logic pad_gpio_d_06_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_06_cfg_drv_qs;
  logic [1:0] pad_gpio_d_06_cfg_drv_wd;
  logic pad_gpio_d_06_cfg_drv_we;
  logic pad_gpio_d_06_cfg_oen_qs;
  logic pad_gpio_d_06_cfg_oen_wd;
  logic pad_gpio_d_06_cfg_oen_we;
  logic pad_gpio_d_06_cfg_puen_qs;
  logic pad_gpio_d_06_cfg_puen_wd;
  logic pad_gpio_d_06_cfg_puen_we;
  logic pad_gpio_d_06_cfg_slw_qs;
  logic pad_gpio_d_06_cfg_slw_wd;
  logic pad_gpio_d_06_cfg_slw_we;
  logic pad_gpio_d_06_cfg_smt_qs;
  logic pad_gpio_d_06_cfg_smt_wd;
  logic pad_gpio_d_06_cfg_smt_we;
  logic [1:0] pad_gpio_d_06_mux_sel_qs;
  logic [1:0] pad_gpio_d_06_mux_sel_wd;
  logic pad_gpio_d_06_mux_sel_we;
  logic pad_gpio_d_07_cfg_chip2pad_qs;
  logic pad_gpio_d_07_cfg_chip2pad_wd;
  logic pad_gpio_d_07_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_07_cfg_drv_qs;
  logic [1:0] pad_gpio_d_07_cfg_drv_wd;
  logic pad_gpio_d_07_cfg_drv_we;
  logic pad_gpio_d_07_cfg_oen_qs;
  logic pad_gpio_d_07_cfg_oen_wd;
  logic pad_gpio_d_07_cfg_oen_we;
  logic pad_gpio_d_07_cfg_puen_qs;
  logic pad_gpio_d_07_cfg_puen_wd;
  logic pad_gpio_d_07_cfg_puen_we;
  logic pad_gpio_d_07_cfg_slw_qs;
  logic pad_gpio_d_07_cfg_slw_wd;
  logic pad_gpio_d_07_cfg_slw_we;
  logic pad_gpio_d_07_cfg_smt_qs;
  logic pad_gpio_d_07_cfg_smt_wd;
  logic pad_gpio_d_07_cfg_smt_we;
  logic [1:0] pad_gpio_d_07_mux_sel_qs;
  logic [1:0] pad_gpio_d_07_mux_sel_wd;
  logic pad_gpio_d_07_mux_sel_we;
  logic pad_gpio_d_08_cfg_chip2pad_qs;
  logic pad_gpio_d_08_cfg_chip2pad_wd;
  logic pad_gpio_d_08_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_08_cfg_drv_qs;
  logic [1:0] pad_gpio_d_08_cfg_drv_wd;
  logic pad_gpio_d_08_cfg_drv_we;
  logic pad_gpio_d_08_cfg_oen_qs;
  logic pad_gpio_d_08_cfg_oen_wd;
  logic pad_gpio_d_08_cfg_oen_we;
  logic pad_gpio_d_08_cfg_puen_qs;
  logic pad_gpio_d_08_cfg_puen_wd;
  logic pad_gpio_d_08_cfg_puen_we;
  logic pad_gpio_d_08_cfg_slw_qs;
  logic pad_gpio_d_08_cfg_slw_wd;
  logic pad_gpio_d_08_cfg_slw_we;
  logic pad_gpio_d_08_cfg_smt_qs;
  logic pad_gpio_d_08_cfg_smt_wd;
  logic pad_gpio_d_08_cfg_smt_we;
  logic pad_gpio_d_08_mux_sel_qs;
  logic pad_gpio_d_08_mux_sel_wd;
  logic pad_gpio_d_08_mux_sel_we;
  logic pad_gpio_d_09_cfg_chip2pad_qs;
  logic pad_gpio_d_09_cfg_chip2pad_wd;
  logic pad_gpio_d_09_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_09_cfg_drv_qs;
  logic [1:0] pad_gpio_d_09_cfg_drv_wd;
  logic pad_gpio_d_09_cfg_drv_we;
  logic pad_gpio_d_09_cfg_oen_qs;
  logic pad_gpio_d_09_cfg_oen_wd;
  logic pad_gpio_d_09_cfg_oen_we;
  logic pad_gpio_d_09_cfg_puen_qs;
  logic pad_gpio_d_09_cfg_puen_wd;
  logic pad_gpio_d_09_cfg_puen_we;
  logic pad_gpio_d_09_cfg_slw_qs;
  logic pad_gpio_d_09_cfg_slw_wd;
  logic pad_gpio_d_09_cfg_slw_we;
  logic pad_gpio_d_09_cfg_smt_qs;
  logic pad_gpio_d_09_cfg_smt_wd;
  logic pad_gpio_d_09_cfg_smt_we;
  logic pad_gpio_d_09_mux_sel_qs;
  logic pad_gpio_d_09_mux_sel_wd;
  logic pad_gpio_d_09_mux_sel_we;
  logic pad_gpio_d_10_cfg_chip2pad_qs;
  logic pad_gpio_d_10_cfg_chip2pad_wd;
  logic pad_gpio_d_10_cfg_chip2pad_we;
  logic [1:0] pad_gpio_d_10_cfg_drv_qs;
  logic [1:0] pad_gpio_d_10_cfg_drv_wd;
  logic pad_gpio_d_10_cfg_drv_we;
  logic pad_gpio_d_10_cfg_oen_qs;
  logic pad_gpio_d_10_cfg_oen_wd;
  logic pad_gpio_d_10_cfg_oen_we;
  logic pad_gpio_d_10_cfg_puen_qs;
  logic pad_gpio_d_10_cfg_puen_wd;
  logic pad_gpio_d_10_cfg_puen_we;
  logic pad_gpio_d_10_cfg_slw_qs;
  logic pad_gpio_d_10_cfg_slw_wd;
  logic pad_gpio_d_10_cfg_slw_we;
  logic pad_gpio_d_10_cfg_smt_qs;
  logic pad_gpio_d_10_cfg_smt_wd;
  logic pad_gpio_d_10_cfg_smt_we;
  logic pad_gpio_d_10_mux_sel_qs;
  logic pad_gpio_d_10_mux_sel_wd;
  logic pad_gpio_d_10_mux_sel_we;
  logic pad_gpio_e_00_cfg_chip2pad_qs;
  logic pad_gpio_e_00_cfg_chip2pad_wd;
  logic pad_gpio_e_00_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_00_cfg_drv_qs;
  logic [1:0] pad_gpio_e_00_cfg_drv_wd;
  logic pad_gpio_e_00_cfg_drv_we;
  logic pad_gpio_e_00_cfg_oen_qs;
  logic pad_gpio_e_00_cfg_oen_wd;
  logic pad_gpio_e_00_cfg_oen_we;
  logic pad_gpio_e_00_cfg_puen_qs;
  logic pad_gpio_e_00_cfg_puen_wd;
  logic pad_gpio_e_00_cfg_puen_we;
  logic pad_gpio_e_00_cfg_slw_qs;
  logic pad_gpio_e_00_cfg_slw_wd;
  logic pad_gpio_e_00_cfg_slw_we;
  logic pad_gpio_e_00_cfg_smt_qs;
  logic pad_gpio_e_00_cfg_smt_wd;
  logic pad_gpio_e_00_cfg_smt_we;
  logic [1:0] pad_gpio_e_00_mux_sel_qs;
  logic [1:0] pad_gpio_e_00_mux_sel_wd;
  logic pad_gpio_e_00_mux_sel_we;
  logic pad_gpio_e_01_cfg_chip2pad_qs;
  logic pad_gpio_e_01_cfg_chip2pad_wd;
  logic pad_gpio_e_01_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_01_cfg_drv_qs;
  logic [1:0] pad_gpio_e_01_cfg_drv_wd;
  logic pad_gpio_e_01_cfg_drv_we;
  logic pad_gpio_e_01_cfg_oen_qs;
  logic pad_gpio_e_01_cfg_oen_wd;
  logic pad_gpio_e_01_cfg_oen_we;
  logic pad_gpio_e_01_cfg_puen_qs;
  logic pad_gpio_e_01_cfg_puen_wd;
  logic pad_gpio_e_01_cfg_puen_we;
  logic pad_gpio_e_01_cfg_slw_qs;
  logic pad_gpio_e_01_cfg_slw_wd;
  logic pad_gpio_e_01_cfg_slw_we;
  logic pad_gpio_e_01_cfg_smt_qs;
  logic pad_gpio_e_01_cfg_smt_wd;
  logic pad_gpio_e_01_cfg_smt_we;
  logic [1:0] pad_gpio_e_01_mux_sel_qs;
  logic [1:0] pad_gpio_e_01_mux_sel_wd;
  logic pad_gpio_e_01_mux_sel_we;
  logic pad_gpio_e_02_cfg_chip2pad_qs;
  logic pad_gpio_e_02_cfg_chip2pad_wd;
  logic pad_gpio_e_02_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_02_cfg_drv_qs;
  logic [1:0] pad_gpio_e_02_cfg_drv_wd;
  logic pad_gpio_e_02_cfg_drv_we;
  logic pad_gpio_e_02_cfg_oen_qs;
  logic pad_gpio_e_02_cfg_oen_wd;
  logic pad_gpio_e_02_cfg_oen_we;
  logic pad_gpio_e_02_cfg_puen_qs;
  logic pad_gpio_e_02_cfg_puen_wd;
  logic pad_gpio_e_02_cfg_puen_we;
  logic pad_gpio_e_02_cfg_slw_qs;
  logic pad_gpio_e_02_cfg_slw_wd;
  logic pad_gpio_e_02_cfg_slw_we;
  logic pad_gpio_e_02_cfg_smt_qs;
  logic pad_gpio_e_02_cfg_smt_wd;
  logic pad_gpio_e_02_cfg_smt_we;
  logic [1:0] pad_gpio_e_02_mux_sel_qs;
  logic [1:0] pad_gpio_e_02_mux_sel_wd;
  logic pad_gpio_e_02_mux_sel_we;
  logic pad_gpio_e_03_cfg_chip2pad_qs;
  logic pad_gpio_e_03_cfg_chip2pad_wd;
  logic pad_gpio_e_03_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_03_cfg_drv_qs;
  logic [1:0] pad_gpio_e_03_cfg_drv_wd;
  logic pad_gpio_e_03_cfg_drv_we;
  logic pad_gpio_e_03_cfg_oen_qs;
  logic pad_gpio_e_03_cfg_oen_wd;
  logic pad_gpio_e_03_cfg_oen_we;
  logic pad_gpio_e_03_cfg_puen_qs;
  logic pad_gpio_e_03_cfg_puen_wd;
  logic pad_gpio_e_03_cfg_puen_we;
  logic pad_gpio_e_03_cfg_slw_qs;
  logic pad_gpio_e_03_cfg_slw_wd;
  logic pad_gpio_e_03_cfg_slw_we;
  logic pad_gpio_e_03_cfg_smt_qs;
  logic pad_gpio_e_03_cfg_smt_wd;
  logic pad_gpio_e_03_cfg_smt_we;
  logic [1:0] pad_gpio_e_03_mux_sel_qs;
  logic [1:0] pad_gpio_e_03_mux_sel_wd;
  logic pad_gpio_e_03_mux_sel_we;
  logic pad_gpio_e_04_cfg_chip2pad_qs;
  logic pad_gpio_e_04_cfg_chip2pad_wd;
  logic pad_gpio_e_04_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_04_cfg_drv_qs;
  logic [1:0] pad_gpio_e_04_cfg_drv_wd;
  logic pad_gpio_e_04_cfg_drv_we;
  logic pad_gpio_e_04_cfg_oen_qs;
  logic pad_gpio_e_04_cfg_oen_wd;
  logic pad_gpio_e_04_cfg_oen_we;
  logic pad_gpio_e_04_cfg_puen_qs;
  logic pad_gpio_e_04_cfg_puen_wd;
  logic pad_gpio_e_04_cfg_puen_we;
  logic pad_gpio_e_04_cfg_slw_qs;
  logic pad_gpio_e_04_cfg_slw_wd;
  logic pad_gpio_e_04_cfg_slw_we;
  logic pad_gpio_e_04_cfg_smt_qs;
  logic pad_gpio_e_04_cfg_smt_wd;
  logic pad_gpio_e_04_cfg_smt_we;
  logic pad_gpio_e_04_mux_sel_qs;
  logic pad_gpio_e_04_mux_sel_wd;
  logic pad_gpio_e_04_mux_sel_we;
  logic pad_gpio_e_05_cfg_chip2pad_qs;
  logic pad_gpio_e_05_cfg_chip2pad_wd;
  logic pad_gpio_e_05_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_05_cfg_drv_qs;
  logic [1:0] pad_gpio_e_05_cfg_drv_wd;
  logic pad_gpio_e_05_cfg_drv_we;
  logic pad_gpio_e_05_cfg_oen_qs;
  logic pad_gpio_e_05_cfg_oen_wd;
  logic pad_gpio_e_05_cfg_oen_we;
  logic pad_gpio_e_05_cfg_puen_qs;
  logic pad_gpio_e_05_cfg_puen_wd;
  logic pad_gpio_e_05_cfg_puen_we;
  logic pad_gpio_e_05_cfg_slw_qs;
  logic pad_gpio_e_05_cfg_slw_wd;
  logic pad_gpio_e_05_cfg_slw_we;
  logic pad_gpio_e_05_cfg_smt_qs;
  logic pad_gpio_e_05_cfg_smt_wd;
  logic pad_gpio_e_05_cfg_smt_we;
  logic pad_gpio_e_05_mux_sel_qs;
  logic pad_gpio_e_05_mux_sel_wd;
  logic pad_gpio_e_05_mux_sel_we;
  logic pad_gpio_e_06_cfg_chip2pad_qs;
  logic pad_gpio_e_06_cfg_chip2pad_wd;
  logic pad_gpio_e_06_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_06_cfg_drv_qs;
  logic [1:0] pad_gpio_e_06_cfg_drv_wd;
  logic pad_gpio_e_06_cfg_drv_we;
  logic pad_gpio_e_06_cfg_oen_qs;
  logic pad_gpio_e_06_cfg_oen_wd;
  logic pad_gpio_e_06_cfg_oen_we;
  logic pad_gpio_e_06_cfg_puen_qs;
  logic pad_gpio_e_06_cfg_puen_wd;
  logic pad_gpio_e_06_cfg_puen_we;
  logic pad_gpio_e_06_cfg_slw_qs;
  logic pad_gpio_e_06_cfg_slw_wd;
  logic pad_gpio_e_06_cfg_slw_we;
  logic pad_gpio_e_06_cfg_smt_qs;
  logic pad_gpio_e_06_cfg_smt_wd;
  logic pad_gpio_e_06_cfg_smt_we;
  logic pad_gpio_e_06_mux_sel_qs;
  logic pad_gpio_e_06_mux_sel_wd;
  logic pad_gpio_e_06_mux_sel_we;
  logic pad_gpio_e_07_cfg_chip2pad_qs;
  logic pad_gpio_e_07_cfg_chip2pad_wd;
  logic pad_gpio_e_07_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_07_cfg_drv_qs;
  logic [1:0] pad_gpio_e_07_cfg_drv_wd;
  logic pad_gpio_e_07_cfg_drv_we;
  logic pad_gpio_e_07_cfg_oen_qs;
  logic pad_gpio_e_07_cfg_oen_wd;
  logic pad_gpio_e_07_cfg_oen_we;
  logic pad_gpio_e_07_cfg_puen_qs;
  logic pad_gpio_e_07_cfg_puen_wd;
  logic pad_gpio_e_07_cfg_puen_we;
  logic pad_gpio_e_07_cfg_slw_qs;
  logic pad_gpio_e_07_cfg_slw_wd;
  logic pad_gpio_e_07_cfg_slw_we;
  logic pad_gpio_e_07_cfg_smt_qs;
  logic pad_gpio_e_07_cfg_smt_wd;
  logic pad_gpio_e_07_cfg_smt_we;
  logic pad_gpio_e_07_mux_sel_qs;
  logic pad_gpio_e_07_mux_sel_wd;
  logic pad_gpio_e_07_mux_sel_we;
  logic pad_gpio_e_08_cfg_chip2pad_qs;
  logic pad_gpio_e_08_cfg_chip2pad_wd;
  logic pad_gpio_e_08_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_08_cfg_drv_qs;
  logic [1:0] pad_gpio_e_08_cfg_drv_wd;
  logic pad_gpio_e_08_cfg_drv_we;
  logic pad_gpio_e_08_cfg_oen_qs;
  logic pad_gpio_e_08_cfg_oen_wd;
  logic pad_gpio_e_08_cfg_oen_we;
  logic pad_gpio_e_08_cfg_puen_qs;
  logic pad_gpio_e_08_cfg_puen_wd;
  logic pad_gpio_e_08_cfg_puen_we;
  logic pad_gpio_e_08_cfg_slw_qs;
  logic pad_gpio_e_08_cfg_slw_wd;
  logic pad_gpio_e_08_cfg_slw_we;
  logic pad_gpio_e_08_cfg_smt_qs;
  logic pad_gpio_e_08_cfg_smt_wd;
  logic pad_gpio_e_08_cfg_smt_we;
  logic [1:0] pad_gpio_e_08_mux_sel_qs;
  logic [1:0] pad_gpio_e_08_mux_sel_wd;
  logic pad_gpio_e_08_mux_sel_we;
  logic pad_gpio_e_09_cfg_chip2pad_qs;
  logic pad_gpio_e_09_cfg_chip2pad_wd;
  logic pad_gpio_e_09_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_09_cfg_drv_qs;
  logic [1:0] pad_gpio_e_09_cfg_drv_wd;
  logic pad_gpio_e_09_cfg_drv_we;
  logic pad_gpio_e_09_cfg_oen_qs;
  logic pad_gpio_e_09_cfg_oen_wd;
  logic pad_gpio_e_09_cfg_oen_we;
  logic pad_gpio_e_09_cfg_puen_qs;
  logic pad_gpio_e_09_cfg_puen_wd;
  logic pad_gpio_e_09_cfg_puen_we;
  logic pad_gpio_e_09_cfg_slw_qs;
  logic pad_gpio_e_09_cfg_slw_wd;
  logic pad_gpio_e_09_cfg_slw_we;
  logic pad_gpio_e_09_cfg_smt_qs;
  logic pad_gpio_e_09_cfg_smt_wd;
  logic pad_gpio_e_09_cfg_smt_we;
  logic [1:0] pad_gpio_e_09_mux_sel_qs;
  logic [1:0] pad_gpio_e_09_mux_sel_wd;
  logic pad_gpio_e_09_mux_sel_we;
  logic pad_gpio_e_10_cfg_chip2pad_qs;
  logic pad_gpio_e_10_cfg_chip2pad_wd;
  logic pad_gpio_e_10_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_10_cfg_drv_qs;
  logic [1:0] pad_gpio_e_10_cfg_drv_wd;
  logic pad_gpio_e_10_cfg_drv_we;
  logic pad_gpio_e_10_cfg_oen_qs;
  logic pad_gpio_e_10_cfg_oen_wd;
  logic pad_gpio_e_10_cfg_oen_we;
  logic pad_gpio_e_10_cfg_puen_qs;
  logic pad_gpio_e_10_cfg_puen_wd;
  logic pad_gpio_e_10_cfg_puen_we;
  logic pad_gpio_e_10_cfg_slw_qs;
  logic pad_gpio_e_10_cfg_slw_wd;
  logic pad_gpio_e_10_cfg_slw_we;
  logic pad_gpio_e_10_cfg_smt_qs;
  logic pad_gpio_e_10_cfg_smt_wd;
  logic pad_gpio_e_10_cfg_smt_we;
  logic [1:0] pad_gpio_e_10_mux_sel_qs;
  logic [1:0] pad_gpio_e_10_mux_sel_wd;
  logic pad_gpio_e_10_mux_sel_we;
  logic pad_gpio_e_11_cfg_chip2pad_qs;
  logic pad_gpio_e_11_cfg_chip2pad_wd;
  logic pad_gpio_e_11_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_11_cfg_drv_qs;
  logic [1:0] pad_gpio_e_11_cfg_drv_wd;
  logic pad_gpio_e_11_cfg_drv_we;
  logic pad_gpio_e_11_cfg_oen_qs;
  logic pad_gpio_e_11_cfg_oen_wd;
  logic pad_gpio_e_11_cfg_oen_we;
  logic pad_gpio_e_11_cfg_puen_qs;
  logic pad_gpio_e_11_cfg_puen_wd;
  logic pad_gpio_e_11_cfg_puen_we;
  logic pad_gpio_e_11_cfg_slw_qs;
  logic pad_gpio_e_11_cfg_slw_wd;
  logic pad_gpio_e_11_cfg_slw_we;
  logic pad_gpio_e_11_cfg_smt_qs;
  logic pad_gpio_e_11_cfg_smt_wd;
  logic pad_gpio_e_11_cfg_smt_we;
  logic pad_gpio_e_11_mux_sel_qs;
  logic pad_gpio_e_11_mux_sel_wd;
  logic pad_gpio_e_11_mux_sel_we;
  logic pad_gpio_e_12_cfg_chip2pad_qs;
  logic pad_gpio_e_12_cfg_chip2pad_wd;
  logic pad_gpio_e_12_cfg_chip2pad_we;
  logic [1:0] pad_gpio_e_12_cfg_drv_qs;
  logic [1:0] pad_gpio_e_12_cfg_drv_wd;
  logic pad_gpio_e_12_cfg_drv_we;
  logic pad_gpio_e_12_cfg_oen_qs;
  logic pad_gpio_e_12_cfg_oen_wd;
  logic pad_gpio_e_12_cfg_oen_we;
  logic pad_gpio_e_12_cfg_puen_qs;
  logic pad_gpio_e_12_cfg_puen_wd;
  logic pad_gpio_e_12_cfg_puen_we;
  logic pad_gpio_e_12_cfg_slw_qs;
  logic pad_gpio_e_12_cfg_slw_wd;
  logic pad_gpio_e_12_cfg_slw_we;
  logic pad_gpio_e_12_cfg_smt_qs;
  logic pad_gpio_e_12_cfg_smt_wd;
  logic pad_gpio_e_12_cfg_smt_we;
  logic pad_gpio_e_12_mux_sel_qs;
  logic pad_gpio_e_12_mux_sel_wd;
  logic pad_gpio_e_12_mux_sel_we;
  logic pad_gpio_f_00_cfg_chip2pad_qs;
  logic pad_gpio_f_00_cfg_chip2pad_wd;
  logic pad_gpio_f_00_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_00_cfg_drv_qs;
  logic [1:0] pad_gpio_f_00_cfg_drv_wd;
  logic pad_gpio_f_00_cfg_drv_we;
  logic pad_gpio_f_00_cfg_oen_qs;
  logic pad_gpio_f_00_cfg_oen_wd;
  logic pad_gpio_f_00_cfg_oen_we;
  logic pad_gpio_f_00_cfg_puen_qs;
  logic pad_gpio_f_00_cfg_puen_wd;
  logic pad_gpio_f_00_cfg_puen_we;
  logic pad_gpio_f_00_cfg_slw_qs;
  logic pad_gpio_f_00_cfg_slw_wd;
  logic pad_gpio_f_00_cfg_slw_we;
  logic pad_gpio_f_00_cfg_smt_qs;
  logic pad_gpio_f_00_cfg_smt_wd;
  logic pad_gpio_f_00_cfg_smt_we;
  logic pad_gpio_f_00_mux_sel_qs;
  logic pad_gpio_f_00_mux_sel_wd;
  logic pad_gpio_f_00_mux_sel_we;
  logic pad_gpio_f_01_cfg_chip2pad_qs;
  logic pad_gpio_f_01_cfg_chip2pad_wd;
  logic pad_gpio_f_01_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_01_cfg_drv_qs;
  logic [1:0] pad_gpio_f_01_cfg_drv_wd;
  logic pad_gpio_f_01_cfg_drv_we;
  logic pad_gpio_f_01_cfg_oen_qs;
  logic pad_gpio_f_01_cfg_oen_wd;
  logic pad_gpio_f_01_cfg_oen_we;
  logic pad_gpio_f_01_cfg_puen_qs;
  logic pad_gpio_f_01_cfg_puen_wd;
  logic pad_gpio_f_01_cfg_puen_we;
  logic pad_gpio_f_01_cfg_slw_qs;
  logic pad_gpio_f_01_cfg_slw_wd;
  logic pad_gpio_f_01_cfg_slw_we;
  logic pad_gpio_f_01_cfg_smt_qs;
  logic pad_gpio_f_01_cfg_smt_wd;
  logic pad_gpio_f_01_cfg_smt_we;
  logic [1:0] pad_gpio_f_01_mux_sel_qs;
  logic [1:0] pad_gpio_f_01_mux_sel_wd;
  logic pad_gpio_f_01_mux_sel_we;
  logic pad_gpio_f_02_cfg_chip2pad_qs;
  logic pad_gpio_f_02_cfg_chip2pad_wd;
  logic pad_gpio_f_02_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_02_cfg_drv_qs;
  logic [1:0] pad_gpio_f_02_cfg_drv_wd;
  logic pad_gpio_f_02_cfg_drv_we;
  logic pad_gpio_f_02_cfg_oen_qs;
  logic pad_gpio_f_02_cfg_oen_wd;
  logic pad_gpio_f_02_cfg_oen_we;
  logic pad_gpio_f_02_cfg_puen_qs;
  logic pad_gpio_f_02_cfg_puen_wd;
  logic pad_gpio_f_02_cfg_puen_we;
  logic pad_gpio_f_02_cfg_slw_qs;
  logic pad_gpio_f_02_cfg_slw_wd;
  logic pad_gpio_f_02_cfg_slw_we;
  logic pad_gpio_f_02_cfg_smt_qs;
  logic pad_gpio_f_02_cfg_smt_wd;
  logic pad_gpio_f_02_cfg_smt_we;
  logic [1:0] pad_gpio_f_02_mux_sel_qs;
  logic [1:0] pad_gpio_f_02_mux_sel_wd;
  logic pad_gpio_f_02_mux_sel_we;
  logic pad_gpio_f_03_cfg_chip2pad_qs;
  logic pad_gpio_f_03_cfg_chip2pad_wd;
  logic pad_gpio_f_03_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_03_cfg_drv_qs;
  logic [1:0] pad_gpio_f_03_cfg_drv_wd;
  logic pad_gpio_f_03_cfg_drv_we;
  logic pad_gpio_f_03_cfg_oen_qs;
  logic pad_gpio_f_03_cfg_oen_wd;
  logic pad_gpio_f_03_cfg_oen_we;
  logic pad_gpio_f_03_cfg_puen_qs;
  logic pad_gpio_f_03_cfg_puen_wd;
  logic pad_gpio_f_03_cfg_puen_we;
  logic pad_gpio_f_03_cfg_slw_qs;
  logic pad_gpio_f_03_cfg_slw_wd;
  logic pad_gpio_f_03_cfg_slw_we;
  logic pad_gpio_f_03_cfg_smt_qs;
  logic pad_gpio_f_03_cfg_smt_wd;
  logic pad_gpio_f_03_cfg_smt_we;
  logic [1:0] pad_gpio_f_03_mux_sel_qs;
  logic [1:0] pad_gpio_f_03_mux_sel_wd;
  logic pad_gpio_f_03_mux_sel_we;
  logic pad_gpio_f_04_cfg_chip2pad_qs;
  logic pad_gpio_f_04_cfg_chip2pad_wd;
  logic pad_gpio_f_04_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_04_cfg_drv_qs;
  logic [1:0] pad_gpio_f_04_cfg_drv_wd;
  logic pad_gpio_f_04_cfg_drv_we;
  logic pad_gpio_f_04_cfg_oen_qs;
  logic pad_gpio_f_04_cfg_oen_wd;
  logic pad_gpio_f_04_cfg_oen_we;
  logic pad_gpio_f_04_cfg_puen_qs;
  logic pad_gpio_f_04_cfg_puen_wd;
  logic pad_gpio_f_04_cfg_puen_we;
  logic pad_gpio_f_04_cfg_slw_qs;
  logic pad_gpio_f_04_cfg_slw_wd;
  logic pad_gpio_f_04_cfg_slw_we;
  logic pad_gpio_f_04_cfg_smt_qs;
  logic pad_gpio_f_04_cfg_smt_wd;
  logic pad_gpio_f_04_cfg_smt_we;
  logic [1:0] pad_gpio_f_04_mux_sel_qs;
  logic [1:0] pad_gpio_f_04_mux_sel_wd;
  logic pad_gpio_f_04_mux_sel_we;
  logic pad_gpio_f_05_cfg_chip2pad_qs;
  logic pad_gpio_f_05_cfg_chip2pad_wd;
  logic pad_gpio_f_05_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_05_cfg_drv_qs;
  logic [1:0] pad_gpio_f_05_cfg_drv_wd;
  logic pad_gpio_f_05_cfg_drv_we;
  logic pad_gpio_f_05_cfg_oen_qs;
  logic pad_gpio_f_05_cfg_oen_wd;
  logic pad_gpio_f_05_cfg_oen_we;
  logic pad_gpio_f_05_cfg_puen_qs;
  logic pad_gpio_f_05_cfg_puen_wd;
  logic pad_gpio_f_05_cfg_puen_we;
  logic pad_gpio_f_05_cfg_slw_qs;
  logic pad_gpio_f_05_cfg_slw_wd;
  logic pad_gpio_f_05_cfg_slw_we;
  logic pad_gpio_f_05_cfg_smt_qs;
  logic pad_gpio_f_05_cfg_smt_wd;
  logic pad_gpio_f_05_cfg_smt_we;
  logic [1:0] pad_gpio_f_05_mux_sel_qs;
  logic [1:0] pad_gpio_f_05_mux_sel_wd;
  logic pad_gpio_f_05_mux_sel_we;
  logic pad_gpio_f_06_cfg_chip2pad_qs;
  logic pad_gpio_f_06_cfg_chip2pad_wd;
  logic pad_gpio_f_06_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_06_cfg_drv_qs;
  logic [1:0] pad_gpio_f_06_cfg_drv_wd;
  logic pad_gpio_f_06_cfg_drv_we;
  logic pad_gpio_f_06_cfg_oen_qs;
  logic pad_gpio_f_06_cfg_oen_wd;
  logic pad_gpio_f_06_cfg_oen_we;
  logic pad_gpio_f_06_cfg_puen_qs;
  logic pad_gpio_f_06_cfg_puen_wd;
  logic pad_gpio_f_06_cfg_puen_we;
  logic pad_gpio_f_06_cfg_slw_qs;
  logic pad_gpio_f_06_cfg_slw_wd;
  logic pad_gpio_f_06_cfg_slw_we;
  logic pad_gpio_f_06_cfg_smt_qs;
  logic pad_gpio_f_06_cfg_smt_wd;
  logic pad_gpio_f_06_cfg_smt_we;
  logic [1:0] pad_gpio_f_06_mux_sel_qs;
  logic [1:0] pad_gpio_f_06_mux_sel_wd;
  logic pad_gpio_f_06_mux_sel_we;
  logic pad_gpio_f_07_cfg_chip2pad_qs;
  logic pad_gpio_f_07_cfg_chip2pad_wd;
  logic pad_gpio_f_07_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_07_cfg_drv_qs;
  logic [1:0] pad_gpio_f_07_cfg_drv_wd;
  logic pad_gpio_f_07_cfg_drv_we;
  logic pad_gpio_f_07_cfg_oen_qs;
  logic pad_gpio_f_07_cfg_oen_wd;
  logic pad_gpio_f_07_cfg_oen_we;
  logic pad_gpio_f_07_cfg_puen_qs;
  logic pad_gpio_f_07_cfg_puen_wd;
  logic pad_gpio_f_07_cfg_puen_we;
  logic pad_gpio_f_07_cfg_slw_qs;
  logic pad_gpio_f_07_cfg_slw_wd;
  logic pad_gpio_f_07_cfg_slw_we;
  logic pad_gpio_f_07_cfg_smt_qs;
  logic pad_gpio_f_07_cfg_smt_wd;
  logic pad_gpio_f_07_cfg_smt_we;
  logic [1:0] pad_gpio_f_07_mux_sel_qs;
  logic [1:0] pad_gpio_f_07_mux_sel_wd;
  logic pad_gpio_f_07_mux_sel_we;
  logic pad_gpio_f_08_cfg_chip2pad_qs;
  logic pad_gpio_f_08_cfg_chip2pad_wd;
  logic pad_gpio_f_08_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_08_cfg_drv_qs;
  logic [1:0] pad_gpio_f_08_cfg_drv_wd;
  logic pad_gpio_f_08_cfg_drv_we;
  logic pad_gpio_f_08_cfg_oen_qs;
  logic pad_gpio_f_08_cfg_oen_wd;
  logic pad_gpio_f_08_cfg_oen_we;
  logic pad_gpio_f_08_cfg_puen_qs;
  logic pad_gpio_f_08_cfg_puen_wd;
  logic pad_gpio_f_08_cfg_puen_we;
  logic pad_gpio_f_08_cfg_slw_qs;
  logic pad_gpio_f_08_cfg_slw_wd;
  logic pad_gpio_f_08_cfg_slw_we;
  logic pad_gpio_f_08_cfg_smt_qs;
  logic pad_gpio_f_08_cfg_smt_wd;
  logic pad_gpio_f_08_cfg_smt_we;
  logic [1:0] pad_gpio_f_08_mux_sel_qs;
  logic [1:0] pad_gpio_f_08_mux_sel_wd;
  logic pad_gpio_f_08_mux_sel_we;
  logic pad_gpio_f_09_cfg_chip2pad_qs;
  logic pad_gpio_f_09_cfg_chip2pad_wd;
  logic pad_gpio_f_09_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_09_cfg_drv_qs;
  logic [1:0] pad_gpio_f_09_cfg_drv_wd;
  logic pad_gpio_f_09_cfg_drv_we;
  logic pad_gpio_f_09_cfg_oen_qs;
  logic pad_gpio_f_09_cfg_oen_wd;
  logic pad_gpio_f_09_cfg_oen_we;
  logic pad_gpio_f_09_cfg_puen_qs;
  logic pad_gpio_f_09_cfg_puen_wd;
  logic pad_gpio_f_09_cfg_puen_we;
  logic pad_gpio_f_09_cfg_slw_qs;
  logic pad_gpio_f_09_cfg_slw_wd;
  logic pad_gpio_f_09_cfg_slw_we;
  logic pad_gpio_f_09_cfg_smt_qs;
  logic pad_gpio_f_09_cfg_smt_wd;
  logic pad_gpio_f_09_cfg_smt_we;
  logic pad_gpio_f_09_mux_sel_qs;
  logic pad_gpio_f_09_mux_sel_wd;
  logic pad_gpio_f_09_mux_sel_we;
  logic pad_gpio_f_10_cfg_chip2pad_qs;
  logic pad_gpio_f_10_cfg_chip2pad_wd;
  logic pad_gpio_f_10_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_10_cfg_drv_qs;
  logic [1:0] pad_gpio_f_10_cfg_drv_wd;
  logic pad_gpio_f_10_cfg_drv_we;
  logic pad_gpio_f_10_cfg_oen_qs;
  logic pad_gpio_f_10_cfg_oen_wd;
  logic pad_gpio_f_10_cfg_oen_we;
  logic pad_gpio_f_10_cfg_puen_qs;
  logic pad_gpio_f_10_cfg_puen_wd;
  logic pad_gpio_f_10_cfg_puen_we;
  logic pad_gpio_f_10_cfg_slw_qs;
  logic pad_gpio_f_10_cfg_slw_wd;
  logic pad_gpio_f_10_cfg_slw_we;
  logic pad_gpio_f_10_cfg_smt_qs;
  logic pad_gpio_f_10_cfg_smt_wd;
  logic pad_gpio_f_10_cfg_smt_we;
  logic pad_gpio_f_10_mux_sel_qs;
  logic pad_gpio_f_10_mux_sel_wd;
  logic pad_gpio_f_10_mux_sel_we;
  logic pad_gpio_f_11_cfg_chip2pad_qs;
  logic pad_gpio_f_11_cfg_chip2pad_wd;
  logic pad_gpio_f_11_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_11_cfg_drv_qs;
  logic [1:0] pad_gpio_f_11_cfg_drv_wd;
  logic pad_gpio_f_11_cfg_drv_we;
  logic pad_gpio_f_11_cfg_oen_qs;
  logic pad_gpio_f_11_cfg_oen_wd;
  logic pad_gpio_f_11_cfg_oen_we;
  logic pad_gpio_f_11_cfg_puen_qs;
  logic pad_gpio_f_11_cfg_puen_wd;
  logic pad_gpio_f_11_cfg_puen_we;
  logic pad_gpio_f_11_cfg_slw_qs;
  logic pad_gpio_f_11_cfg_slw_wd;
  logic pad_gpio_f_11_cfg_slw_we;
  logic pad_gpio_f_11_cfg_smt_qs;
  logic pad_gpio_f_11_cfg_smt_wd;
  logic pad_gpio_f_11_cfg_smt_we;
  logic pad_gpio_f_11_mux_sel_qs;
  logic pad_gpio_f_11_mux_sel_wd;
  logic pad_gpio_f_11_mux_sel_we;
  logic pad_gpio_f_12_cfg_chip2pad_qs;
  logic pad_gpio_f_12_cfg_chip2pad_wd;
  logic pad_gpio_f_12_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_12_cfg_drv_qs;
  logic [1:0] pad_gpio_f_12_cfg_drv_wd;
  logic pad_gpio_f_12_cfg_drv_we;
  logic pad_gpio_f_12_cfg_oen_qs;
  logic pad_gpio_f_12_cfg_oen_wd;
  logic pad_gpio_f_12_cfg_oen_we;
  logic pad_gpio_f_12_cfg_puen_qs;
  logic pad_gpio_f_12_cfg_puen_wd;
  logic pad_gpio_f_12_cfg_puen_we;
  logic pad_gpio_f_12_cfg_slw_qs;
  logic pad_gpio_f_12_cfg_slw_wd;
  logic pad_gpio_f_12_cfg_slw_we;
  logic pad_gpio_f_12_cfg_smt_qs;
  logic pad_gpio_f_12_cfg_smt_wd;
  logic pad_gpio_f_12_cfg_smt_we;
  logic pad_gpio_f_12_mux_sel_qs;
  logic pad_gpio_f_12_mux_sel_wd;
  logic pad_gpio_f_12_mux_sel_we;
  logic pad_gpio_f_13_cfg_chip2pad_qs;
  logic pad_gpio_f_13_cfg_chip2pad_wd;
  logic pad_gpio_f_13_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_13_cfg_drv_qs;
  logic [1:0] pad_gpio_f_13_cfg_drv_wd;
  logic pad_gpio_f_13_cfg_drv_we;
  logic pad_gpio_f_13_cfg_oen_qs;
  logic pad_gpio_f_13_cfg_oen_wd;
  logic pad_gpio_f_13_cfg_oen_we;
  logic pad_gpio_f_13_cfg_puen_qs;
  logic pad_gpio_f_13_cfg_puen_wd;
  logic pad_gpio_f_13_cfg_puen_we;
  logic pad_gpio_f_13_cfg_slw_qs;
  logic pad_gpio_f_13_cfg_slw_wd;
  logic pad_gpio_f_13_cfg_slw_we;
  logic pad_gpio_f_13_cfg_smt_qs;
  logic pad_gpio_f_13_cfg_smt_wd;
  logic pad_gpio_f_13_cfg_smt_we;
  logic pad_gpio_f_13_mux_sel_qs;
  logic pad_gpio_f_13_mux_sel_wd;
  logic pad_gpio_f_13_mux_sel_we;
  logic pad_gpio_f_14_cfg_chip2pad_qs;
  logic pad_gpio_f_14_cfg_chip2pad_wd;
  logic pad_gpio_f_14_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_14_cfg_drv_qs;
  logic [1:0] pad_gpio_f_14_cfg_drv_wd;
  logic pad_gpio_f_14_cfg_drv_we;
  logic pad_gpio_f_14_cfg_oen_qs;
  logic pad_gpio_f_14_cfg_oen_wd;
  logic pad_gpio_f_14_cfg_oen_we;
  logic pad_gpio_f_14_cfg_puen_qs;
  logic pad_gpio_f_14_cfg_puen_wd;
  logic pad_gpio_f_14_cfg_puen_we;
  logic pad_gpio_f_14_cfg_slw_qs;
  logic pad_gpio_f_14_cfg_slw_wd;
  logic pad_gpio_f_14_cfg_slw_we;
  logic pad_gpio_f_14_cfg_smt_qs;
  logic pad_gpio_f_14_cfg_smt_wd;
  logic pad_gpio_f_14_cfg_smt_we;
  logic pad_gpio_f_14_mux_sel_qs;
  logic pad_gpio_f_14_mux_sel_wd;
  logic pad_gpio_f_14_mux_sel_we;
  logic pad_gpio_f_15_cfg_chip2pad_qs;
  logic pad_gpio_f_15_cfg_chip2pad_wd;
  logic pad_gpio_f_15_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_15_cfg_drv_qs;
  logic [1:0] pad_gpio_f_15_cfg_drv_wd;
  logic pad_gpio_f_15_cfg_drv_we;
  logic pad_gpio_f_15_cfg_oen_qs;
  logic pad_gpio_f_15_cfg_oen_wd;
  logic pad_gpio_f_15_cfg_oen_we;
  logic pad_gpio_f_15_cfg_puen_qs;
  logic pad_gpio_f_15_cfg_puen_wd;
  logic pad_gpio_f_15_cfg_puen_we;
  logic pad_gpio_f_15_cfg_slw_qs;
  logic pad_gpio_f_15_cfg_slw_wd;
  logic pad_gpio_f_15_cfg_slw_we;
  logic pad_gpio_f_15_cfg_smt_qs;
  logic pad_gpio_f_15_cfg_smt_wd;
  logic pad_gpio_f_15_cfg_smt_we;
  logic pad_gpio_f_15_mux_sel_qs;
  logic pad_gpio_f_15_mux_sel_wd;
  logic pad_gpio_f_15_mux_sel_we;
  logic pad_gpio_f_16_cfg_chip2pad_qs;
  logic pad_gpio_f_16_cfg_chip2pad_wd;
  logic pad_gpio_f_16_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_16_cfg_drv_qs;
  logic [1:0] pad_gpio_f_16_cfg_drv_wd;
  logic pad_gpio_f_16_cfg_drv_we;
  logic pad_gpio_f_16_cfg_oen_qs;
  logic pad_gpio_f_16_cfg_oen_wd;
  logic pad_gpio_f_16_cfg_oen_we;
  logic pad_gpio_f_16_cfg_puen_qs;
  logic pad_gpio_f_16_cfg_puen_wd;
  logic pad_gpio_f_16_cfg_puen_we;
  logic pad_gpio_f_16_cfg_slw_qs;
  logic pad_gpio_f_16_cfg_slw_wd;
  logic pad_gpio_f_16_cfg_slw_we;
  logic pad_gpio_f_16_cfg_smt_qs;
  logic pad_gpio_f_16_cfg_smt_wd;
  logic pad_gpio_f_16_cfg_smt_we;
  logic pad_gpio_f_16_mux_sel_qs;
  logic pad_gpio_f_16_mux_sel_wd;
  logic pad_gpio_f_16_mux_sel_we;
  logic pad_gpio_f_17_cfg_chip2pad_qs;
  logic pad_gpio_f_17_cfg_chip2pad_wd;
  logic pad_gpio_f_17_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_17_cfg_drv_qs;
  logic [1:0] pad_gpio_f_17_cfg_drv_wd;
  logic pad_gpio_f_17_cfg_drv_we;
  logic pad_gpio_f_17_cfg_oen_qs;
  logic pad_gpio_f_17_cfg_oen_wd;
  logic pad_gpio_f_17_cfg_oen_we;
  logic pad_gpio_f_17_cfg_puen_qs;
  logic pad_gpio_f_17_cfg_puen_wd;
  logic pad_gpio_f_17_cfg_puen_we;
  logic pad_gpio_f_17_cfg_slw_qs;
  logic pad_gpio_f_17_cfg_slw_wd;
  logic pad_gpio_f_17_cfg_slw_we;
  logic pad_gpio_f_17_cfg_smt_qs;
  logic pad_gpio_f_17_cfg_smt_wd;
  logic pad_gpio_f_17_cfg_smt_we;
  logic pad_gpio_f_17_mux_sel_qs;
  logic pad_gpio_f_17_mux_sel_wd;
  logic pad_gpio_f_17_mux_sel_we;
  logic pad_gpio_f_18_cfg_chip2pad_qs;
  logic pad_gpio_f_18_cfg_chip2pad_wd;
  logic pad_gpio_f_18_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_18_cfg_drv_qs;
  logic [1:0] pad_gpio_f_18_cfg_drv_wd;
  logic pad_gpio_f_18_cfg_drv_we;
  logic pad_gpio_f_18_cfg_oen_qs;
  logic pad_gpio_f_18_cfg_oen_wd;
  logic pad_gpio_f_18_cfg_oen_we;
  logic pad_gpio_f_18_cfg_puen_qs;
  logic pad_gpio_f_18_cfg_puen_wd;
  logic pad_gpio_f_18_cfg_puen_we;
  logic pad_gpio_f_18_cfg_slw_qs;
  logic pad_gpio_f_18_cfg_slw_wd;
  logic pad_gpio_f_18_cfg_slw_we;
  logic pad_gpio_f_18_cfg_smt_qs;
  logic pad_gpio_f_18_cfg_smt_wd;
  logic pad_gpio_f_18_cfg_smt_we;
  logic pad_gpio_f_18_mux_sel_qs;
  logic pad_gpio_f_18_mux_sel_wd;
  logic pad_gpio_f_18_mux_sel_we;
  logic pad_gpio_f_19_cfg_chip2pad_qs;
  logic pad_gpio_f_19_cfg_chip2pad_wd;
  logic pad_gpio_f_19_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_19_cfg_drv_qs;
  logic [1:0] pad_gpio_f_19_cfg_drv_wd;
  logic pad_gpio_f_19_cfg_drv_we;
  logic pad_gpio_f_19_cfg_oen_qs;
  logic pad_gpio_f_19_cfg_oen_wd;
  logic pad_gpio_f_19_cfg_oen_we;
  logic pad_gpio_f_19_cfg_puen_qs;
  logic pad_gpio_f_19_cfg_puen_wd;
  logic pad_gpio_f_19_cfg_puen_we;
  logic pad_gpio_f_19_cfg_slw_qs;
  logic pad_gpio_f_19_cfg_slw_wd;
  logic pad_gpio_f_19_cfg_slw_we;
  logic pad_gpio_f_19_cfg_smt_qs;
  logic pad_gpio_f_19_cfg_smt_wd;
  logic pad_gpio_f_19_cfg_smt_we;
  logic pad_gpio_f_19_mux_sel_qs;
  logic pad_gpio_f_19_mux_sel_wd;
  logic pad_gpio_f_19_mux_sel_we;
  logic pad_gpio_f_20_cfg_chip2pad_qs;
  logic pad_gpio_f_20_cfg_chip2pad_wd;
  logic pad_gpio_f_20_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_20_cfg_drv_qs;
  logic [1:0] pad_gpio_f_20_cfg_drv_wd;
  logic pad_gpio_f_20_cfg_drv_we;
  logic pad_gpio_f_20_cfg_oen_qs;
  logic pad_gpio_f_20_cfg_oen_wd;
  logic pad_gpio_f_20_cfg_oen_we;
  logic pad_gpio_f_20_cfg_puen_qs;
  logic pad_gpio_f_20_cfg_puen_wd;
  logic pad_gpio_f_20_cfg_puen_we;
  logic pad_gpio_f_20_cfg_slw_qs;
  logic pad_gpio_f_20_cfg_slw_wd;
  logic pad_gpio_f_20_cfg_slw_we;
  logic pad_gpio_f_20_cfg_smt_qs;
  logic pad_gpio_f_20_cfg_smt_wd;
  logic pad_gpio_f_20_cfg_smt_we;
  logic pad_gpio_f_20_mux_sel_qs;
  logic pad_gpio_f_20_mux_sel_wd;
  logic pad_gpio_f_20_mux_sel_we;
  logic pad_gpio_f_21_cfg_chip2pad_qs;
  logic pad_gpio_f_21_cfg_chip2pad_wd;
  logic pad_gpio_f_21_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_21_cfg_drv_qs;
  logic [1:0] pad_gpio_f_21_cfg_drv_wd;
  logic pad_gpio_f_21_cfg_drv_we;
  logic pad_gpio_f_21_cfg_oen_qs;
  logic pad_gpio_f_21_cfg_oen_wd;
  logic pad_gpio_f_21_cfg_oen_we;
  logic pad_gpio_f_21_cfg_puen_qs;
  logic pad_gpio_f_21_cfg_puen_wd;
  logic pad_gpio_f_21_cfg_puen_we;
  logic pad_gpio_f_21_cfg_slw_qs;
  logic pad_gpio_f_21_cfg_slw_wd;
  logic pad_gpio_f_21_cfg_slw_we;
  logic pad_gpio_f_21_cfg_smt_qs;
  logic pad_gpio_f_21_cfg_smt_wd;
  logic pad_gpio_f_21_cfg_smt_we;
  logic pad_gpio_f_21_mux_sel_qs;
  logic pad_gpio_f_21_mux_sel_wd;
  logic pad_gpio_f_21_mux_sel_we;
  logic pad_gpio_f_22_cfg_chip2pad_qs;
  logic pad_gpio_f_22_cfg_chip2pad_wd;
  logic pad_gpio_f_22_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_22_cfg_drv_qs;
  logic [1:0] pad_gpio_f_22_cfg_drv_wd;
  logic pad_gpio_f_22_cfg_drv_we;
  logic pad_gpio_f_22_cfg_oen_qs;
  logic pad_gpio_f_22_cfg_oen_wd;
  logic pad_gpio_f_22_cfg_oen_we;
  logic pad_gpio_f_22_cfg_puen_qs;
  logic pad_gpio_f_22_cfg_puen_wd;
  logic pad_gpio_f_22_cfg_puen_we;
  logic pad_gpio_f_22_cfg_slw_qs;
  logic pad_gpio_f_22_cfg_slw_wd;
  logic pad_gpio_f_22_cfg_slw_we;
  logic pad_gpio_f_22_cfg_smt_qs;
  logic pad_gpio_f_22_cfg_smt_wd;
  logic pad_gpio_f_22_cfg_smt_we;
  logic pad_gpio_f_22_mux_sel_qs;
  logic pad_gpio_f_22_mux_sel_wd;
  logic pad_gpio_f_22_mux_sel_we;
  logic pad_gpio_f_23_cfg_chip2pad_qs;
  logic pad_gpio_f_23_cfg_chip2pad_wd;
  logic pad_gpio_f_23_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_23_cfg_drv_qs;
  logic [1:0] pad_gpio_f_23_cfg_drv_wd;
  logic pad_gpio_f_23_cfg_drv_we;
  logic pad_gpio_f_23_cfg_oen_qs;
  logic pad_gpio_f_23_cfg_oen_wd;
  logic pad_gpio_f_23_cfg_oen_we;
  logic pad_gpio_f_23_cfg_puen_qs;
  logic pad_gpio_f_23_cfg_puen_wd;
  logic pad_gpio_f_23_cfg_puen_we;
  logic pad_gpio_f_23_cfg_slw_qs;
  logic pad_gpio_f_23_cfg_slw_wd;
  logic pad_gpio_f_23_cfg_slw_we;
  logic pad_gpio_f_23_cfg_smt_qs;
  logic pad_gpio_f_23_cfg_smt_wd;
  logic pad_gpio_f_23_cfg_smt_we;
  logic pad_gpio_f_23_mux_sel_qs;
  logic pad_gpio_f_23_mux_sel_wd;
  logic pad_gpio_f_23_mux_sel_we;
  logic pad_gpio_f_24_cfg_chip2pad_qs;
  logic pad_gpio_f_24_cfg_chip2pad_wd;
  logic pad_gpio_f_24_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_24_cfg_drv_qs;
  logic [1:0] pad_gpio_f_24_cfg_drv_wd;
  logic pad_gpio_f_24_cfg_drv_we;
  logic pad_gpio_f_24_cfg_oen_qs;
  logic pad_gpio_f_24_cfg_oen_wd;
  logic pad_gpio_f_24_cfg_oen_we;
  logic pad_gpio_f_24_cfg_puen_qs;
  logic pad_gpio_f_24_cfg_puen_wd;
  logic pad_gpio_f_24_cfg_puen_we;
  logic pad_gpio_f_24_cfg_slw_qs;
  logic pad_gpio_f_24_cfg_slw_wd;
  logic pad_gpio_f_24_cfg_slw_we;
  logic pad_gpio_f_24_cfg_smt_qs;
  logic pad_gpio_f_24_cfg_smt_wd;
  logic pad_gpio_f_24_cfg_smt_we;
  logic pad_gpio_f_24_mux_sel_qs;
  logic pad_gpio_f_24_mux_sel_wd;
  logic pad_gpio_f_24_mux_sel_we;
  logic pad_gpio_f_25_cfg_chip2pad_qs;
  logic pad_gpio_f_25_cfg_chip2pad_wd;
  logic pad_gpio_f_25_cfg_chip2pad_we;
  logic [1:0] pad_gpio_f_25_cfg_drv_qs;
  logic [1:0] pad_gpio_f_25_cfg_drv_wd;
  logic pad_gpio_f_25_cfg_drv_we;
  logic pad_gpio_f_25_cfg_oen_qs;
  logic pad_gpio_f_25_cfg_oen_wd;
  logic pad_gpio_f_25_cfg_oen_we;
  logic pad_gpio_f_25_cfg_puen_qs;
  logic pad_gpio_f_25_cfg_puen_wd;
  logic pad_gpio_f_25_cfg_puen_we;
  logic pad_gpio_f_25_cfg_slw_qs;
  logic pad_gpio_f_25_cfg_slw_wd;
  logic pad_gpio_f_25_cfg_slw_we;
  logic pad_gpio_f_25_cfg_smt_qs;
  logic pad_gpio_f_25_cfg_smt_wd;
  logic pad_gpio_f_25_cfg_smt_we;
  logic pad_gpio_f_25_mux_sel_qs;
  logic pad_gpio_f_25_mux_sel_wd;
  logic pad_gpio_f_25_mux_sel_we;
  logic pad_gpio_pwm0_cfg_chip2pad_qs;
  logic pad_gpio_pwm0_cfg_chip2pad_wd;
  logic pad_gpio_pwm0_cfg_chip2pad_we;
  logic [1:0] pad_gpio_pwm0_cfg_drv_qs;
  logic [1:0] pad_gpio_pwm0_cfg_drv_wd;
  logic pad_gpio_pwm0_cfg_drv_we;
  logic pad_gpio_pwm0_cfg_oen_qs;
  logic pad_gpio_pwm0_cfg_oen_wd;
  logic pad_gpio_pwm0_cfg_oen_we;
  logic pad_gpio_pwm0_cfg_puen_qs;
  logic pad_gpio_pwm0_cfg_puen_wd;
  logic pad_gpio_pwm0_cfg_puen_we;
  logic pad_gpio_pwm0_cfg_slw_qs;
  logic pad_gpio_pwm0_cfg_slw_wd;
  logic pad_gpio_pwm0_cfg_slw_we;
  logic pad_gpio_pwm0_cfg_smt_qs;
  logic pad_gpio_pwm0_cfg_smt_wd;
  logic pad_gpio_pwm0_cfg_smt_we;
  logic [3:0] pad_gpio_pwm0_mux_sel_qs;
  logic [3:0] pad_gpio_pwm0_mux_sel_wd;
  logic pad_gpio_pwm0_mux_sel_we;
  logic pad_gpio_pwm1_cfg_chip2pad_qs;
  logic pad_gpio_pwm1_cfg_chip2pad_wd;
  logic pad_gpio_pwm1_cfg_chip2pad_we;
  logic [1:0] pad_gpio_pwm1_cfg_drv_qs;
  logic [1:0] pad_gpio_pwm1_cfg_drv_wd;
  logic pad_gpio_pwm1_cfg_drv_we;
  logic pad_gpio_pwm1_cfg_oen_qs;
  logic pad_gpio_pwm1_cfg_oen_wd;
  logic pad_gpio_pwm1_cfg_oen_we;
  logic pad_gpio_pwm1_cfg_puen_qs;
  logic pad_gpio_pwm1_cfg_puen_wd;
  logic pad_gpio_pwm1_cfg_puen_we;
  logic pad_gpio_pwm1_cfg_slw_qs;
  logic pad_gpio_pwm1_cfg_slw_wd;
  logic pad_gpio_pwm1_cfg_slw_we;
  logic pad_gpio_pwm1_cfg_smt_qs;
  logic pad_gpio_pwm1_cfg_smt_wd;
  logic pad_gpio_pwm1_cfg_smt_we;
  logic [3:0] pad_gpio_pwm1_mux_sel_qs;
  logic [3:0] pad_gpio_pwm1_mux_sel_wd;
  logic pad_gpio_pwm1_mux_sel_we;
  logic pad_gpio_pwm2_cfg_chip2pad_qs;
  logic pad_gpio_pwm2_cfg_chip2pad_wd;
  logic pad_gpio_pwm2_cfg_chip2pad_we;
  logic [1:0] pad_gpio_pwm2_cfg_drv_qs;
  logic [1:0] pad_gpio_pwm2_cfg_drv_wd;
  logic pad_gpio_pwm2_cfg_drv_we;
  logic pad_gpio_pwm2_cfg_oen_qs;
  logic pad_gpio_pwm2_cfg_oen_wd;
  logic pad_gpio_pwm2_cfg_oen_we;
  logic pad_gpio_pwm2_cfg_puen_qs;
  logic pad_gpio_pwm2_cfg_puen_wd;
  logic pad_gpio_pwm2_cfg_puen_we;
  logic pad_gpio_pwm2_cfg_slw_qs;
  logic pad_gpio_pwm2_cfg_slw_wd;
  logic pad_gpio_pwm2_cfg_slw_we;
  logic pad_gpio_pwm2_cfg_smt_qs;
  logic pad_gpio_pwm2_cfg_smt_wd;
  logic pad_gpio_pwm2_cfg_smt_we;
  logic [3:0] pad_gpio_pwm2_mux_sel_qs;
  logic [3:0] pad_gpio_pwm2_mux_sel_wd;
  logic pad_gpio_pwm2_mux_sel_we;
  logic pad_gpio_pwm3_cfg_chip2pad_qs;
  logic pad_gpio_pwm3_cfg_chip2pad_wd;
  logic pad_gpio_pwm3_cfg_chip2pad_we;
  logic [1:0] pad_gpio_pwm3_cfg_drv_qs;
  logic [1:0] pad_gpio_pwm3_cfg_drv_wd;
  logic pad_gpio_pwm3_cfg_drv_we;
  logic pad_gpio_pwm3_cfg_oen_qs;
  logic pad_gpio_pwm3_cfg_oen_wd;
  logic pad_gpio_pwm3_cfg_oen_we;
  logic pad_gpio_pwm3_cfg_puen_qs;
  logic pad_gpio_pwm3_cfg_puen_wd;
  logic pad_gpio_pwm3_cfg_puen_we;
  logic pad_gpio_pwm3_cfg_slw_qs;
  logic pad_gpio_pwm3_cfg_slw_wd;
  logic pad_gpio_pwm3_cfg_slw_we;
  logic pad_gpio_pwm3_cfg_smt_qs;
  logic pad_gpio_pwm3_cfg_smt_wd;
  logic pad_gpio_pwm3_cfg_smt_we;
  logic [3:0] pad_gpio_pwm3_mux_sel_qs;
  logic [3:0] pad_gpio_pwm3_mux_sel_wd;
  logic pad_gpio_pwm3_mux_sel_we;
  logic pad_gpio_pwm4_cfg_chip2pad_qs;
  logic pad_gpio_pwm4_cfg_chip2pad_wd;
  logic pad_gpio_pwm4_cfg_chip2pad_we;
  logic [1:0] pad_gpio_pwm4_cfg_drv_qs;
  logic [1:0] pad_gpio_pwm4_cfg_drv_wd;
  logic pad_gpio_pwm4_cfg_drv_we;
  logic pad_gpio_pwm4_cfg_oen_qs;
  logic pad_gpio_pwm4_cfg_oen_wd;
  logic pad_gpio_pwm4_cfg_oen_we;
  logic pad_gpio_pwm4_cfg_puen_qs;
  logic pad_gpio_pwm4_cfg_puen_wd;
  logic pad_gpio_pwm4_cfg_puen_we;
  logic pad_gpio_pwm4_cfg_slw_qs;
  logic pad_gpio_pwm4_cfg_slw_wd;
  logic pad_gpio_pwm4_cfg_slw_we;
  logic pad_gpio_pwm4_cfg_smt_qs;
  logic pad_gpio_pwm4_cfg_smt_wd;
  logic pad_gpio_pwm4_cfg_smt_we;
  logic [3:0] pad_gpio_pwm4_mux_sel_qs;
  logic [3:0] pad_gpio_pwm4_mux_sel_wd;
  logic pad_gpio_pwm4_mux_sel_we;
  logic pad_gpio_pwm5_cfg_chip2pad_qs;
  logic pad_gpio_pwm5_cfg_chip2pad_wd;
  logic pad_gpio_pwm5_cfg_chip2pad_we;
  logic [1:0] pad_gpio_pwm5_cfg_drv_qs;
  logic [1:0] pad_gpio_pwm5_cfg_drv_wd;
  logic pad_gpio_pwm5_cfg_drv_we;
  logic pad_gpio_pwm5_cfg_oen_qs;
  logic pad_gpio_pwm5_cfg_oen_wd;
  logic pad_gpio_pwm5_cfg_oen_we;
  logic pad_gpio_pwm5_cfg_puen_qs;
  logic pad_gpio_pwm5_cfg_puen_wd;
  logic pad_gpio_pwm5_cfg_puen_we;
  logic pad_gpio_pwm5_cfg_slw_qs;
  logic pad_gpio_pwm5_cfg_slw_wd;
  logic pad_gpio_pwm5_cfg_slw_we;
  logic pad_gpio_pwm5_cfg_smt_qs;
  logic pad_gpio_pwm5_cfg_smt_wd;
  logic pad_gpio_pwm5_cfg_smt_we;
  logic [3:0] pad_gpio_pwm5_mux_sel_qs;
  logic [3:0] pad_gpio_pwm5_mux_sel_wd;
  logic pad_gpio_pwm5_mux_sel_we;
  logic pad_gpio_pwm6_cfg_chip2pad_qs;
  logic pad_gpio_pwm6_cfg_chip2pad_wd;
  logic pad_gpio_pwm6_cfg_chip2pad_we;
  logic [1:0] pad_gpio_pwm6_cfg_drv_qs;
  logic [1:0] pad_gpio_pwm6_cfg_drv_wd;
  logic pad_gpio_pwm6_cfg_drv_we;
  logic pad_gpio_pwm6_cfg_oen_qs;
  logic pad_gpio_pwm6_cfg_oen_wd;
  logic pad_gpio_pwm6_cfg_oen_we;
  logic pad_gpio_pwm6_cfg_puen_qs;
  logic pad_gpio_pwm6_cfg_puen_wd;
  logic pad_gpio_pwm6_cfg_puen_we;
  logic pad_gpio_pwm6_cfg_slw_qs;
  logic pad_gpio_pwm6_cfg_slw_wd;
  logic pad_gpio_pwm6_cfg_slw_we;
  logic pad_gpio_pwm6_cfg_smt_qs;
  logic pad_gpio_pwm6_cfg_smt_wd;
  logic pad_gpio_pwm6_cfg_smt_we;
  logic [3:0] pad_gpio_pwm6_mux_sel_qs;
  logic [3:0] pad_gpio_pwm6_mux_sel_wd;
  logic pad_gpio_pwm6_mux_sel_we;
  logic pad_gpio_pwm7_cfg_chip2pad_qs;
  logic pad_gpio_pwm7_cfg_chip2pad_wd;
  logic pad_gpio_pwm7_cfg_chip2pad_we;
  logic [1:0] pad_gpio_pwm7_cfg_drv_qs;
  logic [1:0] pad_gpio_pwm7_cfg_drv_wd;
  logic pad_gpio_pwm7_cfg_drv_we;
  logic pad_gpio_pwm7_cfg_oen_qs;
  logic pad_gpio_pwm7_cfg_oen_wd;
  logic pad_gpio_pwm7_cfg_oen_we;
  logic pad_gpio_pwm7_cfg_puen_qs;
  logic pad_gpio_pwm7_cfg_puen_wd;
  logic pad_gpio_pwm7_cfg_puen_we;
  logic pad_gpio_pwm7_cfg_slw_qs;
  logic pad_gpio_pwm7_cfg_slw_wd;
  logic pad_gpio_pwm7_cfg_slw_we;
  logic pad_gpio_pwm7_cfg_smt_qs;
  logic pad_gpio_pwm7_cfg_smt_wd;
  logic pad_gpio_pwm7_cfg_smt_we;
  logic [3:0] pad_gpio_pwm7_mux_sel_qs;
  logic [3:0] pad_gpio_pwm7_mux_sel_wd;
  logic pad_gpio_pwm7_mux_sel_we;

  // Register instances
  // R[pad_gpio_b_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_00_cfg_chip2pad_we),
    .wd     (pad_gpio_b_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_00_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_00_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_00_cfg_drv_we),
    .wd     (pad_gpio_b_00_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_00_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_00_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_00_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_00_cfg_oen_we),
    .wd     (pad_gpio_b_00_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_00_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_00_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_00_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_00_cfg_puen_we),
    .wd     (pad_gpio_b_00_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_00_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_00_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_00_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_00_cfg_slw_we),
    .wd     (pad_gpio_b_00_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_00_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_00_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_00_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_00_cfg_smt_we),
    .wd     (pad_gpio_b_00_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_00_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_00_cfg_smt_qs)
  );


  // R[pad_gpio_b_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_00_mux_sel_we),
    .wd     (pad_gpio_b_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_00_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_00_mux_sel_qs)
  );


  // R[pad_gpio_b_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_01_cfg_chip2pad_we),
    .wd     (pad_gpio_b_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_01_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_01_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_01_cfg_drv_we),
    .wd     (pad_gpio_b_01_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_01_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_01_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_01_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_01_cfg_oen_we),
    .wd     (pad_gpio_b_01_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_01_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_01_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_01_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_01_cfg_puen_we),
    .wd     (pad_gpio_b_01_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_01_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_01_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_01_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_01_cfg_slw_we),
    .wd     (pad_gpio_b_01_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_01_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_01_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_01_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_01_cfg_smt_we),
    .wd     (pad_gpio_b_01_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_01_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_01_cfg_smt_qs)
  );


  // R[pad_gpio_b_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_01_mux_sel_we),
    .wd     (pad_gpio_b_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_01_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_01_mux_sel_qs)
  );


  // R[pad_gpio_b_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_02_cfg_chip2pad_we),
    .wd     (pad_gpio_b_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_02_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_02_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_02_cfg_drv_we),
    .wd     (pad_gpio_b_02_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_02_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_02_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_02_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_02_cfg_oen_we),
    .wd     (pad_gpio_b_02_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_02_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_02_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_02_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_02_cfg_puen_we),
    .wd     (pad_gpio_b_02_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_02_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_02_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_02_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_02_cfg_slw_we),
    .wd     (pad_gpio_b_02_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_02_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_02_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_02_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_02_cfg_smt_we),
    .wd     (pad_gpio_b_02_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_02_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_02_cfg_smt_qs)
  );


  // R[pad_gpio_b_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_02_mux_sel_we),
    .wd     (pad_gpio_b_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_02_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_02_mux_sel_qs)
  );


  // R[pad_gpio_b_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_03_cfg_chip2pad_we),
    .wd     (pad_gpio_b_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_03_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_03_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_03_cfg_drv_we),
    .wd     (pad_gpio_b_03_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_03_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_03_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_03_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_03_cfg_oen_we),
    .wd     (pad_gpio_b_03_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_03_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_03_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_03_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_03_cfg_puen_we),
    .wd     (pad_gpio_b_03_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_03_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_03_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_03_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_03_cfg_slw_we),
    .wd     (pad_gpio_b_03_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_03_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_03_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_03_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_03_cfg_smt_we),
    .wd     (pad_gpio_b_03_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_03_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_03_cfg_smt_qs)
  );


  // R[pad_gpio_b_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_03_mux_sel_we),
    .wd     (pad_gpio_b_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_03_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_03_mux_sel_qs)
  );


  // R[pad_gpio_b_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_04_cfg_chip2pad_we),
    .wd     (pad_gpio_b_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_04_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_04_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_04_cfg_drv_we),
    .wd     (pad_gpio_b_04_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_04_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_04_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_04_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_04_cfg_oen_we),
    .wd     (pad_gpio_b_04_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_04_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_04_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_04_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_04_cfg_puen_we),
    .wd     (pad_gpio_b_04_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_04_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_04_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_04_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_04_cfg_slw_we),
    .wd     (pad_gpio_b_04_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_04_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_04_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_04_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_04_cfg_smt_we),
    .wd     (pad_gpio_b_04_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_04_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_04_cfg_smt_qs)
  );


  // R[pad_gpio_b_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_04_mux_sel_we),
    .wd     (pad_gpio_b_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_04_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_04_mux_sel_qs)
  );


  // R[pad_gpio_b_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_05_cfg_chip2pad_we),
    .wd     (pad_gpio_b_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_05_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_05_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_05_cfg_drv_we),
    .wd     (pad_gpio_b_05_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_05_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_05_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_05_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_05_cfg_oen_we),
    .wd     (pad_gpio_b_05_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_05_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_05_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_05_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_05_cfg_puen_we),
    .wd     (pad_gpio_b_05_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_05_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_05_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_05_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_05_cfg_slw_we),
    .wd     (pad_gpio_b_05_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_05_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_05_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_05_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_05_cfg_smt_we),
    .wd     (pad_gpio_b_05_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_05_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_05_cfg_smt_qs)
  );


  // R[pad_gpio_b_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_05_mux_sel_we),
    .wd     (pad_gpio_b_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_05_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_05_mux_sel_qs)
  );


  // R[pad_gpio_b_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_06_cfg_chip2pad_we),
    .wd     (pad_gpio_b_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_06_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_06_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_06_cfg_drv_we),
    .wd     (pad_gpio_b_06_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_06_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_06_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_06_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_06_cfg_oen_we),
    .wd     (pad_gpio_b_06_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_06_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_06_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_06_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_06_cfg_puen_we),
    .wd     (pad_gpio_b_06_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_06_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_06_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_06_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_06_cfg_slw_we),
    .wd     (pad_gpio_b_06_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_06_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_06_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_06_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_06_cfg_smt_we),
    .wd     (pad_gpio_b_06_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_06_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_06_cfg_smt_qs)
  );


  // R[pad_gpio_b_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_06_mux_sel_we),
    .wd     (pad_gpio_b_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_06_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_06_mux_sel_qs)
  );


  // R[pad_gpio_b_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_07_cfg_chip2pad_we),
    .wd     (pad_gpio_b_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_07_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_07_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_07_cfg_drv_we),
    .wd     (pad_gpio_b_07_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_07_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_07_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_07_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_07_cfg_oen_we),
    .wd     (pad_gpio_b_07_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_07_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_07_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_07_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_07_cfg_puen_we),
    .wd     (pad_gpio_b_07_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_07_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_07_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_07_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_07_cfg_slw_we),
    .wd     (pad_gpio_b_07_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_07_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_07_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_07_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_07_cfg_smt_we),
    .wd     (pad_gpio_b_07_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_07_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_07_cfg_smt_qs)
  );


  // R[pad_gpio_b_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_07_mux_sel_we),
    .wd     (pad_gpio_b_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_07_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_07_mux_sel_qs)
  );


  // R[pad_gpio_b_08_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_08_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_08_cfg_chip2pad_we),
    .wd     (pad_gpio_b_08_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_08_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_08_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_08_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_08_cfg_drv_we),
    .wd     (pad_gpio_b_08_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_08_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_08_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_08_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_08_cfg_oen_we),
    .wd     (pad_gpio_b_08_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_08_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_08_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_08_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_08_cfg_puen_we),
    .wd     (pad_gpio_b_08_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_08_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_08_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_08_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_08_cfg_slw_we),
    .wd     (pad_gpio_b_08_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_08_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_08_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_08_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_08_cfg_smt_we),
    .wd     (pad_gpio_b_08_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_08_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_08_cfg_smt_qs)
  );


  // R[pad_gpio_b_08_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_08_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_08_mux_sel_we),
    .wd     (pad_gpio_b_08_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_08_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_08_mux_sel_qs)
  );


  // R[pad_gpio_b_09_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_09_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_09_cfg_chip2pad_we),
    .wd     (pad_gpio_b_09_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_09_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_09_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_09_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_09_cfg_drv_we),
    .wd     (pad_gpio_b_09_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_09_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_09_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_09_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_09_cfg_oen_we),
    .wd     (pad_gpio_b_09_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_09_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_09_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_09_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_09_cfg_puen_we),
    .wd     (pad_gpio_b_09_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_09_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_09_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_09_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_09_cfg_slw_we),
    .wd     (pad_gpio_b_09_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_09_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_09_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_09_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_09_cfg_smt_we),
    .wd     (pad_gpio_b_09_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_09_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_09_cfg_smt_qs)
  );


  // R[pad_gpio_b_09_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_09_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_09_mux_sel_we),
    .wd     (pad_gpio_b_09_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_09_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_09_mux_sel_qs)
  );


  // R[pad_gpio_b_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_10_cfg_chip2pad_we),
    .wd     (pad_gpio_b_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_10_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_10_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_10_cfg_drv_we),
    .wd     (pad_gpio_b_10_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_10_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_10_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_10_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_10_cfg_oen_we),
    .wd     (pad_gpio_b_10_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_10_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_10_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_10_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_10_cfg_puen_we),
    .wd     (pad_gpio_b_10_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_10_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_10_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_10_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_10_cfg_slw_we),
    .wd     (pad_gpio_b_10_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_10_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_10_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_10_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_10_cfg_smt_we),
    .wd     (pad_gpio_b_10_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_10_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_10_cfg_smt_qs)
  );


  // R[pad_gpio_b_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_10_mux_sel_we),
    .wd     (pad_gpio_b_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_10_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_10_mux_sel_qs)
  );


  // R[pad_gpio_b_11_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_11_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_11_cfg_chip2pad_we),
    .wd     (pad_gpio_b_11_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_11_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_11_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_11_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_11_cfg_drv_we),
    .wd     (pad_gpio_b_11_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_11_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_11_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_11_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_11_cfg_oen_we),
    .wd     (pad_gpio_b_11_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_11_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_11_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_11_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_11_cfg_puen_we),
    .wd     (pad_gpio_b_11_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_11_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_11_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_11_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_11_cfg_slw_we),
    .wd     (pad_gpio_b_11_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_11_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_11_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_11_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_11_cfg_smt_we),
    .wd     (pad_gpio_b_11_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_11_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_11_cfg_smt_qs)
  );


  // R[pad_gpio_b_11_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_11_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_11_mux_sel_we),
    .wd     (pad_gpio_b_11_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_11_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_11_mux_sel_qs)
  );


  // R[pad_gpio_b_12_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_12_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_12_cfg_chip2pad_we),
    .wd     (pad_gpio_b_12_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_12_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_12_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_12_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_12_cfg_drv_we),
    .wd     (pad_gpio_b_12_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_12_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_12_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_12_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_12_cfg_oen_we),
    .wd     (pad_gpio_b_12_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_12_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_12_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_12_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_12_cfg_puen_we),
    .wd     (pad_gpio_b_12_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_12_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_12_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_12_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_12_cfg_slw_we),
    .wd     (pad_gpio_b_12_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_12_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_12_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_12_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_12_cfg_smt_we),
    .wd     (pad_gpio_b_12_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_12_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_12_cfg_smt_qs)
  );


  // R[pad_gpio_b_12_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_12_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_12_mux_sel_we),
    .wd     (pad_gpio_b_12_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_12_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_12_mux_sel_qs)
  );


  // R[pad_gpio_b_13_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_13_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_13_cfg_chip2pad_we),
    .wd     (pad_gpio_b_13_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_13_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_13_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_13_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_13_cfg_drv_we),
    .wd     (pad_gpio_b_13_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_13_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_13_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_13_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_13_cfg_oen_we),
    .wd     (pad_gpio_b_13_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_13_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_13_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_13_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_13_cfg_puen_we),
    .wd     (pad_gpio_b_13_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_13_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_13_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_13_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_13_cfg_slw_we),
    .wd     (pad_gpio_b_13_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_13_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_13_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_13_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_13_cfg_smt_we),
    .wd     (pad_gpio_b_13_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_13_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_13_cfg_smt_qs)
  );


  // R[pad_gpio_b_13_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_13_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_13_mux_sel_we),
    .wd     (pad_gpio_b_13_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_13_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_13_mux_sel_qs)
  );


  // R[pad_gpio_b_14_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_14_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_14_cfg_chip2pad_we),
    .wd     (pad_gpio_b_14_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_14_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_14_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_14_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_14_cfg_drv_we),
    .wd     (pad_gpio_b_14_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_14_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_14_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_14_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_14_cfg_oen_we),
    .wd     (pad_gpio_b_14_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_14_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_14_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_14_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_14_cfg_puen_we),
    .wd     (pad_gpio_b_14_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_14_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_14_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_14_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_14_cfg_slw_we),
    .wd     (pad_gpio_b_14_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_14_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_14_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_14_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_14_cfg_smt_we),
    .wd     (pad_gpio_b_14_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_14_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_14_cfg_smt_qs)
  );


  // R[pad_gpio_b_14_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_14_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_14_mux_sel_we),
    .wd     (pad_gpio_b_14_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_14_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_14_mux_sel_qs)
  );


  // R[pad_gpio_b_15_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_15_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_15_cfg_chip2pad_we),
    .wd     (pad_gpio_b_15_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_15_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_15_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_15_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_15_cfg_drv_we),
    .wd     (pad_gpio_b_15_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_15_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_15_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_15_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_15_cfg_oen_we),
    .wd     (pad_gpio_b_15_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_15_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_15_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_15_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_15_cfg_puen_we),
    .wd     (pad_gpio_b_15_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_15_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_15_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_15_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_15_cfg_slw_we),
    .wd     (pad_gpio_b_15_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_15_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_15_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_15_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_15_cfg_smt_we),
    .wd     (pad_gpio_b_15_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_15_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_15_cfg_smt_qs)
  );


  // R[pad_gpio_b_15_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_15_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_15_mux_sel_we),
    .wd     (pad_gpio_b_15_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_15_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_15_mux_sel_qs)
  );


  // R[pad_gpio_b_16_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_16_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_16_cfg_chip2pad_we),
    .wd     (pad_gpio_b_16_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_16_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_16_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_16_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_16_cfg_drv_we),
    .wd     (pad_gpio_b_16_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_16_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_16_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_16_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_16_cfg_oen_we),
    .wd     (pad_gpio_b_16_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_16_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_16_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_16_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_16_cfg_puen_we),
    .wd     (pad_gpio_b_16_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_16_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_16_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_16_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_16_cfg_slw_we),
    .wd     (pad_gpio_b_16_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_16_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_16_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_16_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_16_cfg_smt_we),
    .wd     (pad_gpio_b_16_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_16_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_16_cfg_smt_qs)
  );


  // R[pad_gpio_b_16_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_16_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_16_mux_sel_we),
    .wd     (pad_gpio_b_16_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_16_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_16_mux_sel_qs)
  );


  // R[pad_gpio_b_17_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_17_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_17_cfg_chip2pad_we),
    .wd     (pad_gpio_b_17_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_17_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_17_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_17_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_17_cfg_drv_we),
    .wd     (pad_gpio_b_17_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_17_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_17_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_17_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_17_cfg_oen_we),
    .wd     (pad_gpio_b_17_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_17_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_17_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_17_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_17_cfg_puen_we),
    .wd     (pad_gpio_b_17_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_17_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_17_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_17_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_17_cfg_slw_we),
    .wd     (pad_gpio_b_17_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_17_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_17_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_17_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_17_cfg_smt_we),
    .wd     (pad_gpio_b_17_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_17_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_17_cfg_smt_qs)
  );


  // R[pad_gpio_b_17_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_17_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_17_mux_sel_we),
    .wd     (pad_gpio_b_17_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_17_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_17_mux_sel_qs)
  );


  // R[pad_gpio_b_18_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_18_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_18_cfg_chip2pad_we),
    .wd     (pad_gpio_b_18_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_18_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_18_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_18_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_18_cfg_drv_we),
    .wd     (pad_gpio_b_18_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_18_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_18_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_18_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_18_cfg_oen_we),
    .wd     (pad_gpio_b_18_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_18_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_18_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_18_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_18_cfg_puen_we),
    .wd     (pad_gpio_b_18_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_18_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_18_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_18_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_18_cfg_slw_we),
    .wd     (pad_gpio_b_18_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_18_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_18_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_18_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_18_cfg_smt_we),
    .wd     (pad_gpio_b_18_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_18_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_18_cfg_smt_qs)
  );


  // R[pad_gpio_b_18_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_18_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_18_mux_sel_we),
    .wd     (pad_gpio_b_18_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_18_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_18_mux_sel_qs)
  );


  // R[pad_gpio_b_19_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_19_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_19_cfg_chip2pad_we),
    .wd     (pad_gpio_b_19_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_19_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_19_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_19_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_19_cfg_drv_we),
    .wd     (pad_gpio_b_19_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_19_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_19_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_19_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_19_cfg_oen_we),
    .wd     (pad_gpio_b_19_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_19_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_19_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_19_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_19_cfg_puen_we),
    .wd     (pad_gpio_b_19_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_19_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_19_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_19_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_19_cfg_slw_we),
    .wd     (pad_gpio_b_19_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_19_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_19_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_19_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_19_cfg_smt_we),
    .wd     (pad_gpio_b_19_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_19_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_19_cfg_smt_qs)
  );


  // R[pad_gpio_b_19_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_19_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_19_mux_sel_we),
    .wd     (pad_gpio_b_19_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_19_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_19_mux_sel_qs)
  );


  // R[pad_gpio_b_20_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_20_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_20_cfg_chip2pad_we),
    .wd     (pad_gpio_b_20_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_20_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_20_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_20_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_20_cfg_drv_we),
    .wd     (pad_gpio_b_20_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_20_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_20_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_20_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_20_cfg_oen_we),
    .wd     (pad_gpio_b_20_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_20_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_20_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_20_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_20_cfg_puen_we),
    .wd     (pad_gpio_b_20_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_20_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_20_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_20_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_20_cfg_slw_we),
    .wd     (pad_gpio_b_20_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_20_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_20_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_20_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_20_cfg_smt_we),
    .wd     (pad_gpio_b_20_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_20_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_20_cfg_smt_qs)
  );


  // R[pad_gpio_b_20_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_20_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_20_mux_sel_we),
    .wd     (pad_gpio_b_20_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_20_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_20_mux_sel_qs)
  );


  // R[pad_gpio_b_21_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_21_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_21_cfg_chip2pad_we),
    .wd     (pad_gpio_b_21_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_21_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_21_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_21_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_21_cfg_drv_we),
    .wd     (pad_gpio_b_21_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_21_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_21_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_21_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_21_cfg_oen_we),
    .wd     (pad_gpio_b_21_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_21_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_21_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_21_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_21_cfg_puen_we),
    .wd     (pad_gpio_b_21_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_21_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_21_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_21_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_21_cfg_slw_we),
    .wd     (pad_gpio_b_21_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_21_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_21_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_21_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_21_cfg_smt_we),
    .wd     (pad_gpio_b_21_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_21_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_21_cfg_smt_qs)
  );


  // R[pad_gpio_b_21_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_21_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_21_mux_sel_we),
    .wd     (pad_gpio_b_21_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_21_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_21_mux_sel_qs)
  );


  // R[pad_gpio_b_22_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_22_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_22_cfg_chip2pad_we),
    .wd     (pad_gpio_b_22_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_22_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_22_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_22_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_22_cfg_drv_we),
    .wd     (pad_gpio_b_22_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_22_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_22_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_22_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_22_cfg_oen_we),
    .wd     (pad_gpio_b_22_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_22_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_22_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_22_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_22_cfg_puen_we),
    .wd     (pad_gpio_b_22_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_22_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_22_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_22_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_22_cfg_slw_we),
    .wd     (pad_gpio_b_22_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_22_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_22_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_22_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_22_cfg_smt_we),
    .wd     (pad_gpio_b_22_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_22_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_22_cfg_smt_qs)
  );


  // R[pad_gpio_b_22_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_22_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_22_mux_sel_we),
    .wd     (pad_gpio_b_22_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_22_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_22_mux_sel_qs)
  );


  // R[pad_gpio_b_23_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_23_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_23_cfg_chip2pad_we),
    .wd     (pad_gpio_b_23_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_23_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_23_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_23_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_23_cfg_drv_we),
    .wd     (pad_gpio_b_23_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_23_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_23_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_23_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_23_cfg_oen_we),
    .wd     (pad_gpio_b_23_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_23_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_23_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_23_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_23_cfg_puen_we),
    .wd     (pad_gpio_b_23_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_23_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_23_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_23_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_23_cfg_slw_we),
    .wd     (pad_gpio_b_23_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_23_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_23_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_23_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_23_cfg_smt_we),
    .wd     (pad_gpio_b_23_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_23_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_23_cfg_smt_qs)
  );


  // R[pad_gpio_b_23_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_23_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_23_mux_sel_we),
    .wd     (pad_gpio_b_23_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_23_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_23_mux_sel_qs)
  );


  // R[pad_gpio_b_24_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_24_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_24_cfg_chip2pad_we),
    .wd     (pad_gpio_b_24_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_24_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_24_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_24_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_24_cfg_drv_we),
    .wd     (pad_gpio_b_24_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_24_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_24_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_24_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_24_cfg_oen_we),
    .wd     (pad_gpio_b_24_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_24_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_24_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_24_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_24_cfg_puen_we),
    .wd     (pad_gpio_b_24_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_24_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_24_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_24_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_24_cfg_slw_we),
    .wd     (pad_gpio_b_24_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_24_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_24_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_24_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_24_cfg_smt_we),
    .wd     (pad_gpio_b_24_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_24_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_24_cfg_smt_qs)
  );


  // R[pad_gpio_b_24_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_24_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_24_mux_sel_we),
    .wd     (pad_gpio_b_24_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_24_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_24_mux_sel_qs)
  );


  // R[pad_gpio_b_25_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_25_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_25_cfg_chip2pad_we),
    .wd     (pad_gpio_b_25_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_25_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_25_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_25_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_25_cfg_drv_we),
    .wd     (pad_gpio_b_25_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_25_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_25_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_25_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_25_cfg_oen_we),
    .wd     (pad_gpio_b_25_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_25_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_25_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_25_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_25_cfg_puen_we),
    .wd     (pad_gpio_b_25_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_25_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_25_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_25_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_25_cfg_slw_we),
    .wd     (pad_gpio_b_25_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_25_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_25_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_25_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_25_cfg_smt_we),
    .wd     (pad_gpio_b_25_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_25_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_25_cfg_smt_qs)
  );


  // R[pad_gpio_b_25_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_25_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_25_mux_sel_we),
    .wd     (pad_gpio_b_25_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_25_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_25_mux_sel_qs)
  );


  // R[pad_gpio_b_26_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_26_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_26_cfg_chip2pad_we),
    .wd     (pad_gpio_b_26_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_26_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_26_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_26_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_26_cfg_drv_we),
    .wd     (pad_gpio_b_26_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_26_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_26_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_26_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_26_cfg_oen_we),
    .wd     (pad_gpio_b_26_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_26_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_26_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_26_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_26_cfg_puen_we),
    .wd     (pad_gpio_b_26_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_26_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_26_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_26_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_26_cfg_slw_we),
    .wd     (pad_gpio_b_26_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_26_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_26_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_26_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_26_cfg_smt_we),
    .wd     (pad_gpio_b_26_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_26_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_26_cfg_smt_qs)
  );


  // R[pad_gpio_b_26_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_26_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_26_mux_sel_we),
    .wd     (pad_gpio_b_26_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_26_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_26_mux_sel_qs)
  );


  // R[pad_gpio_b_27_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_27_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_27_cfg_chip2pad_we),
    .wd     (pad_gpio_b_27_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_27_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_27_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_27_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_27_cfg_drv_we),
    .wd     (pad_gpio_b_27_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_27_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_27_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_27_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_27_cfg_oen_we),
    .wd     (pad_gpio_b_27_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_27_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_27_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_27_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_27_cfg_puen_we),
    .wd     (pad_gpio_b_27_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_27_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_27_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_27_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_27_cfg_slw_we),
    .wd     (pad_gpio_b_27_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_27_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_27_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_27_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_27_cfg_smt_we),
    .wd     (pad_gpio_b_27_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_27_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_27_cfg_smt_qs)
  );


  // R[pad_gpio_b_27_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_27_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_27_mux_sel_we),
    .wd     (pad_gpio_b_27_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_27_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_27_mux_sel_qs)
  );


  // R[pad_gpio_b_28_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_28_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_28_cfg_chip2pad_we),
    .wd     (pad_gpio_b_28_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_28_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_28_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_28_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_28_cfg_drv_we),
    .wd     (pad_gpio_b_28_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_28_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_28_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_28_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_28_cfg_oen_we),
    .wd     (pad_gpio_b_28_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_28_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_28_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_28_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_28_cfg_puen_we),
    .wd     (pad_gpio_b_28_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_28_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_28_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_28_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_28_cfg_slw_we),
    .wd     (pad_gpio_b_28_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_28_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_28_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_28_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_28_cfg_smt_we),
    .wd     (pad_gpio_b_28_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_28_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_28_cfg_smt_qs)
  );


  // R[pad_gpio_b_28_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_28_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_28_mux_sel_we),
    .wd     (pad_gpio_b_28_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_28_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_28_mux_sel_qs)
  );


  // R[pad_gpio_b_29_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_29_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_29_cfg_chip2pad_we),
    .wd     (pad_gpio_b_29_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_29_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_29_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_29_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_29_cfg_drv_we),
    .wd     (pad_gpio_b_29_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_29_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_29_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_29_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_29_cfg_oen_we),
    .wd     (pad_gpio_b_29_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_29_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_29_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_29_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_29_cfg_puen_we),
    .wd     (pad_gpio_b_29_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_29_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_29_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_29_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_29_cfg_slw_we),
    .wd     (pad_gpio_b_29_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_29_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_29_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_29_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_29_cfg_smt_we),
    .wd     (pad_gpio_b_29_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_29_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_29_cfg_smt_qs)
  );


  // R[pad_gpio_b_29_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_29_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_29_mux_sel_we),
    .wd     (pad_gpio_b_29_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_29_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_29_mux_sel_qs)
  );


  // R[pad_gpio_b_30_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_30_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_30_cfg_chip2pad_we),
    .wd     (pad_gpio_b_30_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_30_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_30_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_30_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_30_cfg_drv_we),
    .wd     (pad_gpio_b_30_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_30_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_30_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_30_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_30_cfg_oen_we),
    .wd     (pad_gpio_b_30_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_30_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_30_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_30_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_30_cfg_puen_we),
    .wd     (pad_gpio_b_30_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_30_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_30_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_30_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_30_cfg_slw_we),
    .wd     (pad_gpio_b_30_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_30_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_30_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_30_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_30_cfg_smt_we),
    .wd     (pad_gpio_b_30_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_30_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_30_cfg_smt_qs)
  );


  // R[pad_gpio_b_30_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_30_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_30_mux_sel_we),
    .wd     (pad_gpio_b_30_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_30_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_30_mux_sel_qs)
  );


  // R[pad_gpio_b_31_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_31_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_31_cfg_chip2pad_we),
    .wd     (pad_gpio_b_31_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_31_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_31_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_31_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_31_cfg_drv_we),
    .wd     (pad_gpio_b_31_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_31_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_31_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_31_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_31_cfg_oen_we),
    .wd     (pad_gpio_b_31_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_31_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_31_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_31_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_31_cfg_puen_we),
    .wd     (pad_gpio_b_31_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_31_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_31_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_31_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_31_cfg_slw_we),
    .wd     (pad_gpio_b_31_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_31_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_31_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_31_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_31_cfg_smt_we),
    .wd     (pad_gpio_b_31_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_31_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_31_cfg_smt_qs)
  );


  // R[pad_gpio_b_31_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_31_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_31_mux_sel_we),
    .wd     (pad_gpio_b_31_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_31_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_31_mux_sel_qs)
  );


  // R[pad_gpio_b_32_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_32_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_32_cfg_chip2pad_we),
    .wd     (pad_gpio_b_32_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_32_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_32_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_32_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_32_cfg_drv_we),
    .wd     (pad_gpio_b_32_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_32_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_32_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_32_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_32_cfg_oen_we),
    .wd     (pad_gpio_b_32_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_32_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_32_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_32_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_32_cfg_puen_we),
    .wd     (pad_gpio_b_32_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_32_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_32_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_32_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_32_cfg_slw_we),
    .wd     (pad_gpio_b_32_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_32_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_32_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_32_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_32_cfg_smt_we),
    .wd     (pad_gpio_b_32_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_32_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_32_cfg_smt_qs)
  );


  // R[pad_gpio_b_32_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_32_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_32_mux_sel_we),
    .wd     (pad_gpio_b_32_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_32_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_32_mux_sel_qs)
  );


  // R[pad_gpio_b_33_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_33_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_33_cfg_chip2pad_we),
    .wd     (pad_gpio_b_33_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_33_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_33_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_33_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_33_cfg_drv_we),
    .wd     (pad_gpio_b_33_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_33_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_33_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_33_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_33_cfg_oen_we),
    .wd     (pad_gpio_b_33_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_33_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_33_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_33_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_33_cfg_puen_we),
    .wd     (pad_gpio_b_33_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_33_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_33_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_33_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_33_cfg_slw_we),
    .wd     (pad_gpio_b_33_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_33_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_33_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_33_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_33_cfg_smt_we),
    .wd     (pad_gpio_b_33_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_33_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_33_cfg_smt_qs)
  );


  // R[pad_gpio_b_33_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_33_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_33_mux_sel_we),
    .wd     (pad_gpio_b_33_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_33_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_33_mux_sel_qs)
  );


  // R[pad_gpio_b_34_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_34_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_34_cfg_chip2pad_we),
    .wd     (pad_gpio_b_34_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_34_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_34_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_34_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_34_cfg_drv_we),
    .wd     (pad_gpio_b_34_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_34_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_34_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_34_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_34_cfg_oen_we),
    .wd     (pad_gpio_b_34_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_34_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_34_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_34_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_34_cfg_puen_we),
    .wd     (pad_gpio_b_34_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_34_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_34_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_34_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_34_cfg_slw_we),
    .wd     (pad_gpio_b_34_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_34_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_34_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_34_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_34_cfg_smt_we),
    .wd     (pad_gpio_b_34_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_34_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_34_cfg_smt_qs)
  );


  // R[pad_gpio_b_34_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_34_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_34_mux_sel_we),
    .wd     (pad_gpio_b_34_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_34_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_34_mux_sel_qs)
  );


  // R[pad_gpio_b_35_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_35_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_35_cfg_chip2pad_we),
    .wd     (pad_gpio_b_35_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_35_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_35_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_35_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_35_cfg_drv_we),
    .wd     (pad_gpio_b_35_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_35_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_35_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_35_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_35_cfg_oen_we),
    .wd     (pad_gpio_b_35_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_35_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_35_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_35_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_35_cfg_puen_we),
    .wd     (pad_gpio_b_35_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_35_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_35_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_35_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_35_cfg_slw_we),
    .wd     (pad_gpio_b_35_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_35_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_35_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_35_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_35_cfg_smt_we),
    .wd     (pad_gpio_b_35_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_35_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_35_cfg_smt_qs)
  );


  // R[pad_gpio_b_35_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_35_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_35_mux_sel_we),
    .wd     (pad_gpio_b_35_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_35_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_35_mux_sel_qs)
  );


  // R[pad_gpio_b_36_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_36_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_36_cfg_chip2pad_we),
    .wd     (pad_gpio_b_36_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_36_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_36_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_36_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_36_cfg_drv_we),
    .wd     (pad_gpio_b_36_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_36_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_36_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_36_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_36_cfg_oen_we),
    .wd     (pad_gpio_b_36_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_36_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_36_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_36_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_36_cfg_puen_we),
    .wd     (pad_gpio_b_36_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_36_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_36_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_36_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_36_cfg_slw_we),
    .wd     (pad_gpio_b_36_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_36_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_36_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_36_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_36_cfg_smt_we),
    .wd     (pad_gpio_b_36_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_36_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_36_cfg_smt_qs)
  );


  // R[pad_gpio_b_36_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_36_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_36_mux_sel_we),
    .wd     (pad_gpio_b_36_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_36_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_36_mux_sel_qs)
  );


  // R[pad_gpio_b_37_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_37_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_37_cfg_chip2pad_we),
    .wd     (pad_gpio_b_37_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_37_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_37_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_37_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_37_cfg_drv_we),
    .wd     (pad_gpio_b_37_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_37_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_37_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_37_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_37_cfg_oen_we),
    .wd     (pad_gpio_b_37_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_37_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_37_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_37_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_37_cfg_puen_we),
    .wd     (pad_gpio_b_37_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_37_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_37_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_37_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_37_cfg_slw_we),
    .wd     (pad_gpio_b_37_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_37_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_37_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_37_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_37_cfg_smt_we),
    .wd     (pad_gpio_b_37_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_37_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_37_cfg_smt_qs)
  );


  // R[pad_gpio_b_37_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_37_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_37_mux_sel_we),
    .wd     (pad_gpio_b_37_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_37_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_37_mux_sel_qs)
  );


  // R[pad_gpio_b_38_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_38_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_38_cfg_chip2pad_we),
    .wd     (pad_gpio_b_38_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_38_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_38_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_38_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_38_cfg_drv_we),
    .wd     (pad_gpio_b_38_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_38_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_38_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_38_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_38_cfg_oen_we),
    .wd     (pad_gpio_b_38_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_38_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_38_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_38_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_38_cfg_puen_we),
    .wd     (pad_gpio_b_38_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_38_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_38_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_38_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_38_cfg_slw_we),
    .wd     (pad_gpio_b_38_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_38_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_38_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_38_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_38_cfg_smt_we),
    .wd     (pad_gpio_b_38_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_38_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_38_cfg_smt_qs)
  );


  // R[pad_gpio_b_38_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_38_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_38_mux_sel_we),
    .wd     (pad_gpio_b_38_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_38_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_38_mux_sel_qs)
  );


  // R[pad_gpio_b_39_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_39_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_39_cfg_chip2pad_we),
    .wd     (pad_gpio_b_39_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_39_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_39_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_39_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_39_cfg_drv_we),
    .wd     (pad_gpio_b_39_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_39_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_39_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_39_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_39_cfg_oen_we),
    .wd     (pad_gpio_b_39_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_39_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_39_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_39_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_39_cfg_puen_we),
    .wd     (pad_gpio_b_39_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_39_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_39_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_39_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_39_cfg_slw_we),
    .wd     (pad_gpio_b_39_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_39_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_39_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_39_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_39_cfg_smt_we),
    .wd     (pad_gpio_b_39_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_39_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_39_cfg_smt_qs)
  );


  // R[pad_gpio_b_39_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_39_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_39_mux_sel_we),
    .wd     (pad_gpio_b_39_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_39_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_39_mux_sel_qs)
  );


  // R[pad_gpio_b_40_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_40_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_40_cfg_chip2pad_we),
    .wd     (pad_gpio_b_40_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_40_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_40_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_40_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_40_cfg_drv_we),
    .wd     (pad_gpio_b_40_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_40_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_40_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_40_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_40_cfg_oen_we),
    .wd     (pad_gpio_b_40_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_40_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_40_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_40_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_40_cfg_puen_we),
    .wd     (pad_gpio_b_40_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_40_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_40_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_40_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_40_cfg_slw_we),
    .wd     (pad_gpio_b_40_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_40_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_40_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_40_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_40_cfg_smt_we),
    .wd     (pad_gpio_b_40_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_40_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_40_cfg_smt_qs)
  );


  // R[pad_gpio_b_40_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_40_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_40_mux_sel_we),
    .wd     (pad_gpio_b_40_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_40_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_40_mux_sel_qs)
  );


  // R[pad_gpio_b_41_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_41_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_41_cfg_chip2pad_we),
    .wd     (pad_gpio_b_41_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_41_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_41_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_41_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_41_cfg_drv_we),
    .wd     (pad_gpio_b_41_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_41_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_41_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_41_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_41_cfg_oen_we),
    .wd     (pad_gpio_b_41_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_41_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_41_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_41_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_41_cfg_puen_we),
    .wd     (pad_gpio_b_41_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_41_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_41_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_41_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_41_cfg_slw_we),
    .wd     (pad_gpio_b_41_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_41_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_41_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_41_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_41_cfg_smt_we),
    .wd     (pad_gpio_b_41_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_41_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_41_cfg_smt_qs)
  );


  // R[pad_gpio_b_41_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_41_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_41_mux_sel_we),
    .wd     (pad_gpio_b_41_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_41_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_41_mux_sel_qs)
  );


  // R[pad_gpio_b_42_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_42_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_42_cfg_chip2pad_we),
    .wd     (pad_gpio_b_42_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_42_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_42_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_42_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_42_cfg_drv_we),
    .wd     (pad_gpio_b_42_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_42_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_42_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_42_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_42_cfg_oen_we),
    .wd     (pad_gpio_b_42_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_42_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_42_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_42_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_42_cfg_puen_we),
    .wd     (pad_gpio_b_42_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_42_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_42_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_42_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_42_cfg_slw_we),
    .wd     (pad_gpio_b_42_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_42_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_42_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_42_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_42_cfg_smt_we),
    .wd     (pad_gpio_b_42_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_42_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_42_cfg_smt_qs)
  );


  // R[pad_gpio_b_42_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_42_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_42_mux_sel_we),
    .wd     (pad_gpio_b_42_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_42_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_42_mux_sel_qs)
  );


  // R[pad_gpio_b_43_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_43_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_43_cfg_chip2pad_we),
    .wd     (pad_gpio_b_43_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_43_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_43_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_43_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_43_cfg_drv_we),
    .wd     (pad_gpio_b_43_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_43_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_43_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_43_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_43_cfg_oen_we),
    .wd     (pad_gpio_b_43_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_43_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_43_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_43_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_43_cfg_puen_we),
    .wd     (pad_gpio_b_43_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_43_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_43_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_43_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_43_cfg_slw_we),
    .wd     (pad_gpio_b_43_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_43_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_43_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_43_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_43_cfg_smt_we),
    .wd     (pad_gpio_b_43_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_43_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_43_cfg_smt_qs)
  );


  // R[pad_gpio_b_43_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_43_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_43_mux_sel_we),
    .wd     (pad_gpio_b_43_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_43_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_43_mux_sel_qs)
  );


  // R[pad_gpio_b_44_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_44_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_44_cfg_chip2pad_we),
    .wd     (pad_gpio_b_44_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_44_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_44_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_44_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_44_cfg_drv_we),
    .wd     (pad_gpio_b_44_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_44_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_44_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_44_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_44_cfg_oen_we),
    .wd     (pad_gpio_b_44_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_44_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_44_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_44_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_44_cfg_puen_we),
    .wd     (pad_gpio_b_44_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_44_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_44_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_44_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_44_cfg_slw_we),
    .wd     (pad_gpio_b_44_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_44_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_44_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_44_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_44_cfg_smt_we),
    .wd     (pad_gpio_b_44_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_44_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_44_cfg_smt_qs)
  );


  // R[pad_gpio_b_44_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_44_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_44_mux_sel_we),
    .wd     (pad_gpio_b_44_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_44_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_44_mux_sel_qs)
  );


  // R[pad_gpio_b_45_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_45_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_45_cfg_chip2pad_we),
    .wd     (pad_gpio_b_45_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_45_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_45_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_45_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_45_cfg_drv_we),
    .wd     (pad_gpio_b_45_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_45_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_45_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_45_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_45_cfg_oen_we),
    .wd     (pad_gpio_b_45_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_45_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_45_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_45_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_45_cfg_puen_we),
    .wd     (pad_gpio_b_45_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_45_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_45_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_45_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_45_cfg_slw_we),
    .wd     (pad_gpio_b_45_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_45_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_45_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_45_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_45_cfg_smt_we),
    .wd     (pad_gpio_b_45_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_45_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_45_cfg_smt_qs)
  );


  // R[pad_gpio_b_45_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_45_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_45_mux_sel_we),
    .wd     (pad_gpio_b_45_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_45_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_45_mux_sel_qs)
  );


  // R[pad_gpio_b_46_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_46_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_46_cfg_chip2pad_we),
    .wd     (pad_gpio_b_46_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_46_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_46_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_46_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_46_cfg_drv_we),
    .wd     (pad_gpio_b_46_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_46_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_46_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_46_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_46_cfg_oen_we),
    .wd     (pad_gpio_b_46_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_46_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_46_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_46_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_46_cfg_puen_we),
    .wd     (pad_gpio_b_46_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_46_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_46_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_46_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_46_cfg_slw_we),
    .wd     (pad_gpio_b_46_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_46_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_46_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_46_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_46_cfg_smt_we),
    .wd     (pad_gpio_b_46_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_46_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_46_cfg_smt_qs)
  );


  // R[pad_gpio_b_46_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_46_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_46_mux_sel_we),
    .wd     (pad_gpio_b_46_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_46_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_46_mux_sel_qs)
  );


  // R[pad_gpio_b_47_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_47_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_47_cfg_chip2pad_we),
    .wd     (pad_gpio_b_47_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_47_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_47_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_47_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_47_cfg_drv_we),
    .wd     (pad_gpio_b_47_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_47_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_47_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_47_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_47_cfg_oen_we),
    .wd     (pad_gpio_b_47_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_47_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_47_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_47_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_47_cfg_puen_we),
    .wd     (pad_gpio_b_47_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_47_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_47_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_47_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_47_cfg_slw_we),
    .wd     (pad_gpio_b_47_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_47_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_47_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_47_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_47_cfg_smt_we),
    .wd     (pad_gpio_b_47_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_47_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_47_cfg_smt_qs)
  );


  // R[pad_gpio_b_47_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_47_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_47_mux_sel_we),
    .wd     (pad_gpio_b_47_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_47_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_47_mux_sel_qs)
  );


  // R[pad_gpio_b_48_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_48_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_48_cfg_chip2pad_we),
    .wd     (pad_gpio_b_48_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_48_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_48_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_48_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_48_cfg_drv_we),
    .wd     (pad_gpio_b_48_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_48_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_48_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_48_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_48_cfg_oen_we),
    .wd     (pad_gpio_b_48_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_48_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_48_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_48_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_48_cfg_puen_we),
    .wd     (pad_gpio_b_48_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_48_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_48_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_48_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_48_cfg_slw_we),
    .wd     (pad_gpio_b_48_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_48_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_48_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_48_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_48_cfg_smt_we),
    .wd     (pad_gpio_b_48_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_48_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_48_cfg_smt_qs)
  );


  // R[pad_gpio_b_48_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_48_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_48_mux_sel_we),
    .wd     (pad_gpio_b_48_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_48_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_48_mux_sel_qs)
  );


  // R[pad_gpio_b_49_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_49_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_49_cfg_chip2pad_we),
    .wd     (pad_gpio_b_49_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_49_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_49_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_49_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_49_cfg_drv_we),
    .wd     (pad_gpio_b_49_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_49_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_49_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_49_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_49_cfg_oen_we),
    .wd     (pad_gpio_b_49_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_49_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_49_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_49_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_49_cfg_puen_we),
    .wd     (pad_gpio_b_49_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_49_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_49_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_49_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_49_cfg_slw_we),
    .wd     (pad_gpio_b_49_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_49_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_49_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_49_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_49_cfg_smt_we),
    .wd     (pad_gpio_b_49_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_49_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_49_cfg_smt_qs)
  );


  // R[pad_gpio_b_49_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_49_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_49_mux_sel_we),
    .wd     (pad_gpio_b_49_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_49_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_49_mux_sel_qs)
  );


  // R[pad_gpio_b_50_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_50_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_50_cfg_chip2pad_we),
    .wd     (pad_gpio_b_50_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_50_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_50_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_50_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_50_cfg_drv_we),
    .wd     (pad_gpio_b_50_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_50_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_50_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_50_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_50_cfg_oen_we),
    .wd     (pad_gpio_b_50_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_50_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_50_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_50_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_50_cfg_puen_we),
    .wd     (pad_gpio_b_50_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_50_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_50_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_50_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_50_cfg_slw_we),
    .wd     (pad_gpio_b_50_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_50_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_50_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_50_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_50_cfg_smt_we),
    .wd     (pad_gpio_b_50_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_50_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_50_cfg_smt_qs)
  );


  // R[pad_gpio_b_50_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_50_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_50_mux_sel_we),
    .wd     (pad_gpio_b_50_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_50_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_50_mux_sel_qs)
  );


  // R[pad_gpio_b_51_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_51_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_51_cfg_chip2pad_we),
    .wd     (pad_gpio_b_51_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_51_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_51_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_51_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_51_cfg_drv_we),
    .wd     (pad_gpio_b_51_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_51_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_51_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_51_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_51_cfg_oen_we),
    .wd     (pad_gpio_b_51_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_51_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_51_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_51_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_51_cfg_puen_we),
    .wd     (pad_gpio_b_51_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_51_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_51_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_51_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_51_cfg_slw_we),
    .wd     (pad_gpio_b_51_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_51_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_51_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_51_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_51_cfg_smt_we),
    .wd     (pad_gpio_b_51_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_51_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_51_cfg_smt_qs)
  );


  // R[pad_gpio_b_51_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_51_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_51_mux_sel_we),
    .wd     (pad_gpio_b_51_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_51_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_51_mux_sel_qs)
  );


  // R[pad_gpio_b_52_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_52_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_52_cfg_chip2pad_we),
    .wd     (pad_gpio_b_52_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_52_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_52_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_52_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_52_cfg_drv_we),
    .wd     (pad_gpio_b_52_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_52_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_52_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_52_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_52_cfg_oen_we),
    .wd     (pad_gpio_b_52_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_52_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_52_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_52_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_52_cfg_puen_we),
    .wd     (pad_gpio_b_52_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_52_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_52_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_52_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_52_cfg_slw_we),
    .wd     (pad_gpio_b_52_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_52_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_52_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_52_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_52_cfg_smt_we),
    .wd     (pad_gpio_b_52_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_52_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_52_cfg_smt_qs)
  );


  // R[pad_gpio_b_52_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_52_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_52_mux_sel_we),
    .wd     (pad_gpio_b_52_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_52_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_52_mux_sel_qs)
  );


  // R[pad_gpio_b_53_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_53_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_53_cfg_chip2pad_we),
    .wd     (pad_gpio_b_53_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_53_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_53_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_53_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_53_cfg_drv_we),
    .wd     (pad_gpio_b_53_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_53_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_53_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_53_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_53_cfg_oen_we),
    .wd     (pad_gpio_b_53_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_53_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_53_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_53_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_53_cfg_puen_we),
    .wd     (pad_gpio_b_53_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_53_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_53_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_53_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_53_cfg_slw_we),
    .wd     (pad_gpio_b_53_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_53_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_53_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_53_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_53_cfg_smt_we),
    .wd     (pad_gpio_b_53_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_53_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_53_cfg_smt_qs)
  );


  // R[pad_gpio_b_53_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_53_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_53_mux_sel_we),
    .wd     (pad_gpio_b_53_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_53_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_53_mux_sel_qs)
  );


  // R[pad_gpio_b_54_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_54_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_54_cfg_chip2pad_we),
    .wd     (pad_gpio_b_54_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_54_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_54_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_54_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_54_cfg_drv_we),
    .wd     (pad_gpio_b_54_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_54_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_54_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_54_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_54_cfg_oen_we),
    .wd     (pad_gpio_b_54_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_54_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_54_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_54_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_54_cfg_puen_we),
    .wd     (pad_gpio_b_54_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_54_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_54_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_54_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_54_cfg_slw_we),
    .wd     (pad_gpio_b_54_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_54_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_54_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_54_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_54_cfg_smt_we),
    .wd     (pad_gpio_b_54_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_54_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_54_cfg_smt_qs)
  );


  // R[pad_gpio_b_54_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_54_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_54_mux_sel_we),
    .wd     (pad_gpio_b_54_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_54_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_54_mux_sel_qs)
  );


  // R[pad_gpio_b_55_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_55_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_55_cfg_chip2pad_we),
    .wd     (pad_gpio_b_55_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_55_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_55_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_55_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_55_cfg_drv_we),
    .wd     (pad_gpio_b_55_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_55_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_55_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_55_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_55_cfg_oen_we),
    .wd     (pad_gpio_b_55_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_55_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_55_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_55_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_55_cfg_puen_we),
    .wd     (pad_gpio_b_55_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_55_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_55_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_55_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_55_cfg_slw_we),
    .wd     (pad_gpio_b_55_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_55_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_55_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_55_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_55_cfg_smt_we),
    .wd     (pad_gpio_b_55_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_55_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_55_cfg_smt_qs)
  );


  // R[pad_gpio_b_55_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_55_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_55_mux_sel_we),
    .wd     (pad_gpio_b_55_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_55_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_55_mux_sel_qs)
  );


  // R[pad_gpio_b_56_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_56_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_56_cfg_chip2pad_we),
    .wd     (pad_gpio_b_56_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_56_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_56_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_56_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_56_cfg_drv_we),
    .wd     (pad_gpio_b_56_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_56_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_56_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_56_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_56_cfg_oen_we),
    .wd     (pad_gpio_b_56_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_56_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_56_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_56_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_56_cfg_puen_we),
    .wd     (pad_gpio_b_56_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_56_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_56_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_56_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_56_cfg_slw_we),
    .wd     (pad_gpio_b_56_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_56_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_56_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_56_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_56_cfg_smt_we),
    .wd     (pad_gpio_b_56_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_56_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_56_cfg_smt_qs)
  );


  // R[pad_gpio_b_56_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_56_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_56_mux_sel_we),
    .wd     (pad_gpio_b_56_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_56_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_56_mux_sel_qs)
  );


  // R[pad_gpio_b_57_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_57_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_57_cfg_chip2pad_we),
    .wd     (pad_gpio_b_57_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_57_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_57_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_b_57_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_57_cfg_drv_we),
    .wd     (pad_gpio_b_57_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_57_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_57_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_57_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_57_cfg_oen_we),
    .wd     (pad_gpio_b_57_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_57_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_57_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_b_57_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_57_cfg_puen_we),
    .wd     (pad_gpio_b_57_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_57_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_57_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_57_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_57_cfg_slw_we),
    .wd     (pad_gpio_b_57_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_57_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_57_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_57_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_57_cfg_smt_we),
    .wd     (pad_gpio_b_57_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_57_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_57_cfg_smt_qs)
  );


  // R[pad_gpio_b_57_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_b_57_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_b_57_mux_sel_we),
    .wd     (pad_gpio_b_57_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_b_57_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_b_57_mux_sel_qs)
  );


  // R[pad_gpio_c_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_00_cfg_chip2pad_we),
    .wd     (pad_gpio_c_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_00_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_c_00_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_00_cfg_drv_we),
    .wd     (pad_gpio_c_00_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_00_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_00_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_c_00_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_00_cfg_oen_we),
    .wd     (pad_gpio_c_00_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_00_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_00_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_c_00_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_00_cfg_puen_we),
    .wd     (pad_gpio_c_00_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_00_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_00_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_00_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_00_cfg_slw_we),
    .wd     (pad_gpio_c_00_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_00_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_00_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_00_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_00_cfg_smt_we),
    .wd     (pad_gpio_c_00_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_00_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_00_cfg_smt_qs)
  );


  // R[pad_gpio_c_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_c_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_00_mux_sel_we),
    .wd     (pad_gpio_c_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_00_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_00_mux_sel_qs)
  );


  // R[pad_gpio_c_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_01_cfg_chip2pad_we),
    .wd     (pad_gpio_c_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_01_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_c_01_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_01_cfg_drv_we),
    .wd     (pad_gpio_c_01_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_01_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_01_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_c_01_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_01_cfg_oen_we),
    .wd     (pad_gpio_c_01_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_01_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_01_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_c_01_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_01_cfg_puen_we),
    .wd     (pad_gpio_c_01_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_01_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_01_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_01_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_01_cfg_slw_we),
    .wd     (pad_gpio_c_01_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_01_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_01_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_01_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_01_cfg_smt_we),
    .wd     (pad_gpio_c_01_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_01_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_01_cfg_smt_qs)
  );


  // R[pad_gpio_c_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_c_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_01_mux_sel_we),
    .wd     (pad_gpio_c_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_01_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_01_mux_sel_qs)
  );


  // R[pad_gpio_c_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_02_cfg_chip2pad_we),
    .wd     (pad_gpio_c_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_02_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_c_02_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_02_cfg_drv_we),
    .wd     (pad_gpio_c_02_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_02_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_02_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_c_02_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_02_cfg_oen_we),
    .wd     (pad_gpio_c_02_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_02_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_02_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_c_02_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_02_cfg_puen_we),
    .wd     (pad_gpio_c_02_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_02_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_02_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_02_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_02_cfg_slw_we),
    .wd     (pad_gpio_c_02_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_02_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_02_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_02_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_02_cfg_smt_we),
    .wd     (pad_gpio_c_02_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_02_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_02_cfg_smt_qs)
  );


  // R[pad_gpio_c_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_c_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_02_mux_sel_we),
    .wd     (pad_gpio_c_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_02_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_02_mux_sel_qs)
  );


  // R[pad_gpio_c_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_03_cfg_chip2pad_we),
    .wd     (pad_gpio_c_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_03_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_c_03_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_03_cfg_drv_we),
    .wd     (pad_gpio_c_03_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_03_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_03_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_c_03_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_03_cfg_oen_we),
    .wd     (pad_gpio_c_03_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_03_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_03_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_c_03_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_03_cfg_puen_we),
    .wd     (pad_gpio_c_03_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_03_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_03_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_03_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_03_cfg_slw_we),
    .wd     (pad_gpio_c_03_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_03_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_03_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_c_03_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_03_cfg_smt_we),
    .wd     (pad_gpio_c_03_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_03_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_03_cfg_smt_qs)
  );


  // R[pad_gpio_c_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_c_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_c_03_mux_sel_we),
    .wd     (pad_gpio_c_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_c_03_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_c_03_mux_sel_qs)
  );


  // R[pad_gpio_d_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_00_cfg_chip2pad_we),
    .wd     (pad_gpio_d_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_00_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_00_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_00_cfg_drv_we),
    .wd     (pad_gpio_d_00_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_00_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_00_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_00_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_00_cfg_oen_we),
    .wd     (pad_gpio_d_00_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_00_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_00_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_00_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_00_cfg_puen_we),
    .wd     (pad_gpio_d_00_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_00_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_00_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_00_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_00_cfg_slw_we),
    .wd     (pad_gpio_d_00_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_00_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_00_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_00_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_00_cfg_smt_we),
    .wd     (pad_gpio_d_00_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_00_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_00_cfg_smt_qs)
  );


  // R[pad_gpio_d_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_00_mux_sel_we),
    .wd     (pad_gpio_d_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_00_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_00_mux_sel_qs)
  );


  // R[pad_gpio_d_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_01_cfg_chip2pad_we),
    .wd     (pad_gpio_d_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_01_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_01_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_01_cfg_drv_we),
    .wd     (pad_gpio_d_01_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_01_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_01_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_01_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_01_cfg_oen_we),
    .wd     (pad_gpio_d_01_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_01_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_01_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_01_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_01_cfg_puen_we),
    .wd     (pad_gpio_d_01_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_01_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_01_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_01_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_01_cfg_slw_we),
    .wd     (pad_gpio_d_01_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_01_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_01_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_01_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_01_cfg_smt_we),
    .wd     (pad_gpio_d_01_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_01_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_01_cfg_smt_qs)
  );


  // R[pad_gpio_d_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_01_mux_sel_we),
    .wd     (pad_gpio_d_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_01_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_01_mux_sel_qs)
  );


  // R[pad_gpio_d_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_02_cfg_chip2pad_we),
    .wd     (pad_gpio_d_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_02_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_02_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_02_cfg_drv_we),
    .wd     (pad_gpio_d_02_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_02_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_02_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_02_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_02_cfg_oen_we),
    .wd     (pad_gpio_d_02_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_02_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_02_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_02_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_02_cfg_puen_we),
    .wd     (pad_gpio_d_02_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_02_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_02_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_02_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_02_cfg_slw_we),
    .wd     (pad_gpio_d_02_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_02_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_02_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_02_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_02_cfg_smt_we),
    .wd     (pad_gpio_d_02_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_02_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_02_cfg_smt_qs)
  );


  // R[pad_gpio_d_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_02_mux_sel_we),
    .wd     (pad_gpio_d_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_02_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_02_mux_sel_qs)
  );


  // R[pad_gpio_d_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_03_cfg_chip2pad_we),
    .wd     (pad_gpio_d_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_03_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_03_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_03_cfg_drv_we),
    .wd     (pad_gpio_d_03_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_03_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_03_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_03_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_03_cfg_oen_we),
    .wd     (pad_gpio_d_03_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_03_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_03_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_03_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_03_cfg_puen_we),
    .wd     (pad_gpio_d_03_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_03_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_03_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_03_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_03_cfg_slw_we),
    .wd     (pad_gpio_d_03_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_03_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_03_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_03_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_03_cfg_smt_we),
    .wd     (pad_gpio_d_03_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_03_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_03_cfg_smt_qs)
  );


  // R[pad_gpio_d_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_03_mux_sel_we),
    .wd     (pad_gpio_d_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_03_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_03_mux_sel_qs)
  );


  // R[pad_gpio_d_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_04_cfg_chip2pad_we),
    .wd     (pad_gpio_d_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_04_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_04_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_04_cfg_drv_we),
    .wd     (pad_gpio_d_04_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_04_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_04_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_04_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_04_cfg_oen_we),
    .wd     (pad_gpio_d_04_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_04_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_04_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_04_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_04_cfg_puen_we),
    .wd     (pad_gpio_d_04_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_04_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_04_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_04_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_04_cfg_slw_we),
    .wd     (pad_gpio_d_04_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_04_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_04_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_04_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_04_cfg_smt_we),
    .wd     (pad_gpio_d_04_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_04_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_04_cfg_smt_qs)
  );


  // R[pad_gpio_d_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_04_mux_sel_we),
    .wd     (pad_gpio_d_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_04_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_04_mux_sel_qs)
  );


  // R[pad_gpio_d_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_05_cfg_chip2pad_we),
    .wd     (pad_gpio_d_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_05_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_05_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_05_cfg_drv_we),
    .wd     (pad_gpio_d_05_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_05_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_05_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_05_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_05_cfg_oen_we),
    .wd     (pad_gpio_d_05_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_05_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_05_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_05_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_05_cfg_puen_we),
    .wd     (pad_gpio_d_05_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_05_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_05_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_05_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_05_cfg_slw_we),
    .wd     (pad_gpio_d_05_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_05_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_05_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_05_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_05_cfg_smt_we),
    .wd     (pad_gpio_d_05_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_05_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_05_cfg_smt_qs)
  );


  // R[pad_gpio_d_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_05_mux_sel_we),
    .wd     (pad_gpio_d_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_05_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_05_mux_sel_qs)
  );


  // R[pad_gpio_d_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_06_cfg_chip2pad_we),
    .wd     (pad_gpio_d_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_06_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_06_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_06_cfg_drv_we),
    .wd     (pad_gpio_d_06_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_06_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_06_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_06_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_06_cfg_oen_we),
    .wd     (pad_gpio_d_06_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_06_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_06_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_06_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_06_cfg_puen_we),
    .wd     (pad_gpio_d_06_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_06_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_06_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_06_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_06_cfg_slw_we),
    .wd     (pad_gpio_d_06_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_06_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_06_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_06_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_06_cfg_smt_we),
    .wd     (pad_gpio_d_06_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_06_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_06_cfg_smt_qs)
  );


  // R[pad_gpio_d_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_06_mux_sel_we),
    .wd     (pad_gpio_d_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_06_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_06_mux_sel_qs)
  );


  // R[pad_gpio_d_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_07_cfg_chip2pad_we),
    .wd     (pad_gpio_d_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_07_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_07_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_07_cfg_drv_we),
    .wd     (pad_gpio_d_07_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_07_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_07_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_07_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_07_cfg_oen_we),
    .wd     (pad_gpio_d_07_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_07_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_07_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_07_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_07_cfg_puen_we),
    .wd     (pad_gpio_d_07_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_07_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_07_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_07_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_07_cfg_slw_we),
    .wd     (pad_gpio_d_07_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_07_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_07_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_07_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_07_cfg_smt_we),
    .wd     (pad_gpio_d_07_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_07_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_07_cfg_smt_qs)
  );


  // R[pad_gpio_d_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_07_mux_sel_we),
    .wd     (pad_gpio_d_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_07_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_07_mux_sel_qs)
  );


  // R[pad_gpio_d_08_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_08_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_08_cfg_chip2pad_we),
    .wd     (pad_gpio_d_08_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_08_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_08_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_08_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_08_cfg_drv_we),
    .wd     (pad_gpio_d_08_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_08_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_08_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_08_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_08_cfg_oen_we),
    .wd     (pad_gpio_d_08_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_08_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_08_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_08_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_08_cfg_puen_we),
    .wd     (pad_gpio_d_08_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_08_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_08_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_08_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_08_cfg_slw_we),
    .wd     (pad_gpio_d_08_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_08_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_08_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_08_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_08_cfg_smt_we),
    .wd     (pad_gpio_d_08_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_08_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_08_cfg_smt_qs)
  );


  // R[pad_gpio_d_08_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_08_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_08_mux_sel_we),
    .wd     (pad_gpio_d_08_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_08_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_08_mux_sel_qs)
  );


  // R[pad_gpio_d_09_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_09_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_09_cfg_chip2pad_we),
    .wd     (pad_gpio_d_09_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_09_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_09_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_09_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_09_cfg_drv_we),
    .wd     (pad_gpio_d_09_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_09_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_09_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_09_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_09_cfg_oen_we),
    .wd     (pad_gpio_d_09_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_09_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_09_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_09_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_09_cfg_puen_we),
    .wd     (pad_gpio_d_09_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_09_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_09_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_09_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_09_cfg_slw_we),
    .wd     (pad_gpio_d_09_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_09_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_09_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_09_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_09_cfg_smt_we),
    .wd     (pad_gpio_d_09_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_09_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_09_cfg_smt_qs)
  );


  // R[pad_gpio_d_09_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_09_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_09_mux_sel_we),
    .wd     (pad_gpio_d_09_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_09_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_09_mux_sel_qs)
  );


  // R[pad_gpio_d_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_10_cfg_chip2pad_we),
    .wd     (pad_gpio_d_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_10_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_d_10_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_10_cfg_drv_we),
    .wd     (pad_gpio_d_10_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_10_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_10_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_10_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_10_cfg_oen_we),
    .wd     (pad_gpio_d_10_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_10_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_10_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_d_10_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_10_cfg_puen_we),
    .wd     (pad_gpio_d_10_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_10_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_10_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_10_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_10_cfg_slw_we),
    .wd     (pad_gpio_d_10_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_10_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_10_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_10_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_10_cfg_smt_we),
    .wd     (pad_gpio_d_10_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_10_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_10_cfg_smt_qs)
  );


  // R[pad_gpio_d_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_d_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_d_10_mux_sel_we),
    .wd     (pad_gpio_d_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_d_10_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_d_10_mux_sel_qs)
  );


  // R[pad_gpio_e_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_00_cfg_chip2pad_we),
    .wd     (pad_gpio_e_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_00_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_00_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_00_cfg_drv_we),
    .wd     (pad_gpio_e_00_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_00_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_00_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_00_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_00_cfg_oen_we),
    .wd     (pad_gpio_e_00_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_00_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_00_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_00_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_00_cfg_puen_we),
    .wd     (pad_gpio_e_00_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_00_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_00_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_00_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_00_cfg_slw_we),
    .wd     (pad_gpio_e_00_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_00_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_00_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_00_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_00_cfg_smt_we),
    .wd     (pad_gpio_e_00_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_00_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_00_cfg_smt_qs)
  );


  // R[pad_gpio_e_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_00_mux_sel_we),
    .wd     (pad_gpio_e_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_00_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_00_mux_sel_qs)
  );


  // R[pad_gpio_e_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_01_cfg_chip2pad_we),
    .wd     (pad_gpio_e_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_01_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_01_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_01_cfg_drv_we),
    .wd     (pad_gpio_e_01_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_01_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_01_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_01_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_01_cfg_oen_we),
    .wd     (pad_gpio_e_01_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_01_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_01_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_01_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_01_cfg_puen_we),
    .wd     (pad_gpio_e_01_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_01_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_01_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_01_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_01_cfg_slw_we),
    .wd     (pad_gpio_e_01_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_01_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_01_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_01_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_01_cfg_smt_we),
    .wd     (pad_gpio_e_01_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_01_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_01_cfg_smt_qs)
  );


  // R[pad_gpio_e_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_01_mux_sel_we),
    .wd     (pad_gpio_e_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_01_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_01_mux_sel_qs)
  );


  // R[pad_gpio_e_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_02_cfg_chip2pad_we),
    .wd     (pad_gpio_e_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_02_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_02_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_02_cfg_drv_we),
    .wd     (pad_gpio_e_02_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_02_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_02_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_02_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_02_cfg_oen_we),
    .wd     (pad_gpio_e_02_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_02_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_02_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_02_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_02_cfg_puen_we),
    .wd     (pad_gpio_e_02_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_02_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_02_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_02_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_02_cfg_slw_we),
    .wd     (pad_gpio_e_02_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_02_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_02_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_02_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_02_cfg_smt_we),
    .wd     (pad_gpio_e_02_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_02_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_02_cfg_smt_qs)
  );


  // R[pad_gpio_e_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_02_mux_sel_we),
    .wd     (pad_gpio_e_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_02_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_02_mux_sel_qs)
  );


  // R[pad_gpio_e_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_03_cfg_chip2pad_we),
    .wd     (pad_gpio_e_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_03_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_03_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_03_cfg_drv_we),
    .wd     (pad_gpio_e_03_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_03_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_03_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_03_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_03_cfg_oen_we),
    .wd     (pad_gpio_e_03_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_03_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_03_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_03_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_03_cfg_puen_we),
    .wd     (pad_gpio_e_03_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_03_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_03_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_03_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_03_cfg_slw_we),
    .wd     (pad_gpio_e_03_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_03_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_03_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_03_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_03_cfg_smt_we),
    .wd     (pad_gpio_e_03_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_03_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_03_cfg_smt_qs)
  );


  // R[pad_gpio_e_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_03_mux_sel_we),
    .wd     (pad_gpio_e_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_03_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_03_mux_sel_qs)
  );


  // R[pad_gpio_e_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_04_cfg_chip2pad_we),
    .wd     (pad_gpio_e_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_04_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_04_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_04_cfg_drv_we),
    .wd     (pad_gpio_e_04_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_04_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_04_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_04_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_04_cfg_oen_we),
    .wd     (pad_gpio_e_04_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_04_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_04_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_04_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_04_cfg_puen_we),
    .wd     (pad_gpio_e_04_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_04_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_04_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_04_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_04_cfg_slw_we),
    .wd     (pad_gpio_e_04_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_04_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_04_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_04_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_04_cfg_smt_we),
    .wd     (pad_gpio_e_04_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_04_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_04_cfg_smt_qs)
  );


  // R[pad_gpio_e_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_04_mux_sel_we),
    .wd     (pad_gpio_e_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_04_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_04_mux_sel_qs)
  );


  // R[pad_gpio_e_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_05_cfg_chip2pad_we),
    .wd     (pad_gpio_e_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_05_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_05_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_05_cfg_drv_we),
    .wd     (pad_gpio_e_05_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_05_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_05_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_05_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_05_cfg_oen_we),
    .wd     (pad_gpio_e_05_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_05_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_05_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_05_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_05_cfg_puen_we),
    .wd     (pad_gpio_e_05_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_05_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_05_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_05_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_05_cfg_slw_we),
    .wd     (pad_gpio_e_05_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_05_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_05_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_05_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_05_cfg_smt_we),
    .wd     (pad_gpio_e_05_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_05_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_05_cfg_smt_qs)
  );


  // R[pad_gpio_e_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_05_mux_sel_we),
    .wd     (pad_gpio_e_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_05_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_05_mux_sel_qs)
  );


  // R[pad_gpio_e_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_06_cfg_chip2pad_we),
    .wd     (pad_gpio_e_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_06_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_06_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_06_cfg_drv_we),
    .wd     (pad_gpio_e_06_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_06_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_06_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_06_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_06_cfg_oen_we),
    .wd     (pad_gpio_e_06_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_06_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_06_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_06_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_06_cfg_puen_we),
    .wd     (pad_gpio_e_06_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_06_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_06_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_06_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_06_cfg_slw_we),
    .wd     (pad_gpio_e_06_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_06_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_06_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_06_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_06_cfg_smt_we),
    .wd     (pad_gpio_e_06_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_06_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_06_cfg_smt_qs)
  );


  // R[pad_gpio_e_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_06_mux_sel_we),
    .wd     (pad_gpio_e_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_06_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_06_mux_sel_qs)
  );


  // R[pad_gpio_e_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_07_cfg_chip2pad_we),
    .wd     (pad_gpio_e_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_07_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_07_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_07_cfg_drv_we),
    .wd     (pad_gpio_e_07_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_07_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_07_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_07_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_07_cfg_oen_we),
    .wd     (pad_gpio_e_07_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_07_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_07_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_07_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_07_cfg_puen_we),
    .wd     (pad_gpio_e_07_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_07_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_07_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_07_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_07_cfg_slw_we),
    .wd     (pad_gpio_e_07_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_07_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_07_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_07_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_07_cfg_smt_we),
    .wd     (pad_gpio_e_07_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_07_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_07_cfg_smt_qs)
  );


  // R[pad_gpio_e_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_07_mux_sel_we),
    .wd     (pad_gpio_e_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_07_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_07_mux_sel_qs)
  );


  // R[pad_gpio_e_08_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_08_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_08_cfg_chip2pad_we),
    .wd     (pad_gpio_e_08_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_08_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_08_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_08_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_08_cfg_drv_we),
    .wd     (pad_gpio_e_08_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_08_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_08_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_08_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_08_cfg_oen_we),
    .wd     (pad_gpio_e_08_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_08_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_08_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_08_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_08_cfg_puen_we),
    .wd     (pad_gpio_e_08_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_08_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_08_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_08_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_08_cfg_slw_we),
    .wd     (pad_gpio_e_08_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_08_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_08_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_08_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_08_cfg_smt_we),
    .wd     (pad_gpio_e_08_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_08_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_08_cfg_smt_qs)
  );


  // R[pad_gpio_e_08_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_08_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_08_mux_sel_we),
    .wd     (pad_gpio_e_08_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_08_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_08_mux_sel_qs)
  );


  // R[pad_gpio_e_09_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_09_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_09_cfg_chip2pad_we),
    .wd     (pad_gpio_e_09_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_09_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_09_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_09_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_09_cfg_drv_we),
    .wd     (pad_gpio_e_09_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_09_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_09_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_09_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_09_cfg_oen_we),
    .wd     (pad_gpio_e_09_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_09_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_09_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_09_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_09_cfg_puen_we),
    .wd     (pad_gpio_e_09_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_09_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_09_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_09_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_09_cfg_slw_we),
    .wd     (pad_gpio_e_09_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_09_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_09_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_09_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_09_cfg_smt_we),
    .wd     (pad_gpio_e_09_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_09_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_09_cfg_smt_qs)
  );


  // R[pad_gpio_e_09_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_09_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_09_mux_sel_we),
    .wd     (pad_gpio_e_09_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_09_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_09_mux_sel_qs)
  );


  // R[pad_gpio_e_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_10_cfg_chip2pad_we),
    .wd     (pad_gpio_e_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_10_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_10_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_10_cfg_drv_we),
    .wd     (pad_gpio_e_10_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_10_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_10_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_10_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_10_cfg_oen_we),
    .wd     (pad_gpio_e_10_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_10_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_10_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_10_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_10_cfg_puen_we),
    .wd     (pad_gpio_e_10_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_10_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_10_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_10_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_10_cfg_slw_we),
    .wd     (pad_gpio_e_10_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_10_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_10_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_10_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_10_cfg_smt_we),
    .wd     (pad_gpio_e_10_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_10_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_10_cfg_smt_qs)
  );


  // R[pad_gpio_e_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_10_mux_sel_we),
    .wd     (pad_gpio_e_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_10_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_10_mux_sel_qs)
  );


  // R[pad_gpio_e_11_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_11_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_11_cfg_chip2pad_we),
    .wd     (pad_gpio_e_11_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_11_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_11_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_11_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_11_cfg_drv_we),
    .wd     (pad_gpio_e_11_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_11_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_11_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_11_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_11_cfg_oen_we),
    .wd     (pad_gpio_e_11_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_11_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_11_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_11_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_11_cfg_puen_we),
    .wd     (pad_gpio_e_11_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_11_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_11_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_11_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_11_cfg_slw_we),
    .wd     (pad_gpio_e_11_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_11_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_11_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_11_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_11_cfg_smt_we),
    .wd     (pad_gpio_e_11_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_11_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_11_cfg_smt_qs)
  );


  // R[pad_gpio_e_11_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_11_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_11_mux_sel_we),
    .wd     (pad_gpio_e_11_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_11_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_11_mux_sel_qs)
  );


  // R[pad_gpio_e_12_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_12_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_12_cfg_chip2pad_we),
    .wd     (pad_gpio_e_12_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_12_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_12_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_e_12_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_12_cfg_drv_we),
    .wd     (pad_gpio_e_12_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_12_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_12_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_12_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_12_cfg_oen_we),
    .wd     (pad_gpio_e_12_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_12_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_12_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_e_12_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_12_cfg_puen_we),
    .wd     (pad_gpio_e_12_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_12_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_12_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_12_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_12_cfg_slw_we),
    .wd     (pad_gpio_e_12_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_12_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_12_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_12_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_12_cfg_smt_we),
    .wd     (pad_gpio_e_12_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_12_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_12_cfg_smt_qs)
  );


  // R[pad_gpio_e_12_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_e_12_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_e_12_mux_sel_we),
    .wd     (pad_gpio_e_12_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_e_12_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_e_12_mux_sel_qs)
  );


  // R[pad_gpio_f_00_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_00_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_00_cfg_chip2pad_we),
    .wd     (pad_gpio_f_00_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_00_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_00_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_00_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_00_cfg_drv_we),
    .wd     (pad_gpio_f_00_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_00_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_00_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_00_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_00_cfg_oen_we),
    .wd     (pad_gpio_f_00_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_00_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_00_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_00_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_00_cfg_puen_we),
    .wd     (pad_gpio_f_00_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_00_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_00_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_00_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_00_cfg_slw_we),
    .wd     (pad_gpio_f_00_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_00_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_00_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_00_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_00_cfg_smt_we),
    .wd     (pad_gpio_f_00_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_00_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_00_cfg_smt_qs)
  );


  // R[pad_gpio_f_00_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_00_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_00_mux_sel_we),
    .wd     (pad_gpio_f_00_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_00_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_00_mux_sel_qs)
  );


  // R[pad_gpio_f_01_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_01_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_01_cfg_chip2pad_we),
    .wd     (pad_gpio_f_01_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_01_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_01_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_01_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_01_cfg_drv_we),
    .wd     (pad_gpio_f_01_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_01_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_01_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_01_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_01_cfg_oen_we),
    .wd     (pad_gpio_f_01_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_01_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_01_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_01_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_01_cfg_puen_we),
    .wd     (pad_gpio_f_01_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_01_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_01_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_01_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_01_cfg_slw_we),
    .wd     (pad_gpio_f_01_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_01_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_01_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_01_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_01_cfg_smt_we),
    .wd     (pad_gpio_f_01_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_01_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_01_cfg_smt_qs)
  );


  // R[pad_gpio_f_01_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_01_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_01_mux_sel_we),
    .wd     (pad_gpio_f_01_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_01_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_01_mux_sel_qs)
  );


  // R[pad_gpio_f_02_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_02_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_02_cfg_chip2pad_we),
    .wd     (pad_gpio_f_02_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_02_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_02_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_02_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_02_cfg_drv_we),
    .wd     (pad_gpio_f_02_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_02_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_02_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_02_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_02_cfg_oen_we),
    .wd     (pad_gpio_f_02_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_02_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_02_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_02_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_02_cfg_puen_we),
    .wd     (pad_gpio_f_02_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_02_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_02_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_02_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_02_cfg_slw_we),
    .wd     (pad_gpio_f_02_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_02_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_02_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_02_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_02_cfg_smt_we),
    .wd     (pad_gpio_f_02_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_02_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_02_cfg_smt_qs)
  );


  // R[pad_gpio_f_02_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_02_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_02_mux_sel_we),
    .wd     (pad_gpio_f_02_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_02_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_02_mux_sel_qs)
  );


  // R[pad_gpio_f_03_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_03_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_03_cfg_chip2pad_we),
    .wd     (pad_gpio_f_03_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_03_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_03_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_03_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_03_cfg_drv_we),
    .wd     (pad_gpio_f_03_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_03_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_03_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_03_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_03_cfg_oen_we),
    .wd     (pad_gpio_f_03_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_03_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_03_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_03_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_03_cfg_puen_we),
    .wd     (pad_gpio_f_03_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_03_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_03_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_03_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_03_cfg_slw_we),
    .wd     (pad_gpio_f_03_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_03_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_03_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_03_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_03_cfg_smt_we),
    .wd     (pad_gpio_f_03_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_03_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_03_cfg_smt_qs)
  );


  // R[pad_gpio_f_03_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_03_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_03_mux_sel_we),
    .wd     (pad_gpio_f_03_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_03_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_03_mux_sel_qs)
  );


  // R[pad_gpio_f_04_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_04_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_04_cfg_chip2pad_we),
    .wd     (pad_gpio_f_04_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_04_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_04_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_04_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_04_cfg_drv_we),
    .wd     (pad_gpio_f_04_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_04_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_04_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_04_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_04_cfg_oen_we),
    .wd     (pad_gpio_f_04_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_04_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_04_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_04_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_04_cfg_puen_we),
    .wd     (pad_gpio_f_04_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_04_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_04_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_04_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_04_cfg_slw_we),
    .wd     (pad_gpio_f_04_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_04_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_04_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_04_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_04_cfg_smt_we),
    .wd     (pad_gpio_f_04_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_04_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_04_cfg_smt_qs)
  );


  // R[pad_gpio_f_04_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_04_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_04_mux_sel_we),
    .wd     (pad_gpio_f_04_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_04_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_04_mux_sel_qs)
  );


  // R[pad_gpio_f_05_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_05_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_05_cfg_chip2pad_we),
    .wd     (pad_gpio_f_05_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_05_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_05_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_05_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_05_cfg_drv_we),
    .wd     (pad_gpio_f_05_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_05_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_05_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_05_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_05_cfg_oen_we),
    .wd     (pad_gpio_f_05_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_05_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_05_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_05_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_05_cfg_puen_we),
    .wd     (pad_gpio_f_05_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_05_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_05_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_05_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_05_cfg_slw_we),
    .wd     (pad_gpio_f_05_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_05_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_05_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_05_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_05_cfg_smt_we),
    .wd     (pad_gpio_f_05_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_05_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_05_cfg_smt_qs)
  );


  // R[pad_gpio_f_05_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_05_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_05_mux_sel_we),
    .wd     (pad_gpio_f_05_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_05_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_05_mux_sel_qs)
  );


  // R[pad_gpio_f_06_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_06_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_06_cfg_chip2pad_we),
    .wd     (pad_gpio_f_06_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_06_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_06_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_06_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_06_cfg_drv_we),
    .wd     (pad_gpio_f_06_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_06_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_06_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_06_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_06_cfg_oen_we),
    .wd     (pad_gpio_f_06_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_06_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_06_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_06_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_06_cfg_puen_we),
    .wd     (pad_gpio_f_06_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_06_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_06_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_06_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_06_cfg_slw_we),
    .wd     (pad_gpio_f_06_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_06_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_06_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_06_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_06_cfg_smt_we),
    .wd     (pad_gpio_f_06_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_06_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_06_cfg_smt_qs)
  );


  // R[pad_gpio_f_06_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_06_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_06_mux_sel_we),
    .wd     (pad_gpio_f_06_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_06_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_06_mux_sel_qs)
  );


  // R[pad_gpio_f_07_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_07_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_07_cfg_chip2pad_we),
    .wd     (pad_gpio_f_07_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_07_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_07_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_07_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_07_cfg_drv_we),
    .wd     (pad_gpio_f_07_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_07_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_07_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_07_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_07_cfg_oen_we),
    .wd     (pad_gpio_f_07_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_07_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_07_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_07_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_07_cfg_puen_we),
    .wd     (pad_gpio_f_07_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_07_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_07_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_07_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_07_cfg_slw_we),
    .wd     (pad_gpio_f_07_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_07_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_07_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_07_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_07_cfg_smt_we),
    .wd     (pad_gpio_f_07_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_07_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_07_cfg_smt_qs)
  );


  // R[pad_gpio_f_07_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_07_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_07_mux_sel_we),
    .wd     (pad_gpio_f_07_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_07_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_07_mux_sel_qs)
  );


  // R[pad_gpio_f_08_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_08_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_08_cfg_chip2pad_we),
    .wd     (pad_gpio_f_08_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_08_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_08_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_08_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_08_cfg_drv_we),
    .wd     (pad_gpio_f_08_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_08_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_08_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_08_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_08_cfg_oen_we),
    .wd     (pad_gpio_f_08_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_08_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_08_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_08_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_08_cfg_puen_we),
    .wd     (pad_gpio_f_08_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_08_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_08_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_08_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_08_cfg_slw_we),
    .wd     (pad_gpio_f_08_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_08_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_08_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_08_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_08_cfg_smt_we),
    .wd     (pad_gpio_f_08_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_08_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_08_cfg_smt_qs)
  );


  // R[pad_gpio_f_08_mux_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_08_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_08_mux_sel_we),
    .wd     (pad_gpio_f_08_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_08_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_08_mux_sel_qs)
  );


  // R[pad_gpio_f_09_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_09_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_09_cfg_chip2pad_we),
    .wd     (pad_gpio_f_09_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_09_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_09_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_09_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_09_cfg_drv_we),
    .wd     (pad_gpio_f_09_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_09_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_09_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_09_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_09_cfg_oen_we),
    .wd     (pad_gpio_f_09_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_09_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_09_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_09_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_09_cfg_puen_we),
    .wd     (pad_gpio_f_09_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_09_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_09_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_09_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_09_cfg_slw_we),
    .wd     (pad_gpio_f_09_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_09_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_09_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_09_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_09_cfg_smt_we),
    .wd     (pad_gpio_f_09_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_09_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_09_cfg_smt_qs)
  );


  // R[pad_gpio_f_09_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_09_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_09_mux_sel_we),
    .wd     (pad_gpio_f_09_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_09_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_09_mux_sel_qs)
  );


  // R[pad_gpio_f_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_10_cfg_chip2pad_we),
    .wd     (pad_gpio_f_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_10_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_10_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_10_cfg_drv_we),
    .wd     (pad_gpio_f_10_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_10_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_10_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_10_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_10_cfg_oen_we),
    .wd     (pad_gpio_f_10_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_10_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_10_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_10_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_10_cfg_puen_we),
    .wd     (pad_gpio_f_10_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_10_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_10_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_10_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_10_cfg_slw_we),
    .wd     (pad_gpio_f_10_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_10_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_10_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_10_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_10_cfg_smt_we),
    .wd     (pad_gpio_f_10_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_10_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_10_cfg_smt_qs)
  );


  // R[pad_gpio_f_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_10_mux_sel_we),
    .wd     (pad_gpio_f_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_10_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_10_mux_sel_qs)
  );


  // R[pad_gpio_f_11_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_11_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_11_cfg_chip2pad_we),
    .wd     (pad_gpio_f_11_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_11_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_11_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_11_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_11_cfg_drv_we),
    .wd     (pad_gpio_f_11_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_11_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_11_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_11_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_11_cfg_oen_we),
    .wd     (pad_gpio_f_11_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_11_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_11_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_11_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_11_cfg_puen_we),
    .wd     (pad_gpio_f_11_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_11_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_11_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_11_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_11_cfg_slw_we),
    .wd     (pad_gpio_f_11_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_11_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_11_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_11_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_11_cfg_smt_we),
    .wd     (pad_gpio_f_11_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_11_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_11_cfg_smt_qs)
  );


  // R[pad_gpio_f_11_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_11_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_11_mux_sel_we),
    .wd     (pad_gpio_f_11_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_11_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_11_mux_sel_qs)
  );


  // R[pad_gpio_f_12_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_12_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_12_cfg_chip2pad_we),
    .wd     (pad_gpio_f_12_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_12_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_12_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_12_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_12_cfg_drv_we),
    .wd     (pad_gpio_f_12_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_12_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_12_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_12_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_12_cfg_oen_we),
    .wd     (pad_gpio_f_12_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_12_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_12_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_12_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_12_cfg_puen_we),
    .wd     (pad_gpio_f_12_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_12_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_12_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_12_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_12_cfg_slw_we),
    .wd     (pad_gpio_f_12_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_12_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_12_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_12_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_12_cfg_smt_we),
    .wd     (pad_gpio_f_12_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_12_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_12_cfg_smt_qs)
  );


  // R[pad_gpio_f_12_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_12_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_12_mux_sel_we),
    .wd     (pad_gpio_f_12_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_12_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_12_mux_sel_qs)
  );


  // R[pad_gpio_f_13_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_13_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_13_cfg_chip2pad_we),
    .wd     (pad_gpio_f_13_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_13_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_13_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_13_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_13_cfg_drv_we),
    .wd     (pad_gpio_f_13_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_13_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_13_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_13_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_13_cfg_oen_we),
    .wd     (pad_gpio_f_13_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_13_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_13_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_13_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_13_cfg_puen_we),
    .wd     (pad_gpio_f_13_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_13_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_13_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_13_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_13_cfg_slw_we),
    .wd     (pad_gpio_f_13_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_13_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_13_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_13_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_13_cfg_smt_we),
    .wd     (pad_gpio_f_13_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_13_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_13_cfg_smt_qs)
  );


  // R[pad_gpio_f_13_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_13_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_13_mux_sel_we),
    .wd     (pad_gpio_f_13_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_13_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_13_mux_sel_qs)
  );


  // R[pad_gpio_f_14_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_14_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_14_cfg_chip2pad_we),
    .wd     (pad_gpio_f_14_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_14_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_14_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_14_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_14_cfg_drv_we),
    .wd     (pad_gpio_f_14_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_14_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_14_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_14_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_14_cfg_oen_we),
    .wd     (pad_gpio_f_14_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_14_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_14_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_14_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_14_cfg_puen_we),
    .wd     (pad_gpio_f_14_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_14_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_14_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_14_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_14_cfg_slw_we),
    .wd     (pad_gpio_f_14_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_14_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_14_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_14_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_14_cfg_smt_we),
    .wd     (pad_gpio_f_14_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_14_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_14_cfg_smt_qs)
  );


  // R[pad_gpio_f_14_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_14_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_14_mux_sel_we),
    .wd     (pad_gpio_f_14_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_14_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_14_mux_sel_qs)
  );


  // R[pad_gpio_f_15_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_15_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_15_cfg_chip2pad_we),
    .wd     (pad_gpio_f_15_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_15_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_15_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_15_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_15_cfg_drv_we),
    .wd     (pad_gpio_f_15_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_15_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_15_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_15_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_15_cfg_oen_we),
    .wd     (pad_gpio_f_15_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_15_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_15_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_15_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_15_cfg_puen_we),
    .wd     (pad_gpio_f_15_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_15_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_15_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_15_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_15_cfg_slw_we),
    .wd     (pad_gpio_f_15_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_15_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_15_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_15_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_15_cfg_smt_we),
    .wd     (pad_gpio_f_15_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_15_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_15_cfg_smt_qs)
  );


  // R[pad_gpio_f_15_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_15_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_15_mux_sel_we),
    .wd     (pad_gpio_f_15_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_15_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_15_mux_sel_qs)
  );


  // R[pad_gpio_f_16_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_16_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_16_cfg_chip2pad_we),
    .wd     (pad_gpio_f_16_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_16_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_16_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_16_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_16_cfg_drv_we),
    .wd     (pad_gpio_f_16_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_16_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_16_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_16_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_16_cfg_oen_we),
    .wd     (pad_gpio_f_16_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_16_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_16_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_16_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_16_cfg_puen_we),
    .wd     (pad_gpio_f_16_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_16_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_16_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_16_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_16_cfg_slw_we),
    .wd     (pad_gpio_f_16_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_16_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_16_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_16_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_16_cfg_smt_we),
    .wd     (pad_gpio_f_16_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_16_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_16_cfg_smt_qs)
  );


  // R[pad_gpio_f_16_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_16_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_16_mux_sel_we),
    .wd     (pad_gpio_f_16_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_16_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_16_mux_sel_qs)
  );


  // R[pad_gpio_f_17_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_17_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_17_cfg_chip2pad_we),
    .wd     (pad_gpio_f_17_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_17_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_17_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_17_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_17_cfg_drv_we),
    .wd     (pad_gpio_f_17_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_17_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_17_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_17_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_17_cfg_oen_we),
    .wd     (pad_gpio_f_17_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_17_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_17_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_17_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_17_cfg_puen_we),
    .wd     (pad_gpio_f_17_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_17_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_17_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_17_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_17_cfg_slw_we),
    .wd     (pad_gpio_f_17_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_17_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_17_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_17_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_17_cfg_smt_we),
    .wd     (pad_gpio_f_17_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_17_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_17_cfg_smt_qs)
  );


  // R[pad_gpio_f_17_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_17_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_17_mux_sel_we),
    .wd     (pad_gpio_f_17_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_17_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_17_mux_sel_qs)
  );


  // R[pad_gpio_f_18_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_18_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_18_cfg_chip2pad_we),
    .wd     (pad_gpio_f_18_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_18_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_18_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_18_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_18_cfg_drv_we),
    .wd     (pad_gpio_f_18_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_18_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_18_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_18_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_18_cfg_oen_we),
    .wd     (pad_gpio_f_18_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_18_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_18_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_18_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_18_cfg_puen_we),
    .wd     (pad_gpio_f_18_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_18_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_18_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_18_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_18_cfg_slw_we),
    .wd     (pad_gpio_f_18_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_18_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_18_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_18_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_18_cfg_smt_we),
    .wd     (pad_gpio_f_18_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_18_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_18_cfg_smt_qs)
  );


  // R[pad_gpio_f_18_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_18_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_18_mux_sel_we),
    .wd     (pad_gpio_f_18_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_18_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_18_mux_sel_qs)
  );


  // R[pad_gpio_f_19_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_19_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_19_cfg_chip2pad_we),
    .wd     (pad_gpio_f_19_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_19_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_19_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_19_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_19_cfg_drv_we),
    .wd     (pad_gpio_f_19_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_19_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_19_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_19_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_19_cfg_oen_we),
    .wd     (pad_gpio_f_19_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_19_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_19_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_19_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_19_cfg_puen_we),
    .wd     (pad_gpio_f_19_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_19_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_19_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_19_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_19_cfg_slw_we),
    .wd     (pad_gpio_f_19_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_19_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_19_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_19_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_19_cfg_smt_we),
    .wd     (pad_gpio_f_19_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_19_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_19_cfg_smt_qs)
  );


  // R[pad_gpio_f_19_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_19_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_19_mux_sel_we),
    .wd     (pad_gpio_f_19_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_19_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_19_mux_sel_qs)
  );


  // R[pad_gpio_f_20_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_20_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_20_cfg_chip2pad_we),
    .wd     (pad_gpio_f_20_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_20_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_20_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_20_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_20_cfg_drv_we),
    .wd     (pad_gpio_f_20_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_20_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_20_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_20_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_20_cfg_oen_we),
    .wd     (pad_gpio_f_20_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_20_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_20_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_20_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_20_cfg_puen_we),
    .wd     (pad_gpio_f_20_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_20_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_20_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_20_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_20_cfg_slw_we),
    .wd     (pad_gpio_f_20_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_20_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_20_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_20_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_20_cfg_smt_we),
    .wd     (pad_gpio_f_20_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_20_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_20_cfg_smt_qs)
  );


  // R[pad_gpio_f_20_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_20_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_20_mux_sel_we),
    .wd     (pad_gpio_f_20_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_20_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_20_mux_sel_qs)
  );


  // R[pad_gpio_f_21_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_21_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_21_cfg_chip2pad_we),
    .wd     (pad_gpio_f_21_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_21_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_21_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_21_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_21_cfg_drv_we),
    .wd     (pad_gpio_f_21_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_21_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_21_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_21_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_21_cfg_oen_we),
    .wd     (pad_gpio_f_21_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_21_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_21_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_21_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_21_cfg_puen_we),
    .wd     (pad_gpio_f_21_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_21_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_21_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_21_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_21_cfg_slw_we),
    .wd     (pad_gpio_f_21_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_21_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_21_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_21_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_21_cfg_smt_we),
    .wd     (pad_gpio_f_21_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_21_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_21_cfg_smt_qs)
  );


  // R[pad_gpio_f_21_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_21_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_21_mux_sel_we),
    .wd     (pad_gpio_f_21_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_21_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_21_mux_sel_qs)
  );


  // R[pad_gpio_f_22_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_22_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_22_cfg_chip2pad_we),
    .wd     (pad_gpio_f_22_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_22_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_22_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_22_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_22_cfg_drv_we),
    .wd     (pad_gpio_f_22_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_22_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_22_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_22_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_22_cfg_oen_we),
    .wd     (pad_gpio_f_22_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_22_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_22_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_22_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_22_cfg_puen_we),
    .wd     (pad_gpio_f_22_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_22_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_22_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_22_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_22_cfg_slw_we),
    .wd     (pad_gpio_f_22_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_22_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_22_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_22_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_22_cfg_smt_we),
    .wd     (pad_gpio_f_22_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_22_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_22_cfg_smt_qs)
  );


  // R[pad_gpio_f_22_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_22_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_22_mux_sel_we),
    .wd     (pad_gpio_f_22_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_22_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_22_mux_sel_qs)
  );


  // R[pad_gpio_f_23_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_23_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_23_cfg_chip2pad_we),
    .wd     (pad_gpio_f_23_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_23_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_23_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_23_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_23_cfg_drv_we),
    .wd     (pad_gpio_f_23_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_23_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_23_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_23_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_23_cfg_oen_we),
    .wd     (pad_gpio_f_23_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_23_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_23_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_23_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_23_cfg_puen_we),
    .wd     (pad_gpio_f_23_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_23_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_23_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_23_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_23_cfg_slw_we),
    .wd     (pad_gpio_f_23_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_23_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_23_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_23_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_23_cfg_smt_we),
    .wd     (pad_gpio_f_23_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_23_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_23_cfg_smt_qs)
  );


  // R[pad_gpio_f_23_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_23_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_23_mux_sel_we),
    .wd     (pad_gpio_f_23_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_23_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_23_mux_sel_qs)
  );


  // R[pad_gpio_f_24_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_24_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_24_cfg_chip2pad_we),
    .wd     (pad_gpio_f_24_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_24_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_24_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_24_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_24_cfg_drv_we),
    .wd     (pad_gpio_f_24_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_24_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_24_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_24_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_24_cfg_oen_we),
    .wd     (pad_gpio_f_24_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_24_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_24_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_24_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_24_cfg_puen_we),
    .wd     (pad_gpio_f_24_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_24_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_24_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_24_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_24_cfg_slw_we),
    .wd     (pad_gpio_f_24_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_24_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_24_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_24_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_24_cfg_smt_we),
    .wd     (pad_gpio_f_24_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_24_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_24_cfg_smt_qs)
  );


  // R[pad_gpio_f_24_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_24_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_24_mux_sel_we),
    .wd     (pad_gpio_f_24_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_24_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_24_mux_sel_qs)
  );


  // R[pad_gpio_f_25_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_25_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_25_cfg_chip2pad_we),
    .wd     (pad_gpio_f_25_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_25_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_25_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_f_25_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_25_cfg_drv_we),
    .wd     (pad_gpio_f_25_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_25_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_25_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_25_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_25_cfg_oen_we),
    .wd     (pad_gpio_f_25_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_25_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_25_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_f_25_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_25_cfg_puen_we),
    .wd     (pad_gpio_f_25_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_25_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_25_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_25_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_25_cfg_slw_we),
    .wd     (pad_gpio_f_25_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_25_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_25_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_25_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_25_cfg_smt_we),
    .wd     (pad_gpio_f_25_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_25_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_25_cfg_smt_qs)
  );


  // R[pad_gpio_f_25_mux_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_f_25_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_f_25_mux_sel_we),
    .wd     (pad_gpio_f_25_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_f_25_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_f_25_mux_sel_qs)
  );


  // R[pad_gpio_pwm0_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm0_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm0_cfg_chip2pad_we),
    .wd     (pad_gpio_pwm0_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm0_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm0_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_pwm0_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm0_cfg_drv_we),
    .wd     (pad_gpio_pwm0_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm0_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm0_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm0_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm0_cfg_oen_we),
    .wd     (pad_gpio_pwm0_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm0_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm0_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm0_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm0_cfg_puen_we),
    .wd     (pad_gpio_pwm0_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm0_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm0_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm0_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm0_cfg_slw_we),
    .wd     (pad_gpio_pwm0_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm0_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm0_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm0_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm0_cfg_smt_we),
    .wd     (pad_gpio_pwm0_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm0_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm0_cfg_smt_qs)
  );


  // R[pad_gpio_pwm0_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_gpio_pwm0_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm0_mux_sel_we),
    .wd     (pad_gpio_pwm0_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm0_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm0_mux_sel_qs)
  );


  // R[pad_gpio_pwm1_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm1_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm1_cfg_chip2pad_we),
    .wd     (pad_gpio_pwm1_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm1_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm1_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_pwm1_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm1_cfg_drv_we),
    .wd     (pad_gpio_pwm1_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm1_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm1_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm1_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm1_cfg_oen_we),
    .wd     (pad_gpio_pwm1_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm1_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm1_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm1_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm1_cfg_puen_we),
    .wd     (pad_gpio_pwm1_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm1_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm1_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm1_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm1_cfg_slw_we),
    .wd     (pad_gpio_pwm1_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm1_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm1_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm1_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm1_cfg_smt_we),
    .wd     (pad_gpio_pwm1_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm1_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm1_cfg_smt_qs)
  );


  // R[pad_gpio_pwm1_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_gpio_pwm1_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm1_mux_sel_we),
    .wd     (pad_gpio_pwm1_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm1_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm1_mux_sel_qs)
  );


  // R[pad_gpio_pwm2_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm2_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm2_cfg_chip2pad_we),
    .wd     (pad_gpio_pwm2_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm2_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm2_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_pwm2_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm2_cfg_drv_we),
    .wd     (pad_gpio_pwm2_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm2_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm2_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm2_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm2_cfg_oen_we),
    .wd     (pad_gpio_pwm2_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm2_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm2_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm2_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm2_cfg_puen_we),
    .wd     (pad_gpio_pwm2_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm2_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm2_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm2_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm2_cfg_slw_we),
    .wd     (pad_gpio_pwm2_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm2_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm2_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm2_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm2_cfg_smt_we),
    .wd     (pad_gpio_pwm2_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm2_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm2_cfg_smt_qs)
  );


  // R[pad_gpio_pwm2_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_gpio_pwm2_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm2_mux_sel_we),
    .wd     (pad_gpio_pwm2_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm2_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm2_mux_sel_qs)
  );


  // R[pad_gpio_pwm3_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm3_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm3_cfg_chip2pad_we),
    .wd     (pad_gpio_pwm3_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm3_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm3_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_pwm3_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm3_cfg_drv_we),
    .wd     (pad_gpio_pwm3_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm3_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm3_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm3_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm3_cfg_oen_we),
    .wd     (pad_gpio_pwm3_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm3_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm3_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm3_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm3_cfg_puen_we),
    .wd     (pad_gpio_pwm3_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm3_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm3_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm3_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm3_cfg_slw_we),
    .wd     (pad_gpio_pwm3_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm3_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm3_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm3_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm3_cfg_smt_we),
    .wd     (pad_gpio_pwm3_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm3_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm3_cfg_smt_qs)
  );


  // R[pad_gpio_pwm3_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_gpio_pwm3_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm3_mux_sel_we),
    .wd     (pad_gpio_pwm3_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm3_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm3_mux_sel_qs)
  );


  // R[pad_gpio_pwm4_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm4_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm4_cfg_chip2pad_we),
    .wd     (pad_gpio_pwm4_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm4_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm4_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_pwm4_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm4_cfg_drv_we),
    .wd     (pad_gpio_pwm4_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm4_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm4_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm4_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm4_cfg_oen_we),
    .wd     (pad_gpio_pwm4_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm4_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm4_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm4_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm4_cfg_puen_we),
    .wd     (pad_gpio_pwm4_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm4_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm4_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm4_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm4_cfg_slw_we),
    .wd     (pad_gpio_pwm4_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm4_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm4_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm4_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm4_cfg_smt_we),
    .wd     (pad_gpio_pwm4_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm4_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm4_cfg_smt_qs)
  );


  // R[pad_gpio_pwm4_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_gpio_pwm4_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm4_mux_sel_we),
    .wd     (pad_gpio_pwm4_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm4_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm4_mux_sel_qs)
  );


  // R[pad_gpio_pwm5_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm5_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm5_cfg_chip2pad_we),
    .wd     (pad_gpio_pwm5_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm5_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm5_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_pwm5_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm5_cfg_drv_we),
    .wd     (pad_gpio_pwm5_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm5_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm5_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm5_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm5_cfg_oen_we),
    .wd     (pad_gpio_pwm5_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm5_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm5_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm5_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm5_cfg_puen_we),
    .wd     (pad_gpio_pwm5_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm5_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm5_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm5_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm5_cfg_slw_we),
    .wd     (pad_gpio_pwm5_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm5_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm5_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm5_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm5_cfg_smt_we),
    .wd     (pad_gpio_pwm5_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm5_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm5_cfg_smt_qs)
  );


  // R[pad_gpio_pwm5_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_gpio_pwm5_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm5_mux_sel_we),
    .wd     (pad_gpio_pwm5_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm5_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm5_mux_sel_qs)
  );


  // R[pad_gpio_pwm6_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm6_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm6_cfg_chip2pad_we),
    .wd     (pad_gpio_pwm6_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm6_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm6_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_pwm6_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm6_cfg_drv_we),
    .wd     (pad_gpio_pwm6_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm6_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm6_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm6_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm6_cfg_oen_we),
    .wd     (pad_gpio_pwm6_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm6_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm6_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm6_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm6_cfg_puen_we),
    .wd     (pad_gpio_pwm6_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm6_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm6_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm6_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm6_cfg_slw_we),
    .wd     (pad_gpio_pwm6_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm6_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm6_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm6_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm6_cfg_smt_we),
    .wd     (pad_gpio_pwm6_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm6_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm6_cfg_smt_qs)
  );


  // R[pad_gpio_pwm6_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_gpio_pwm6_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm6_mux_sel_we),
    .wd     (pad_gpio_pwm6_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm6_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm6_mux_sel_qs)
  );


  // R[pad_gpio_pwm7_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm7_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm7_cfg_chip2pad_we),
    .wd     (pad_gpio_pwm7_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm7_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm7_cfg_chip2pad_qs)
  );


  //   F[drv]: 2:1
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_pad_gpio_pwm7_cfg_drv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm7_cfg_drv_we),
    .wd     (pad_gpio_pwm7_cfg_drv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm7_cfg.drv.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm7_cfg_drv_qs)
  );


  //   F[oen]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm7_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm7_cfg_oen_we),
    .wd     (pad_gpio_pwm7_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm7_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm7_cfg_oen_qs)
  );


  //   F[puen]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_gpio_pwm7_cfg_puen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm7_cfg_puen_we),
    .wd     (pad_gpio_pwm7_cfg_puen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm7_cfg.puen.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm7_cfg_puen_qs)
  );


  //   F[slw]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm7_cfg_slw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm7_cfg_slw_we),
    .wd     (pad_gpio_pwm7_cfg_slw_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm7_cfg.slw.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm7_cfg_slw_qs)
  );


  //   F[smt]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_gpio_pwm7_cfg_smt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm7_cfg_smt_we),
    .wd     (pad_gpio_pwm7_cfg_smt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm7_cfg.smt.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm7_cfg_smt_qs)
  );


  // R[pad_gpio_pwm7_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_gpio_pwm7_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_gpio_pwm7_mux_sel_we),
    .wd     (pad_gpio_pwm7_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_gpio_pwm7_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_gpio_pwm7_mux_sel_qs)
  );




  logic [239:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_00_CFG_OFFSET);
    addr_hit[  1] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_00_MUX_SEL_OFFSET);
    addr_hit[  2] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_01_CFG_OFFSET);
    addr_hit[  3] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_01_MUX_SEL_OFFSET);
    addr_hit[  4] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_02_CFG_OFFSET);
    addr_hit[  5] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_02_MUX_SEL_OFFSET);
    addr_hit[  6] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_03_CFG_OFFSET);
    addr_hit[  7] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_03_MUX_SEL_OFFSET);
    addr_hit[  8] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_04_CFG_OFFSET);
    addr_hit[  9] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_04_MUX_SEL_OFFSET);
    addr_hit[ 10] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_05_CFG_OFFSET);
    addr_hit[ 11] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_05_MUX_SEL_OFFSET);
    addr_hit[ 12] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_06_CFG_OFFSET);
    addr_hit[ 13] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_06_MUX_SEL_OFFSET);
    addr_hit[ 14] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_07_CFG_OFFSET);
    addr_hit[ 15] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_07_MUX_SEL_OFFSET);
    addr_hit[ 16] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_08_CFG_OFFSET);
    addr_hit[ 17] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_08_MUX_SEL_OFFSET);
    addr_hit[ 18] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_09_CFG_OFFSET);
    addr_hit[ 19] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_09_MUX_SEL_OFFSET);
    addr_hit[ 20] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_10_CFG_OFFSET);
    addr_hit[ 21] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_10_MUX_SEL_OFFSET);
    addr_hit[ 22] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_11_CFG_OFFSET);
    addr_hit[ 23] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_11_MUX_SEL_OFFSET);
    addr_hit[ 24] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_12_CFG_OFFSET);
    addr_hit[ 25] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_12_MUX_SEL_OFFSET);
    addr_hit[ 26] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_13_CFG_OFFSET);
    addr_hit[ 27] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_13_MUX_SEL_OFFSET);
    addr_hit[ 28] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_14_CFG_OFFSET);
    addr_hit[ 29] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_14_MUX_SEL_OFFSET);
    addr_hit[ 30] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_15_CFG_OFFSET);
    addr_hit[ 31] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_15_MUX_SEL_OFFSET);
    addr_hit[ 32] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_16_CFG_OFFSET);
    addr_hit[ 33] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_16_MUX_SEL_OFFSET);
    addr_hit[ 34] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_17_CFG_OFFSET);
    addr_hit[ 35] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_17_MUX_SEL_OFFSET);
    addr_hit[ 36] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_18_CFG_OFFSET);
    addr_hit[ 37] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_18_MUX_SEL_OFFSET);
    addr_hit[ 38] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_19_CFG_OFFSET);
    addr_hit[ 39] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_19_MUX_SEL_OFFSET);
    addr_hit[ 40] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_20_CFG_OFFSET);
    addr_hit[ 41] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_20_MUX_SEL_OFFSET);
    addr_hit[ 42] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_21_CFG_OFFSET);
    addr_hit[ 43] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_21_MUX_SEL_OFFSET);
    addr_hit[ 44] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_22_CFG_OFFSET);
    addr_hit[ 45] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_22_MUX_SEL_OFFSET);
    addr_hit[ 46] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_23_CFG_OFFSET);
    addr_hit[ 47] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_23_MUX_SEL_OFFSET);
    addr_hit[ 48] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_24_CFG_OFFSET);
    addr_hit[ 49] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_24_MUX_SEL_OFFSET);
    addr_hit[ 50] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_25_CFG_OFFSET);
    addr_hit[ 51] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_25_MUX_SEL_OFFSET);
    addr_hit[ 52] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_26_CFG_OFFSET);
    addr_hit[ 53] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_26_MUX_SEL_OFFSET);
    addr_hit[ 54] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_27_CFG_OFFSET);
    addr_hit[ 55] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_27_MUX_SEL_OFFSET);
    addr_hit[ 56] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_28_CFG_OFFSET);
    addr_hit[ 57] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_28_MUX_SEL_OFFSET);
    addr_hit[ 58] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_29_CFG_OFFSET);
    addr_hit[ 59] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_29_MUX_SEL_OFFSET);
    addr_hit[ 60] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_30_CFG_OFFSET);
    addr_hit[ 61] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_30_MUX_SEL_OFFSET);
    addr_hit[ 62] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_31_CFG_OFFSET);
    addr_hit[ 63] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_31_MUX_SEL_OFFSET);
    addr_hit[ 64] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_32_CFG_OFFSET);
    addr_hit[ 65] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_32_MUX_SEL_OFFSET);
    addr_hit[ 66] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_33_CFG_OFFSET);
    addr_hit[ 67] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_33_MUX_SEL_OFFSET);
    addr_hit[ 68] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_34_CFG_OFFSET);
    addr_hit[ 69] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_34_MUX_SEL_OFFSET);
    addr_hit[ 70] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_35_CFG_OFFSET);
    addr_hit[ 71] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_35_MUX_SEL_OFFSET);
    addr_hit[ 72] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_36_CFG_OFFSET);
    addr_hit[ 73] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_36_MUX_SEL_OFFSET);
    addr_hit[ 74] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_37_CFG_OFFSET);
    addr_hit[ 75] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_37_MUX_SEL_OFFSET);
    addr_hit[ 76] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_38_CFG_OFFSET);
    addr_hit[ 77] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_38_MUX_SEL_OFFSET);
    addr_hit[ 78] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_39_CFG_OFFSET);
    addr_hit[ 79] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_39_MUX_SEL_OFFSET);
    addr_hit[ 80] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_40_CFG_OFFSET);
    addr_hit[ 81] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_40_MUX_SEL_OFFSET);
    addr_hit[ 82] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_41_CFG_OFFSET);
    addr_hit[ 83] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_41_MUX_SEL_OFFSET);
    addr_hit[ 84] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_42_CFG_OFFSET);
    addr_hit[ 85] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_42_MUX_SEL_OFFSET);
    addr_hit[ 86] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_43_CFG_OFFSET);
    addr_hit[ 87] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_43_MUX_SEL_OFFSET);
    addr_hit[ 88] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_44_CFG_OFFSET);
    addr_hit[ 89] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_44_MUX_SEL_OFFSET);
    addr_hit[ 90] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_45_CFG_OFFSET);
    addr_hit[ 91] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_45_MUX_SEL_OFFSET);
    addr_hit[ 92] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_46_CFG_OFFSET);
    addr_hit[ 93] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_46_MUX_SEL_OFFSET);
    addr_hit[ 94] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_47_CFG_OFFSET);
    addr_hit[ 95] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_47_MUX_SEL_OFFSET);
    addr_hit[ 96] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_48_CFG_OFFSET);
    addr_hit[ 97] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_48_MUX_SEL_OFFSET);
    addr_hit[ 98] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_49_CFG_OFFSET);
    addr_hit[ 99] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_49_MUX_SEL_OFFSET);
    addr_hit[100] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_50_CFG_OFFSET);
    addr_hit[101] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_50_MUX_SEL_OFFSET);
    addr_hit[102] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_51_CFG_OFFSET);
    addr_hit[103] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_51_MUX_SEL_OFFSET);
    addr_hit[104] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_52_CFG_OFFSET);
    addr_hit[105] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_52_MUX_SEL_OFFSET);
    addr_hit[106] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_53_CFG_OFFSET);
    addr_hit[107] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_53_MUX_SEL_OFFSET);
    addr_hit[108] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_54_CFG_OFFSET);
    addr_hit[109] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_54_MUX_SEL_OFFSET);
    addr_hit[110] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_55_CFG_OFFSET);
    addr_hit[111] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_55_MUX_SEL_OFFSET);
    addr_hit[112] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_56_CFG_OFFSET);
    addr_hit[113] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_56_MUX_SEL_OFFSET);
    addr_hit[114] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_57_CFG_OFFSET);
    addr_hit[115] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_B_57_MUX_SEL_OFFSET);
    addr_hit[116] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_C_00_CFG_OFFSET);
    addr_hit[117] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_C_00_MUX_SEL_OFFSET);
    addr_hit[118] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_C_01_CFG_OFFSET);
    addr_hit[119] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_C_01_MUX_SEL_OFFSET);
    addr_hit[120] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_C_02_CFG_OFFSET);
    addr_hit[121] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_C_02_MUX_SEL_OFFSET);
    addr_hit[122] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_C_03_CFG_OFFSET);
    addr_hit[123] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_C_03_MUX_SEL_OFFSET);
    addr_hit[124] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_00_CFG_OFFSET);
    addr_hit[125] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_00_MUX_SEL_OFFSET);
    addr_hit[126] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_01_CFG_OFFSET);
    addr_hit[127] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_01_MUX_SEL_OFFSET);
    addr_hit[128] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_02_CFG_OFFSET);
    addr_hit[129] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_02_MUX_SEL_OFFSET);
    addr_hit[130] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_03_CFG_OFFSET);
    addr_hit[131] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_03_MUX_SEL_OFFSET);
    addr_hit[132] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_04_CFG_OFFSET);
    addr_hit[133] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_04_MUX_SEL_OFFSET);
    addr_hit[134] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_05_CFG_OFFSET);
    addr_hit[135] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_05_MUX_SEL_OFFSET);
    addr_hit[136] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_06_CFG_OFFSET);
    addr_hit[137] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_06_MUX_SEL_OFFSET);
    addr_hit[138] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_07_CFG_OFFSET);
    addr_hit[139] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_07_MUX_SEL_OFFSET);
    addr_hit[140] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_08_CFG_OFFSET);
    addr_hit[141] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_08_MUX_SEL_OFFSET);
    addr_hit[142] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_09_CFG_OFFSET);
    addr_hit[143] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_09_MUX_SEL_OFFSET);
    addr_hit[144] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_10_CFG_OFFSET);
    addr_hit[145] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_D_10_MUX_SEL_OFFSET);
    addr_hit[146] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_00_CFG_OFFSET);
    addr_hit[147] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_00_MUX_SEL_OFFSET);
    addr_hit[148] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_01_CFG_OFFSET);
    addr_hit[149] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_01_MUX_SEL_OFFSET);
    addr_hit[150] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_02_CFG_OFFSET);
    addr_hit[151] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_02_MUX_SEL_OFFSET);
    addr_hit[152] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_03_CFG_OFFSET);
    addr_hit[153] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_03_MUX_SEL_OFFSET);
    addr_hit[154] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_04_CFG_OFFSET);
    addr_hit[155] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_04_MUX_SEL_OFFSET);
    addr_hit[156] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_05_CFG_OFFSET);
    addr_hit[157] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_05_MUX_SEL_OFFSET);
    addr_hit[158] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_06_CFG_OFFSET);
    addr_hit[159] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_06_MUX_SEL_OFFSET);
    addr_hit[160] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_07_CFG_OFFSET);
    addr_hit[161] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_07_MUX_SEL_OFFSET);
    addr_hit[162] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_08_CFG_OFFSET);
    addr_hit[163] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_08_MUX_SEL_OFFSET);
    addr_hit[164] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_09_CFG_OFFSET);
    addr_hit[165] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_09_MUX_SEL_OFFSET);
    addr_hit[166] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_10_CFG_OFFSET);
    addr_hit[167] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_10_MUX_SEL_OFFSET);
    addr_hit[168] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_11_CFG_OFFSET);
    addr_hit[169] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_11_MUX_SEL_OFFSET);
    addr_hit[170] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_12_CFG_OFFSET);
    addr_hit[171] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_E_12_MUX_SEL_OFFSET);
    addr_hit[172] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_00_CFG_OFFSET);
    addr_hit[173] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_00_MUX_SEL_OFFSET);
    addr_hit[174] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_01_CFG_OFFSET);
    addr_hit[175] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_01_MUX_SEL_OFFSET);
    addr_hit[176] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_02_CFG_OFFSET);
    addr_hit[177] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_02_MUX_SEL_OFFSET);
    addr_hit[178] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_03_CFG_OFFSET);
    addr_hit[179] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_03_MUX_SEL_OFFSET);
    addr_hit[180] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_04_CFG_OFFSET);
    addr_hit[181] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_04_MUX_SEL_OFFSET);
    addr_hit[182] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_05_CFG_OFFSET);
    addr_hit[183] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_05_MUX_SEL_OFFSET);
    addr_hit[184] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_06_CFG_OFFSET);
    addr_hit[185] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_06_MUX_SEL_OFFSET);
    addr_hit[186] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_07_CFG_OFFSET);
    addr_hit[187] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_07_MUX_SEL_OFFSET);
    addr_hit[188] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_08_CFG_OFFSET);
    addr_hit[189] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_08_MUX_SEL_OFFSET);
    addr_hit[190] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_09_CFG_OFFSET);
    addr_hit[191] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_09_MUX_SEL_OFFSET);
    addr_hit[192] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_10_CFG_OFFSET);
    addr_hit[193] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_10_MUX_SEL_OFFSET);
    addr_hit[194] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_11_CFG_OFFSET);
    addr_hit[195] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_11_MUX_SEL_OFFSET);
    addr_hit[196] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_12_CFG_OFFSET);
    addr_hit[197] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_12_MUX_SEL_OFFSET);
    addr_hit[198] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_13_CFG_OFFSET);
    addr_hit[199] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_13_MUX_SEL_OFFSET);
    addr_hit[200] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_14_CFG_OFFSET);
    addr_hit[201] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_14_MUX_SEL_OFFSET);
    addr_hit[202] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_15_CFG_OFFSET);
    addr_hit[203] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_15_MUX_SEL_OFFSET);
    addr_hit[204] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_16_CFG_OFFSET);
    addr_hit[205] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_16_MUX_SEL_OFFSET);
    addr_hit[206] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_17_CFG_OFFSET);
    addr_hit[207] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_17_MUX_SEL_OFFSET);
    addr_hit[208] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_18_CFG_OFFSET);
    addr_hit[209] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_18_MUX_SEL_OFFSET);
    addr_hit[210] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_19_CFG_OFFSET);
    addr_hit[211] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_19_MUX_SEL_OFFSET);
    addr_hit[212] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_20_CFG_OFFSET);
    addr_hit[213] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_20_MUX_SEL_OFFSET);
    addr_hit[214] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_21_CFG_OFFSET);
    addr_hit[215] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_21_MUX_SEL_OFFSET);
    addr_hit[216] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_22_CFG_OFFSET);
    addr_hit[217] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_22_MUX_SEL_OFFSET);
    addr_hit[218] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_23_CFG_OFFSET);
    addr_hit[219] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_23_MUX_SEL_OFFSET);
    addr_hit[220] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_24_CFG_OFFSET);
    addr_hit[221] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_24_MUX_SEL_OFFSET);
    addr_hit[222] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_25_CFG_OFFSET);
    addr_hit[223] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_F_25_MUX_SEL_OFFSET);
    addr_hit[224] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM0_CFG_OFFSET);
    addr_hit[225] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM0_MUX_SEL_OFFSET);
    addr_hit[226] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM1_CFG_OFFSET);
    addr_hit[227] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM1_MUX_SEL_OFFSET);
    addr_hit[228] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM2_CFG_OFFSET);
    addr_hit[229] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM2_MUX_SEL_OFFSET);
    addr_hit[230] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM3_CFG_OFFSET);
    addr_hit[231] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM3_MUX_SEL_OFFSET);
    addr_hit[232] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM4_CFG_OFFSET);
    addr_hit[233] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM4_MUX_SEL_OFFSET);
    addr_hit[234] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM5_CFG_OFFSET);
    addr_hit[235] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM5_MUX_SEL_OFFSET);
    addr_hit[236] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM6_CFG_OFFSET);
    addr_hit[237] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM6_MUX_SEL_OFFSET);
    addr_hit[238] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM7_CFG_OFFSET);
    addr_hit[239] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_GPIO_PWM7_MUX_SEL_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[118] & ~reg_be))) |
               (addr_hit[119] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[119] & ~reg_be))) |
               (addr_hit[120] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[120] & ~reg_be))) |
               (addr_hit[121] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[121] & ~reg_be))) |
               (addr_hit[122] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[122] & ~reg_be))) |
               (addr_hit[123] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[123] & ~reg_be))) |
               (addr_hit[124] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[124] & ~reg_be))) |
               (addr_hit[125] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[125] & ~reg_be))) |
               (addr_hit[126] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[126] & ~reg_be))) |
               (addr_hit[127] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[127] & ~reg_be))) |
               (addr_hit[128] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[128] & ~reg_be))) |
               (addr_hit[129] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[129] & ~reg_be))) |
               (addr_hit[130] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[130] & ~reg_be))) |
               (addr_hit[131] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[131] & ~reg_be))) |
               (addr_hit[132] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[132] & ~reg_be))) |
               (addr_hit[133] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[133] & ~reg_be))) |
               (addr_hit[134] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[134] & ~reg_be))) |
               (addr_hit[135] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[135] & ~reg_be))) |
               (addr_hit[136] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[136] & ~reg_be))) |
               (addr_hit[137] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[137] & ~reg_be))) |
               (addr_hit[138] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[138] & ~reg_be))) |
               (addr_hit[139] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[139] & ~reg_be))) |
               (addr_hit[140] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[140] & ~reg_be))) |
               (addr_hit[141] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[141] & ~reg_be))) |
               (addr_hit[142] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[142] & ~reg_be))) |
               (addr_hit[143] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[143] & ~reg_be))) |
               (addr_hit[144] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[144] & ~reg_be))) |
               (addr_hit[145] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[145] & ~reg_be))) |
               (addr_hit[146] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[146] & ~reg_be))) |
               (addr_hit[147] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[147] & ~reg_be))) |
               (addr_hit[148] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[148] & ~reg_be))) |
               (addr_hit[149] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[149] & ~reg_be))) |
               (addr_hit[150] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[150] & ~reg_be))) |
               (addr_hit[151] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[151] & ~reg_be))) |
               (addr_hit[152] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[152] & ~reg_be))) |
               (addr_hit[153] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[153] & ~reg_be))) |
               (addr_hit[154] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[154] & ~reg_be))) |
               (addr_hit[155] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[155] & ~reg_be))) |
               (addr_hit[156] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[156] & ~reg_be))) |
               (addr_hit[157] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[157] & ~reg_be))) |
               (addr_hit[158] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[158] & ~reg_be))) |
               (addr_hit[159] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[159] & ~reg_be))) |
               (addr_hit[160] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[160] & ~reg_be))) |
               (addr_hit[161] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[161] & ~reg_be))) |
               (addr_hit[162] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[162] & ~reg_be))) |
               (addr_hit[163] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[163] & ~reg_be))) |
               (addr_hit[164] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[164] & ~reg_be))) |
               (addr_hit[165] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[165] & ~reg_be))) |
               (addr_hit[166] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[166] & ~reg_be))) |
               (addr_hit[167] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[167] & ~reg_be))) |
               (addr_hit[168] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[168] & ~reg_be))) |
               (addr_hit[169] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[169] & ~reg_be))) |
               (addr_hit[170] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[170] & ~reg_be))) |
               (addr_hit[171] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[171] & ~reg_be))) |
               (addr_hit[172] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[172] & ~reg_be))) |
               (addr_hit[173] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[173] & ~reg_be))) |
               (addr_hit[174] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[174] & ~reg_be))) |
               (addr_hit[175] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[175] & ~reg_be))) |
               (addr_hit[176] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[176] & ~reg_be))) |
               (addr_hit[177] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[177] & ~reg_be))) |
               (addr_hit[178] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[178] & ~reg_be))) |
               (addr_hit[179] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[179] & ~reg_be))) |
               (addr_hit[180] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[180] & ~reg_be))) |
               (addr_hit[181] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[181] & ~reg_be))) |
               (addr_hit[182] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[182] & ~reg_be))) |
               (addr_hit[183] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[183] & ~reg_be))) |
               (addr_hit[184] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[184] & ~reg_be))) |
               (addr_hit[185] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[185] & ~reg_be))) |
               (addr_hit[186] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[186] & ~reg_be))) |
               (addr_hit[187] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[187] & ~reg_be))) |
               (addr_hit[188] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[188] & ~reg_be))) |
               (addr_hit[189] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[189] & ~reg_be))) |
               (addr_hit[190] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[190] & ~reg_be))) |
               (addr_hit[191] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[191] & ~reg_be))) |
               (addr_hit[192] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[192] & ~reg_be))) |
               (addr_hit[193] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[193] & ~reg_be))) |
               (addr_hit[194] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[194] & ~reg_be))) |
               (addr_hit[195] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[195] & ~reg_be))) |
               (addr_hit[196] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[196] & ~reg_be))) |
               (addr_hit[197] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[197] & ~reg_be))) |
               (addr_hit[198] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[198] & ~reg_be))) |
               (addr_hit[199] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[199] & ~reg_be))) |
               (addr_hit[200] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[200] & ~reg_be))) |
               (addr_hit[201] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[201] & ~reg_be))) |
               (addr_hit[202] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[202] & ~reg_be))) |
               (addr_hit[203] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[203] & ~reg_be))) |
               (addr_hit[204] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[204] & ~reg_be))) |
               (addr_hit[205] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[205] & ~reg_be))) |
               (addr_hit[206] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[206] & ~reg_be))) |
               (addr_hit[207] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[207] & ~reg_be))) |
               (addr_hit[208] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[208] & ~reg_be))) |
               (addr_hit[209] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[209] & ~reg_be))) |
               (addr_hit[210] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[210] & ~reg_be))) |
               (addr_hit[211] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[211] & ~reg_be))) |
               (addr_hit[212] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[212] & ~reg_be))) |
               (addr_hit[213] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[213] & ~reg_be))) |
               (addr_hit[214] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[214] & ~reg_be))) |
               (addr_hit[215] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[215] & ~reg_be))) |
               (addr_hit[216] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[216] & ~reg_be))) |
               (addr_hit[217] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[217] & ~reg_be))) |
               (addr_hit[218] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[218] & ~reg_be))) |
               (addr_hit[219] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[219] & ~reg_be))) |
               (addr_hit[220] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[220] & ~reg_be))) |
               (addr_hit[221] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[221] & ~reg_be))) |
               (addr_hit[222] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[222] & ~reg_be))) |
               (addr_hit[223] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[223] & ~reg_be))) |
               (addr_hit[224] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[224] & ~reg_be))) |
               (addr_hit[225] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[225] & ~reg_be))) |
               (addr_hit[226] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[226] & ~reg_be))) |
               (addr_hit[227] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[227] & ~reg_be))) |
               (addr_hit[228] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[228] & ~reg_be))) |
               (addr_hit[229] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[229] & ~reg_be))) |
               (addr_hit[230] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[230] & ~reg_be))) |
               (addr_hit[231] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[231] & ~reg_be))) |
               (addr_hit[232] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[232] & ~reg_be))) |
               (addr_hit[233] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[233] & ~reg_be))) |
               (addr_hit[234] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[234] & ~reg_be))) |
               (addr_hit[235] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[235] & ~reg_be))) |
               (addr_hit[236] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[236] & ~reg_be))) |
               (addr_hit[237] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[237] & ~reg_be))) |
               (addr_hit[238] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[238] & ~reg_be))) |
               (addr_hit[239] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[239] & ~reg_be)))));
  end

  assign pad_gpio_b_00_cfg_chip2pad_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_gpio_b_00_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_00_cfg_drv_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_gpio_b_00_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_00_cfg_oen_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_gpio_b_00_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_00_cfg_puen_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_gpio_b_00_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_00_cfg_slw_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_gpio_b_00_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_00_cfg_smt_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_gpio_b_00_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_00_mux_sel_we = addr_hit[1] & reg_we & !reg_error;
  assign pad_gpio_b_00_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_01_cfg_chip2pad_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_gpio_b_01_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_01_cfg_drv_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_gpio_b_01_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_01_cfg_oen_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_gpio_b_01_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_01_cfg_puen_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_gpio_b_01_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_01_cfg_slw_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_gpio_b_01_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_01_cfg_smt_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_gpio_b_01_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_01_mux_sel_we = addr_hit[3] & reg_we & !reg_error;
  assign pad_gpio_b_01_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_02_cfg_chip2pad_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_gpio_b_02_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_02_cfg_drv_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_gpio_b_02_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_02_cfg_oen_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_gpio_b_02_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_02_cfg_puen_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_gpio_b_02_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_02_cfg_slw_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_gpio_b_02_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_02_cfg_smt_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_gpio_b_02_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_02_mux_sel_we = addr_hit[5] & reg_we & !reg_error;
  assign pad_gpio_b_02_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_03_cfg_chip2pad_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_gpio_b_03_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_03_cfg_drv_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_gpio_b_03_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_03_cfg_oen_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_gpio_b_03_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_03_cfg_puen_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_gpio_b_03_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_03_cfg_slw_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_gpio_b_03_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_03_cfg_smt_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_gpio_b_03_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_03_mux_sel_we = addr_hit[7] & reg_we & !reg_error;
  assign pad_gpio_b_03_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_04_cfg_chip2pad_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_gpio_b_04_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_04_cfg_drv_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_gpio_b_04_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_04_cfg_oen_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_gpio_b_04_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_04_cfg_puen_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_gpio_b_04_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_04_cfg_slw_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_gpio_b_04_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_04_cfg_smt_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_gpio_b_04_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_04_mux_sel_we = addr_hit[9] & reg_we & !reg_error;
  assign pad_gpio_b_04_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_05_cfg_chip2pad_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_gpio_b_05_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_05_cfg_drv_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_gpio_b_05_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_05_cfg_oen_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_gpio_b_05_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_05_cfg_puen_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_gpio_b_05_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_05_cfg_slw_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_gpio_b_05_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_05_cfg_smt_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_gpio_b_05_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_05_mux_sel_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_gpio_b_05_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_06_cfg_chip2pad_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_gpio_b_06_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_06_cfg_drv_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_gpio_b_06_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_06_cfg_oen_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_gpio_b_06_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_06_cfg_puen_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_gpio_b_06_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_06_cfg_slw_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_gpio_b_06_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_06_cfg_smt_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_gpio_b_06_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_06_mux_sel_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_gpio_b_06_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_07_cfg_chip2pad_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_gpio_b_07_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_07_cfg_drv_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_gpio_b_07_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_07_cfg_oen_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_gpio_b_07_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_07_cfg_puen_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_gpio_b_07_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_07_cfg_slw_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_gpio_b_07_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_07_cfg_smt_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_gpio_b_07_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_07_mux_sel_we = addr_hit[15] & reg_we & !reg_error;
  assign pad_gpio_b_07_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_08_cfg_chip2pad_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_gpio_b_08_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_08_cfg_drv_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_gpio_b_08_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_08_cfg_oen_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_gpio_b_08_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_08_cfg_puen_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_gpio_b_08_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_08_cfg_slw_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_gpio_b_08_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_08_cfg_smt_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_gpio_b_08_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_08_mux_sel_we = addr_hit[17] & reg_we & !reg_error;
  assign pad_gpio_b_08_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_09_cfg_chip2pad_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_gpio_b_09_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_09_cfg_drv_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_gpio_b_09_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_09_cfg_oen_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_gpio_b_09_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_09_cfg_puen_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_gpio_b_09_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_09_cfg_slw_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_gpio_b_09_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_09_cfg_smt_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_gpio_b_09_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_09_mux_sel_we = addr_hit[19] & reg_we & !reg_error;
  assign pad_gpio_b_09_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_10_cfg_chip2pad_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_gpio_b_10_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_10_cfg_drv_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_gpio_b_10_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_10_cfg_oen_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_gpio_b_10_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_10_cfg_puen_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_gpio_b_10_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_10_cfg_slw_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_gpio_b_10_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_10_cfg_smt_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_gpio_b_10_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_10_mux_sel_we = addr_hit[21] & reg_we & !reg_error;
  assign pad_gpio_b_10_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_11_cfg_chip2pad_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_gpio_b_11_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_11_cfg_drv_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_gpio_b_11_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_11_cfg_oen_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_gpio_b_11_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_11_cfg_puen_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_gpio_b_11_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_11_cfg_slw_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_gpio_b_11_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_11_cfg_smt_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_gpio_b_11_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_11_mux_sel_we = addr_hit[23] & reg_we & !reg_error;
  assign pad_gpio_b_11_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_12_cfg_chip2pad_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_gpio_b_12_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_12_cfg_drv_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_gpio_b_12_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_12_cfg_oen_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_gpio_b_12_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_12_cfg_puen_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_gpio_b_12_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_12_cfg_slw_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_gpio_b_12_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_12_cfg_smt_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_gpio_b_12_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_12_mux_sel_we = addr_hit[25] & reg_we & !reg_error;
  assign pad_gpio_b_12_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_13_cfg_chip2pad_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_gpio_b_13_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_13_cfg_drv_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_gpio_b_13_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_13_cfg_oen_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_gpio_b_13_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_13_cfg_puen_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_gpio_b_13_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_13_cfg_slw_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_gpio_b_13_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_13_cfg_smt_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_gpio_b_13_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_13_mux_sel_we = addr_hit[27] & reg_we & !reg_error;
  assign pad_gpio_b_13_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_14_cfg_chip2pad_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_gpio_b_14_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_14_cfg_drv_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_gpio_b_14_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_14_cfg_oen_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_gpio_b_14_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_14_cfg_puen_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_gpio_b_14_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_14_cfg_slw_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_gpio_b_14_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_14_cfg_smt_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_gpio_b_14_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_14_mux_sel_we = addr_hit[29] & reg_we & !reg_error;
  assign pad_gpio_b_14_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_15_cfg_chip2pad_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_gpio_b_15_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_15_cfg_drv_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_gpio_b_15_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_15_cfg_oen_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_gpio_b_15_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_15_cfg_puen_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_gpio_b_15_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_15_cfg_slw_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_gpio_b_15_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_15_cfg_smt_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_gpio_b_15_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_15_mux_sel_we = addr_hit[31] & reg_we & !reg_error;
  assign pad_gpio_b_15_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_16_cfg_chip2pad_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_gpio_b_16_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_16_cfg_drv_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_gpio_b_16_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_16_cfg_oen_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_gpio_b_16_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_16_cfg_puen_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_gpio_b_16_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_16_cfg_slw_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_gpio_b_16_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_16_cfg_smt_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_gpio_b_16_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_16_mux_sel_we = addr_hit[33] & reg_we & !reg_error;
  assign pad_gpio_b_16_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_17_cfg_chip2pad_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_gpio_b_17_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_17_cfg_drv_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_gpio_b_17_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_17_cfg_oen_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_gpio_b_17_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_17_cfg_puen_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_gpio_b_17_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_17_cfg_slw_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_gpio_b_17_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_17_cfg_smt_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_gpio_b_17_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_17_mux_sel_we = addr_hit[35] & reg_we & !reg_error;
  assign pad_gpio_b_17_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_18_cfg_chip2pad_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_gpio_b_18_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_18_cfg_drv_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_gpio_b_18_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_18_cfg_oen_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_gpio_b_18_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_18_cfg_puen_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_gpio_b_18_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_18_cfg_slw_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_gpio_b_18_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_18_cfg_smt_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_gpio_b_18_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_18_mux_sel_we = addr_hit[37] & reg_we & !reg_error;
  assign pad_gpio_b_18_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_19_cfg_chip2pad_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_gpio_b_19_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_19_cfg_drv_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_gpio_b_19_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_19_cfg_oen_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_gpio_b_19_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_19_cfg_puen_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_gpio_b_19_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_19_cfg_slw_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_gpio_b_19_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_19_cfg_smt_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_gpio_b_19_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_19_mux_sel_we = addr_hit[39] & reg_we & !reg_error;
  assign pad_gpio_b_19_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_20_cfg_chip2pad_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_gpio_b_20_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_20_cfg_drv_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_gpio_b_20_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_20_cfg_oen_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_gpio_b_20_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_20_cfg_puen_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_gpio_b_20_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_20_cfg_slw_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_gpio_b_20_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_20_cfg_smt_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_gpio_b_20_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_20_mux_sel_we = addr_hit[41] & reg_we & !reg_error;
  assign pad_gpio_b_20_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_21_cfg_chip2pad_we = addr_hit[42] & reg_we & !reg_error;
  assign pad_gpio_b_21_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_21_cfg_drv_we = addr_hit[42] & reg_we & !reg_error;
  assign pad_gpio_b_21_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_21_cfg_oen_we = addr_hit[42] & reg_we & !reg_error;
  assign pad_gpio_b_21_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_21_cfg_puen_we = addr_hit[42] & reg_we & !reg_error;
  assign pad_gpio_b_21_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_21_cfg_slw_we = addr_hit[42] & reg_we & !reg_error;
  assign pad_gpio_b_21_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_21_cfg_smt_we = addr_hit[42] & reg_we & !reg_error;
  assign pad_gpio_b_21_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_21_mux_sel_we = addr_hit[43] & reg_we & !reg_error;
  assign pad_gpio_b_21_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_22_cfg_chip2pad_we = addr_hit[44] & reg_we & !reg_error;
  assign pad_gpio_b_22_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_22_cfg_drv_we = addr_hit[44] & reg_we & !reg_error;
  assign pad_gpio_b_22_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_22_cfg_oen_we = addr_hit[44] & reg_we & !reg_error;
  assign pad_gpio_b_22_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_22_cfg_puen_we = addr_hit[44] & reg_we & !reg_error;
  assign pad_gpio_b_22_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_22_cfg_slw_we = addr_hit[44] & reg_we & !reg_error;
  assign pad_gpio_b_22_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_22_cfg_smt_we = addr_hit[44] & reg_we & !reg_error;
  assign pad_gpio_b_22_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_22_mux_sel_we = addr_hit[45] & reg_we & !reg_error;
  assign pad_gpio_b_22_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_23_cfg_chip2pad_we = addr_hit[46] & reg_we & !reg_error;
  assign pad_gpio_b_23_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_23_cfg_drv_we = addr_hit[46] & reg_we & !reg_error;
  assign pad_gpio_b_23_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_23_cfg_oen_we = addr_hit[46] & reg_we & !reg_error;
  assign pad_gpio_b_23_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_23_cfg_puen_we = addr_hit[46] & reg_we & !reg_error;
  assign pad_gpio_b_23_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_23_cfg_slw_we = addr_hit[46] & reg_we & !reg_error;
  assign pad_gpio_b_23_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_23_cfg_smt_we = addr_hit[46] & reg_we & !reg_error;
  assign pad_gpio_b_23_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_23_mux_sel_we = addr_hit[47] & reg_we & !reg_error;
  assign pad_gpio_b_23_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_24_cfg_chip2pad_we = addr_hit[48] & reg_we & !reg_error;
  assign pad_gpio_b_24_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_24_cfg_drv_we = addr_hit[48] & reg_we & !reg_error;
  assign pad_gpio_b_24_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_24_cfg_oen_we = addr_hit[48] & reg_we & !reg_error;
  assign pad_gpio_b_24_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_24_cfg_puen_we = addr_hit[48] & reg_we & !reg_error;
  assign pad_gpio_b_24_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_24_cfg_slw_we = addr_hit[48] & reg_we & !reg_error;
  assign pad_gpio_b_24_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_24_cfg_smt_we = addr_hit[48] & reg_we & !reg_error;
  assign pad_gpio_b_24_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_24_mux_sel_we = addr_hit[49] & reg_we & !reg_error;
  assign pad_gpio_b_24_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_25_cfg_chip2pad_we = addr_hit[50] & reg_we & !reg_error;
  assign pad_gpio_b_25_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_25_cfg_drv_we = addr_hit[50] & reg_we & !reg_error;
  assign pad_gpio_b_25_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_25_cfg_oen_we = addr_hit[50] & reg_we & !reg_error;
  assign pad_gpio_b_25_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_25_cfg_puen_we = addr_hit[50] & reg_we & !reg_error;
  assign pad_gpio_b_25_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_25_cfg_slw_we = addr_hit[50] & reg_we & !reg_error;
  assign pad_gpio_b_25_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_25_cfg_smt_we = addr_hit[50] & reg_we & !reg_error;
  assign pad_gpio_b_25_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_25_mux_sel_we = addr_hit[51] & reg_we & !reg_error;
  assign pad_gpio_b_25_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_26_cfg_chip2pad_we = addr_hit[52] & reg_we & !reg_error;
  assign pad_gpio_b_26_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_26_cfg_drv_we = addr_hit[52] & reg_we & !reg_error;
  assign pad_gpio_b_26_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_26_cfg_oen_we = addr_hit[52] & reg_we & !reg_error;
  assign pad_gpio_b_26_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_26_cfg_puen_we = addr_hit[52] & reg_we & !reg_error;
  assign pad_gpio_b_26_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_26_cfg_slw_we = addr_hit[52] & reg_we & !reg_error;
  assign pad_gpio_b_26_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_26_cfg_smt_we = addr_hit[52] & reg_we & !reg_error;
  assign pad_gpio_b_26_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_26_mux_sel_we = addr_hit[53] & reg_we & !reg_error;
  assign pad_gpio_b_26_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_27_cfg_chip2pad_we = addr_hit[54] & reg_we & !reg_error;
  assign pad_gpio_b_27_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_27_cfg_drv_we = addr_hit[54] & reg_we & !reg_error;
  assign pad_gpio_b_27_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_27_cfg_oen_we = addr_hit[54] & reg_we & !reg_error;
  assign pad_gpio_b_27_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_27_cfg_puen_we = addr_hit[54] & reg_we & !reg_error;
  assign pad_gpio_b_27_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_27_cfg_slw_we = addr_hit[54] & reg_we & !reg_error;
  assign pad_gpio_b_27_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_27_cfg_smt_we = addr_hit[54] & reg_we & !reg_error;
  assign pad_gpio_b_27_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_27_mux_sel_we = addr_hit[55] & reg_we & !reg_error;
  assign pad_gpio_b_27_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_28_cfg_chip2pad_we = addr_hit[56] & reg_we & !reg_error;
  assign pad_gpio_b_28_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_28_cfg_drv_we = addr_hit[56] & reg_we & !reg_error;
  assign pad_gpio_b_28_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_28_cfg_oen_we = addr_hit[56] & reg_we & !reg_error;
  assign pad_gpio_b_28_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_28_cfg_puen_we = addr_hit[56] & reg_we & !reg_error;
  assign pad_gpio_b_28_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_28_cfg_slw_we = addr_hit[56] & reg_we & !reg_error;
  assign pad_gpio_b_28_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_28_cfg_smt_we = addr_hit[56] & reg_we & !reg_error;
  assign pad_gpio_b_28_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_28_mux_sel_we = addr_hit[57] & reg_we & !reg_error;
  assign pad_gpio_b_28_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_29_cfg_chip2pad_we = addr_hit[58] & reg_we & !reg_error;
  assign pad_gpio_b_29_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_29_cfg_drv_we = addr_hit[58] & reg_we & !reg_error;
  assign pad_gpio_b_29_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_29_cfg_oen_we = addr_hit[58] & reg_we & !reg_error;
  assign pad_gpio_b_29_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_29_cfg_puen_we = addr_hit[58] & reg_we & !reg_error;
  assign pad_gpio_b_29_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_29_cfg_slw_we = addr_hit[58] & reg_we & !reg_error;
  assign pad_gpio_b_29_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_29_cfg_smt_we = addr_hit[58] & reg_we & !reg_error;
  assign pad_gpio_b_29_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_29_mux_sel_we = addr_hit[59] & reg_we & !reg_error;
  assign pad_gpio_b_29_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_30_cfg_chip2pad_we = addr_hit[60] & reg_we & !reg_error;
  assign pad_gpio_b_30_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_30_cfg_drv_we = addr_hit[60] & reg_we & !reg_error;
  assign pad_gpio_b_30_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_30_cfg_oen_we = addr_hit[60] & reg_we & !reg_error;
  assign pad_gpio_b_30_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_30_cfg_puen_we = addr_hit[60] & reg_we & !reg_error;
  assign pad_gpio_b_30_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_30_cfg_slw_we = addr_hit[60] & reg_we & !reg_error;
  assign pad_gpio_b_30_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_30_cfg_smt_we = addr_hit[60] & reg_we & !reg_error;
  assign pad_gpio_b_30_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_30_mux_sel_we = addr_hit[61] & reg_we & !reg_error;
  assign pad_gpio_b_30_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_31_cfg_chip2pad_we = addr_hit[62] & reg_we & !reg_error;
  assign pad_gpio_b_31_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_31_cfg_drv_we = addr_hit[62] & reg_we & !reg_error;
  assign pad_gpio_b_31_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_31_cfg_oen_we = addr_hit[62] & reg_we & !reg_error;
  assign pad_gpio_b_31_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_31_cfg_puen_we = addr_hit[62] & reg_we & !reg_error;
  assign pad_gpio_b_31_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_31_cfg_slw_we = addr_hit[62] & reg_we & !reg_error;
  assign pad_gpio_b_31_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_31_cfg_smt_we = addr_hit[62] & reg_we & !reg_error;
  assign pad_gpio_b_31_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_31_mux_sel_we = addr_hit[63] & reg_we & !reg_error;
  assign pad_gpio_b_31_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_32_cfg_chip2pad_we = addr_hit[64] & reg_we & !reg_error;
  assign pad_gpio_b_32_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_32_cfg_drv_we = addr_hit[64] & reg_we & !reg_error;
  assign pad_gpio_b_32_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_32_cfg_oen_we = addr_hit[64] & reg_we & !reg_error;
  assign pad_gpio_b_32_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_32_cfg_puen_we = addr_hit[64] & reg_we & !reg_error;
  assign pad_gpio_b_32_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_32_cfg_slw_we = addr_hit[64] & reg_we & !reg_error;
  assign pad_gpio_b_32_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_32_cfg_smt_we = addr_hit[64] & reg_we & !reg_error;
  assign pad_gpio_b_32_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_32_mux_sel_we = addr_hit[65] & reg_we & !reg_error;
  assign pad_gpio_b_32_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_33_cfg_chip2pad_we = addr_hit[66] & reg_we & !reg_error;
  assign pad_gpio_b_33_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_33_cfg_drv_we = addr_hit[66] & reg_we & !reg_error;
  assign pad_gpio_b_33_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_33_cfg_oen_we = addr_hit[66] & reg_we & !reg_error;
  assign pad_gpio_b_33_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_33_cfg_puen_we = addr_hit[66] & reg_we & !reg_error;
  assign pad_gpio_b_33_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_33_cfg_slw_we = addr_hit[66] & reg_we & !reg_error;
  assign pad_gpio_b_33_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_33_cfg_smt_we = addr_hit[66] & reg_we & !reg_error;
  assign pad_gpio_b_33_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_33_mux_sel_we = addr_hit[67] & reg_we & !reg_error;
  assign pad_gpio_b_33_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_34_cfg_chip2pad_we = addr_hit[68] & reg_we & !reg_error;
  assign pad_gpio_b_34_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_34_cfg_drv_we = addr_hit[68] & reg_we & !reg_error;
  assign pad_gpio_b_34_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_34_cfg_oen_we = addr_hit[68] & reg_we & !reg_error;
  assign pad_gpio_b_34_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_34_cfg_puen_we = addr_hit[68] & reg_we & !reg_error;
  assign pad_gpio_b_34_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_34_cfg_slw_we = addr_hit[68] & reg_we & !reg_error;
  assign pad_gpio_b_34_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_34_cfg_smt_we = addr_hit[68] & reg_we & !reg_error;
  assign pad_gpio_b_34_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_34_mux_sel_we = addr_hit[69] & reg_we & !reg_error;
  assign pad_gpio_b_34_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_35_cfg_chip2pad_we = addr_hit[70] & reg_we & !reg_error;
  assign pad_gpio_b_35_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_35_cfg_drv_we = addr_hit[70] & reg_we & !reg_error;
  assign pad_gpio_b_35_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_35_cfg_oen_we = addr_hit[70] & reg_we & !reg_error;
  assign pad_gpio_b_35_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_35_cfg_puen_we = addr_hit[70] & reg_we & !reg_error;
  assign pad_gpio_b_35_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_35_cfg_slw_we = addr_hit[70] & reg_we & !reg_error;
  assign pad_gpio_b_35_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_35_cfg_smt_we = addr_hit[70] & reg_we & !reg_error;
  assign pad_gpio_b_35_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_35_mux_sel_we = addr_hit[71] & reg_we & !reg_error;
  assign pad_gpio_b_35_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_36_cfg_chip2pad_we = addr_hit[72] & reg_we & !reg_error;
  assign pad_gpio_b_36_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_36_cfg_drv_we = addr_hit[72] & reg_we & !reg_error;
  assign pad_gpio_b_36_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_36_cfg_oen_we = addr_hit[72] & reg_we & !reg_error;
  assign pad_gpio_b_36_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_36_cfg_puen_we = addr_hit[72] & reg_we & !reg_error;
  assign pad_gpio_b_36_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_36_cfg_slw_we = addr_hit[72] & reg_we & !reg_error;
  assign pad_gpio_b_36_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_36_cfg_smt_we = addr_hit[72] & reg_we & !reg_error;
  assign pad_gpio_b_36_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_36_mux_sel_we = addr_hit[73] & reg_we & !reg_error;
  assign pad_gpio_b_36_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_37_cfg_chip2pad_we = addr_hit[74] & reg_we & !reg_error;
  assign pad_gpio_b_37_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_37_cfg_drv_we = addr_hit[74] & reg_we & !reg_error;
  assign pad_gpio_b_37_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_37_cfg_oen_we = addr_hit[74] & reg_we & !reg_error;
  assign pad_gpio_b_37_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_37_cfg_puen_we = addr_hit[74] & reg_we & !reg_error;
  assign pad_gpio_b_37_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_37_cfg_slw_we = addr_hit[74] & reg_we & !reg_error;
  assign pad_gpio_b_37_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_37_cfg_smt_we = addr_hit[74] & reg_we & !reg_error;
  assign pad_gpio_b_37_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_37_mux_sel_we = addr_hit[75] & reg_we & !reg_error;
  assign pad_gpio_b_37_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_38_cfg_chip2pad_we = addr_hit[76] & reg_we & !reg_error;
  assign pad_gpio_b_38_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_38_cfg_drv_we = addr_hit[76] & reg_we & !reg_error;
  assign pad_gpio_b_38_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_38_cfg_oen_we = addr_hit[76] & reg_we & !reg_error;
  assign pad_gpio_b_38_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_38_cfg_puen_we = addr_hit[76] & reg_we & !reg_error;
  assign pad_gpio_b_38_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_38_cfg_slw_we = addr_hit[76] & reg_we & !reg_error;
  assign pad_gpio_b_38_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_38_cfg_smt_we = addr_hit[76] & reg_we & !reg_error;
  assign pad_gpio_b_38_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_38_mux_sel_we = addr_hit[77] & reg_we & !reg_error;
  assign pad_gpio_b_38_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_39_cfg_chip2pad_we = addr_hit[78] & reg_we & !reg_error;
  assign pad_gpio_b_39_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_39_cfg_drv_we = addr_hit[78] & reg_we & !reg_error;
  assign pad_gpio_b_39_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_39_cfg_oen_we = addr_hit[78] & reg_we & !reg_error;
  assign pad_gpio_b_39_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_39_cfg_puen_we = addr_hit[78] & reg_we & !reg_error;
  assign pad_gpio_b_39_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_39_cfg_slw_we = addr_hit[78] & reg_we & !reg_error;
  assign pad_gpio_b_39_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_39_cfg_smt_we = addr_hit[78] & reg_we & !reg_error;
  assign pad_gpio_b_39_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_39_mux_sel_we = addr_hit[79] & reg_we & !reg_error;
  assign pad_gpio_b_39_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_40_cfg_chip2pad_we = addr_hit[80] & reg_we & !reg_error;
  assign pad_gpio_b_40_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_40_cfg_drv_we = addr_hit[80] & reg_we & !reg_error;
  assign pad_gpio_b_40_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_40_cfg_oen_we = addr_hit[80] & reg_we & !reg_error;
  assign pad_gpio_b_40_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_40_cfg_puen_we = addr_hit[80] & reg_we & !reg_error;
  assign pad_gpio_b_40_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_40_cfg_slw_we = addr_hit[80] & reg_we & !reg_error;
  assign pad_gpio_b_40_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_40_cfg_smt_we = addr_hit[80] & reg_we & !reg_error;
  assign pad_gpio_b_40_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_40_mux_sel_we = addr_hit[81] & reg_we & !reg_error;
  assign pad_gpio_b_40_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_41_cfg_chip2pad_we = addr_hit[82] & reg_we & !reg_error;
  assign pad_gpio_b_41_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_41_cfg_drv_we = addr_hit[82] & reg_we & !reg_error;
  assign pad_gpio_b_41_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_41_cfg_oen_we = addr_hit[82] & reg_we & !reg_error;
  assign pad_gpio_b_41_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_41_cfg_puen_we = addr_hit[82] & reg_we & !reg_error;
  assign pad_gpio_b_41_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_41_cfg_slw_we = addr_hit[82] & reg_we & !reg_error;
  assign pad_gpio_b_41_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_41_cfg_smt_we = addr_hit[82] & reg_we & !reg_error;
  assign pad_gpio_b_41_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_41_mux_sel_we = addr_hit[83] & reg_we & !reg_error;
  assign pad_gpio_b_41_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_42_cfg_chip2pad_we = addr_hit[84] & reg_we & !reg_error;
  assign pad_gpio_b_42_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_42_cfg_drv_we = addr_hit[84] & reg_we & !reg_error;
  assign pad_gpio_b_42_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_42_cfg_oen_we = addr_hit[84] & reg_we & !reg_error;
  assign pad_gpio_b_42_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_42_cfg_puen_we = addr_hit[84] & reg_we & !reg_error;
  assign pad_gpio_b_42_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_42_cfg_slw_we = addr_hit[84] & reg_we & !reg_error;
  assign pad_gpio_b_42_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_42_cfg_smt_we = addr_hit[84] & reg_we & !reg_error;
  assign pad_gpio_b_42_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_42_mux_sel_we = addr_hit[85] & reg_we & !reg_error;
  assign pad_gpio_b_42_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_43_cfg_chip2pad_we = addr_hit[86] & reg_we & !reg_error;
  assign pad_gpio_b_43_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_43_cfg_drv_we = addr_hit[86] & reg_we & !reg_error;
  assign pad_gpio_b_43_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_43_cfg_oen_we = addr_hit[86] & reg_we & !reg_error;
  assign pad_gpio_b_43_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_43_cfg_puen_we = addr_hit[86] & reg_we & !reg_error;
  assign pad_gpio_b_43_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_43_cfg_slw_we = addr_hit[86] & reg_we & !reg_error;
  assign pad_gpio_b_43_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_43_cfg_smt_we = addr_hit[86] & reg_we & !reg_error;
  assign pad_gpio_b_43_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_43_mux_sel_we = addr_hit[87] & reg_we & !reg_error;
  assign pad_gpio_b_43_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_44_cfg_chip2pad_we = addr_hit[88] & reg_we & !reg_error;
  assign pad_gpio_b_44_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_44_cfg_drv_we = addr_hit[88] & reg_we & !reg_error;
  assign pad_gpio_b_44_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_44_cfg_oen_we = addr_hit[88] & reg_we & !reg_error;
  assign pad_gpio_b_44_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_44_cfg_puen_we = addr_hit[88] & reg_we & !reg_error;
  assign pad_gpio_b_44_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_44_cfg_slw_we = addr_hit[88] & reg_we & !reg_error;
  assign pad_gpio_b_44_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_44_cfg_smt_we = addr_hit[88] & reg_we & !reg_error;
  assign pad_gpio_b_44_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_44_mux_sel_we = addr_hit[89] & reg_we & !reg_error;
  assign pad_gpio_b_44_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_45_cfg_chip2pad_we = addr_hit[90] & reg_we & !reg_error;
  assign pad_gpio_b_45_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_45_cfg_drv_we = addr_hit[90] & reg_we & !reg_error;
  assign pad_gpio_b_45_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_45_cfg_oen_we = addr_hit[90] & reg_we & !reg_error;
  assign pad_gpio_b_45_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_45_cfg_puen_we = addr_hit[90] & reg_we & !reg_error;
  assign pad_gpio_b_45_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_45_cfg_slw_we = addr_hit[90] & reg_we & !reg_error;
  assign pad_gpio_b_45_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_45_cfg_smt_we = addr_hit[90] & reg_we & !reg_error;
  assign pad_gpio_b_45_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_45_mux_sel_we = addr_hit[91] & reg_we & !reg_error;
  assign pad_gpio_b_45_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_46_cfg_chip2pad_we = addr_hit[92] & reg_we & !reg_error;
  assign pad_gpio_b_46_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_46_cfg_drv_we = addr_hit[92] & reg_we & !reg_error;
  assign pad_gpio_b_46_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_46_cfg_oen_we = addr_hit[92] & reg_we & !reg_error;
  assign pad_gpio_b_46_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_46_cfg_puen_we = addr_hit[92] & reg_we & !reg_error;
  assign pad_gpio_b_46_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_46_cfg_slw_we = addr_hit[92] & reg_we & !reg_error;
  assign pad_gpio_b_46_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_46_cfg_smt_we = addr_hit[92] & reg_we & !reg_error;
  assign pad_gpio_b_46_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_46_mux_sel_we = addr_hit[93] & reg_we & !reg_error;
  assign pad_gpio_b_46_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_47_cfg_chip2pad_we = addr_hit[94] & reg_we & !reg_error;
  assign pad_gpio_b_47_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_47_cfg_drv_we = addr_hit[94] & reg_we & !reg_error;
  assign pad_gpio_b_47_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_47_cfg_oen_we = addr_hit[94] & reg_we & !reg_error;
  assign pad_gpio_b_47_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_47_cfg_puen_we = addr_hit[94] & reg_we & !reg_error;
  assign pad_gpio_b_47_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_47_cfg_slw_we = addr_hit[94] & reg_we & !reg_error;
  assign pad_gpio_b_47_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_47_cfg_smt_we = addr_hit[94] & reg_we & !reg_error;
  assign pad_gpio_b_47_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_47_mux_sel_we = addr_hit[95] & reg_we & !reg_error;
  assign pad_gpio_b_47_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_48_cfg_chip2pad_we = addr_hit[96] & reg_we & !reg_error;
  assign pad_gpio_b_48_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_48_cfg_drv_we = addr_hit[96] & reg_we & !reg_error;
  assign pad_gpio_b_48_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_48_cfg_oen_we = addr_hit[96] & reg_we & !reg_error;
  assign pad_gpio_b_48_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_48_cfg_puen_we = addr_hit[96] & reg_we & !reg_error;
  assign pad_gpio_b_48_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_48_cfg_slw_we = addr_hit[96] & reg_we & !reg_error;
  assign pad_gpio_b_48_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_48_cfg_smt_we = addr_hit[96] & reg_we & !reg_error;
  assign pad_gpio_b_48_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_48_mux_sel_we = addr_hit[97] & reg_we & !reg_error;
  assign pad_gpio_b_48_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_49_cfg_chip2pad_we = addr_hit[98] & reg_we & !reg_error;
  assign pad_gpio_b_49_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_49_cfg_drv_we = addr_hit[98] & reg_we & !reg_error;
  assign pad_gpio_b_49_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_49_cfg_oen_we = addr_hit[98] & reg_we & !reg_error;
  assign pad_gpio_b_49_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_49_cfg_puen_we = addr_hit[98] & reg_we & !reg_error;
  assign pad_gpio_b_49_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_49_cfg_slw_we = addr_hit[98] & reg_we & !reg_error;
  assign pad_gpio_b_49_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_49_cfg_smt_we = addr_hit[98] & reg_we & !reg_error;
  assign pad_gpio_b_49_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_49_mux_sel_we = addr_hit[99] & reg_we & !reg_error;
  assign pad_gpio_b_49_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_50_cfg_chip2pad_we = addr_hit[100] & reg_we & !reg_error;
  assign pad_gpio_b_50_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_50_cfg_drv_we = addr_hit[100] & reg_we & !reg_error;
  assign pad_gpio_b_50_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_50_cfg_oen_we = addr_hit[100] & reg_we & !reg_error;
  assign pad_gpio_b_50_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_50_cfg_puen_we = addr_hit[100] & reg_we & !reg_error;
  assign pad_gpio_b_50_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_50_cfg_slw_we = addr_hit[100] & reg_we & !reg_error;
  assign pad_gpio_b_50_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_50_cfg_smt_we = addr_hit[100] & reg_we & !reg_error;
  assign pad_gpio_b_50_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_50_mux_sel_we = addr_hit[101] & reg_we & !reg_error;
  assign pad_gpio_b_50_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_51_cfg_chip2pad_we = addr_hit[102] & reg_we & !reg_error;
  assign pad_gpio_b_51_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_51_cfg_drv_we = addr_hit[102] & reg_we & !reg_error;
  assign pad_gpio_b_51_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_51_cfg_oen_we = addr_hit[102] & reg_we & !reg_error;
  assign pad_gpio_b_51_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_51_cfg_puen_we = addr_hit[102] & reg_we & !reg_error;
  assign pad_gpio_b_51_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_51_cfg_slw_we = addr_hit[102] & reg_we & !reg_error;
  assign pad_gpio_b_51_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_51_cfg_smt_we = addr_hit[102] & reg_we & !reg_error;
  assign pad_gpio_b_51_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_51_mux_sel_we = addr_hit[103] & reg_we & !reg_error;
  assign pad_gpio_b_51_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_52_cfg_chip2pad_we = addr_hit[104] & reg_we & !reg_error;
  assign pad_gpio_b_52_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_52_cfg_drv_we = addr_hit[104] & reg_we & !reg_error;
  assign pad_gpio_b_52_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_52_cfg_oen_we = addr_hit[104] & reg_we & !reg_error;
  assign pad_gpio_b_52_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_52_cfg_puen_we = addr_hit[104] & reg_we & !reg_error;
  assign pad_gpio_b_52_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_52_cfg_slw_we = addr_hit[104] & reg_we & !reg_error;
  assign pad_gpio_b_52_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_52_cfg_smt_we = addr_hit[104] & reg_we & !reg_error;
  assign pad_gpio_b_52_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_52_mux_sel_we = addr_hit[105] & reg_we & !reg_error;
  assign pad_gpio_b_52_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_53_cfg_chip2pad_we = addr_hit[106] & reg_we & !reg_error;
  assign pad_gpio_b_53_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_53_cfg_drv_we = addr_hit[106] & reg_we & !reg_error;
  assign pad_gpio_b_53_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_53_cfg_oen_we = addr_hit[106] & reg_we & !reg_error;
  assign pad_gpio_b_53_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_53_cfg_puen_we = addr_hit[106] & reg_we & !reg_error;
  assign pad_gpio_b_53_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_53_cfg_slw_we = addr_hit[106] & reg_we & !reg_error;
  assign pad_gpio_b_53_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_53_cfg_smt_we = addr_hit[106] & reg_we & !reg_error;
  assign pad_gpio_b_53_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_53_mux_sel_we = addr_hit[107] & reg_we & !reg_error;
  assign pad_gpio_b_53_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_54_cfg_chip2pad_we = addr_hit[108] & reg_we & !reg_error;
  assign pad_gpio_b_54_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_54_cfg_drv_we = addr_hit[108] & reg_we & !reg_error;
  assign pad_gpio_b_54_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_54_cfg_oen_we = addr_hit[108] & reg_we & !reg_error;
  assign pad_gpio_b_54_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_54_cfg_puen_we = addr_hit[108] & reg_we & !reg_error;
  assign pad_gpio_b_54_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_54_cfg_slw_we = addr_hit[108] & reg_we & !reg_error;
  assign pad_gpio_b_54_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_54_cfg_smt_we = addr_hit[108] & reg_we & !reg_error;
  assign pad_gpio_b_54_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_54_mux_sel_we = addr_hit[109] & reg_we & !reg_error;
  assign pad_gpio_b_54_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_55_cfg_chip2pad_we = addr_hit[110] & reg_we & !reg_error;
  assign pad_gpio_b_55_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_55_cfg_drv_we = addr_hit[110] & reg_we & !reg_error;
  assign pad_gpio_b_55_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_55_cfg_oen_we = addr_hit[110] & reg_we & !reg_error;
  assign pad_gpio_b_55_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_55_cfg_puen_we = addr_hit[110] & reg_we & !reg_error;
  assign pad_gpio_b_55_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_55_cfg_slw_we = addr_hit[110] & reg_we & !reg_error;
  assign pad_gpio_b_55_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_55_cfg_smt_we = addr_hit[110] & reg_we & !reg_error;
  assign pad_gpio_b_55_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_55_mux_sel_we = addr_hit[111] & reg_we & !reg_error;
  assign pad_gpio_b_55_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_b_56_cfg_chip2pad_we = addr_hit[112] & reg_we & !reg_error;
  assign pad_gpio_b_56_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_56_cfg_drv_we = addr_hit[112] & reg_we & !reg_error;
  assign pad_gpio_b_56_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_56_cfg_oen_we = addr_hit[112] & reg_we & !reg_error;
  assign pad_gpio_b_56_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_56_cfg_puen_we = addr_hit[112] & reg_we & !reg_error;
  assign pad_gpio_b_56_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_56_cfg_slw_we = addr_hit[112] & reg_we & !reg_error;
  assign pad_gpio_b_56_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_56_cfg_smt_we = addr_hit[112] & reg_we & !reg_error;
  assign pad_gpio_b_56_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_56_mux_sel_we = addr_hit[113] & reg_we & !reg_error;
  assign pad_gpio_b_56_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_b_57_cfg_chip2pad_we = addr_hit[114] & reg_we & !reg_error;
  assign pad_gpio_b_57_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_b_57_cfg_drv_we = addr_hit[114] & reg_we & !reg_error;
  assign pad_gpio_b_57_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_b_57_cfg_oen_we = addr_hit[114] & reg_we & !reg_error;
  assign pad_gpio_b_57_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_b_57_cfg_puen_we = addr_hit[114] & reg_we & !reg_error;
  assign pad_gpio_b_57_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_b_57_cfg_slw_we = addr_hit[114] & reg_we & !reg_error;
  assign pad_gpio_b_57_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_b_57_cfg_smt_we = addr_hit[114] & reg_we & !reg_error;
  assign pad_gpio_b_57_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_b_57_mux_sel_we = addr_hit[115] & reg_we & !reg_error;
  assign pad_gpio_b_57_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_c_00_cfg_chip2pad_we = addr_hit[116] & reg_we & !reg_error;
  assign pad_gpio_c_00_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_c_00_cfg_drv_we = addr_hit[116] & reg_we & !reg_error;
  assign pad_gpio_c_00_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_c_00_cfg_oen_we = addr_hit[116] & reg_we & !reg_error;
  assign pad_gpio_c_00_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_c_00_cfg_puen_we = addr_hit[116] & reg_we & !reg_error;
  assign pad_gpio_c_00_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_c_00_cfg_slw_we = addr_hit[116] & reg_we & !reg_error;
  assign pad_gpio_c_00_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_c_00_cfg_smt_we = addr_hit[116] & reg_we & !reg_error;
  assign pad_gpio_c_00_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_c_00_mux_sel_we = addr_hit[117] & reg_we & !reg_error;
  assign pad_gpio_c_00_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_c_01_cfg_chip2pad_we = addr_hit[118] & reg_we & !reg_error;
  assign pad_gpio_c_01_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_c_01_cfg_drv_we = addr_hit[118] & reg_we & !reg_error;
  assign pad_gpio_c_01_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_c_01_cfg_oen_we = addr_hit[118] & reg_we & !reg_error;
  assign pad_gpio_c_01_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_c_01_cfg_puen_we = addr_hit[118] & reg_we & !reg_error;
  assign pad_gpio_c_01_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_c_01_cfg_slw_we = addr_hit[118] & reg_we & !reg_error;
  assign pad_gpio_c_01_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_c_01_cfg_smt_we = addr_hit[118] & reg_we & !reg_error;
  assign pad_gpio_c_01_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_c_01_mux_sel_we = addr_hit[119] & reg_we & !reg_error;
  assign pad_gpio_c_01_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_c_02_cfg_chip2pad_we = addr_hit[120] & reg_we & !reg_error;
  assign pad_gpio_c_02_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_c_02_cfg_drv_we = addr_hit[120] & reg_we & !reg_error;
  assign pad_gpio_c_02_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_c_02_cfg_oen_we = addr_hit[120] & reg_we & !reg_error;
  assign pad_gpio_c_02_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_c_02_cfg_puen_we = addr_hit[120] & reg_we & !reg_error;
  assign pad_gpio_c_02_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_c_02_cfg_slw_we = addr_hit[120] & reg_we & !reg_error;
  assign pad_gpio_c_02_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_c_02_cfg_smt_we = addr_hit[120] & reg_we & !reg_error;
  assign pad_gpio_c_02_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_c_02_mux_sel_we = addr_hit[121] & reg_we & !reg_error;
  assign pad_gpio_c_02_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_c_03_cfg_chip2pad_we = addr_hit[122] & reg_we & !reg_error;
  assign pad_gpio_c_03_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_c_03_cfg_drv_we = addr_hit[122] & reg_we & !reg_error;
  assign pad_gpio_c_03_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_c_03_cfg_oen_we = addr_hit[122] & reg_we & !reg_error;
  assign pad_gpio_c_03_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_c_03_cfg_puen_we = addr_hit[122] & reg_we & !reg_error;
  assign pad_gpio_c_03_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_c_03_cfg_slw_we = addr_hit[122] & reg_we & !reg_error;
  assign pad_gpio_c_03_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_c_03_cfg_smt_we = addr_hit[122] & reg_we & !reg_error;
  assign pad_gpio_c_03_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_c_03_mux_sel_we = addr_hit[123] & reg_we & !reg_error;
  assign pad_gpio_c_03_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_d_00_cfg_chip2pad_we = addr_hit[124] & reg_we & !reg_error;
  assign pad_gpio_d_00_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_00_cfg_drv_we = addr_hit[124] & reg_we & !reg_error;
  assign pad_gpio_d_00_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_00_cfg_oen_we = addr_hit[124] & reg_we & !reg_error;
  assign pad_gpio_d_00_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_00_cfg_puen_we = addr_hit[124] & reg_we & !reg_error;
  assign pad_gpio_d_00_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_00_cfg_slw_we = addr_hit[124] & reg_we & !reg_error;
  assign pad_gpio_d_00_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_00_cfg_smt_we = addr_hit[124] & reg_we & !reg_error;
  assign pad_gpio_d_00_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_00_mux_sel_we = addr_hit[125] & reg_we & !reg_error;
  assign pad_gpio_d_00_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_d_01_cfg_chip2pad_we = addr_hit[126] & reg_we & !reg_error;
  assign pad_gpio_d_01_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_01_cfg_drv_we = addr_hit[126] & reg_we & !reg_error;
  assign pad_gpio_d_01_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_01_cfg_oen_we = addr_hit[126] & reg_we & !reg_error;
  assign pad_gpio_d_01_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_01_cfg_puen_we = addr_hit[126] & reg_we & !reg_error;
  assign pad_gpio_d_01_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_01_cfg_slw_we = addr_hit[126] & reg_we & !reg_error;
  assign pad_gpio_d_01_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_01_cfg_smt_we = addr_hit[126] & reg_we & !reg_error;
  assign pad_gpio_d_01_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_01_mux_sel_we = addr_hit[127] & reg_we & !reg_error;
  assign pad_gpio_d_01_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_d_02_cfg_chip2pad_we = addr_hit[128] & reg_we & !reg_error;
  assign pad_gpio_d_02_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_02_cfg_drv_we = addr_hit[128] & reg_we & !reg_error;
  assign pad_gpio_d_02_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_02_cfg_oen_we = addr_hit[128] & reg_we & !reg_error;
  assign pad_gpio_d_02_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_02_cfg_puen_we = addr_hit[128] & reg_we & !reg_error;
  assign pad_gpio_d_02_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_02_cfg_slw_we = addr_hit[128] & reg_we & !reg_error;
  assign pad_gpio_d_02_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_02_cfg_smt_we = addr_hit[128] & reg_we & !reg_error;
  assign pad_gpio_d_02_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_02_mux_sel_we = addr_hit[129] & reg_we & !reg_error;
  assign pad_gpio_d_02_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_d_03_cfg_chip2pad_we = addr_hit[130] & reg_we & !reg_error;
  assign pad_gpio_d_03_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_03_cfg_drv_we = addr_hit[130] & reg_we & !reg_error;
  assign pad_gpio_d_03_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_03_cfg_oen_we = addr_hit[130] & reg_we & !reg_error;
  assign pad_gpio_d_03_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_03_cfg_puen_we = addr_hit[130] & reg_we & !reg_error;
  assign pad_gpio_d_03_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_03_cfg_slw_we = addr_hit[130] & reg_we & !reg_error;
  assign pad_gpio_d_03_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_03_cfg_smt_we = addr_hit[130] & reg_we & !reg_error;
  assign pad_gpio_d_03_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_03_mux_sel_we = addr_hit[131] & reg_we & !reg_error;
  assign pad_gpio_d_03_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_d_04_cfg_chip2pad_we = addr_hit[132] & reg_we & !reg_error;
  assign pad_gpio_d_04_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_04_cfg_drv_we = addr_hit[132] & reg_we & !reg_error;
  assign pad_gpio_d_04_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_04_cfg_oen_we = addr_hit[132] & reg_we & !reg_error;
  assign pad_gpio_d_04_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_04_cfg_puen_we = addr_hit[132] & reg_we & !reg_error;
  assign pad_gpio_d_04_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_04_cfg_slw_we = addr_hit[132] & reg_we & !reg_error;
  assign pad_gpio_d_04_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_04_cfg_smt_we = addr_hit[132] & reg_we & !reg_error;
  assign pad_gpio_d_04_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_04_mux_sel_we = addr_hit[133] & reg_we & !reg_error;
  assign pad_gpio_d_04_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_d_05_cfg_chip2pad_we = addr_hit[134] & reg_we & !reg_error;
  assign pad_gpio_d_05_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_05_cfg_drv_we = addr_hit[134] & reg_we & !reg_error;
  assign pad_gpio_d_05_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_05_cfg_oen_we = addr_hit[134] & reg_we & !reg_error;
  assign pad_gpio_d_05_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_05_cfg_puen_we = addr_hit[134] & reg_we & !reg_error;
  assign pad_gpio_d_05_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_05_cfg_slw_we = addr_hit[134] & reg_we & !reg_error;
  assign pad_gpio_d_05_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_05_cfg_smt_we = addr_hit[134] & reg_we & !reg_error;
  assign pad_gpio_d_05_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_05_mux_sel_we = addr_hit[135] & reg_we & !reg_error;
  assign pad_gpio_d_05_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_d_06_cfg_chip2pad_we = addr_hit[136] & reg_we & !reg_error;
  assign pad_gpio_d_06_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_06_cfg_drv_we = addr_hit[136] & reg_we & !reg_error;
  assign pad_gpio_d_06_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_06_cfg_oen_we = addr_hit[136] & reg_we & !reg_error;
  assign pad_gpio_d_06_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_06_cfg_puen_we = addr_hit[136] & reg_we & !reg_error;
  assign pad_gpio_d_06_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_06_cfg_slw_we = addr_hit[136] & reg_we & !reg_error;
  assign pad_gpio_d_06_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_06_cfg_smt_we = addr_hit[136] & reg_we & !reg_error;
  assign pad_gpio_d_06_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_06_mux_sel_we = addr_hit[137] & reg_we & !reg_error;
  assign pad_gpio_d_06_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_d_07_cfg_chip2pad_we = addr_hit[138] & reg_we & !reg_error;
  assign pad_gpio_d_07_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_07_cfg_drv_we = addr_hit[138] & reg_we & !reg_error;
  assign pad_gpio_d_07_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_07_cfg_oen_we = addr_hit[138] & reg_we & !reg_error;
  assign pad_gpio_d_07_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_07_cfg_puen_we = addr_hit[138] & reg_we & !reg_error;
  assign pad_gpio_d_07_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_07_cfg_slw_we = addr_hit[138] & reg_we & !reg_error;
  assign pad_gpio_d_07_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_07_cfg_smt_we = addr_hit[138] & reg_we & !reg_error;
  assign pad_gpio_d_07_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_07_mux_sel_we = addr_hit[139] & reg_we & !reg_error;
  assign pad_gpio_d_07_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_d_08_cfg_chip2pad_we = addr_hit[140] & reg_we & !reg_error;
  assign pad_gpio_d_08_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_08_cfg_drv_we = addr_hit[140] & reg_we & !reg_error;
  assign pad_gpio_d_08_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_08_cfg_oen_we = addr_hit[140] & reg_we & !reg_error;
  assign pad_gpio_d_08_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_08_cfg_puen_we = addr_hit[140] & reg_we & !reg_error;
  assign pad_gpio_d_08_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_08_cfg_slw_we = addr_hit[140] & reg_we & !reg_error;
  assign pad_gpio_d_08_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_08_cfg_smt_we = addr_hit[140] & reg_we & !reg_error;
  assign pad_gpio_d_08_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_08_mux_sel_we = addr_hit[141] & reg_we & !reg_error;
  assign pad_gpio_d_08_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_d_09_cfg_chip2pad_we = addr_hit[142] & reg_we & !reg_error;
  assign pad_gpio_d_09_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_09_cfg_drv_we = addr_hit[142] & reg_we & !reg_error;
  assign pad_gpio_d_09_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_09_cfg_oen_we = addr_hit[142] & reg_we & !reg_error;
  assign pad_gpio_d_09_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_09_cfg_puen_we = addr_hit[142] & reg_we & !reg_error;
  assign pad_gpio_d_09_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_09_cfg_slw_we = addr_hit[142] & reg_we & !reg_error;
  assign pad_gpio_d_09_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_09_cfg_smt_we = addr_hit[142] & reg_we & !reg_error;
  assign pad_gpio_d_09_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_09_mux_sel_we = addr_hit[143] & reg_we & !reg_error;
  assign pad_gpio_d_09_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_d_10_cfg_chip2pad_we = addr_hit[144] & reg_we & !reg_error;
  assign pad_gpio_d_10_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_d_10_cfg_drv_we = addr_hit[144] & reg_we & !reg_error;
  assign pad_gpio_d_10_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_d_10_cfg_oen_we = addr_hit[144] & reg_we & !reg_error;
  assign pad_gpio_d_10_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_d_10_cfg_puen_we = addr_hit[144] & reg_we & !reg_error;
  assign pad_gpio_d_10_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_d_10_cfg_slw_we = addr_hit[144] & reg_we & !reg_error;
  assign pad_gpio_d_10_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_d_10_cfg_smt_we = addr_hit[144] & reg_we & !reg_error;
  assign pad_gpio_d_10_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_d_10_mux_sel_we = addr_hit[145] & reg_we & !reg_error;
  assign pad_gpio_d_10_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_e_00_cfg_chip2pad_we = addr_hit[146] & reg_we & !reg_error;
  assign pad_gpio_e_00_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_00_cfg_drv_we = addr_hit[146] & reg_we & !reg_error;
  assign pad_gpio_e_00_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_00_cfg_oen_we = addr_hit[146] & reg_we & !reg_error;
  assign pad_gpio_e_00_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_00_cfg_puen_we = addr_hit[146] & reg_we & !reg_error;
  assign pad_gpio_e_00_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_00_cfg_slw_we = addr_hit[146] & reg_we & !reg_error;
  assign pad_gpio_e_00_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_00_cfg_smt_we = addr_hit[146] & reg_we & !reg_error;
  assign pad_gpio_e_00_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_00_mux_sel_we = addr_hit[147] & reg_we & !reg_error;
  assign pad_gpio_e_00_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_e_01_cfg_chip2pad_we = addr_hit[148] & reg_we & !reg_error;
  assign pad_gpio_e_01_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_01_cfg_drv_we = addr_hit[148] & reg_we & !reg_error;
  assign pad_gpio_e_01_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_01_cfg_oen_we = addr_hit[148] & reg_we & !reg_error;
  assign pad_gpio_e_01_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_01_cfg_puen_we = addr_hit[148] & reg_we & !reg_error;
  assign pad_gpio_e_01_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_01_cfg_slw_we = addr_hit[148] & reg_we & !reg_error;
  assign pad_gpio_e_01_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_01_cfg_smt_we = addr_hit[148] & reg_we & !reg_error;
  assign pad_gpio_e_01_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_01_mux_sel_we = addr_hit[149] & reg_we & !reg_error;
  assign pad_gpio_e_01_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_e_02_cfg_chip2pad_we = addr_hit[150] & reg_we & !reg_error;
  assign pad_gpio_e_02_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_02_cfg_drv_we = addr_hit[150] & reg_we & !reg_error;
  assign pad_gpio_e_02_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_02_cfg_oen_we = addr_hit[150] & reg_we & !reg_error;
  assign pad_gpio_e_02_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_02_cfg_puen_we = addr_hit[150] & reg_we & !reg_error;
  assign pad_gpio_e_02_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_02_cfg_slw_we = addr_hit[150] & reg_we & !reg_error;
  assign pad_gpio_e_02_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_02_cfg_smt_we = addr_hit[150] & reg_we & !reg_error;
  assign pad_gpio_e_02_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_02_mux_sel_we = addr_hit[151] & reg_we & !reg_error;
  assign pad_gpio_e_02_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_e_03_cfg_chip2pad_we = addr_hit[152] & reg_we & !reg_error;
  assign pad_gpio_e_03_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_03_cfg_drv_we = addr_hit[152] & reg_we & !reg_error;
  assign pad_gpio_e_03_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_03_cfg_oen_we = addr_hit[152] & reg_we & !reg_error;
  assign pad_gpio_e_03_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_03_cfg_puen_we = addr_hit[152] & reg_we & !reg_error;
  assign pad_gpio_e_03_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_03_cfg_slw_we = addr_hit[152] & reg_we & !reg_error;
  assign pad_gpio_e_03_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_03_cfg_smt_we = addr_hit[152] & reg_we & !reg_error;
  assign pad_gpio_e_03_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_03_mux_sel_we = addr_hit[153] & reg_we & !reg_error;
  assign pad_gpio_e_03_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_e_04_cfg_chip2pad_we = addr_hit[154] & reg_we & !reg_error;
  assign pad_gpio_e_04_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_04_cfg_drv_we = addr_hit[154] & reg_we & !reg_error;
  assign pad_gpio_e_04_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_04_cfg_oen_we = addr_hit[154] & reg_we & !reg_error;
  assign pad_gpio_e_04_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_04_cfg_puen_we = addr_hit[154] & reg_we & !reg_error;
  assign pad_gpio_e_04_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_04_cfg_slw_we = addr_hit[154] & reg_we & !reg_error;
  assign pad_gpio_e_04_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_04_cfg_smt_we = addr_hit[154] & reg_we & !reg_error;
  assign pad_gpio_e_04_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_04_mux_sel_we = addr_hit[155] & reg_we & !reg_error;
  assign pad_gpio_e_04_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_e_05_cfg_chip2pad_we = addr_hit[156] & reg_we & !reg_error;
  assign pad_gpio_e_05_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_05_cfg_drv_we = addr_hit[156] & reg_we & !reg_error;
  assign pad_gpio_e_05_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_05_cfg_oen_we = addr_hit[156] & reg_we & !reg_error;
  assign pad_gpio_e_05_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_05_cfg_puen_we = addr_hit[156] & reg_we & !reg_error;
  assign pad_gpio_e_05_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_05_cfg_slw_we = addr_hit[156] & reg_we & !reg_error;
  assign pad_gpio_e_05_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_05_cfg_smt_we = addr_hit[156] & reg_we & !reg_error;
  assign pad_gpio_e_05_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_05_mux_sel_we = addr_hit[157] & reg_we & !reg_error;
  assign pad_gpio_e_05_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_e_06_cfg_chip2pad_we = addr_hit[158] & reg_we & !reg_error;
  assign pad_gpio_e_06_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_06_cfg_drv_we = addr_hit[158] & reg_we & !reg_error;
  assign pad_gpio_e_06_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_06_cfg_oen_we = addr_hit[158] & reg_we & !reg_error;
  assign pad_gpio_e_06_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_06_cfg_puen_we = addr_hit[158] & reg_we & !reg_error;
  assign pad_gpio_e_06_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_06_cfg_slw_we = addr_hit[158] & reg_we & !reg_error;
  assign pad_gpio_e_06_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_06_cfg_smt_we = addr_hit[158] & reg_we & !reg_error;
  assign pad_gpio_e_06_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_06_mux_sel_we = addr_hit[159] & reg_we & !reg_error;
  assign pad_gpio_e_06_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_e_07_cfg_chip2pad_we = addr_hit[160] & reg_we & !reg_error;
  assign pad_gpio_e_07_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_07_cfg_drv_we = addr_hit[160] & reg_we & !reg_error;
  assign pad_gpio_e_07_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_07_cfg_oen_we = addr_hit[160] & reg_we & !reg_error;
  assign pad_gpio_e_07_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_07_cfg_puen_we = addr_hit[160] & reg_we & !reg_error;
  assign pad_gpio_e_07_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_07_cfg_slw_we = addr_hit[160] & reg_we & !reg_error;
  assign pad_gpio_e_07_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_07_cfg_smt_we = addr_hit[160] & reg_we & !reg_error;
  assign pad_gpio_e_07_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_07_mux_sel_we = addr_hit[161] & reg_we & !reg_error;
  assign pad_gpio_e_07_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_e_08_cfg_chip2pad_we = addr_hit[162] & reg_we & !reg_error;
  assign pad_gpio_e_08_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_08_cfg_drv_we = addr_hit[162] & reg_we & !reg_error;
  assign pad_gpio_e_08_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_08_cfg_oen_we = addr_hit[162] & reg_we & !reg_error;
  assign pad_gpio_e_08_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_08_cfg_puen_we = addr_hit[162] & reg_we & !reg_error;
  assign pad_gpio_e_08_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_08_cfg_slw_we = addr_hit[162] & reg_we & !reg_error;
  assign pad_gpio_e_08_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_08_cfg_smt_we = addr_hit[162] & reg_we & !reg_error;
  assign pad_gpio_e_08_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_08_mux_sel_we = addr_hit[163] & reg_we & !reg_error;
  assign pad_gpio_e_08_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_e_09_cfg_chip2pad_we = addr_hit[164] & reg_we & !reg_error;
  assign pad_gpio_e_09_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_09_cfg_drv_we = addr_hit[164] & reg_we & !reg_error;
  assign pad_gpio_e_09_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_09_cfg_oen_we = addr_hit[164] & reg_we & !reg_error;
  assign pad_gpio_e_09_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_09_cfg_puen_we = addr_hit[164] & reg_we & !reg_error;
  assign pad_gpio_e_09_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_09_cfg_slw_we = addr_hit[164] & reg_we & !reg_error;
  assign pad_gpio_e_09_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_09_cfg_smt_we = addr_hit[164] & reg_we & !reg_error;
  assign pad_gpio_e_09_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_09_mux_sel_we = addr_hit[165] & reg_we & !reg_error;
  assign pad_gpio_e_09_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_e_10_cfg_chip2pad_we = addr_hit[166] & reg_we & !reg_error;
  assign pad_gpio_e_10_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_10_cfg_drv_we = addr_hit[166] & reg_we & !reg_error;
  assign pad_gpio_e_10_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_10_cfg_oen_we = addr_hit[166] & reg_we & !reg_error;
  assign pad_gpio_e_10_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_10_cfg_puen_we = addr_hit[166] & reg_we & !reg_error;
  assign pad_gpio_e_10_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_10_cfg_slw_we = addr_hit[166] & reg_we & !reg_error;
  assign pad_gpio_e_10_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_10_cfg_smt_we = addr_hit[166] & reg_we & !reg_error;
  assign pad_gpio_e_10_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_10_mux_sel_we = addr_hit[167] & reg_we & !reg_error;
  assign pad_gpio_e_10_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_e_11_cfg_chip2pad_we = addr_hit[168] & reg_we & !reg_error;
  assign pad_gpio_e_11_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_11_cfg_drv_we = addr_hit[168] & reg_we & !reg_error;
  assign pad_gpio_e_11_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_11_cfg_oen_we = addr_hit[168] & reg_we & !reg_error;
  assign pad_gpio_e_11_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_11_cfg_puen_we = addr_hit[168] & reg_we & !reg_error;
  assign pad_gpio_e_11_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_11_cfg_slw_we = addr_hit[168] & reg_we & !reg_error;
  assign pad_gpio_e_11_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_11_cfg_smt_we = addr_hit[168] & reg_we & !reg_error;
  assign pad_gpio_e_11_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_11_mux_sel_we = addr_hit[169] & reg_we & !reg_error;
  assign pad_gpio_e_11_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_e_12_cfg_chip2pad_we = addr_hit[170] & reg_we & !reg_error;
  assign pad_gpio_e_12_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_e_12_cfg_drv_we = addr_hit[170] & reg_we & !reg_error;
  assign pad_gpio_e_12_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_e_12_cfg_oen_we = addr_hit[170] & reg_we & !reg_error;
  assign pad_gpio_e_12_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_e_12_cfg_puen_we = addr_hit[170] & reg_we & !reg_error;
  assign pad_gpio_e_12_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_e_12_cfg_slw_we = addr_hit[170] & reg_we & !reg_error;
  assign pad_gpio_e_12_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_e_12_cfg_smt_we = addr_hit[170] & reg_we & !reg_error;
  assign pad_gpio_e_12_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_e_12_mux_sel_we = addr_hit[171] & reg_we & !reg_error;
  assign pad_gpio_e_12_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_00_cfg_chip2pad_we = addr_hit[172] & reg_we & !reg_error;
  assign pad_gpio_f_00_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_00_cfg_drv_we = addr_hit[172] & reg_we & !reg_error;
  assign pad_gpio_f_00_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_00_cfg_oen_we = addr_hit[172] & reg_we & !reg_error;
  assign pad_gpio_f_00_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_00_cfg_puen_we = addr_hit[172] & reg_we & !reg_error;
  assign pad_gpio_f_00_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_00_cfg_slw_we = addr_hit[172] & reg_we & !reg_error;
  assign pad_gpio_f_00_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_00_cfg_smt_we = addr_hit[172] & reg_we & !reg_error;
  assign pad_gpio_f_00_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_00_mux_sel_we = addr_hit[173] & reg_we & !reg_error;
  assign pad_gpio_f_00_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_01_cfg_chip2pad_we = addr_hit[174] & reg_we & !reg_error;
  assign pad_gpio_f_01_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_01_cfg_drv_we = addr_hit[174] & reg_we & !reg_error;
  assign pad_gpio_f_01_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_01_cfg_oen_we = addr_hit[174] & reg_we & !reg_error;
  assign pad_gpio_f_01_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_01_cfg_puen_we = addr_hit[174] & reg_we & !reg_error;
  assign pad_gpio_f_01_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_01_cfg_slw_we = addr_hit[174] & reg_we & !reg_error;
  assign pad_gpio_f_01_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_01_cfg_smt_we = addr_hit[174] & reg_we & !reg_error;
  assign pad_gpio_f_01_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_01_mux_sel_we = addr_hit[175] & reg_we & !reg_error;
  assign pad_gpio_f_01_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_f_02_cfg_chip2pad_we = addr_hit[176] & reg_we & !reg_error;
  assign pad_gpio_f_02_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_02_cfg_drv_we = addr_hit[176] & reg_we & !reg_error;
  assign pad_gpio_f_02_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_02_cfg_oen_we = addr_hit[176] & reg_we & !reg_error;
  assign pad_gpio_f_02_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_02_cfg_puen_we = addr_hit[176] & reg_we & !reg_error;
  assign pad_gpio_f_02_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_02_cfg_slw_we = addr_hit[176] & reg_we & !reg_error;
  assign pad_gpio_f_02_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_02_cfg_smt_we = addr_hit[176] & reg_we & !reg_error;
  assign pad_gpio_f_02_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_02_mux_sel_we = addr_hit[177] & reg_we & !reg_error;
  assign pad_gpio_f_02_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_f_03_cfg_chip2pad_we = addr_hit[178] & reg_we & !reg_error;
  assign pad_gpio_f_03_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_03_cfg_drv_we = addr_hit[178] & reg_we & !reg_error;
  assign pad_gpio_f_03_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_03_cfg_oen_we = addr_hit[178] & reg_we & !reg_error;
  assign pad_gpio_f_03_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_03_cfg_puen_we = addr_hit[178] & reg_we & !reg_error;
  assign pad_gpio_f_03_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_03_cfg_slw_we = addr_hit[178] & reg_we & !reg_error;
  assign pad_gpio_f_03_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_03_cfg_smt_we = addr_hit[178] & reg_we & !reg_error;
  assign pad_gpio_f_03_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_03_mux_sel_we = addr_hit[179] & reg_we & !reg_error;
  assign pad_gpio_f_03_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_f_04_cfg_chip2pad_we = addr_hit[180] & reg_we & !reg_error;
  assign pad_gpio_f_04_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_04_cfg_drv_we = addr_hit[180] & reg_we & !reg_error;
  assign pad_gpio_f_04_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_04_cfg_oen_we = addr_hit[180] & reg_we & !reg_error;
  assign pad_gpio_f_04_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_04_cfg_puen_we = addr_hit[180] & reg_we & !reg_error;
  assign pad_gpio_f_04_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_04_cfg_slw_we = addr_hit[180] & reg_we & !reg_error;
  assign pad_gpio_f_04_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_04_cfg_smt_we = addr_hit[180] & reg_we & !reg_error;
  assign pad_gpio_f_04_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_04_mux_sel_we = addr_hit[181] & reg_we & !reg_error;
  assign pad_gpio_f_04_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_f_05_cfg_chip2pad_we = addr_hit[182] & reg_we & !reg_error;
  assign pad_gpio_f_05_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_05_cfg_drv_we = addr_hit[182] & reg_we & !reg_error;
  assign pad_gpio_f_05_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_05_cfg_oen_we = addr_hit[182] & reg_we & !reg_error;
  assign pad_gpio_f_05_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_05_cfg_puen_we = addr_hit[182] & reg_we & !reg_error;
  assign pad_gpio_f_05_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_05_cfg_slw_we = addr_hit[182] & reg_we & !reg_error;
  assign pad_gpio_f_05_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_05_cfg_smt_we = addr_hit[182] & reg_we & !reg_error;
  assign pad_gpio_f_05_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_05_mux_sel_we = addr_hit[183] & reg_we & !reg_error;
  assign pad_gpio_f_05_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_f_06_cfg_chip2pad_we = addr_hit[184] & reg_we & !reg_error;
  assign pad_gpio_f_06_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_06_cfg_drv_we = addr_hit[184] & reg_we & !reg_error;
  assign pad_gpio_f_06_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_06_cfg_oen_we = addr_hit[184] & reg_we & !reg_error;
  assign pad_gpio_f_06_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_06_cfg_puen_we = addr_hit[184] & reg_we & !reg_error;
  assign pad_gpio_f_06_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_06_cfg_slw_we = addr_hit[184] & reg_we & !reg_error;
  assign pad_gpio_f_06_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_06_cfg_smt_we = addr_hit[184] & reg_we & !reg_error;
  assign pad_gpio_f_06_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_06_mux_sel_we = addr_hit[185] & reg_we & !reg_error;
  assign pad_gpio_f_06_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_f_07_cfg_chip2pad_we = addr_hit[186] & reg_we & !reg_error;
  assign pad_gpio_f_07_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_07_cfg_drv_we = addr_hit[186] & reg_we & !reg_error;
  assign pad_gpio_f_07_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_07_cfg_oen_we = addr_hit[186] & reg_we & !reg_error;
  assign pad_gpio_f_07_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_07_cfg_puen_we = addr_hit[186] & reg_we & !reg_error;
  assign pad_gpio_f_07_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_07_cfg_slw_we = addr_hit[186] & reg_we & !reg_error;
  assign pad_gpio_f_07_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_07_cfg_smt_we = addr_hit[186] & reg_we & !reg_error;
  assign pad_gpio_f_07_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_07_mux_sel_we = addr_hit[187] & reg_we & !reg_error;
  assign pad_gpio_f_07_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_f_08_cfg_chip2pad_we = addr_hit[188] & reg_we & !reg_error;
  assign pad_gpio_f_08_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_08_cfg_drv_we = addr_hit[188] & reg_we & !reg_error;
  assign pad_gpio_f_08_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_08_cfg_oen_we = addr_hit[188] & reg_we & !reg_error;
  assign pad_gpio_f_08_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_08_cfg_puen_we = addr_hit[188] & reg_we & !reg_error;
  assign pad_gpio_f_08_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_08_cfg_slw_we = addr_hit[188] & reg_we & !reg_error;
  assign pad_gpio_f_08_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_08_cfg_smt_we = addr_hit[188] & reg_we & !reg_error;
  assign pad_gpio_f_08_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_08_mux_sel_we = addr_hit[189] & reg_we & !reg_error;
  assign pad_gpio_f_08_mux_sel_wd = reg_wdata[1:0];

  assign pad_gpio_f_09_cfg_chip2pad_we = addr_hit[190] & reg_we & !reg_error;
  assign pad_gpio_f_09_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_09_cfg_drv_we = addr_hit[190] & reg_we & !reg_error;
  assign pad_gpio_f_09_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_09_cfg_oen_we = addr_hit[190] & reg_we & !reg_error;
  assign pad_gpio_f_09_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_09_cfg_puen_we = addr_hit[190] & reg_we & !reg_error;
  assign pad_gpio_f_09_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_09_cfg_slw_we = addr_hit[190] & reg_we & !reg_error;
  assign pad_gpio_f_09_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_09_cfg_smt_we = addr_hit[190] & reg_we & !reg_error;
  assign pad_gpio_f_09_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_09_mux_sel_we = addr_hit[191] & reg_we & !reg_error;
  assign pad_gpio_f_09_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_10_cfg_chip2pad_we = addr_hit[192] & reg_we & !reg_error;
  assign pad_gpio_f_10_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_10_cfg_drv_we = addr_hit[192] & reg_we & !reg_error;
  assign pad_gpio_f_10_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_10_cfg_oen_we = addr_hit[192] & reg_we & !reg_error;
  assign pad_gpio_f_10_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_10_cfg_puen_we = addr_hit[192] & reg_we & !reg_error;
  assign pad_gpio_f_10_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_10_cfg_slw_we = addr_hit[192] & reg_we & !reg_error;
  assign pad_gpio_f_10_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_10_cfg_smt_we = addr_hit[192] & reg_we & !reg_error;
  assign pad_gpio_f_10_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_10_mux_sel_we = addr_hit[193] & reg_we & !reg_error;
  assign pad_gpio_f_10_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_11_cfg_chip2pad_we = addr_hit[194] & reg_we & !reg_error;
  assign pad_gpio_f_11_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_11_cfg_drv_we = addr_hit[194] & reg_we & !reg_error;
  assign pad_gpio_f_11_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_11_cfg_oen_we = addr_hit[194] & reg_we & !reg_error;
  assign pad_gpio_f_11_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_11_cfg_puen_we = addr_hit[194] & reg_we & !reg_error;
  assign pad_gpio_f_11_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_11_cfg_slw_we = addr_hit[194] & reg_we & !reg_error;
  assign pad_gpio_f_11_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_11_cfg_smt_we = addr_hit[194] & reg_we & !reg_error;
  assign pad_gpio_f_11_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_11_mux_sel_we = addr_hit[195] & reg_we & !reg_error;
  assign pad_gpio_f_11_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_12_cfg_chip2pad_we = addr_hit[196] & reg_we & !reg_error;
  assign pad_gpio_f_12_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_12_cfg_drv_we = addr_hit[196] & reg_we & !reg_error;
  assign pad_gpio_f_12_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_12_cfg_oen_we = addr_hit[196] & reg_we & !reg_error;
  assign pad_gpio_f_12_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_12_cfg_puen_we = addr_hit[196] & reg_we & !reg_error;
  assign pad_gpio_f_12_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_12_cfg_slw_we = addr_hit[196] & reg_we & !reg_error;
  assign pad_gpio_f_12_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_12_cfg_smt_we = addr_hit[196] & reg_we & !reg_error;
  assign pad_gpio_f_12_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_12_mux_sel_we = addr_hit[197] & reg_we & !reg_error;
  assign pad_gpio_f_12_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_13_cfg_chip2pad_we = addr_hit[198] & reg_we & !reg_error;
  assign pad_gpio_f_13_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_13_cfg_drv_we = addr_hit[198] & reg_we & !reg_error;
  assign pad_gpio_f_13_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_13_cfg_oen_we = addr_hit[198] & reg_we & !reg_error;
  assign pad_gpio_f_13_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_13_cfg_puen_we = addr_hit[198] & reg_we & !reg_error;
  assign pad_gpio_f_13_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_13_cfg_slw_we = addr_hit[198] & reg_we & !reg_error;
  assign pad_gpio_f_13_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_13_cfg_smt_we = addr_hit[198] & reg_we & !reg_error;
  assign pad_gpio_f_13_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_13_mux_sel_we = addr_hit[199] & reg_we & !reg_error;
  assign pad_gpio_f_13_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_14_cfg_chip2pad_we = addr_hit[200] & reg_we & !reg_error;
  assign pad_gpio_f_14_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_14_cfg_drv_we = addr_hit[200] & reg_we & !reg_error;
  assign pad_gpio_f_14_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_14_cfg_oen_we = addr_hit[200] & reg_we & !reg_error;
  assign pad_gpio_f_14_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_14_cfg_puen_we = addr_hit[200] & reg_we & !reg_error;
  assign pad_gpio_f_14_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_14_cfg_slw_we = addr_hit[200] & reg_we & !reg_error;
  assign pad_gpio_f_14_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_14_cfg_smt_we = addr_hit[200] & reg_we & !reg_error;
  assign pad_gpio_f_14_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_14_mux_sel_we = addr_hit[201] & reg_we & !reg_error;
  assign pad_gpio_f_14_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_15_cfg_chip2pad_we = addr_hit[202] & reg_we & !reg_error;
  assign pad_gpio_f_15_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_15_cfg_drv_we = addr_hit[202] & reg_we & !reg_error;
  assign pad_gpio_f_15_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_15_cfg_oen_we = addr_hit[202] & reg_we & !reg_error;
  assign pad_gpio_f_15_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_15_cfg_puen_we = addr_hit[202] & reg_we & !reg_error;
  assign pad_gpio_f_15_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_15_cfg_slw_we = addr_hit[202] & reg_we & !reg_error;
  assign pad_gpio_f_15_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_15_cfg_smt_we = addr_hit[202] & reg_we & !reg_error;
  assign pad_gpio_f_15_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_15_mux_sel_we = addr_hit[203] & reg_we & !reg_error;
  assign pad_gpio_f_15_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_16_cfg_chip2pad_we = addr_hit[204] & reg_we & !reg_error;
  assign pad_gpio_f_16_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_16_cfg_drv_we = addr_hit[204] & reg_we & !reg_error;
  assign pad_gpio_f_16_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_16_cfg_oen_we = addr_hit[204] & reg_we & !reg_error;
  assign pad_gpio_f_16_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_16_cfg_puen_we = addr_hit[204] & reg_we & !reg_error;
  assign pad_gpio_f_16_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_16_cfg_slw_we = addr_hit[204] & reg_we & !reg_error;
  assign pad_gpio_f_16_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_16_cfg_smt_we = addr_hit[204] & reg_we & !reg_error;
  assign pad_gpio_f_16_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_16_mux_sel_we = addr_hit[205] & reg_we & !reg_error;
  assign pad_gpio_f_16_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_17_cfg_chip2pad_we = addr_hit[206] & reg_we & !reg_error;
  assign pad_gpio_f_17_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_17_cfg_drv_we = addr_hit[206] & reg_we & !reg_error;
  assign pad_gpio_f_17_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_17_cfg_oen_we = addr_hit[206] & reg_we & !reg_error;
  assign pad_gpio_f_17_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_17_cfg_puen_we = addr_hit[206] & reg_we & !reg_error;
  assign pad_gpio_f_17_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_17_cfg_slw_we = addr_hit[206] & reg_we & !reg_error;
  assign pad_gpio_f_17_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_17_cfg_smt_we = addr_hit[206] & reg_we & !reg_error;
  assign pad_gpio_f_17_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_17_mux_sel_we = addr_hit[207] & reg_we & !reg_error;
  assign pad_gpio_f_17_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_18_cfg_chip2pad_we = addr_hit[208] & reg_we & !reg_error;
  assign pad_gpio_f_18_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_18_cfg_drv_we = addr_hit[208] & reg_we & !reg_error;
  assign pad_gpio_f_18_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_18_cfg_oen_we = addr_hit[208] & reg_we & !reg_error;
  assign pad_gpio_f_18_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_18_cfg_puen_we = addr_hit[208] & reg_we & !reg_error;
  assign pad_gpio_f_18_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_18_cfg_slw_we = addr_hit[208] & reg_we & !reg_error;
  assign pad_gpio_f_18_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_18_cfg_smt_we = addr_hit[208] & reg_we & !reg_error;
  assign pad_gpio_f_18_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_18_mux_sel_we = addr_hit[209] & reg_we & !reg_error;
  assign pad_gpio_f_18_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_19_cfg_chip2pad_we = addr_hit[210] & reg_we & !reg_error;
  assign pad_gpio_f_19_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_19_cfg_drv_we = addr_hit[210] & reg_we & !reg_error;
  assign pad_gpio_f_19_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_19_cfg_oen_we = addr_hit[210] & reg_we & !reg_error;
  assign pad_gpio_f_19_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_19_cfg_puen_we = addr_hit[210] & reg_we & !reg_error;
  assign pad_gpio_f_19_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_19_cfg_slw_we = addr_hit[210] & reg_we & !reg_error;
  assign pad_gpio_f_19_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_19_cfg_smt_we = addr_hit[210] & reg_we & !reg_error;
  assign pad_gpio_f_19_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_19_mux_sel_we = addr_hit[211] & reg_we & !reg_error;
  assign pad_gpio_f_19_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_20_cfg_chip2pad_we = addr_hit[212] & reg_we & !reg_error;
  assign pad_gpio_f_20_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_20_cfg_drv_we = addr_hit[212] & reg_we & !reg_error;
  assign pad_gpio_f_20_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_20_cfg_oen_we = addr_hit[212] & reg_we & !reg_error;
  assign pad_gpio_f_20_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_20_cfg_puen_we = addr_hit[212] & reg_we & !reg_error;
  assign pad_gpio_f_20_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_20_cfg_slw_we = addr_hit[212] & reg_we & !reg_error;
  assign pad_gpio_f_20_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_20_cfg_smt_we = addr_hit[212] & reg_we & !reg_error;
  assign pad_gpio_f_20_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_20_mux_sel_we = addr_hit[213] & reg_we & !reg_error;
  assign pad_gpio_f_20_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_21_cfg_chip2pad_we = addr_hit[214] & reg_we & !reg_error;
  assign pad_gpio_f_21_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_21_cfg_drv_we = addr_hit[214] & reg_we & !reg_error;
  assign pad_gpio_f_21_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_21_cfg_oen_we = addr_hit[214] & reg_we & !reg_error;
  assign pad_gpio_f_21_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_21_cfg_puen_we = addr_hit[214] & reg_we & !reg_error;
  assign pad_gpio_f_21_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_21_cfg_slw_we = addr_hit[214] & reg_we & !reg_error;
  assign pad_gpio_f_21_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_21_cfg_smt_we = addr_hit[214] & reg_we & !reg_error;
  assign pad_gpio_f_21_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_21_mux_sel_we = addr_hit[215] & reg_we & !reg_error;
  assign pad_gpio_f_21_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_22_cfg_chip2pad_we = addr_hit[216] & reg_we & !reg_error;
  assign pad_gpio_f_22_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_22_cfg_drv_we = addr_hit[216] & reg_we & !reg_error;
  assign pad_gpio_f_22_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_22_cfg_oen_we = addr_hit[216] & reg_we & !reg_error;
  assign pad_gpio_f_22_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_22_cfg_puen_we = addr_hit[216] & reg_we & !reg_error;
  assign pad_gpio_f_22_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_22_cfg_slw_we = addr_hit[216] & reg_we & !reg_error;
  assign pad_gpio_f_22_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_22_cfg_smt_we = addr_hit[216] & reg_we & !reg_error;
  assign pad_gpio_f_22_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_22_mux_sel_we = addr_hit[217] & reg_we & !reg_error;
  assign pad_gpio_f_22_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_23_cfg_chip2pad_we = addr_hit[218] & reg_we & !reg_error;
  assign pad_gpio_f_23_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_23_cfg_drv_we = addr_hit[218] & reg_we & !reg_error;
  assign pad_gpio_f_23_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_23_cfg_oen_we = addr_hit[218] & reg_we & !reg_error;
  assign pad_gpio_f_23_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_23_cfg_puen_we = addr_hit[218] & reg_we & !reg_error;
  assign pad_gpio_f_23_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_23_cfg_slw_we = addr_hit[218] & reg_we & !reg_error;
  assign pad_gpio_f_23_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_23_cfg_smt_we = addr_hit[218] & reg_we & !reg_error;
  assign pad_gpio_f_23_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_23_mux_sel_we = addr_hit[219] & reg_we & !reg_error;
  assign pad_gpio_f_23_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_24_cfg_chip2pad_we = addr_hit[220] & reg_we & !reg_error;
  assign pad_gpio_f_24_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_24_cfg_drv_we = addr_hit[220] & reg_we & !reg_error;
  assign pad_gpio_f_24_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_24_cfg_oen_we = addr_hit[220] & reg_we & !reg_error;
  assign pad_gpio_f_24_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_24_cfg_puen_we = addr_hit[220] & reg_we & !reg_error;
  assign pad_gpio_f_24_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_24_cfg_slw_we = addr_hit[220] & reg_we & !reg_error;
  assign pad_gpio_f_24_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_24_cfg_smt_we = addr_hit[220] & reg_we & !reg_error;
  assign pad_gpio_f_24_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_24_mux_sel_we = addr_hit[221] & reg_we & !reg_error;
  assign pad_gpio_f_24_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_f_25_cfg_chip2pad_we = addr_hit[222] & reg_we & !reg_error;
  assign pad_gpio_f_25_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_f_25_cfg_drv_we = addr_hit[222] & reg_we & !reg_error;
  assign pad_gpio_f_25_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_f_25_cfg_oen_we = addr_hit[222] & reg_we & !reg_error;
  assign pad_gpio_f_25_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_f_25_cfg_puen_we = addr_hit[222] & reg_we & !reg_error;
  assign pad_gpio_f_25_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_f_25_cfg_slw_we = addr_hit[222] & reg_we & !reg_error;
  assign pad_gpio_f_25_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_f_25_cfg_smt_we = addr_hit[222] & reg_we & !reg_error;
  assign pad_gpio_f_25_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_f_25_mux_sel_we = addr_hit[223] & reg_we & !reg_error;
  assign pad_gpio_f_25_mux_sel_wd = reg_wdata[0];

  assign pad_gpio_pwm0_cfg_chip2pad_we = addr_hit[224] & reg_we & !reg_error;
  assign pad_gpio_pwm0_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_pwm0_cfg_drv_we = addr_hit[224] & reg_we & !reg_error;
  assign pad_gpio_pwm0_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_pwm0_cfg_oen_we = addr_hit[224] & reg_we & !reg_error;
  assign pad_gpio_pwm0_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_pwm0_cfg_puen_we = addr_hit[224] & reg_we & !reg_error;
  assign pad_gpio_pwm0_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_pwm0_cfg_slw_we = addr_hit[224] & reg_we & !reg_error;
  assign pad_gpio_pwm0_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_pwm0_cfg_smt_we = addr_hit[224] & reg_we & !reg_error;
  assign pad_gpio_pwm0_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_pwm0_mux_sel_we = addr_hit[225] & reg_we & !reg_error;
  assign pad_gpio_pwm0_mux_sel_wd = reg_wdata[3:0];

  assign pad_gpio_pwm1_cfg_chip2pad_we = addr_hit[226] & reg_we & !reg_error;
  assign pad_gpio_pwm1_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_pwm1_cfg_drv_we = addr_hit[226] & reg_we & !reg_error;
  assign pad_gpio_pwm1_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_pwm1_cfg_oen_we = addr_hit[226] & reg_we & !reg_error;
  assign pad_gpio_pwm1_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_pwm1_cfg_puen_we = addr_hit[226] & reg_we & !reg_error;
  assign pad_gpio_pwm1_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_pwm1_cfg_slw_we = addr_hit[226] & reg_we & !reg_error;
  assign pad_gpio_pwm1_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_pwm1_cfg_smt_we = addr_hit[226] & reg_we & !reg_error;
  assign pad_gpio_pwm1_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_pwm1_mux_sel_we = addr_hit[227] & reg_we & !reg_error;
  assign pad_gpio_pwm1_mux_sel_wd = reg_wdata[3:0];

  assign pad_gpio_pwm2_cfg_chip2pad_we = addr_hit[228] & reg_we & !reg_error;
  assign pad_gpio_pwm2_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_pwm2_cfg_drv_we = addr_hit[228] & reg_we & !reg_error;
  assign pad_gpio_pwm2_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_pwm2_cfg_oen_we = addr_hit[228] & reg_we & !reg_error;
  assign pad_gpio_pwm2_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_pwm2_cfg_puen_we = addr_hit[228] & reg_we & !reg_error;
  assign pad_gpio_pwm2_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_pwm2_cfg_slw_we = addr_hit[228] & reg_we & !reg_error;
  assign pad_gpio_pwm2_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_pwm2_cfg_smt_we = addr_hit[228] & reg_we & !reg_error;
  assign pad_gpio_pwm2_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_pwm2_mux_sel_we = addr_hit[229] & reg_we & !reg_error;
  assign pad_gpio_pwm2_mux_sel_wd = reg_wdata[3:0];

  assign pad_gpio_pwm3_cfg_chip2pad_we = addr_hit[230] & reg_we & !reg_error;
  assign pad_gpio_pwm3_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_pwm3_cfg_drv_we = addr_hit[230] & reg_we & !reg_error;
  assign pad_gpio_pwm3_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_pwm3_cfg_oen_we = addr_hit[230] & reg_we & !reg_error;
  assign pad_gpio_pwm3_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_pwm3_cfg_puen_we = addr_hit[230] & reg_we & !reg_error;
  assign pad_gpio_pwm3_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_pwm3_cfg_slw_we = addr_hit[230] & reg_we & !reg_error;
  assign pad_gpio_pwm3_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_pwm3_cfg_smt_we = addr_hit[230] & reg_we & !reg_error;
  assign pad_gpio_pwm3_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_pwm3_mux_sel_we = addr_hit[231] & reg_we & !reg_error;
  assign pad_gpio_pwm3_mux_sel_wd = reg_wdata[3:0];

  assign pad_gpio_pwm4_cfg_chip2pad_we = addr_hit[232] & reg_we & !reg_error;
  assign pad_gpio_pwm4_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_pwm4_cfg_drv_we = addr_hit[232] & reg_we & !reg_error;
  assign pad_gpio_pwm4_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_pwm4_cfg_oen_we = addr_hit[232] & reg_we & !reg_error;
  assign pad_gpio_pwm4_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_pwm4_cfg_puen_we = addr_hit[232] & reg_we & !reg_error;
  assign pad_gpio_pwm4_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_pwm4_cfg_slw_we = addr_hit[232] & reg_we & !reg_error;
  assign pad_gpio_pwm4_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_pwm4_cfg_smt_we = addr_hit[232] & reg_we & !reg_error;
  assign pad_gpio_pwm4_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_pwm4_mux_sel_we = addr_hit[233] & reg_we & !reg_error;
  assign pad_gpio_pwm4_mux_sel_wd = reg_wdata[3:0];

  assign pad_gpio_pwm5_cfg_chip2pad_we = addr_hit[234] & reg_we & !reg_error;
  assign pad_gpio_pwm5_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_pwm5_cfg_drv_we = addr_hit[234] & reg_we & !reg_error;
  assign pad_gpio_pwm5_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_pwm5_cfg_oen_we = addr_hit[234] & reg_we & !reg_error;
  assign pad_gpio_pwm5_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_pwm5_cfg_puen_we = addr_hit[234] & reg_we & !reg_error;
  assign pad_gpio_pwm5_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_pwm5_cfg_slw_we = addr_hit[234] & reg_we & !reg_error;
  assign pad_gpio_pwm5_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_pwm5_cfg_smt_we = addr_hit[234] & reg_we & !reg_error;
  assign pad_gpio_pwm5_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_pwm5_mux_sel_we = addr_hit[235] & reg_we & !reg_error;
  assign pad_gpio_pwm5_mux_sel_wd = reg_wdata[3:0];

  assign pad_gpio_pwm6_cfg_chip2pad_we = addr_hit[236] & reg_we & !reg_error;
  assign pad_gpio_pwm6_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_pwm6_cfg_drv_we = addr_hit[236] & reg_we & !reg_error;
  assign pad_gpio_pwm6_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_pwm6_cfg_oen_we = addr_hit[236] & reg_we & !reg_error;
  assign pad_gpio_pwm6_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_pwm6_cfg_puen_we = addr_hit[236] & reg_we & !reg_error;
  assign pad_gpio_pwm6_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_pwm6_cfg_slw_we = addr_hit[236] & reg_we & !reg_error;
  assign pad_gpio_pwm6_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_pwm6_cfg_smt_we = addr_hit[236] & reg_we & !reg_error;
  assign pad_gpio_pwm6_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_pwm6_mux_sel_we = addr_hit[237] & reg_we & !reg_error;
  assign pad_gpio_pwm6_mux_sel_wd = reg_wdata[3:0];

  assign pad_gpio_pwm7_cfg_chip2pad_we = addr_hit[238] & reg_we & !reg_error;
  assign pad_gpio_pwm7_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_gpio_pwm7_cfg_drv_we = addr_hit[238] & reg_we & !reg_error;
  assign pad_gpio_pwm7_cfg_drv_wd = reg_wdata[2:1];

  assign pad_gpio_pwm7_cfg_oen_we = addr_hit[238] & reg_we & !reg_error;
  assign pad_gpio_pwm7_cfg_oen_wd = reg_wdata[3];

  assign pad_gpio_pwm7_cfg_puen_we = addr_hit[238] & reg_we & !reg_error;
  assign pad_gpio_pwm7_cfg_puen_wd = reg_wdata[4];

  assign pad_gpio_pwm7_cfg_slw_we = addr_hit[238] & reg_we & !reg_error;
  assign pad_gpio_pwm7_cfg_slw_wd = reg_wdata[5];

  assign pad_gpio_pwm7_cfg_smt_we = addr_hit[238] & reg_we & !reg_error;
  assign pad_gpio_pwm7_cfg_smt_wd = reg_wdata[6];

  assign pad_gpio_pwm7_mux_sel_we = addr_hit[239] & reg_we & !reg_error;
  assign pad_gpio_pwm7_mux_sel_wd = reg_wdata[3:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = pad_gpio_b_00_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_00_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_00_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_00_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_00_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_00_cfg_smt_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[1:0] = pad_gpio_b_00_mux_sel_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = pad_gpio_b_01_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_01_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_01_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_01_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_01_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_01_cfg_smt_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[1:0] = pad_gpio_b_01_mux_sel_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = pad_gpio_b_02_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_02_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_02_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_02_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_02_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_02_cfg_smt_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[1:0] = pad_gpio_b_02_mux_sel_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = pad_gpio_b_03_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_03_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_03_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_03_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_03_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_03_cfg_smt_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[1:0] = pad_gpio_b_03_mux_sel_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = pad_gpio_b_04_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_04_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_04_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_04_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_04_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_04_cfg_smt_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[1:0] = pad_gpio_b_04_mux_sel_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = pad_gpio_b_05_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_05_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_05_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_05_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_05_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_05_cfg_smt_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[1:0] = pad_gpio_b_05_mux_sel_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = pad_gpio_b_06_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_06_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_06_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_06_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_06_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_06_cfg_smt_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[1:0] = pad_gpio_b_06_mux_sel_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = pad_gpio_b_07_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_07_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_07_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_07_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_07_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_07_cfg_smt_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[1:0] = pad_gpio_b_07_mux_sel_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = pad_gpio_b_08_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_08_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_08_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_08_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_08_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_08_cfg_smt_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[1:0] = pad_gpio_b_08_mux_sel_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = pad_gpio_b_09_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_09_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_09_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_09_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_09_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_09_cfg_smt_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[1:0] = pad_gpio_b_09_mux_sel_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = pad_gpio_b_10_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_10_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_10_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_10_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_10_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_10_cfg_smt_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[1:0] = pad_gpio_b_10_mux_sel_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = pad_gpio_b_11_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_11_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_11_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_11_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_11_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_11_cfg_smt_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[1:0] = pad_gpio_b_11_mux_sel_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = pad_gpio_b_12_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_12_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_12_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_12_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_12_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_12_cfg_smt_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[1:0] = pad_gpio_b_12_mux_sel_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = pad_gpio_b_13_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_13_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_13_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_13_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_13_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_13_cfg_smt_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[1:0] = pad_gpio_b_13_mux_sel_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = pad_gpio_b_14_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_14_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_14_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_14_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_14_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_14_cfg_smt_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[1:0] = pad_gpio_b_14_mux_sel_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = pad_gpio_b_15_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_15_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_15_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_15_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_15_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_15_cfg_smt_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[1:0] = pad_gpio_b_15_mux_sel_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = pad_gpio_b_16_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_16_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_16_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_16_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_16_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_16_cfg_smt_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[1:0] = pad_gpio_b_16_mux_sel_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = pad_gpio_b_17_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_17_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_17_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_17_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_17_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_17_cfg_smt_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[1:0] = pad_gpio_b_17_mux_sel_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = pad_gpio_b_18_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_18_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_18_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_18_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_18_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_18_cfg_smt_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[1:0] = pad_gpio_b_18_mux_sel_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = pad_gpio_b_19_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_19_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_19_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_19_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_19_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_19_cfg_smt_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[1:0] = pad_gpio_b_19_mux_sel_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0] = pad_gpio_b_20_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_20_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_20_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_20_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_20_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_20_cfg_smt_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[1:0] = pad_gpio_b_20_mux_sel_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = pad_gpio_b_21_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_21_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_21_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_21_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_21_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_21_cfg_smt_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[1:0] = pad_gpio_b_21_mux_sel_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = pad_gpio_b_22_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_22_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_22_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_22_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_22_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_22_cfg_smt_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[1:0] = pad_gpio_b_22_mux_sel_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = pad_gpio_b_23_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_23_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_23_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_23_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_23_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_23_cfg_smt_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[1:0] = pad_gpio_b_23_mux_sel_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = pad_gpio_b_24_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_24_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_24_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_24_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_24_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_24_cfg_smt_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[1:0] = pad_gpio_b_24_mux_sel_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = pad_gpio_b_25_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_25_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_25_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_25_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_25_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_25_cfg_smt_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[1:0] = pad_gpio_b_25_mux_sel_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[0] = pad_gpio_b_26_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_26_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_26_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_26_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_26_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_26_cfg_smt_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[1:0] = pad_gpio_b_26_mux_sel_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = pad_gpio_b_27_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_27_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_27_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_27_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_27_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_27_cfg_smt_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[1:0] = pad_gpio_b_27_mux_sel_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = pad_gpio_b_28_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_28_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_28_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_28_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_28_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_28_cfg_smt_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[1:0] = pad_gpio_b_28_mux_sel_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = pad_gpio_b_29_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_29_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_29_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_29_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_29_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_29_cfg_smt_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[1:0] = pad_gpio_b_29_mux_sel_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[0] = pad_gpio_b_30_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_30_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_30_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_30_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_30_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_30_cfg_smt_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[1:0] = pad_gpio_b_30_mux_sel_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[0] = pad_gpio_b_31_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_31_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_31_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_31_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_31_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_31_cfg_smt_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[1:0] = pad_gpio_b_31_mux_sel_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[0] = pad_gpio_b_32_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_32_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_32_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_32_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_32_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_32_cfg_smt_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[1:0] = pad_gpio_b_32_mux_sel_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[0] = pad_gpio_b_33_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_33_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_33_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_33_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_33_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_33_cfg_smt_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[1:0] = pad_gpio_b_33_mux_sel_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[0] = pad_gpio_b_34_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_34_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_34_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_34_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_34_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_34_cfg_smt_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[1:0] = pad_gpio_b_34_mux_sel_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[0] = pad_gpio_b_35_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_35_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_35_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_35_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_35_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_35_cfg_smt_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[1:0] = pad_gpio_b_35_mux_sel_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[0] = pad_gpio_b_36_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_36_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_36_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_36_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_36_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_36_cfg_smt_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[1:0] = pad_gpio_b_36_mux_sel_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[0] = pad_gpio_b_37_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_37_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_37_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_37_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_37_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_37_cfg_smt_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[1:0] = pad_gpio_b_37_mux_sel_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[0] = pad_gpio_b_38_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_38_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_38_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_38_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_38_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_38_cfg_smt_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[1:0] = pad_gpio_b_38_mux_sel_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[0] = pad_gpio_b_39_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_39_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_39_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_39_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_39_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_39_cfg_smt_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[1:0] = pad_gpio_b_39_mux_sel_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[0] = pad_gpio_b_40_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_40_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_40_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_40_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_40_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_40_cfg_smt_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[1:0] = pad_gpio_b_40_mux_sel_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[0] = pad_gpio_b_41_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_41_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_41_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_41_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_41_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_41_cfg_smt_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[1:0] = pad_gpio_b_41_mux_sel_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = pad_gpio_b_42_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_42_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_42_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_42_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_42_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_42_cfg_smt_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[1:0] = pad_gpio_b_42_mux_sel_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[0] = pad_gpio_b_43_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_43_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_43_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_43_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_43_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_43_cfg_smt_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[1:0] = pad_gpio_b_43_mux_sel_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[0] = pad_gpio_b_44_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_44_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_44_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_44_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_44_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_44_cfg_smt_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[1:0] = pad_gpio_b_44_mux_sel_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = pad_gpio_b_45_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_45_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_45_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_45_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_45_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_45_cfg_smt_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[1:0] = pad_gpio_b_45_mux_sel_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = pad_gpio_b_46_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_46_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_46_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_46_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_46_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_46_cfg_smt_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[1:0] = pad_gpio_b_46_mux_sel_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[0] = pad_gpio_b_47_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_47_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_47_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_47_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_47_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_47_cfg_smt_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[1:0] = pad_gpio_b_47_mux_sel_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[0] = pad_gpio_b_48_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_48_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_48_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_48_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_48_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_48_cfg_smt_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[1:0] = pad_gpio_b_48_mux_sel_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[0] = pad_gpio_b_49_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_49_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_49_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_49_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_49_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_49_cfg_smt_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[1:0] = pad_gpio_b_49_mux_sel_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[0] = pad_gpio_b_50_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_50_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_50_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_50_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_50_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_50_cfg_smt_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[1:0] = pad_gpio_b_50_mux_sel_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[0] = pad_gpio_b_51_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_51_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_51_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_51_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_51_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_51_cfg_smt_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[1:0] = pad_gpio_b_51_mux_sel_qs;
      end

      addr_hit[104]: begin
        reg_rdata_next[0] = pad_gpio_b_52_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_52_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_52_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_52_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_52_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_52_cfg_smt_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[1:0] = pad_gpio_b_52_mux_sel_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[0] = pad_gpio_b_53_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_53_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_53_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_53_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_53_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_53_cfg_smt_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[1:0] = pad_gpio_b_53_mux_sel_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[0] = pad_gpio_b_54_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_54_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_54_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_54_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_54_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_54_cfg_smt_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[1:0] = pad_gpio_b_54_mux_sel_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[0] = pad_gpio_b_55_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_55_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_55_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_55_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_55_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_55_cfg_smt_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[1:0] = pad_gpio_b_55_mux_sel_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[0] = pad_gpio_b_56_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_56_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_56_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_56_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_56_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_56_cfg_smt_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[0] = pad_gpio_b_56_mux_sel_qs;
      end

      addr_hit[114]: begin
        reg_rdata_next[0] = pad_gpio_b_57_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_b_57_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_b_57_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_b_57_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_b_57_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_b_57_cfg_smt_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[0] = pad_gpio_b_57_mux_sel_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[0] = pad_gpio_c_00_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_c_00_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_c_00_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_c_00_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_c_00_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_c_00_cfg_smt_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[1:0] = pad_gpio_c_00_mux_sel_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[0] = pad_gpio_c_01_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_c_01_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_c_01_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_c_01_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_c_01_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_c_01_cfg_smt_qs;
      end

      addr_hit[119]: begin
        reg_rdata_next[1:0] = pad_gpio_c_01_mux_sel_qs;
      end

      addr_hit[120]: begin
        reg_rdata_next[0] = pad_gpio_c_02_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_c_02_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_c_02_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_c_02_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_c_02_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_c_02_cfg_smt_qs;
      end

      addr_hit[121]: begin
        reg_rdata_next[1:0] = pad_gpio_c_02_mux_sel_qs;
      end

      addr_hit[122]: begin
        reg_rdata_next[0] = pad_gpio_c_03_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_c_03_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_c_03_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_c_03_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_c_03_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_c_03_cfg_smt_qs;
      end

      addr_hit[123]: begin
        reg_rdata_next[1:0] = pad_gpio_c_03_mux_sel_qs;
      end

      addr_hit[124]: begin
        reg_rdata_next[0] = pad_gpio_d_00_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_00_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_00_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_00_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_00_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_00_cfg_smt_qs;
      end

      addr_hit[125]: begin
        reg_rdata_next[1:0] = pad_gpio_d_00_mux_sel_qs;
      end

      addr_hit[126]: begin
        reg_rdata_next[0] = pad_gpio_d_01_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_01_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_01_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_01_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_01_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_01_cfg_smt_qs;
      end

      addr_hit[127]: begin
        reg_rdata_next[1:0] = pad_gpio_d_01_mux_sel_qs;
      end

      addr_hit[128]: begin
        reg_rdata_next[0] = pad_gpio_d_02_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_02_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_02_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_02_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_02_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_02_cfg_smt_qs;
      end

      addr_hit[129]: begin
        reg_rdata_next[1:0] = pad_gpio_d_02_mux_sel_qs;
      end

      addr_hit[130]: begin
        reg_rdata_next[0] = pad_gpio_d_03_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_03_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_03_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_03_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_03_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_03_cfg_smt_qs;
      end

      addr_hit[131]: begin
        reg_rdata_next[1:0] = pad_gpio_d_03_mux_sel_qs;
      end

      addr_hit[132]: begin
        reg_rdata_next[0] = pad_gpio_d_04_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_04_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_04_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_04_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_04_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_04_cfg_smt_qs;
      end

      addr_hit[133]: begin
        reg_rdata_next[1:0] = pad_gpio_d_04_mux_sel_qs;
      end

      addr_hit[134]: begin
        reg_rdata_next[0] = pad_gpio_d_05_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_05_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_05_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_05_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_05_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_05_cfg_smt_qs;
      end

      addr_hit[135]: begin
        reg_rdata_next[1:0] = pad_gpio_d_05_mux_sel_qs;
      end

      addr_hit[136]: begin
        reg_rdata_next[0] = pad_gpio_d_06_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_06_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_06_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_06_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_06_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_06_cfg_smt_qs;
      end

      addr_hit[137]: begin
        reg_rdata_next[1:0] = pad_gpio_d_06_mux_sel_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[0] = pad_gpio_d_07_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_07_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_07_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_07_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_07_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_07_cfg_smt_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[1:0] = pad_gpio_d_07_mux_sel_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[0] = pad_gpio_d_08_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_08_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_08_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_08_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_08_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_08_cfg_smt_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[0] = pad_gpio_d_08_mux_sel_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[0] = pad_gpio_d_09_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_09_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_09_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_09_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_09_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_09_cfg_smt_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[0] = pad_gpio_d_09_mux_sel_qs;
      end

      addr_hit[144]: begin
        reg_rdata_next[0] = pad_gpio_d_10_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_d_10_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_d_10_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_d_10_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_d_10_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_d_10_cfg_smt_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[0] = pad_gpio_d_10_mux_sel_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[0] = pad_gpio_e_00_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_00_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_00_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_00_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_00_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_00_cfg_smt_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[1:0] = pad_gpio_e_00_mux_sel_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[0] = pad_gpio_e_01_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_01_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_01_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_01_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_01_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_01_cfg_smt_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[1:0] = pad_gpio_e_01_mux_sel_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[0] = pad_gpio_e_02_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_02_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_02_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_02_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_02_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_02_cfg_smt_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[1:0] = pad_gpio_e_02_mux_sel_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[0] = pad_gpio_e_03_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_03_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_03_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_03_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_03_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_03_cfg_smt_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[1:0] = pad_gpio_e_03_mux_sel_qs;
      end

      addr_hit[154]: begin
        reg_rdata_next[0] = pad_gpio_e_04_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_04_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_04_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_04_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_04_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_04_cfg_smt_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[0] = pad_gpio_e_04_mux_sel_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[0] = pad_gpio_e_05_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_05_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_05_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_05_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_05_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_05_cfg_smt_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[0] = pad_gpio_e_05_mux_sel_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[0] = pad_gpio_e_06_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_06_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_06_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_06_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_06_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_06_cfg_smt_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[0] = pad_gpio_e_06_mux_sel_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[0] = pad_gpio_e_07_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_07_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_07_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_07_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_07_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_07_cfg_smt_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[0] = pad_gpio_e_07_mux_sel_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[0] = pad_gpio_e_08_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_08_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_08_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_08_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_08_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_08_cfg_smt_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[1:0] = pad_gpio_e_08_mux_sel_qs;
      end

      addr_hit[164]: begin
        reg_rdata_next[0] = pad_gpio_e_09_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_09_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_09_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_09_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_09_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_09_cfg_smt_qs;
      end

      addr_hit[165]: begin
        reg_rdata_next[1:0] = pad_gpio_e_09_mux_sel_qs;
      end

      addr_hit[166]: begin
        reg_rdata_next[0] = pad_gpio_e_10_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_10_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_10_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_10_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_10_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_10_cfg_smt_qs;
      end

      addr_hit[167]: begin
        reg_rdata_next[1:0] = pad_gpio_e_10_mux_sel_qs;
      end

      addr_hit[168]: begin
        reg_rdata_next[0] = pad_gpio_e_11_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_11_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_11_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_11_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_11_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_11_cfg_smt_qs;
      end

      addr_hit[169]: begin
        reg_rdata_next[0] = pad_gpio_e_11_mux_sel_qs;
      end

      addr_hit[170]: begin
        reg_rdata_next[0] = pad_gpio_e_12_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_e_12_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_e_12_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_e_12_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_e_12_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_e_12_cfg_smt_qs;
      end

      addr_hit[171]: begin
        reg_rdata_next[0] = pad_gpio_e_12_mux_sel_qs;
      end

      addr_hit[172]: begin
        reg_rdata_next[0] = pad_gpio_f_00_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_00_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_00_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_00_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_00_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_00_cfg_smt_qs;
      end

      addr_hit[173]: begin
        reg_rdata_next[0] = pad_gpio_f_00_mux_sel_qs;
      end

      addr_hit[174]: begin
        reg_rdata_next[0] = pad_gpio_f_01_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_01_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_01_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_01_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_01_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_01_cfg_smt_qs;
      end

      addr_hit[175]: begin
        reg_rdata_next[1:0] = pad_gpio_f_01_mux_sel_qs;
      end

      addr_hit[176]: begin
        reg_rdata_next[0] = pad_gpio_f_02_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_02_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_02_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_02_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_02_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_02_cfg_smt_qs;
      end

      addr_hit[177]: begin
        reg_rdata_next[1:0] = pad_gpio_f_02_mux_sel_qs;
      end

      addr_hit[178]: begin
        reg_rdata_next[0] = pad_gpio_f_03_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_03_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_03_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_03_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_03_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_03_cfg_smt_qs;
      end

      addr_hit[179]: begin
        reg_rdata_next[1:0] = pad_gpio_f_03_mux_sel_qs;
      end

      addr_hit[180]: begin
        reg_rdata_next[0] = pad_gpio_f_04_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_04_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_04_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_04_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_04_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_04_cfg_smt_qs;
      end

      addr_hit[181]: begin
        reg_rdata_next[1:0] = pad_gpio_f_04_mux_sel_qs;
      end

      addr_hit[182]: begin
        reg_rdata_next[0] = pad_gpio_f_05_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_05_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_05_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_05_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_05_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_05_cfg_smt_qs;
      end

      addr_hit[183]: begin
        reg_rdata_next[1:0] = pad_gpio_f_05_mux_sel_qs;
      end

      addr_hit[184]: begin
        reg_rdata_next[0] = pad_gpio_f_06_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_06_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_06_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_06_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_06_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_06_cfg_smt_qs;
      end

      addr_hit[185]: begin
        reg_rdata_next[1:0] = pad_gpio_f_06_mux_sel_qs;
      end

      addr_hit[186]: begin
        reg_rdata_next[0] = pad_gpio_f_07_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_07_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_07_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_07_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_07_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_07_cfg_smt_qs;
      end

      addr_hit[187]: begin
        reg_rdata_next[1:0] = pad_gpio_f_07_mux_sel_qs;
      end

      addr_hit[188]: begin
        reg_rdata_next[0] = pad_gpio_f_08_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_08_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_08_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_08_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_08_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_08_cfg_smt_qs;
      end

      addr_hit[189]: begin
        reg_rdata_next[1:0] = pad_gpio_f_08_mux_sel_qs;
      end

      addr_hit[190]: begin
        reg_rdata_next[0] = pad_gpio_f_09_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_09_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_09_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_09_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_09_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_09_cfg_smt_qs;
      end

      addr_hit[191]: begin
        reg_rdata_next[0] = pad_gpio_f_09_mux_sel_qs;
      end

      addr_hit[192]: begin
        reg_rdata_next[0] = pad_gpio_f_10_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_10_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_10_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_10_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_10_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_10_cfg_smt_qs;
      end

      addr_hit[193]: begin
        reg_rdata_next[0] = pad_gpio_f_10_mux_sel_qs;
      end

      addr_hit[194]: begin
        reg_rdata_next[0] = pad_gpio_f_11_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_11_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_11_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_11_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_11_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_11_cfg_smt_qs;
      end

      addr_hit[195]: begin
        reg_rdata_next[0] = pad_gpio_f_11_mux_sel_qs;
      end

      addr_hit[196]: begin
        reg_rdata_next[0] = pad_gpio_f_12_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_12_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_12_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_12_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_12_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_12_cfg_smt_qs;
      end

      addr_hit[197]: begin
        reg_rdata_next[0] = pad_gpio_f_12_mux_sel_qs;
      end

      addr_hit[198]: begin
        reg_rdata_next[0] = pad_gpio_f_13_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_13_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_13_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_13_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_13_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_13_cfg_smt_qs;
      end

      addr_hit[199]: begin
        reg_rdata_next[0] = pad_gpio_f_13_mux_sel_qs;
      end

      addr_hit[200]: begin
        reg_rdata_next[0] = pad_gpio_f_14_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_14_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_14_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_14_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_14_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_14_cfg_smt_qs;
      end

      addr_hit[201]: begin
        reg_rdata_next[0] = pad_gpio_f_14_mux_sel_qs;
      end

      addr_hit[202]: begin
        reg_rdata_next[0] = pad_gpio_f_15_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_15_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_15_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_15_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_15_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_15_cfg_smt_qs;
      end

      addr_hit[203]: begin
        reg_rdata_next[0] = pad_gpio_f_15_mux_sel_qs;
      end

      addr_hit[204]: begin
        reg_rdata_next[0] = pad_gpio_f_16_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_16_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_16_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_16_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_16_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_16_cfg_smt_qs;
      end

      addr_hit[205]: begin
        reg_rdata_next[0] = pad_gpio_f_16_mux_sel_qs;
      end

      addr_hit[206]: begin
        reg_rdata_next[0] = pad_gpio_f_17_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_17_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_17_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_17_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_17_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_17_cfg_smt_qs;
      end

      addr_hit[207]: begin
        reg_rdata_next[0] = pad_gpio_f_17_mux_sel_qs;
      end

      addr_hit[208]: begin
        reg_rdata_next[0] = pad_gpio_f_18_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_18_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_18_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_18_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_18_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_18_cfg_smt_qs;
      end

      addr_hit[209]: begin
        reg_rdata_next[0] = pad_gpio_f_18_mux_sel_qs;
      end

      addr_hit[210]: begin
        reg_rdata_next[0] = pad_gpio_f_19_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_19_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_19_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_19_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_19_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_19_cfg_smt_qs;
      end

      addr_hit[211]: begin
        reg_rdata_next[0] = pad_gpio_f_19_mux_sel_qs;
      end

      addr_hit[212]: begin
        reg_rdata_next[0] = pad_gpio_f_20_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_20_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_20_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_20_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_20_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_20_cfg_smt_qs;
      end

      addr_hit[213]: begin
        reg_rdata_next[0] = pad_gpio_f_20_mux_sel_qs;
      end

      addr_hit[214]: begin
        reg_rdata_next[0] = pad_gpio_f_21_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_21_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_21_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_21_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_21_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_21_cfg_smt_qs;
      end

      addr_hit[215]: begin
        reg_rdata_next[0] = pad_gpio_f_21_mux_sel_qs;
      end

      addr_hit[216]: begin
        reg_rdata_next[0] = pad_gpio_f_22_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_22_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_22_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_22_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_22_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_22_cfg_smt_qs;
      end

      addr_hit[217]: begin
        reg_rdata_next[0] = pad_gpio_f_22_mux_sel_qs;
      end

      addr_hit[218]: begin
        reg_rdata_next[0] = pad_gpio_f_23_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_23_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_23_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_23_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_23_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_23_cfg_smt_qs;
      end

      addr_hit[219]: begin
        reg_rdata_next[0] = pad_gpio_f_23_mux_sel_qs;
      end

      addr_hit[220]: begin
        reg_rdata_next[0] = pad_gpio_f_24_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_24_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_24_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_24_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_24_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_24_cfg_smt_qs;
      end

      addr_hit[221]: begin
        reg_rdata_next[0] = pad_gpio_f_24_mux_sel_qs;
      end

      addr_hit[222]: begin
        reg_rdata_next[0] = pad_gpio_f_25_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_f_25_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_f_25_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_f_25_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_f_25_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_f_25_cfg_smt_qs;
      end

      addr_hit[223]: begin
        reg_rdata_next[0] = pad_gpio_f_25_mux_sel_qs;
      end

      addr_hit[224]: begin
        reg_rdata_next[0] = pad_gpio_pwm0_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_pwm0_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_pwm0_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_pwm0_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_pwm0_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_pwm0_cfg_smt_qs;
      end

      addr_hit[225]: begin
        reg_rdata_next[3:0] = pad_gpio_pwm0_mux_sel_qs;
      end

      addr_hit[226]: begin
        reg_rdata_next[0] = pad_gpio_pwm1_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_pwm1_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_pwm1_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_pwm1_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_pwm1_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_pwm1_cfg_smt_qs;
      end

      addr_hit[227]: begin
        reg_rdata_next[3:0] = pad_gpio_pwm1_mux_sel_qs;
      end

      addr_hit[228]: begin
        reg_rdata_next[0] = pad_gpio_pwm2_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_pwm2_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_pwm2_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_pwm2_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_pwm2_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_pwm2_cfg_smt_qs;
      end

      addr_hit[229]: begin
        reg_rdata_next[3:0] = pad_gpio_pwm2_mux_sel_qs;
      end

      addr_hit[230]: begin
        reg_rdata_next[0] = pad_gpio_pwm3_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_pwm3_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_pwm3_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_pwm3_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_pwm3_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_pwm3_cfg_smt_qs;
      end

      addr_hit[231]: begin
        reg_rdata_next[3:0] = pad_gpio_pwm3_mux_sel_qs;
      end

      addr_hit[232]: begin
        reg_rdata_next[0] = pad_gpio_pwm4_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_pwm4_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_pwm4_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_pwm4_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_pwm4_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_pwm4_cfg_smt_qs;
      end

      addr_hit[233]: begin
        reg_rdata_next[3:0] = pad_gpio_pwm4_mux_sel_qs;
      end

      addr_hit[234]: begin
        reg_rdata_next[0] = pad_gpio_pwm5_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_pwm5_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_pwm5_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_pwm5_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_pwm5_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_pwm5_cfg_smt_qs;
      end

      addr_hit[235]: begin
        reg_rdata_next[3:0] = pad_gpio_pwm5_mux_sel_qs;
      end

      addr_hit[236]: begin
        reg_rdata_next[0] = pad_gpio_pwm6_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_pwm6_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_pwm6_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_pwm6_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_pwm6_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_pwm6_cfg_smt_qs;
      end

      addr_hit[237]: begin
        reg_rdata_next[3:0] = pad_gpio_pwm6_mux_sel_qs;
      end

      addr_hit[238]: begin
        reg_rdata_next[0] = pad_gpio_pwm7_cfg_chip2pad_qs;
        reg_rdata_next[2:1] = pad_gpio_pwm7_cfg_drv_qs;
        reg_rdata_next[3] = pad_gpio_pwm7_cfg_oen_qs;
        reg_rdata_next[4] = pad_gpio_pwm7_cfg_puen_qs;
        reg_rdata_next[5] = pad_gpio_pwm7_cfg_slw_qs;
        reg_rdata_next[6] = pad_gpio_pwm7_cfg_smt_qs;
      end

      addr_hit[239]: begin
        reg_rdata_next[3:0] = pad_gpio_pwm7_mux_sel_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
