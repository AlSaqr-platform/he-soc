// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module alsaqr_periph_padframe_periphs_config_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 9
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output alsaqr_periph_padframe_periphs_config_reg_pkg::alsaqr_periph_padframe_periphs_config_reg2hw_t reg2hw, // Write


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import alsaqr_periph_padframe_periphs_config_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic pad_mx_can_0_cfg_chip2pad_qs;
  logic pad_mx_can_0_cfg_chip2pad_wd;
  logic pad_mx_can_0_cfg_chip2pad_we;
  logic pad_mx_can_0_cfg_oen_qs;
  logic pad_mx_can_0_cfg_oen_wd;
  logic pad_mx_can_0_cfg_oen_we;
  logic [3:0] pad_mx_can_0_mux_sel_qs;
  logic [3:0] pad_mx_can_0_mux_sel_wd;
  logic pad_mx_can_0_mux_sel_we;
  logic pad_mx_can_1_cfg_chip2pad_qs;
  logic pad_mx_can_1_cfg_chip2pad_wd;
  logic pad_mx_can_1_cfg_chip2pad_we;
  logic pad_mx_can_1_cfg_oen_qs;
  logic pad_mx_can_1_cfg_oen_wd;
  logic pad_mx_can_1_cfg_oen_we;
  logic [3:0] pad_mx_can_1_mux_sel_qs;
  logic [3:0] pad_mx_can_1_mux_sel_wd;
  logic pad_mx_can_1_mux_sel_we;
  logic pad_mx_can_2_cfg_chip2pad_qs;
  logic pad_mx_can_2_cfg_chip2pad_wd;
  logic pad_mx_can_2_cfg_chip2pad_we;
  logic pad_mx_can_2_cfg_oen_qs;
  logic pad_mx_can_2_cfg_oen_wd;
  logic pad_mx_can_2_cfg_oen_we;
  logic [3:0] pad_mx_can_2_mux_sel_qs;
  logic [3:0] pad_mx_can_2_mux_sel_wd;
  logic pad_mx_can_2_mux_sel_we;
  logic pad_mx_can_3_cfg_chip2pad_qs;
  logic pad_mx_can_3_cfg_chip2pad_wd;
  logic pad_mx_can_3_cfg_chip2pad_we;
  logic pad_mx_can_3_cfg_oen_qs;
  logic pad_mx_can_3_cfg_oen_wd;
  logic pad_mx_can_3_cfg_oen_we;
  logic [3:0] pad_mx_can_3_mux_sel_qs;
  logic [3:0] pad_mx_can_3_mux_sel_wd;
  logic pad_mx_can_3_mux_sel_we;
  logic pad_mx_cam0_0_cfg_chip2pad_qs;
  logic pad_mx_cam0_0_cfg_chip2pad_wd;
  logic pad_mx_cam0_0_cfg_chip2pad_we;
  logic pad_mx_cam0_0_cfg_oen_qs;
  logic pad_mx_cam0_0_cfg_oen_wd;
  logic pad_mx_cam0_0_cfg_oen_we;
  logic [4:0] pad_mx_cam0_0_mux_sel_qs;
  logic [4:0] pad_mx_cam0_0_mux_sel_wd;
  logic pad_mx_cam0_0_mux_sel_we;
  logic pad_mx_cam0_1_cfg_chip2pad_qs;
  logic pad_mx_cam0_1_cfg_chip2pad_wd;
  logic pad_mx_cam0_1_cfg_chip2pad_we;
  logic pad_mx_cam0_1_cfg_oen_qs;
  logic pad_mx_cam0_1_cfg_oen_wd;
  logic pad_mx_cam0_1_cfg_oen_we;
  logic [4:0] pad_mx_cam0_1_mux_sel_qs;
  logic [4:0] pad_mx_cam0_1_mux_sel_wd;
  logic pad_mx_cam0_1_mux_sel_we;
  logic pad_mx_cam0_2_cfg_chip2pad_qs;
  logic pad_mx_cam0_2_cfg_chip2pad_wd;
  logic pad_mx_cam0_2_cfg_chip2pad_we;
  logic pad_mx_cam0_2_cfg_oen_qs;
  logic pad_mx_cam0_2_cfg_oen_wd;
  logic pad_mx_cam0_2_cfg_oen_we;
  logic [4:0] pad_mx_cam0_2_mux_sel_qs;
  logic [4:0] pad_mx_cam0_2_mux_sel_wd;
  logic pad_mx_cam0_2_mux_sel_we;
  logic pad_mx_cam0_3_cfg_chip2pad_qs;
  logic pad_mx_cam0_3_cfg_chip2pad_wd;
  logic pad_mx_cam0_3_cfg_chip2pad_we;
  logic pad_mx_cam0_3_cfg_oen_qs;
  logic pad_mx_cam0_3_cfg_oen_wd;
  logic pad_mx_cam0_3_cfg_oen_we;
  logic [4:0] pad_mx_cam0_3_mux_sel_qs;
  logic [4:0] pad_mx_cam0_3_mux_sel_wd;
  logic pad_mx_cam0_3_mux_sel_we;
  logic pad_mx_cam0_4_cfg_chip2pad_qs;
  logic pad_mx_cam0_4_cfg_chip2pad_wd;
  logic pad_mx_cam0_4_cfg_chip2pad_we;
  logic pad_mx_cam0_4_cfg_oen_qs;
  logic pad_mx_cam0_4_cfg_oen_wd;
  logic pad_mx_cam0_4_cfg_oen_we;
  logic [4:0] pad_mx_cam0_4_mux_sel_qs;
  logic [4:0] pad_mx_cam0_4_mux_sel_wd;
  logic pad_mx_cam0_4_mux_sel_we;
  logic pad_mx_cam0_5_cfg_chip2pad_qs;
  logic pad_mx_cam0_5_cfg_chip2pad_wd;
  logic pad_mx_cam0_5_cfg_chip2pad_we;
  logic pad_mx_cam0_5_cfg_oen_qs;
  logic pad_mx_cam0_5_cfg_oen_wd;
  logic pad_mx_cam0_5_cfg_oen_we;
  logic [4:0] pad_mx_cam0_5_mux_sel_qs;
  logic [4:0] pad_mx_cam0_5_mux_sel_wd;
  logic pad_mx_cam0_5_mux_sel_we;
  logic pad_mx_cam0_6_cfg_chip2pad_qs;
  logic pad_mx_cam0_6_cfg_chip2pad_wd;
  logic pad_mx_cam0_6_cfg_chip2pad_we;
  logic pad_mx_cam0_6_cfg_oen_qs;
  logic pad_mx_cam0_6_cfg_oen_wd;
  logic pad_mx_cam0_6_cfg_oen_we;
  logic [4:0] pad_mx_cam0_6_mux_sel_qs;
  logic [4:0] pad_mx_cam0_6_mux_sel_wd;
  logic pad_mx_cam0_6_mux_sel_we;
  logic pad_mx_cam0_7_cfg_chip2pad_qs;
  logic pad_mx_cam0_7_cfg_chip2pad_wd;
  logic pad_mx_cam0_7_cfg_chip2pad_we;
  logic pad_mx_cam0_7_cfg_oen_qs;
  logic pad_mx_cam0_7_cfg_oen_wd;
  logic pad_mx_cam0_7_cfg_oen_we;
  logic [4:0] pad_mx_cam0_7_mux_sel_qs;
  logic [4:0] pad_mx_cam0_7_mux_sel_wd;
  logic pad_mx_cam0_7_mux_sel_we;
  logic pad_mx_cam0_8_cfg_chip2pad_qs;
  logic pad_mx_cam0_8_cfg_chip2pad_wd;
  logic pad_mx_cam0_8_cfg_chip2pad_we;
  logic pad_mx_cam0_8_cfg_oen_qs;
  logic pad_mx_cam0_8_cfg_oen_wd;
  logic pad_mx_cam0_8_cfg_oen_we;
  logic [4:0] pad_mx_cam0_8_mux_sel_qs;
  logic [4:0] pad_mx_cam0_8_mux_sel_wd;
  logic pad_mx_cam0_8_mux_sel_we;
  logic pad_mx_cam0_9_cfg_chip2pad_qs;
  logic pad_mx_cam0_9_cfg_chip2pad_wd;
  logic pad_mx_cam0_9_cfg_chip2pad_we;
  logic pad_mx_cam0_9_cfg_oen_qs;
  logic pad_mx_cam0_9_cfg_oen_wd;
  logic pad_mx_cam0_9_cfg_oen_we;
  logic [4:0] pad_mx_cam0_9_mux_sel_qs;
  logic [4:0] pad_mx_cam0_9_mux_sel_wd;
  logic pad_mx_cam0_9_mux_sel_we;
  logic pad_mx_cam0_10_cfg_chip2pad_qs;
  logic pad_mx_cam0_10_cfg_chip2pad_wd;
  logic pad_mx_cam0_10_cfg_chip2pad_we;
  logic pad_mx_cam0_10_cfg_oen_qs;
  logic pad_mx_cam0_10_cfg_oen_wd;
  logic pad_mx_cam0_10_cfg_oen_we;
  logic [4:0] pad_mx_cam0_10_mux_sel_qs;
  logic [4:0] pad_mx_cam0_10_mux_sel_wd;
  logic pad_mx_cam0_10_mux_sel_we;
  logic pad_mx_cam1_0_cfg_chip2pad_qs;
  logic pad_mx_cam1_0_cfg_chip2pad_wd;
  logic pad_mx_cam1_0_cfg_chip2pad_we;
  logic pad_mx_cam1_0_cfg_oen_qs;
  logic pad_mx_cam1_0_cfg_oen_wd;
  logic pad_mx_cam1_0_cfg_oen_we;
  logic [4:0] pad_mx_cam1_0_mux_sel_qs;
  logic [4:0] pad_mx_cam1_0_mux_sel_wd;
  logic pad_mx_cam1_0_mux_sel_we;
  logic pad_mx_cam1_1_cfg_chip2pad_qs;
  logic pad_mx_cam1_1_cfg_chip2pad_wd;
  logic pad_mx_cam1_1_cfg_chip2pad_we;
  logic pad_mx_cam1_1_cfg_oen_qs;
  logic pad_mx_cam1_1_cfg_oen_wd;
  logic pad_mx_cam1_1_cfg_oen_we;
  logic [4:0] pad_mx_cam1_1_mux_sel_qs;
  logic [4:0] pad_mx_cam1_1_mux_sel_wd;
  logic pad_mx_cam1_1_mux_sel_we;
  logic pad_mx_cam1_2_cfg_chip2pad_qs;
  logic pad_mx_cam1_2_cfg_chip2pad_wd;
  logic pad_mx_cam1_2_cfg_chip2pad_we;
  logic pad_mx_cam1_2_cfg_oen_qs;
  logic pad_mx_cam1_2_cfg_oen_wd;
  logic pad_mx_cam1_2_cfg_oen_we;
  logic [4:0] pad_mx_cam1_2_mux_sel_qs;
  logic [4:0] pad_mx_cam1_2_mux_sel_wd;
  logic pad_mx_cam1_2_mux_sel_we;
  logic pad_mx_cam1_3_cfg_chip2pad_qs;
  logic pad_mx_cam1_3_cfg_chip2pad_wd;
  logic pad_mx_cam1_3_cfg_chip2pad_we;
  logic pad_mx_cam1_3_cfg_oen_qs;
  logic pad_mx_cam1_3_cfg_oen_wd;
  logic pad_mx_cam1_3_cfg_oen_we;
  logic [4:0] pad_mx_cam1_3_mux_sel_qs;
  logic [4:0] pad_mx_cam1_3_mux_sel_wd;
  logic pad_mx_cam1_3_mux_sel_we;
  logic pad_mx_cam1_4_cfg_chip2pad_qs;
  logic pad_mx_cam1_4_cfg_chip2pad_wd;
  logic pad_mx_cam1_4_cfg_chip2pad_we;
  logic pad_mx_cam1_4_cfg_oen_qs;
  logic pad_mx_cam1_4_cfg_oen_wd;
  logic pad_mx_cam1_4_cfg_oen_we;
  logic [4:0] pad_mx_cam1_4_mux_sel_qs;
  logic [4:0] pad_mx_cam1_4_mux_sel_wd;
  logic pad_mx_cam1_4_mux_sel_we;
  logic pad_mx_cam1_5_cfg_chip2pad_qs;
  logic pad_mx_cam1_5_cfg_chip2pad_wd;
  logic pad_mx_cam1_5_cfg_chip2pad_we;
  logic pad_mx_cam1_5_cfg_oen_qs;
  logic pad_mx_cam1_5_cfg_oen_wd;
  logic pad_mx_cam1_5_cfg_oen_we;
  logic [4:0] pad_mx_cam1_5_mux_sel_qs;
  logic [4:0] pad_mx_cam1_5_mux_sel_wd;
  logic pad_mx_cam1_5_mux_sel_we;
  logic pad_mx_cam1_6_cfg_chip2pad_qs;
  logic pad_mx_cam1_6_cfg_chip2pad_wd;
  logic pad_mx_cam1_6_cfg_chip2pad_we;
  logic pad_mx_cam1_6_cfg_oen_qs;
  logic pad_mx_cam1_6_cfg_oen_wd;
  logic pad_mx_cam1_6_cfg_oen_we;
  logic [4:0] pad_mx_cam1_6_mux_sel_qs;
  logic [4:0] pad_mx_cam1_6_mux_sel_wd;
  logic pad_mx_cam1_6_mux_sel_we;
  logic pad_mx_cam1_7_cfg_chip2pad_qs;
  logic pad_mx_cam1_7_cfg_chip2pad_wd;
  logic pad_mx_cam1_7_cfg_chip2pad_we;
  logic pad_mx_cam1_7_cfg_oen_qs;
  logic pad_mx_cam1_7_cfg_oen_wd;
  logic pad_mx_cam1_7_cfg_oen_we;
  logic [4:0] pad_mx_cam1_7_mux_sel_qs;
  logic [4:0] pad_mx_cam1_7_mux_sel_wd;
  logic pad_mx_cam1_7_mux_sel_we;
  logic pad_mx_cam1_8_cfg_chip2pad_qs;
  logic pad_mx_cam1_8_cfg_chip2pad_wd;
  logic pad_mx_cam1_8_cfg_chip2pad_we;
  logic pad_mx_cam1_8_cfg_oen_qs;
  logic pad_mx_cam1_8_cfg_oen_wd;
  logic pad_mx_cam1_8_cfg_oen_we;
  logic [4:0] pad_mx_cam1_8_mux_sel_qs;
  logic [4:0] pad_mx_cam1_8_mux_sel_wd;
  logic pad_mx_cam1_8_mux_sel_we;
  logic pad_mx_cam1_9_cfg_chip2pad_qs;
  logic pad_mx_cam1_9_cfg_chip2pad_wd;
  logic pad_mx_cam1_9_cfg_chip2pad_we;
  logic pad_mx_cam1_9_cfg_oen_qs;
  logic pad_mx_cam1_9_cfg_oen_wd;
  logic pad_mx_cam1_9_cfg_oen_we;
  logic [4:0] pad_mx_cam1_9_mux_sel_qs;
  logic [4:0] pad_mx_cam1_9_mux_sel_wd;
  logic pad_mx_cam1_9_mux_sel_we;
  logic pad_mx_cam1_10_cfg_chip2pad_qs;
  logic pad_mx_cam1_10_cfg_chip2pad_wd;
  logic pad_mx_cam1_10_cfg_chip2pad_we;
  logic pad_mx_cam1_10_cfg_oen_qs;
  logic pad_mx_cam1_10_cfg_oen_wd;
  logic pad_mx_cam1_10_cfg_oen_we;
  logic [4:0] pad_mx_cam1_10_mux_sel_qs;
  logic [4:0] pad_mx_cam1_10_mux_sel_wd;
  logic pad_mx_cam1_10_mux_sel_we;
  logic pad_mx_sdio1_0_cfg_chip2pad_qs;
  logic pad_mx_sdio1_0_cfg_chip2pad_wd;
  logic pad_mx_sdio1_0_cfg_chip2pad_we;
  logic pad_mx_sdio1_0_cfg_oen_qs;
  logic pad_mx_sdio1_0_cfg_oen_wd;
  logic pad_mx_sdio1_0_cfg_oen_we;
  logic [3:0] pad_mx_sdio1_0_mux_sel_qs;
  logic [3:0] pad_mx_sdio1_0_mux_sel_wd;
  logic pad_mx_sdio1_0_mux_sel_we;
  logic pad_mx_sdio1_1_cfg_chip2pad_qs;
  logic pad_mx_sdio1_1_cfg_chip2pad_wd;
  logic pad_mx_sdio1_1_cfg_chip2pad_we;
  logic pad_mx_sdio1_1_cfg_oen_qs;
  logic pad_mx_sdio1_1_cfg_oen_wd;
  logic pad_mx_sdio1_1_cfg_oen_we;
  logic [3:0] pad_mx_sdio1_1_mux_sel_qs;
  logic [3:0] pad_mx_sdio1_1_mux_sel_wd;
  logic pad_mx_sdio1_1_mux_sel_we;
  logic pad_mx_sdio1_2_cfg_chip2pad_qs;
  logic pad_mx_sdio1_2_cfg_chip2pad_wd;
  logic pad_mx_sdio1_2_cfg_chip2pad_we;
  logic pad_mx_sdio1_2_cfg_oen_qs;
  logic pad_mx_sdio1_2_cfg_oen_wd;
  logic pad_mx_sdio1_2_cfg_oen_we;
  logic [3:0] pad_mx_sdio1_2_mux_sel_qs;
  logic [3:0] pad_mx_sdio1_2_mux_sel_wd;
  logic pad_mx_sdio1_2_mux_sel_we;
  logic pad_mx_sdio1_3_cfg_chip2pad_qs;
  logic pad_mx_sdio1_3_cfg_chip2pad_wd;
  logic pad_mx_sdio1_3_cfg_chip2pad_we;
  logic pad_mx_sdio1_3_cfg_oen_qs;
  logic pad_mx_sdio1_3_cfg_oen_wd;
  logic pad_mx_sdio1_3_cfg_oen_we;
  logic [3:0] pad_mx_sdio1_3_mux_sel_qs;
  logic [3:0] pad_mx_sdio1_3_mux_sel_wd;
  logic pad_mx_sdio1_3_mux_sel_we;
  logic pad_mx_sdio1_4_cfg_chip2pad_qs;
  logic pad_mx_sdio1_4_cfg_chip2pad_wd;
  logic pad_mx_sdio1_4_cfg_chip2pad_we;
  logic pad_mx_sdio1_4_cfg_oen_qs;
  logic pad_mx_sdio1_4_cfg_oen_wd;
  logic pad_mx_sdio1_4_cfg_oen_we;
  logic [3:0] pad_mx_sdio1_4_mux_sel_qs;
  logic [3:0] pad_mx_sdio1_4_mux_sel_wd;
  logic pad_mx_sdio1_4_mux_sel_we;
  logic pad_mx_sdio1_5_cfg_chip2pad_qs;
  logic pad_mx_sdio1_5_cfg_chip2pad_wd;
  logic pad_mx_sdio1_5_cfg_chip2pad_we;
  logic pad_mx_sdio1_5_cfg_oen_qs;
  logic pad_mx_sdio1_5_cfg_oen_wd;
  logic pad_mx_sdio1_5_cfg_oen_we;
  logic [3:0] pad_mx_sdio1_5_mux_sel_qs;
  logic [3:0] pad_mx_sdio1_5_mux_sel_wd;
  logic pad_mx_sdio1_5_mux_sel_we;
  logic pad_mx_sdio1_6_cfg_chip2pad_qs;
  logic pad_mx_sdio1_6_cfg_chip2pad_wd;
  logic pad_mx_sdio1_6_cfg_chip2pad_we;
  logic pad_mx_sdio1_6_cfg_oen_qs;
  logic pad_mx_sdio1_6_cfg_oen_wd;
  logic pad_mx_sdio1_6_cfg_oen_we;
  logic [3:0] pad_mx_sdio1_6_mux_sel_qs;
  logic [3:0] pad_mx_sdio1_6_mux_sel_wd;
  logic pad_mx_sdio1_6_mux_sel_we;
  logic pad_mx_sdio1_7_cfg_chip2pad_qs;
  logic pad_mx_sdio1_7_cfg_chip2pad_wd;
  logic pad_mx_sdio1_7_cfg_chip2pad_we;
  logic pad_mx_sdio1_7_cfg_oen_qs;
  logic pad_mx_sdio1_7_cfg_oen_wd;
  logic pad_mx_sdio1_7_cfg_oen_we;
  logic [3:0] pad_mx_sdio1_7_mux_sel_qs;
  logic [3:0] pad_mx_sdio1_7_mux_sel_wd;
  logic pad_mx_sdio1_7_mux_sel_we;
  logic pad_mx_hyper1_0_cfg_chip2pad_qs;
  logic pad_mx_hyper1_0_cfg_chip2pad_wd;
  logic pad_mx_hyper1_0_cfg_chip2pad_we;
  logic pad_mx_hyper1_0_cfg_oen_qs;
  logic pad_mx_hyper1_0_cfg_oen_wd;
  logic pad_mx_hyper1_0_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_0_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_0_mux_sel_wd;
  logic pad_mx_hyper1_0_mux_sel_we;
  logic pad_mx_hyper1_1_cfg_chip2pad_qs;
  logic pad_mx_hyper1_1_cfg_chip2pad_wd;
  logic pad_mx_hyper1_1_cfg_chip2pad_we;
  logic pad_mx_hyper1_1_cfg_oen_qs;
  logic pad_mx_hyper1_1_cfg_oen_wd;
  logic pad_mx_hyper1_1_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_1_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_1_mux_sel_wd;
  logic pad_mx_hyper1_1_mux_sel_we;
  logic pad_mx_hyper1_2_cfg_chip2pad_qs;
  logic pad_mx_hyper1_2_cfg_chip2pad_wd;
  logic pad_mx_hyper1_2_cfg_chip2pad_we;
  logic pad_mx_hyper1_2_cfg_oen_qs;
  logic pad_mx_hyper1_2_cfg_oen_wd;
  logic pad_mx_hyper1_2_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_2_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_2_mux_sel_wd;
  logic pad_mx_hyper1_2_mux_sel_we;
  logic pad_mx_hyper1_3_cfg_chip2pad_qs;
  logic pad_mx_hyper1_3_cfg_chip2pad_wd;
  logic pad_mx_hyper1_3_cfg_chip2pad_we;
  logic pad_mx_hyper1_3_cfg_oen_qs;
  logic pad_mx_hyper1_3_cfg_oen_wd;
  logic pad_mx_hyper1_3_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_3_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_3_mux_sel_wd;
  logic pad_mx_hyper1_3_mux_sel_we;
  logic pad_mx_hyper1_4_cfg_chip2pad_qs;
  logic pad_mx_hyper1_4_cfg_chip2pad_wd;
  logic pad_mx_hyper1_4_cfg_chip2pad_we;
  logic pad_mx_hyper1_4_cfg_oen_qs;
  logic pad_mx_hyper1_4_cfg_oen_wd;
  logic pad_mx_hyper1_4_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_4_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_4_mux_sel_wd;
  logic pad_mx_hyper1_4_mux_sel_we;
  logic pad_mx_hyper1_5_cfg_chip2pad_qs;
  logic pad_mx_hyper1_5_cfg_chip2pad_wd;
  logic pad_mx_hyper1_5_cfg_chip2pad_we;
  logic pad_mx_hyper1_5_cfg_oen_qs;
  logic pad_mx_hyper1_5_cfg_oen_wd;
  logic pad_mx_hyper1_5_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_5_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_5_mux_sel_wd;
  logic pad_mx_hyper1_5_mux_sel_we;
  logic pad_mx_hyper1_6_cfg_chip2pad_qs;
  logic pad_mx_hyper1_6_cfg_chip2pad_wd;
  logic pad_mx_hyper1_6_cfg_chip2pad_we;
  logic pad_mx_hyper1_6_cfg_oen_qs;
  logic pad_mx_hyper1_6_cfg_oen_wd;
  logic pad_mx_hyper1_6_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_6_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_6_mux_sel_wd;
  logic pad_mx_hyper1_6_mux_sel_we;
  logic pad_mx_hyper1_7_cfg_chip2pad_qs;
  logic pad_mx_hyper1_7_cfg_chip2pad_wd;
  logic pad_mx_hyper1_7_cfg_chip2pad_we;
  logic pad_mx_hyper1_7_cfg_oen_qs;
  logic pad_mx_hyper1_7_cfg_oen_wd;
  logic pad_mx_hyper1_7_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_7_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_7_mux_sel_wd;
  logic pad_mx_hyper1_7_mux_sel_we;
  logic pad_mx_hyper1_8_cfg_chip2pad_qs;
  logic pad_mx_hyper1_8_cfg_chip2pad_wd;
  logic pad_mx_hyper1_8_cfg_chip2pad_we;
  logic pad_mx_hyper1_8_cfg_oen_qs;
  logic pad_mx_hyper1_8_cfg_oen_wd;
  logic pad_mx_hyper1_8_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_8_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_8_mux_sel_wd;
  logic pad_mx_hyper1_8_mux_sel_we;
  logic pad_mx_hyper1_9_cfg_chip2pad_qs;
  logic pad_mx_hyper1_9_cfg_chip2pad_wd;
  logic pad_mx_hyper1_9_cfg_chip2pad_we;
  logic pad_mx_hyper1_9_cfg_oen_qs;
  logic pad_mx_hyper1_9_cfg_oen_wd;
  logic pad_mx_hyper1_9_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_9_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_9_mux_sel_wd;
  logic pad_mx_hyper1_9_mux_sel_we;
  logic pad_mx_hyper1_10_cfg_chip2pad_qs;
  logic pad_mx_hyper1_10_cfg_chip2pad_wd;
  logic pad_mx_hyper1_10_cfg_chip2pad_we;
  logic pad_mx_hyper1_10_cfg_oen_qs;
  logic pad_mx_hyper1_10_cfg_oen_wd;
  logic pad_mx_hyper1_10_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_10_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_10_mux_sel_wd;
  logic pad_mx_hyper1_10_mux_sel_we;
  logic pad_mx_hyper1_11_cfg_chip2pad_qs;
  logic pad_mx_hyper1_11_cfg_chip2pad_wd;
  logic pad_mx_hyper1_11_cfg_chip2pad_we;
  logic pad_mx_hyper1_11_cfg_oen_qs;
  logic pad_mx_hyper1_11_cfg_oen_wd;
  logic pad_mx_hyper1_11_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_11_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_11_mux_sel_wd;
  logic pad_mx_hyper1_11_mux_sel_we;
  logic pad_mx_hyper1_12_cfg_chip2pad_qs;
  logic pad_mx_hyper1_12_cfg_chip2pad_wd;
  logic pad_mx_hyper1_12_cfg_chip2pad_we;
  logic pad_mx_hyper1_12_cfg_oen_qs;
  logic pad_mx_hyper1_12_cfg_oen_wd;
  logic pad_mx_hyper1_12_cfg_oen_we;
  logic [4:0] pad_mx_hyper1_12_mux_sel_qs;
  logic [4:0] pad_mx_hyper1_12_mux_sel_wd;
  logic pad_mx_hyper1_12_mux_sel_we;

  // Register instances
  // R[pad_mx_can_0_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_can_0_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_0_cfg_chip2pad_we),
    .wd     (pad_mx_can_0_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_0_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_can_0_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_can_0_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_0_cfg_oen_we),
    .wd     (pad_mx_can_0_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_0_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_can_0_cfg_oen_qs)
  );


  // R[pad_mx_can_0_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_can_0_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_0_mux_sel_we),
    .wd     (pad_mx_can_0_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_0_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_can_0_mux_sel_qs)
  );


  // R[pad_mx_can_1_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_can_1_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_1_cfg_chip2pad_we),
    .wd     (pad_mx_can_1_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_1_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_can_1_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_can_1_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_1_cfg_oen_we),
    .wd     (pad_mx_can_1_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_1_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_can_1_cfg_oen_qs)
  );


  // R[pad_mx_can_1_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_can_1_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_1_mux_sel_we),
    .wd     (pad_mx_can_1_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_1_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_can_1_mux_sel_qs)
  );


  // R[pad_mx_can_2_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_can_2_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_2_cfg_chip2pad_we),
    .wd     (pad_mx_can_2_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_2_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_can_2_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_can_2_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_2_cfg_oen_we),
    .wd     (pad_mx_can_2_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_2_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_can_2_cfg_oen_qs)
  );


  // R[pad_mx_can_2_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_can_2_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_2_mux_sel_we),
    .wd     (pad_mx_can_2_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_2_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_can_2_mux_sel_qs)
  );


  // R[pad_mx_can_3_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_can_3_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_3_cfg_chip2pad_we),
    .wd     (pad_mx_can_3_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_3_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_can_3_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_can_3_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_3_cfg_oen_we),
    .wd     (pad_mx_can_3_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_3_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_can_3_cfg_oen_qs)
  );


  // R[pad_mx_can_3_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_can_3_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_can_3_mux_sel_we),
    .wd     (pad_mx_can_3_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_can_3_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_can_3_mux_sel_qs)
  );


  // R[pad_mx_cam0_0_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_0_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_0_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_0_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_0_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_0_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_0_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_0_cfg_oen_we),
    .wd     (pad_mx_cam0_0_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_0_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_0_cfg_oen_qs)
  );


  // R[pad_mx_cam0_0_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_0_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_0_mux_sel_we),
    .wd     (pad_mx_cam0_0_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_0_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_0_mux_sel_qs)
  );


  // R[pad_mx_cam0_1_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_1_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_1_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_1_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_1_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_1_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_1_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_1_cfg_oen_we),
    .wd     (pad_mx_cam0_1_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_1_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_1_cfg_oen_qs)
  );


  // R[pad_mx_cam0_1_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_1_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_1_mux_sel_we),
    .wd     (pad_mx_cam0_1_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_1_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_1_mux_sel_qs)
  );


  // R[pad_mx_cam0_2_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_2_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_2_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_2_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_2_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_2_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_2_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_2_cfg_oen_we),
    .wd     (pad_mx_cam0_2_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_2_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_2_cfg_oen_qs)
  );


  // R[pad_mx_cam0_2_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_2_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_2_mux_sel_we),
    .wd     (pad_mx_cam0_2_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_2_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_2_mux_sel_qs)
  );


  // R[pad_mx_cam0_3_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_3_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_3_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_3_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_3_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_3_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_3_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_3_cfg_oen_we),
    .wd     (pad_mx_cam0_3_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_3_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_3_cfg_oen_qs)
  );


  // R[pad_mx_cam0_3_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_3_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_3_mux_sel_we),
    .wd     (pad_mx_cam0_3_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_3_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_3_mux_sel_qs)
  );


  // R[pad_mx_cam0_4_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_4_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_4_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_4_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_4_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_4_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_4_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_4_cfg_oen_we),
    .wd     (pad_mx_cam0_4_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_4_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_4_cfg_oen_qs)
  );


  // R[pad_mx_cam0_4_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_4_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_4_mux_sel_we),
    .wd     (pad_mx_cam0_4_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_4_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_4_mux_sel_qs)
  );


  // R[pad_mx_cam0_5_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_5_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_5_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_5_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_5_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_5_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_5_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_5_cfg_oen_we),
    .wd     (pad_mx_cam0_5_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_5_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_5_cfg_oen_qs)
  );


  // R[pad_mx_cam0_5_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_5_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_5_mux_sel_we),
    .wd     (pad_mx_cam0_5_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_5_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_5_mux_sel_qs)
  );


  // R[pad_mx_cam0_6_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_6_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_6_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_6_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_6_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_6_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_6_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_6_cfg_oen_we),
    .wd     (pad_mx_cam0_6_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_6_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_6_cfg_oen_qs)
  );


  // R[pad_mx_cam0_6_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_6_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_6_mux_sel_we),
    .wd     (pad_mx_cam0_6_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_6_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_6_mux_sel_qs)
  );


  // R[pad_mx_cam0_7_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_7_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_7_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_7_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_7_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_7_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_7_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_7_cfg_oen_we),
    .wd     (pad_mx_cam0_7_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_7_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_7_cfg_oen_qs)
  );


  // R[pad_mx_cam0_7_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_7_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_7_mux_sel_we),
    .wd     (pad_mx_cam0_7_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_7_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_7_mux_sel_qs)
  );


  // R[pad_mx_cam0_8_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_8_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_8_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_8_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_8_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_8_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_8_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_8_cfg_oen_we),
    .wd     (pad_mx_cam0_8_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_8_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_8_cfg_oen_qs)
  );


  // R[pad_mx_cam0_8_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_8_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_8_mux_sel_we),
    .wd     (pad_mx_cam0_8_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_8_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_8_mux_sel_qs)
  );


  // R[pad_mx_cam0_9_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_9_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_9_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_9_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_9_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_9_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_9_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_9_cfg_oen_we),
    .wd     (pad_mx_cam0_9_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_9_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_9_cfg_oen_qs)
  );


  // R[pad_mx_cam0_9_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_9_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_9_mux_sel_we),
    .wd     (pad_mx_cam0_9_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_9_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_9_mux_sel_qs)
  );


  // R[pad_mx_cam0_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam0_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_10_cfg_chip2pad_we),
    .wd     (pad_mx_cam0_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_10_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam0_10_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_10_cfg_oen_we),
    .wd     (pad_mx_cam0_10_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_10_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_10_cfg_oen_qs)
  );


  // R[pad_mx_cam0_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam0_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam0_10_mux_sel_we),
    .wd     (pad_mx_cam0_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam0_10_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam0_10_mux_sel_qs)
  );


  // R[pad_mx_cam1_0_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_0_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_0_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_0_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_0_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_0_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_0_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_0_cfg_oen_we),
    .wd     (pad_mx_cam1_0_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_0_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_0_cfg_oen_qs)
  );


  // R[pad_mx_cam1_0_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_0_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_0_mux_sel_we),
    .wd     (pad_mx_cam1_0_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_0_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_0_mux_sel_qs)
  );


  // R[pad_mx_cam1_1_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_1_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_1_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_1_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_1_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_1_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_1_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_1_cfg_oen_we),
    .wd     (pad_mx_cam1_1_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_1_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_1_cfg_oen_qs)
  );


  // R[pad_mx_cam1_1_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_1_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_1_mux_sel_we),
    .wd     (pad_mx_cam1_1_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_1_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_1_mux_sel_qs)
  );


  // R[pad_mx_cam1_2_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_2_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_2_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_2_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_2_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_2_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_2_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_2_cfg_oen_we),
    .wd     (pad_mx_cam1_2_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_2_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_2_cfg_oen_qs)
  );


  // R[pad_mx_cam1_2_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_2_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_2_mux_sel_we),
    .wd     (pad_mx_cam1_2_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_2_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_2_mux_sel_qs)
  );


  // R[pad_mx_cam1_3_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_3_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_3_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_3_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_3_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_3_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_3_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_3_cfg_oen_we),
    .wd     (pad_mx_cam1_3_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_3_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_3_cfg_oen_qs)
  );


  // R[pad_mx_cam1_3_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_3_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_3_mux_sel_we),
    .wd     (pad_mx_cam1_3_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_3_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_3_mux_sel_qs)
  );


  // R[pad_mx_cam1_4_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_4_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_4_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_4_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_4_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_4_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_4_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_4_cfg_oen_we),
    .wd     (pad_mx_cam1_4_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_4_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_4_cfg_oen_qs)
  );


  // R[pad_mx_cam1_4_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_4_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_4_mux_sel_we),
    .wd     (pad_mx_cam1_4_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_4_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_4_mux_sel_qs)
  );


  // R[pad_mx_cam1_5_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_5_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_5_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_5_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_5_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_5_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_5_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_5_cfg_oen_we),
    .wd     (pad_mx_cam1_5_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_5_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_5_cfg_oen_qs)
  );


  // R[pad_mx_cam1_5_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_5_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_5_mux_sel_we),
    .wd     (pad_mx_cam1_5_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_5_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_5_mux_sel_qs)
  );


  // R[pad_mx_cam1_6_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_6_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_6_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_6_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_6_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_6_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_6_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_6_cfg_oen_we),
    .wd     (pad_mx_cam1_6_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_6_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_6_cfg_oen_qs)
  );


  // R[pad_mx_cam1_6_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_6_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_6_mux_sel_we),
    .wd     (pad_mx_cam1_6_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_6_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_6_mux_sel_qs)
  );


  // R[pad_mx_cam1_7_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_7_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_7_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_7_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_7_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_7_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_7_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_7_cfg_oen_we),
    .wd     (pad_mx_cam1_7_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_7_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_7_cfg_oen_qs)
  );


  // R[pad_mx_cam1_7_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_7_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_7_mux_sel_we),
    .wd     (pad_mx_cam1_7_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_7_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_7_mux_sel_qs)
  );


  // R[pad_mx_cam1_8_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_8_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_8_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_8_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_8_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_8_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_8_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_8_cfg_oen_we),
    .wd     (pad_mx_cam1_8_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_8_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_8_cfg_oen_qs)
  );


  // R[pad_mx_cam1_8_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_8_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_8_mux_sel_we),
    .wd     (pad_mx_cam1_8_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_8_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_8_mux_sel_qs)
  );


  // R[pad_mx_cam1_9_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_9_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_9_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_9_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_9_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_9_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_9_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_9_cfg_oen_we),
    .wd     (pad_mx_cam1_9_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_9_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_9_cfg_oen_qs)
  );


  // R[pad_mx_cam1_9_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_9_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_9_mux_sel_we),
    .wd     (pad_mx_cam1_9_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_9_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_9_mux_sel_qs)
  );


  // R[pad_mx_cam1_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_cam1_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_10_cfg_chip2pad_we),
    .wd     (pad_mx_cam1_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_10_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_cam1_10_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_10_cfg_oen_we),
    .wd     (pad_mx_cam1_10_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_10_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_10_cfg_oen_qs)
  );


  // R[pad_mx_cam1_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_cam1_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_cam1_10_mux_sel_we),
    .wd     (pad_mx_cam1_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_cam1_10_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_cam1_10_mux_sel_qs)
  );


  // R[pad_mx_sdio1_0_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_sdio1_0_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_0_cfg_chip2pad_we),
    .wd     (pad_mx_sdio1_0_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_0_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_0_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_sdio1_0_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_0_cfg_oen_we),
    .wd     (pad_mx_sdio1_0_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_0_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_0_cfg_oen_qs)
  );


  // R[pad_mx_sdio1_0_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_sdio1_0_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_0_mux_sel_we),
    .wd     (pad_mx_sdio1_0_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_0_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_0_mux_sel_qs)
  );


  // R[pad_mx_sdio1_1_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_sdio1_1_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_1_cfg_chip2pad_we),
    .wd     (pad_mx_sdio1_1_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_1_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_1_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_sdio1_1_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_1_cfg_oen_we),
    .wd     (pad_mx_sdio1_1_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_1_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_1_cfg_oen_qs)
  );


  // R[pad_mx_sdio1_1_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_sdio1_1_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_1_mux_sel_we),
    .wd     (pad_mx_sdio1_1_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_1_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_1_mux_sel_qs)
  );


  // R[pad_mx_sdio1_2_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_sdio1_2_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_2_cfg_chip2pad_we),
    .wd     (pad_mx_sdio1_2_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_2_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_2_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_sdio1_2_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_2_cfg_oen_we),
    .wd     (pad_mx_sdio1_2_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_2_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_2_cfg_oen_qs)
  );


  // R[pad_mx_sdio1_2_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_sdio1_2_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_2_mux_sel_we),
    .wd     (pad_mx_sdio1_2_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_2_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_2_mux_sel_qs)
  );


  // R[pad_mx_sdio1_3_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_sdio1_3_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_3_cfg_chip2pad_we),
    .wd     (pad_mx_sdio1_3_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_3_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_3_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_sdio1_3_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_3_cfg_oen_we),
    .wd     (pad_mx_sdio1_3_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_3_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_3_cfg_oen_qs)
  );


  // R[pad_mx_sdio1_3_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_sdio1_3_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_3_mux_sel_we),
    .wd     (pad_mx_sdio1_3_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_3_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_3_mux_sel_qs)
  );


  // R[pad_mx_sdio1_4_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_sdio1_4_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_4_cfg_chip2pad_we),
    .wd     (pad_mx_sdio1_4_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_4_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_4_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_sdio1_4_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_4_cfg_oen_we),
    .wd     (pad_mx_sdio1_4_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_4_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_4_cfg_oen_qs)
  );


  // R[pad_mx_sdio1_4_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_sdio1_4_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_4_mux_sel_we),
    .wd     (pad_mx_sdio1_4_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_4_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_4_mux_sel_qs)
  );


  // R[pad_mx_sdio1_5_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_sdio1_5_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_5_cfg_chip2pad_we),
    .wd     (pad_mx_sdio1_5_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_5_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_5_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_sdio1_5_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_5_cfg_oen_we),
    .wd     (pad_mx_sdio1_5_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_5_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_5_cfg_oen_qs)
  );


  // R[pad_mx_sdio1_5_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_sdio1_5_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_5_mux_sel_we),
    .wd     (pad_mx_sdio1_5_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_5_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_5_mux_sel_qs)
  );


  // R[pad_mx_sdio1_6_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_sdio1_6_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_6_cfg_chip2pad_we),
    .wd     (pad_mx_sdio1_6_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_6_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_6_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_sdio1_6_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_6_cfg_oen_we),
    .wd     (pad_mx_sdio1_6_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_6_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_6_cfg_oen_qs)
  );


  // R[pad_mx_sdio1_6_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_sdio1_6_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_6_mux_sel_we),
    .wd     (pad_mx_sdio1_6_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_6_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_6_mux_sel_qs)
  );


  // R[pad_mx_sdio1_7_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_sdio1_7_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_7_cfg_chip2pad_we),
    .wd     (pad_mx_sdio1_7_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_7_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_7_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_sdio1_7_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_7_cfg_oen_we),
    .wd     (pad_mx_sdio1_7_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_7_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_7_cfg_oen_qs)
  );


  // R[pad_mx_sdio1_7_mux_sel]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_pad_mx_sdio1_7_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_sdio1_7_mux_sel_we),
    .wd     (pad_mx_sdio1_7_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_sdio1_7_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_sdio1_7_mux_sel_qs)
  );


  // R[pad_mx_hyper1_0_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_0_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_0_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_0_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_0_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_0_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_0_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_0_cfg_oen_we),
    .wd     (pad_mx_hyper1_0_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_0_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_0_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_0_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_0_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_0_mux_sel_we),
    .wd     (pad_mx_hyper1_0_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_0_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_0_mux_sel_qs)
  );


  // R[pad_mx_hyper1_1_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_1_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_1_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_1_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_1_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_1_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_1_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_1_cfg_oen_we),
    .wd     (pad_mx_hyper1_1_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_1_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_1_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_1_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_1_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_1_mux_sel_we),
    .wd     (pad_mx_hyper1_1_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_1_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_1_mux_sel_qs)
  );


  // R[pad_mx_hyper1_2_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_2_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_2_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_2_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_2_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_2_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_2_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_2_cfg_oen_we),
    .wd     (pad_mx_hyper1_2_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_2_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_2_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_2_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_2_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_2_mux_sel_we),
    .wd     (pad_mx_hyper1_2_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_2_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_2_mux_sel_qs)
  );


  // R[pad_mx_hyper1_3_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_3_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_3_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_3_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_3_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_3_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_3_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_3_cfg_oen_we),
    .wd     (pad_mx_hyper1_3_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_3_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_3_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_3_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_3_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_3_mux_sel_we),
    .wd     (pad_mx_hyper1_3_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_3_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_3_mux_sel_qs)
  );


  // R[pad_mx_hyper1_4_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_4_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_4_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_4_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_4_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_4_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_4_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_4_cfg_oen_we),
    .wd     (pad_mx_hyper1_4_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_4_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_4_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_4_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_4_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_4_mux_sel_we),
    .wd     (pad_mx_hyper1_4_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_4_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_4_mux_sel_qs)
  );


  // R[pad_mx_hyper1_5_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_5_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_5_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_5_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_5_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_5_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_5_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_5_cfg_oen_we),
    .wd     (pad_mx_hyper1_5_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_5_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_5_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_5_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_5_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_5_mux_sel_we),
    .wd     (pad_mx_hyper1_5_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_5_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_5_mux_sel_qs)
  );


  // R[pad_mx_hyper1_6_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_6_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_6_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_6_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_6_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_6_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_6_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_6_cfg_oen_we),
    .wd     (pad_mx_hyper1_6_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_6_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_6_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_6_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_6_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_6_mux_sel_we),
    .wd     (pad_mx_hyper1_6_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_6_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_6_mux_sel_qs)
  );


  // R[pad_mx_hyper1_7_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_7_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_7_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_7_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_7_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_7_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_7_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_7_cfg_oen_we),
    .wd     (pad_mx_hyper1_7_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_7_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_7_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_7_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_7_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_7_mux_sel_we),
    .wd     (pad_mx_hyper1_7_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_7_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_7_mux_sel_qs)
  );


  // R[pad_mx_hyper1_8_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_8_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_8_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_8_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_8_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_8_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_8_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_8_cfg_oen_we),
    .wd     (pad_mx_hyper1_8_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_8_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_8_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_8_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_8_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_8_mux_sel_we),
    .wd     (pad_mx_hyper1_8_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_8_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_8_mux_sel_qs)
  );


  // R[pad_mx_hyper1_9_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_9_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_9_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_9_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_9_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_9_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_9_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_9_cfg_oen_we),
    .wd     (pad_mx_hyper1_9_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_9_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_9_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_9_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_9_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_9_mux_sel_we),
    .wd     (pad_mx_hyper1_9_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_9_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_9_mux_sel_qs)
  );


  // R[pad_mx_hyper1_10_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_10_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_10_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_10_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_10_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_10_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_10_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_10_cfg_oen_we),
    .wd     (pad_mx_hyper1_10_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_10_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_10_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_10_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_10_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_10_mux_sel_we),
    .wd     (pad_mx_hyper1_10_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_10_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_10_mux_sel_qs)
  );


  // R[pad_mx_hyper1_11_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_11_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_11_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_11_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_11_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_11_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_11_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_11_cfg_oen_we),
    .wd     (pad_mx_hyper1_11_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_11_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_11_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_11_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_11_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_11_mux_sel_we),
    .wd     (pad_mx_hyper1_11_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_11_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_11_mux_sel_qs)
  );


  // R[pad_mx_hyper1_12_cfg]: V(False)

  //   F[chip2pad]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_mx_hyper1_12_cfg_chip2pad (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_12_cfg_chip2pad_we),
    .wd     (pad_mx_hyper1_12_cfg_chip2pad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_12_cfg.chip2pad.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_12_cfg_chip2pad_qs)
  );


  //   F[oen]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pad_mx_hyper1_12_cfg_oen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_12_cfg_oen_we),
    .wd     (pad_mx_hyper1_12_cfg_oen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_12_cfg.oen.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_12_cfg_oen_qs)
  );


  // R[pad_mx_hyper1_12_mux_sel]: V(False)

  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_pad_mx_hyper1_12_mux_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_mx_hyper1_12_mux_sel_we),
    .wd     (pad_mx_hyper1_12_mux_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad_mx_hyper1_12_mux_sel.q ),

    // to register interface (read)
    .qs     (pad_mx_hyper1_12_mux_sel_qs)
  );




  logic [93:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAN_0_CFG_OFFSET);
    addr_hit[ 1] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAN_0_MUX_SEL_OFFSET);
    addr_hit[ 2] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAN_1_CFG_OFFSET);
    addr_hit[ 3] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAN_1_MUX_SEL_OFFSET);
    addr_hit[ 4] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAN_2_CFG_OFFSET);
    addr_hit[ 5] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAN_2_MUX_SEL_OFFSET);
    addr_hit[ 6] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAN_3_CFG_OFFSET);
    addr_hit[ 7] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAN_3_MUX_SEL_OFFSET);
    addr_hit[ 8] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_0_CFG_OFFSET);
    addr_hit[ 9] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_0_MUX_SEL_OFFSET);
    addr_hit[10] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_1_CFG_OFFSET);
    addr_hit[11] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_1_MUX_SEL_OFFSET);
    addr_hit[12] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_2_CFG_OFFSET);
    addr_hit[13] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_2_MUX_SEL_OFFSET);
    addr_hit[14] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_3_CFG_OFFSET);
    addr_hit[15] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_3_MUX_SEL_OFFSET);
    addr_hit[16] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_4_CFG_OFFSET);
    addr_hit[17] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_4_MUX_SEL_OFFSET);
    addr_hit[18] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_5_CFG_OFFSET);
    addr_hit[19] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_5_MUX_SEL_OFFSET);
    addr_hit[20] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_6_CFG_OFFSET);
    addr_hit[21] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_6_MUX_SEL_OFFSET);
    addr_hit[22] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_7_CFG_OFFSET);
    addr_hit[23] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_7_MUX_SEL_OFFSET);
    addr_hit[24] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_8_CFG_OFFSET);
    addr_hit[25] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_8_MUX_SEL_OFFSET);
    addr_hit[26] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_9_CFG_OFFSET);
    addr_hit[27] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_9_MUX_SEL_OFFSET);
    addr_hit[28] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_10_CFG_OFFSET);
    addr_hit[29] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM0_10_MUX_SEL_OFFSET);
    addr_hit[30] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_0_CFG_OFFSET);
    addr_hit[31] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_0_MUX_SEL_OFFSET);
    addr_hit[32] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_1_CFG_OFFSET);
    addr_hit[33] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_1_MUX_SEL_OFFSET);
    addr_hit[34] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_2_CFG_OFFSET);
    addr_hit[35] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_2_MUX_SEL_OFFSET);
    addr_hit[36] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_3_CFG_OFFSET);
    addr_hit[37] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_3_MUX_SEL_OFFSET);
    addr_hit[38] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_4_CFG_OFFSET);
    addr_hit[39] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_4_MUX_SEL_OFFSET);
    addr_hit[40] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_5_CFG_OFFSET);
    addr_hit[41] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_5_MUX_SEL_OFFSET);
    addr_hit[42] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_6_CFG_OFFSET);
    addr_hit[43] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_6_MUX_SEL_OFFSET);
    addr_hit[44] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_7_CFG_OFFSET);
    addr_hit[45] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_7_MUX_SEL_OFFSET);
    addr_hit[46] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_8_CFG_OFFSET);
    addr_hit[47] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_8_MUX_SEL_OFFSET);
    addr_hit[48] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_9_CFG_OFFSET);
    addr_hit[49] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_9_MUX_SEL_OFFSET);
    addr_hit[50] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_10_CFG_OFFSET);
    addr_hit[51] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_CAM1_10_MUX_SEL_OFFSET);
    addr_hit[52] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_0_CFG_OFFSET);
    addr_hit[53] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_0_MUX_SEL_OFFSET);
    addr_hit[54] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_1_CFG_OFFSET);
    addr_hit[55] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_1_MUX_SEL_OFFSET);
    addr_hit[56] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_2_CFG_OFFSET);
    addr_hit[57] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_2_MUX_SEL_OFFSET);
    addr_hit[58] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_3_CFG_OFFSET);
    addr_hit[59] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_3_MUX_SEL_OFFSET);
    addr_hit[60] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_4_CFG_OFFSET);
    addr_hit[61] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_4_MUX_SEL_OFFSET);
    addr_hit[62] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_5_CFG_OFFSET);
    addr_hit[63] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_5_MUX_SEL_OFFSET);
    addr_hit[64] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_6_CFG_OFFSET);
    addr_hit[65] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_6_MUX_SEL_OFFSET);
    addr_hit[66] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_7_CFG_OFFSET);
    addr_hit[67] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_SDIO1_7_MUX_SEL_OFFSET);
    addr_hit[68] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_0_CFG_OFFSET);
    addr_hit[69] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_0_MUX_SEL_OFFSET);
    addr_hit[70] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_1_CFG_OFFSET);
    addr_hit[71] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_1_MUX_SEL_OFFSET);
    addr_hit[72] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_2_CFG_OFFSET);
    addr_hit[73] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_2_MUX_SEL_OFFSET);
    addr_hit[74] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_3_CFG_OFFSET);
    addr_hit[75] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_3_MUX_SEL_OFFSET);
    addr_hit[76] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_4_CFG_OFFSET);
    addr_hit[77] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_4_MUX_SEL_OFFSET);
    addr_hit[78] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_5_CFG_OFFSET);
    addr_hit[79] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_5_MUX_SEL_OFFSET);
    addr_hit[80] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_6_CFG_OFFSET);
    addr_hit[81] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_6_MUX_SEL_OFFSET);
    addr_hit[82] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_7_CFG_OFFSET);
    addr_hit[83] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_7_MUX_SEL_OFFSET);
    addr_hit[84] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_8_CFG_OFFSET);
    addr_hit[85] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_8_MUX_SEL_OFFSET);
    addr_hit[86] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_9_CFG_OFFSET);
    addr_hit[87] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_9_MUX_SEL_OFFSET);
    addr_hit[88] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_10_CFG_OFFSET);
    addr_hit[89] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_10_MUX_SEL_OFFSET);
    addr_hit[90] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_11_CFG_OFFSET);
    addr_hit[91] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_11_MUX_SEL_OFFSET);
    addr_hit[92] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_12_CFG_OFFSET);
    addr_hit[93] = (reg_addr == ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PAD_MX_HYPER1_12_MUX_SEL_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[67] & ~reg_be))) |
               (addr_hit[68] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[68] & ~reg_be))) |
               (addr_hit[69] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[69] & ~reg_be))) |
               (addr_hit[70] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[70] & ~reg_be))) |
               (addr_hit[71] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[71] & ~reg_be))) |
               (addr_hit[72] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[72] & ~reg_be))) |
               (addr_hit[73] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[73] & ~reg_be))) |
               (addr_hit[74] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[74] & ~reg_be))) |
               (addr_hit[75] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[75] & ~reg_be))) |
               (addr_hit[76] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[76] & ~reg_be))) |
               (addr_hit[77] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[77] & ~reg_be))) |
               (addr_hit[78] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[78] & ~reg_be))) |
               (addr_hit[79] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[79] & ~reg_be))) |
               (addr_hit[80] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[80] & ~reg_be))) |
               (addr_hit[81] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[81] & ~reg_be))) |
               (addr_hit[82] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[82] & ~reg_be))) |
               (addr_hit[83] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[83] & ~reg_be))) |
               (addr_hit[84] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[84] & ~reg_be))) |
               (addr_hit[85] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[85] & ~reg_be))) |
               (addr_hit[86] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[86] & ~reg_be))) |
               (addr_hit[87] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[87] & ~reg_be))) |
               (addr_hit[88] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[88] & ~reg_be))) |
               (addr_hit[89] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[89] & ~reg_be))) |
               (addr_hit[90] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[90] & ~reg_be))) |
               (addr_hit[91] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[91] & ~reg_be))) |
               (addr_hit[92] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[92] & ~reg_be))) |
               (addr_hit[93] & (|(ALSAQR_PERIPH_PADFRAME_PERIPHS_CONFIG_PERMIT[93] & ~reg_be)))));
  end

  assign pad_mx_can_0_cfg_chip2pad_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_mx_can_0_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_can_0_cfg_oen_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_mx_can_0_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_can_0_mux_sel_we = addr_hit[1] & reg_we & !reg_error;
  assign pad_mx_can_0_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_can_1_cfg_chip2pad_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_mx_can_1_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_can_1_cfg_oen_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_mx_can_1_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_can_1_mux_sel_we = addr_hit[3] & reg_we & !reg_error;
  assign pad_mx_can_1_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_can_2_cfg_chip2pad_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_mx_can_2_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_can_2_cfg_oen_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_mx_can_2_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_can_2_mux_sel_we = addr_hit[5] & reg_we & !reg_error;
  assign pad_mx_can_2_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_can_3_cfg_chip2pad_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_mx_can_3_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_can_3_cfg_oen_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_mx_can_3_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_can_3_mux_sel_we = addr_hit[7] & reg_we & !reg_error;
  assign pad_mx_can_3_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_cam0_0_cfg_chip2pad_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_mx_cam0_0_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_0_cfg_oen_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_mx_cam0_0_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_0_mux_sel_we = addr_hit[9] & reg_we & !reg_error;
  assign pad_mx_cam0_0_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_1_cfg_chip2pad_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_mx_cam0_1_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_1_cfg_oen_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_mx_cam0_1_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_1_mux_sel_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_mx_cam0_1_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_2_cfg_chip2pad_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_mx_cam0_2_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_2_cfg_oen_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_mx_cam0_2_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_2_mux_sel_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_mx_cam0_2_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_3_cfg_chip2pad_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_mx_cam0_3_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_3_cfg_oen_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_mx_cam0_3_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_3_mux_sel_we = addr_hit[15] & reg_we & !reg_error;
  assign pad_mx_cam0_3_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_4_cfg_chip2pad_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_mx_cam0_4_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_4_cfg_oen_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_mx_cam0_4_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_4_mux_sel_we = addr_hit[17] & reg_we & !reg_error;
  assign pad_mx_cam0_4_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_5_cfg_chip2pad_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_mx_cam0_5_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_5_cfg_oen_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_mx_cam0_5_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_5_mux_sel_we = addr_hit[19] & reg_we & !reg_error;
  assign pad_mx_cam0_5_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_6_cfg_chip2pad_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_mx_cam0_6_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_6_cfg_oen_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_mx_cam0_6_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_6_mux_sel_we = addr_hit[21] & reg_we & !reg_error;
  assign pad_mx_cam0_6_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_7_cfg_chip2pad_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_mx_cam0_7_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_7_cfg_oen_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_mx_cam0_7_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_7_mux_sel_we = addr_hit[23] & reg_we & !reg_error;
  assign pad_mx_cam0_7_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_8_cfg_chip2pad_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_mx_cam0_8_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_8_cfg_oen_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_mx_cam0_8_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_8_mux_sel_we = addr_hit[25] & reg_we & !reg_error;
  assign pad_mx_cam0_8_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_9_cfg_chip2pad_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_mx_cam0_9_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_9_cfg_oen_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_mx_cam0_9_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_9_mux_sel_we = addr_hit[27] & reg_we & !reg_error;
  assign pad_mx_cam0_9_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam0_10_cfg_chip2pad_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_mx_cam0_10_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam0_10_cfg_oen_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_mx_cam0_10_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam0_10_mux_sel_we = addr_hit[29] & reg_we & !reg_error;
  assign pad_mx_cam0_10_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_0_cfg_chip2pad_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_mx_cam1_0_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_0_cfg_oen_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_mx_cam1_0_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_0_mux_sel_we = addr_hit[31] & reg_we & !reg_error;
  assign pad_mx_cam1_0_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_1_cfg_chip2pad_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_mx_cam1_1_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_1_cfg_oen_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_mx_cam1_1_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_1_mux_sel_we = addr_hit[33] & reg_we & !reg_error;
  assign pad_mx_cam1_1_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_2_cfg_chip2pad_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_mx_cam1_2_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_2_cfg_oen_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_mx_cam1_2_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_2_mux_sel_we = addr_hit[35] & reg_we & !reg_error;
  assign pad_mx_cam1_2_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_3_cfg_chip2pad_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_mx_cam1_3_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_3_cfg_oen_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_mx_cam1_3_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_3_mux_sel_we = addr_hit[37] & reg_we & !reg_error;
  assign pad_mx_cam1_3_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_4_cfg_chip2pad_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_mx_cam1_4_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_4_cfg_oen_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_mx_cam1_4_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_4_mux_sel_we = addr_hit[39] & reg_we & !reg_error;
  assign pad_mx_cam1_4_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_5_cfg_chip2pad_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_mx_cam1_5_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_5_cfg_oen_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_mx_cam1_5_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_5_mux_sel_we = addr_hit[41] & reg_we & !reg_error;
  assign pad_mx_cam1_5_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_6_cfg_chip2pad_we = addr_hit[42] & reg_we & !reg_error;
  assign pad_mx_cam1_6_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_6_cfg_oen_we = addr_hit[42] & reg_we & !reg_error;
  assign pad_mx_cam1_6_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_6_mux_sel_we = addr_hit[43] & reg_we & !reg_error;
  assign pad_mx_cam1_6_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_7_cfg_chip2pad_we = addr_hit[44] & reg_we & !reg_error;
  assign pad_mx_cam1_7_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_7_cfg_oen_we = addr_hit[44] & reg_we & !reg_error;
  assign pad_mx_cam1_7_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_7_mux_sel_we = addr_hit[45] & reg_we & !reg_error;
  assign pad_mx_cam1_7_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_8_cfg_chip2pad_we = addr_hit[46] & reg_we & !reg_error;
  assign pad_mx_cam1_8_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_8_cfg_oen_we = addr_hit[46] & reg_we & !reg_error;
  assign pad_mx_cam1_8_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_8_mux_sel_we = addr_hit[47] & reg_we & !reg_error;
  assign pad_mx_cam1_8_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_9_cfg_chip2pad_we = addr_hit[48] & reg_we & !reg_error;
  assign pad_mx_cam1_9_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_9_cfg_oen_we = addr_hit[48] & reg_we & !reg_error;
  assign pad_mx_cam1_9_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_9_mux_sel_we = addr_hit[49] & reg_we & !reg_error;
  assign pad_mx_cam1_9_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_cam1_10_cfg_chip2pad_we = addr_hit[50] & reg_we & !reg_error;
  assign pad_mx_cam1_10_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_cam1_10_cfg_oen_we = addr_hit[50] & reg_we & !reg_error;
  assign pad_mx_cam1_10_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_cam1_10_mux_sel_we = addr_hit[51] & reg_we & !reg_error;
  assign pad_mx_cam1_10_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_sdio1_0_cfg_chip2pad_we = addr_hit[52] & reg_we & !reg_error;
  assign pad_mx_sdio1_0_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_sdio1_0_cfg_oen_we = addr_hit[52] & reg_we & !reg_error;
  assign pad_mx_sdio1_0_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_sdio1_0_mux_sel_we = addr_hit[53] & reg_we & !reg_error;
  assign pad_mx_sdio1_0_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_sdio1_1_cfg_chip2pad_we = addr_hit[54] & reg_we & !reg_error;
  assign pad_mx_sdio1_1_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_sdio1_1_cfg_oen_we = addr_hit[54] & reg_we & !reg_error;
  assign pad_mx_sdio1_1_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_sdio1_1_mux_sel_we = addr_hit[55] & reg_we & !reg_error;
  assign pad_mx_sdio1_1_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_sdio1_2_cfg_chip2pad_we = addr_hit[56] & reg_we & !reg_error;
  assign pad_mx_sdio1_2_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_sdio1_2_cfg_oen_we = addr_hit[56] & reg_we & !reg_error;
  assign pad_mx_sdio1_2_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_sdio1_2_mux_sel_we = addr_hit[57] & reg_we & !reg_error;
  assign pad_mx_sdio1_2_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_sdio1_3_cfg_chip2pad_we = addr_hit[58] & reg_we & !reg_error;
  assign pad_mx_sdio1_3_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_sdio1_3_cfg_oen_we = addr_hit[58] & reg_we & !reg_error;
  assign pad_mx_sdio1_3_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_sdio1_3_mux_sel_we = addr_hit[59] & reg_we & !reg_error;
  assign pad_mx_sdio1_3_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_sdio1_4_cfg_chip2pad_we = addr_hit[60] & reg_we & !reg_error;
  assign pad_mx_sdio1_4_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_sdio1_4_cfg_oen_we = addr_hit[60] & reg_we & !reg_error;
  assign pad_mx_sdio1_4_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_sdio1_4_mux_sel_we = addr_hit[61] & reg_we & !reg_error;
  assign pad_mx_sdio1_4_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_sdio1_5_cfg_chip2pad_we = addr_hit[62] & reg_we & !reg_error;
  assign pad_mx_sdio1_5_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_sdio1_5_cfg_oen_we = addr_hit[62] & reg_we & !reg_error;
  assign pad_mx_sdio1_5_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_sdio1_5_mux_sel_we = addr_hit[63] & reg_we & !reg_error;
  assign pad_mx_sdio1_5_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_sdio1_6_cfg_chip2pad_we = addr_hit[64] & reg_we & !reg_error;
  assign pad_mx_sdio1_6_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_sdio1_6_cfg_oen_we = addr_hit[64] & reg_we & !reg_error;
  assign pad_mx_sdio1_6_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_sdio1_6_mux_sel_we = addr_hit[65] & reg_we & !reg_error;
  assign pad_mx_sdio1_6_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_sdio1_7_cfg_chip2pad_we = addr_hit[66] & reg_we & !reg_error;
  assign pad_mx_sdio1_7_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_sdio1_7_cfg_oen_we = addr_hit[66] & reg_we & !reg_error;
  assign pad_mx_sdio1_7_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_sdio1_7_mux_sel_we = addr_hit[67] & reg_we & !reg_error;
  assign pad_mx_sdio1_7_mux_sel_wd = reg_wdata[3:0];

  assign pad_mx_hyper1_0_cfg_chip2pad_we = addr_hit[68] & reg_we & !reg_error;
  assign pad_mx_hyper1_0_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_0_cfg_oen_we = addr_hit[68] & reg_we & !reg_error;
  assign pad_mx_hyper1_0_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_0_mux_sel_we = addr_hit[69] & reg_we & !reg_error;
  assign pad_mx_hyper1_0_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_1_cfg_chip2pad_we = addr_hit[70] & reg_we & !reg_error;
  assign pad_mx_hyper1_1_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_1_cfg_oen_we = addr_hit[70] & reg_we & !reg_error;
  assign pad_mx_hyper1_1_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_1_mux_sel_we = addr_hit[71] & reg_we & !reg_error;
  assign pad_mx_hyper1_1_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_2_cfg_chip2pad_we = addr_hit[72] & reg_we & !reg_error;
  assign pad_mx_hyper1_2_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_2_cfg_oen_we = addr_hit[72] & reg_we & !reg_error;
  assign pad_mx_hyper1_2_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_2_mux_sel_we = addr_hit[73] & reg_we & !reg_error;
  assign pad_mx_hyper1_2_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_3_cfg_chip2pad_we = addr_hit[74] & reg_we & !reg_error;
  assign pad_mx_hyper1_3_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_3_cfg_oen_we = addr_hit[74] & reg_we & !reg_error;
  assign pad_mx_hyper1_3_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_3_mux_sel_we = addr_hit[75] & reg_we & !reg_error;
  assign pad_mx_hyper1_3_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_4_cfg_chip2pad_we = addr_hit[76] & reg_we & !reg_error;
  assign pad_mx_hyper1_4_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_4_cfg_oen_we = addr_hit[76] & reg_we & !reg_error;
  assign pad_mx_hyper1_4_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_4_mux_sel_we = addr_hit[77] & reg_we & !reg_error;
  assign pad_mx_hyper1_4_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_5_cfg_chip2pad_we = addr_hit[78] & reg_we & !reg_error;
  assign pad_mx_hyper1_5_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_5_cfg_oen_we = addr_hit[78] & reg_we & !reg_error;
  assign pad_mx_hyper1_5_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_5_mux_sel_we = addr_hit[79] & reg_we & !reg_error;
  assign pad_mx_hyper1_5_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_6_cfg_chip2pad_we = addr_hit[80] & reg_we & !reg_error;
  assign pad_mx_hyper1_6_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_6_cfg_oen_we = addr_hit[80] & reg_we & !reg_error;
  assign pad_mx_hyper1_6_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_6_mux_sel_we = addr_hit[81] & reg_we & !reg_error;
  assign pad_mx_hyper1_6_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_7_cfg_chip2pad_we = addr_hit[82] & reg_we & !reg_error;
  assign pad_mx_hyper1_7_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_7_cfg_oen_we = addr_hit[82] & reg_we & !reg_error;
  assign pad_mx_hyper1_7_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_7_mux_sel_we = addr_hit[83] & reg_we & !reg_error;
  assign pad_mx_hyper1_7_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_8_cfg_chip2pad_we = addr_hit[84] & reg_we & !reg_error;
  assign pad_mx_hyper1_8_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_8_cfg_oen_we = addr_hit[84] & reg_we & !reg_error;
  assign pad_mx_hyper1_8_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_8_mux_sel_we = addr_hit[85] & reg_we & !reg_error;
  assign pad_mx_hyper1_8_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_9_cfg_chip2pad_we = addr_hit[86] & reg_we & !reg_error;
  assign pad_mx_hyper1_9_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_9_cfg_oen_we = addr_hit[86] & reg_we & !reg_error;
  assign pad_mx_hyper1_9_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_9_mux_sel_we = addr_hit[87] & reg_we & !reg_error;
  assign pad_mx_hyper1_9_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_10_cfg_chip2pad_we = addr_hit[88] & reg_we & !reg_error;
  assign pad_mx_hyper1_10_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_10_cfg_oen_we = addr_hit[88] & reg_we & !reg_error;
  assign pad_mx_hyper1_10_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_10_mux_sel_we = addr_hit[89] & reg_we & !reg_error;
  assign pad_mx_hyper1_10_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_11_cfg_chip2pad_we = addr_hit[90] & reg_we & !reg_error;
  assign pad_mx_hyper1_11_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_11_cfg_oen_we = addr_hit[90] & reg_we & !reg_error;
  assign pad_mx_hyper1_11_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_11_mux_sel_we = addr_hit[91] & reg_we & !reg_error;
  assign pad_mx_hyper1_11_mux_sel_wd = reg_wdata[4:0];

  assign pad_mx_hyper1_12_cfg_chip2pad_we = addr_hit[92] & reg_we & !reg_error;
  assign pad_mx_hyper1_12_cfg_chip2pad_wd = reg_wdata[0];

  assign pad_mx_hyper1_12_cfg_oen_we = addr_hit[92] & reg_we & !reg_error;
  assign pad_mx_hyper1_12_cfg_oen_wd = reg_wdata[1];

  assign pad_mx_hyper1_12_mux_sel_we = addr_hit[93] & reg_we & !reg_error;
  assign pad_mx_hyper1_12_mux_sel_wd = reg_wdata[4:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = pad_mx_can_0_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_can_0_cfg_oen_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[3:0] = pad_mx_can_0_mux_sel_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = pad_mx_can_1_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_can_1_cfg_oen_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[3:0] = pad_mx_can_1_mux_sel_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = pad_mx_can_2_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_can_2_cfg_oen_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[3:0] = pad_mx_can_2_mux_sel_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = pad_mx_can_3_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_can_3_cfg_oen_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[3:0] = pad_mx_can_3_mux_sel_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = pad_mx_cam0_0_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_0_cfg_oen_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_0_mux_sel_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = pad_mx_cam0_1_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_1_cfg_oen_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_1_mux_sel_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = pad_mx_cam0_2_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_2_cfg_oen_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_2_mux_sel_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = pad_mx_cam0_3_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_3_cfg_oen_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_3_mux_sel_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = pad_mx_cam0_4_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_4_cfg_oen_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_4_mux_sel_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = pad_mx_cam0_5_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_5_cfg_oen_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_5_mux_sel_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = pad_mx_cam0_6_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_6_cfg_oen_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_6_mux_sel_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = pad_mx_cam0_7_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_7_cfg_oen_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_7_mux_sel_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = pad_mx_cam0_8_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_8_cfg_oen_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_8_mux_sel_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = pad_mx_cam0_9_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_9_cfg_oen_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_9_mux_sel_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = pad_mx_cam0_10_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam0_10_cfg_oen_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[4:0] = pad_mx_cam0_10_mux_sel_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = pad_mx_cam1_0_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_0_cfg_oen_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_0_mux_sel_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = pad_mx_cam1_1_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_1_cfg_oen_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_1_mux_sel_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = pad_mx_cam1_2_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_2_cfg_oen_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_2_mux_sel_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = pad_mx_cam1_3_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_3_cfg_oen_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_3_mux_sel_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = pad_mx_cam1_4_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_4_cfg_oen_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_4_mux_sel_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0] = pad_mx_cam1_5_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_5_cfg_oen_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_5_mux_sel_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = pad_mx_cam1_6_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_6_cfg_oen_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_6_mux_sel_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = pad_mx_cam1_7_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_7_cfg_oen_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_7_mux_sel_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = pad_mx_cam1_8_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_8_cfg_oen_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_8_mux_sel_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = pad_mx_cam1_9_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_9_cfg_oen_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_9_mux_sel_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = pad_mx_cam1_10_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_cam1_10_cfg_oen_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[4:0] = pad_mx_cam1_10_mux_sel_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[0] = pad_mx_sdio1_0_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_sdio1_0_cfg_oen_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[3:0] = pad_mx_sdio1_0_mux_sel_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = pad_mx_sdio1_1_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_sdio1_1_cfg_oen_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[3:0] = pad_mx_sdio1_1_mux_sel_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = pad_mx_sdio1_2_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_sdio1_2_cfg_oen_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[3:0] = pad_mx_sdio1_2_mux_sel_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = pad_mx_sdio1_3_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_sdio1_3_cfg_oen_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[3:0] = pad_mx_sdio1_3_mux_sel_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[0] = pad_mx_sdio1_4_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_sdio1_4_cfg_oen_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[3:0] = pad_mx_sdio1_4_mux_sel_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[0] = pad_mx_sdio1_5_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_sdio1_5_cfg_oen_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[3:0] = pad_mx_sdio1_5_mux_sel_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[0] = pad_mx_sdio1_6_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_sdio1_6_cfg_oen_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[3:0] = pad_mx_sdio1_6_mux_sel_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[0] = pad_mx_sdio1_7_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_sdio1_7_cfg_oen_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[3:0] = pad_mx_sdio1_7_mux_sel_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[0] = pad_mx_hyper1_0_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_0_cfg_oen_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_0_mux_sel_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[0] = pad_mx_hyper1_1_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_1_cfg_oen_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_1_mux_sel_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[0] = pad_mx_hyper1_2_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_2_cfg_oen_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_2_mux_sel_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[0] = pad_mx_hyper1_3_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_3_cfg_oen_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_3_mux_sel_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[0] = pad_mx_hyper1_4_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_4_cfg_oen_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_4_mux_sel_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[0] = pad_mx_hyper1_5_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_5_cfg_oen_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_5_mux_sel_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[0] = pad_mx_hyper1_6_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_6_cfg_oen_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_6_mux_sel_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[0] = pad_mx_hyper1_7_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_7_cfg_oen_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_7_mux_sel_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = pad_mx_hyper1_8_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_8_cfg_oen_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_8_mux_sel_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[0] = pad_mx_hyper1_9_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_9_cfg_oen_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_9_mux_sel_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[0] = pad_mx_hyper1_10_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_10_cfg_oen_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_10_mux_sel_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = pad_mx_hyper1_11_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_11_cfg_oen_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_11_mux_sel_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = pad_mx_hyper1_12_cfg_chip2pad_qs;
        reg_rdata_next[1] = pad_mx_hyper1_12_cfg_oen_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[4:0] = pad_mx_hyper1_12_mux_sel_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
