// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package htm_block_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 10;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } start;
    struct packed {
      logic [30:0] q;
    } unused;
  } htm_block_reg2hw_sdr_0_control_reg_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } number_of_indexes;
    struct packed {
      logic [16:0] q;
    } number_of_ones;
    struct packed {
      logic [3:0]  q;
    } unused;
    struct packed {
      logic        q;
    } error_indexes_gt_32;
    struct packed {
      logic        q;
    } error_fifo_full;
    struct packed {
      logic        q;
    } done;
  } htm_block_reg2hw_sdr_0_status_reg_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_15_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_16_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_17_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_18_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_19_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_20_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_21_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_22_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_23_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_24_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_25_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_26_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_27_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_28_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_29_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_30_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_31_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_index_15_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } start;
    struct packed {
      logic [30:0] q;
    } unused;
  } htm_block_reg2hw_sdr_1_control_reg_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } number_of_indexes;
    struct packed {
      logic [16:0] q;
    } number_of_ones;
    struct packed {
      logic [3:0]  q;
    } unused;
    struct packed {
      logic        q;
    } error_indexes_gt_32;
    struct packed {
      logic        q;
    } error_fifo_full;
    struct packed {
      logic        q;
    } done;
  } htm_block_reg2hw_sdr_1_status_reg_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_15_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_16_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_17_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_18_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_19_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_20_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_21_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_22_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_23_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_24_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_25_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_26_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_27_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_28_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_29_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_30_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_31_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_1_index_15_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } start;
    struct packed {
      logic [30:0] q;
    } unused;
  } htm_block_reg2hw_sdr_2_control_reg_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } number_of_indexes;
    struct packed {
      logic [16:0] q;
    } number_of_ones;
    struct packed {
      logic [3:0]  q;
    } unused;
    struct packed {
      logic        q;
    } error_indexes_gt_32;
    struct packed {
      logic        q;
    } error_fifo_full;
    struct packed {
      logic        q;
    } done;
  } htm_block_reg2hw_sdr_2_status_reg_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_15_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_16_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_17_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_18_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_19_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_20_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_21_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_22_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_23_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_24_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_25_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_26_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_27_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_28_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_29_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_30_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_31_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_2_index_15_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } start;
    struct packed {
      logic [30:0] q;
    } unused;
  } htm_block_reg2hw_sdr_3_control_reg_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } number_of_indexes;
    struct packed {
      logic [16:0] q;
    } number_of_ones;
    struct packed {
      logic [3:0]  q;
    } unused;
    struct packed {
      logic        q;
    } error_indexes_gt_32;
    struct packed {
      logic        q;
    } error_fifo_full;
    struct packed {
      logic        q;
    } done;
  } htm_block_reg2hw_sdr_3_status_reg_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_15_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_16_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_17_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_18_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_19_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_20_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_21_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_22_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_23_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_24_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_25_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_26_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_27_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_28_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_29_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_30_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_31_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_3_index_15_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
    } sdr_src_1;
    struct packed {
      logic [3:0]  q;
    } sdr_src_2;
    struct packed {
      logic [3:0]  q;
    } destination_sdr;
    struct packed {
      logic [3:0]  q;
    } bitwise_logical_operation;
    struct packed {
      logic [19:0] q;
    } unused;
  } htm_block_reg2hw_sdr_logical_op_control_reg_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_15_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_16_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_17_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_18_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_19_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_20_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_21_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_22_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_23_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_24_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_25_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_26_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_27_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_28_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_29_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_30_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_logical_result_31_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } start;
    struct packed {
      logic [30:0] d;
      logic        de;
    } unused;
  } htm_block_hw2reg_sdr_0_control_reg_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
      logic        de;
    } number_of_indexes;
    struct packed {
      logic [16:0] d;
      logic        de;
    } number_of_ones;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } unused;
    struct packed {
      logic        d;
      logic        de;
    } error_indexes_gt_32;
    struct packed {
      logic        d;
      logic        de;
    } error_fifo_full;
    struct packed {
      logic        d;
      logic        de;
    } done;
  } htm_block_hw2reg_sdr_0_status_reg_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_0_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_1_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_2_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_3_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_4_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_5_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_6_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_7_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_8_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_9_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_10_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_11_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_12_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_13_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_14_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_0_index_15_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } start;
    struct packed {
      logic [30:0] d;
      logic        de;
    } unused;
  } htm_block_hw2reg_sdr_1_control_reg_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
      logic        de;
    } number_of_indexes;
    struct packed {
      logic [16:0] d;
      logic        de;
    } number_of_ones;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } unused;
    struct packed {
      logic        d;
      logic        de;
    } error_indexes_gt_32;
    struct packed {
      logic        d;
      logic        de;
    } error_fifo_full;
    struct packed {
      logic        d;
      logic        de;
    } done;
  } htm_block_hw2reg_sdr_1_status_reg_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_0_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_1_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_2_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_3_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_4_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_5_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_6_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_7_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_8_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_9_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_10_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_11_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_12_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_13_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_14_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_1_index_15_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } start;
    struct packed {
      logic [30:0] d;
      logic        de;
    } unused;
  } htm_block_hw2reg_sdr_2_control_reg_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
      logic        de;
    } number_of_indexes;
    struct packed {
      logic [16:0] d;
      logic        de;
    } number_of_ones;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } unused;
    struct packed {
      logic        d;
      logic        de;
    } error_indexes_gt_32;
    struct packed {
      logic        d;
      logic        de;
    } error_fifo_full;
    struct packed {
      logic        d;
      logic        de;
    } done;
  } htm_block_hw2reg_sdr_2_status_reg_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_0_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_1_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_2_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_3_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_4_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_5_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_6_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_7_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_8_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_9_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_10_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_11_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_12_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_13_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_14_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_2_index_15_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } start;
    struct packed {
      logic [30:0] d;
      logic        de;
    } unused;
  } htm_block_hw2reg_sdr_3_control_reg_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
      logic        de;
    } number_of_indexes;
    struct packed {
      logic [16:0] d;
      logic        de;
    } number_of_ones;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } unused;
    struct packed {
      logic        d;
      logic        de;
    } error_indexes_gt_32;
    struct packed {
      logic        d;
      logic        de;
    } error_fifo_full;
    struct packed {
      logic        d;
      logic        de;
    } done;
  } htm_block_hw2reg_sdr_3_status_reg_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_0_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_1_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_2_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_3_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_4_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_5_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_6_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_7_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_8_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_9_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_10_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_11_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_12_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_13_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_14_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_3_index_15_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_0_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_1_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_2_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_3_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_4_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_5_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_6_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_7_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_8_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_9_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_10_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_11_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_12_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_13_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_14_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_15_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_16_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_17_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_18_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_19_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_20_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_21_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_22_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_23_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_24_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_25_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_26_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_27_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_28_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_29_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_30_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_logical_result_31_reg_t;

  // Register -> HW type
  typedef struct packed {
    htm_block_reg2hw_sdr_0_control_reg_reg_t sdr_0_control_reg; // [7459:7428]
    htm_block_reg2hw_sdr_0_status_reg_reg_t sdr_0_status_reg; // [7427:7396]
    htm_block_reg2hw_sdr_0_0_reg_t sdr_0_0; // [7395:7364]
    htm_block_reg2hw_sdr_0_1_reg_t sdr_0_1; // [7363:7332]
    htm_block_reg2hw_sdr_0_2_reg_t sdr_0_2; // [7331:7300]
    htm_block_reg2hw_sdr_0_3_reg_t sdr_0_3; // [7299:7268]
    htm_block_reg2hw_sdr_0_4_reg_t sdr_0_4; // [7267:7236]
    htm_block_reg2hw_sdr_0_5_reg_t sdr_0_5; // [7235:7204]
    htm_block_reg2hw_sdr_0_6_reg_t sdr_0_6; // [7203:7172]
    htm_block_reg2hw_sdr_0_7_reg_t sdr_0_7; // [7171:7140]
    htm_block_reg2hw_sdr_0_8_reg_t sdr_0_8; // [7139:7108]
    htm_block_reg2hw_sdr_0_9_reg_t sdr_0_9; // [7107:7076]
    htm_block_reg2hw_sdr_0_10_reg_t sdr_0_10; // [7075:7044]
    htm_block_reg2hw_sdr_0_11_reg_t sdr_0_11; // [7043:7012]
    htm_block_reg2hw_sdr_0_12_reg_t sdr_0_12; // [7011:6980]
    htm_block_reg2hw_sdr_0_13_reg_t sdr_0_13; // [6979:6948]
    htm_block_reg2hw_sdr_0_14_reg_t sdr_0_14; // [6947:6916]
    htm_block_reg2hw_sdr_0_15_reg_t sdr_0_15; // [6915:6884]
    htm_block_reg2hw_sdr_0_16_reg_t sdr_0_16; // [6883:6852]
    htm_block_reg2hw_sdr_0_17_reg_t sdr_0_17; // [6851:6820]
    htm_block_reg2hw_sdr_0_18_reg_t sdr_0_18; // [6819:6788]
    htm_block_reg2hw_sdr_0_19_reg_t sdr_0_19; // [6787:6756]
    htm_block_reg2hw_sdr_0_20_reg_t sdr_0_20; // [6755:6724]
    htm_block_reg2hw_sdr_0_21_reg_t sdr_0_21; // [6723:6692]
    htm_block_reg2hw_sdr_0_22_reg_t sdr_0_22; // [6691:6660]
    htm_block_reg2hw_sdr_0_23_reg_t sdr_0_23; // [6659:6628]
    htm_block_reg2hw_sdr_0_24_reg_t sdr_0_24; // [6627:6596]
    htm_block_reg2hw_sdr_0_25_reg_t sdr_0_25; // [6595:6564]
    htm_block_reg2hw_sdr_0_26_reg_t sdr_0_26; // [6563:6532]
    htm_block_reg2hw_sdr_0_27_reg_t sdr_0_27; // [6531:6500]
    htm_block_reg2hw_sdr_0_28_reg_t sdr_0_28; // [6499:6468]
    htm_block_reg2hw_sdr_0_29_reg_t sdr_0_29; // [6467:6436]
    htm_block_reg2hw_sdr_0_30_reg_t sdr_0_30; // [6435:6404]
    htm_block_reg2hw_sdr_0_31_reg_t sdr_0_31; // [6403:6372]
    htm_block_reg2hw_sdr_0_index_0_reg_t sdr_0_index_0; // [6371:6340]
    htm_block_reg2hw_sdr_0_index_1_reg_t sdr_0_index_1; // [6339:6308]
    htm_block_reg2hw_sdr_0_index_2_reg_t sdr_0_index_2; // [6307:6276]
    htm_block_reg2hw_sdr_0_index_3_reg_t sdr_0_index_3; // [6275:6244]
    htm_block_reg2hw_sdr_0_index_4_reg_t sdr_0_index_4; // [6243:6212]
    htm_block_reg2hw_sdr_0_index_5_reg_t sdr_0_index_5; // [6211:6180]
    htm_block_reg2hw_sdr_0_index_6_reg_t sdr_0_index_6; // [6179:6148]
    htm_block_reg2hw_sdr_0_index_7_reg_t sdr_0_index_7; // [6147:6116]
    htm_block_reg2hw_sdr_0_index_8_reg_t sdr_0_index_8; // [6115:6084]
    htm_block_reg2hw_sdr_0_index_9_reg_t sdr_0_index_9; // [6083:6052]
    htm_block_reg2hw_sdr_0_index_10_reg_t sdr_0_index_10; // [6051:6020]
    htm_block_reg2hw_sdr_0_index_11_reg_t sdr_0_index_11; // [6019:5988]
    htm_block_reg2hw_sdr_0_index_12_reg_t sdr_0_index_12; // [5987:5956]
    htm_block_reg2hw_sdr_0_index_13_reg_t sdr_0_index_13; // [5955:5924]
    htm_block_reg2hw_sdr_0_index_14_reg_t sdr_0_index_14; // [5923:5892]
    htm_block_reg2hw_sdr_0_index_15_reg_t sdr_0_index_15; // [5891:5860]
    htm_block_reg2hw_sdr_1_control_reg_reg_t sdr_1_control_reg; // [5859:5828]
    htm_block_reg2hw_sdr_1_status_reg_reg_t sdr_1_status_reg; // [5827:5796]
    htm_block_reg2hw_sdr_1_0_reg_t sdr_1_0; // [5795:5764]
    htm_block_reg2hw_sdr_1_1_reg_t sdr_1_1; // [5763:5732]
    htm_block_reg2hw_sdr_1_2_reg_t sdr_1_2; // [5731:5700]
    htm_block_reg2hw_sdr_1_3_reg_t sdr_1_3; // [5699:5668]
    htm_block_reg2hw_sdr_1_4_reg_t sdr_1_4; // [5667:5636]
    htm_block_reg2hw_sdr_1_5_reg_t sdr_1_5; // [5635:5604]
    htm_block_reg2hw_sdr_1_6_reg_t sdr_1_6; // [5603:5572]
    htm_block_reg2hw_sdr_1_7_reg_t sdr_1_7; // [5571:5540]
    htm_block_reg2hw_sdr_1_8_reg_t sdr_1_8; // [5539:5508]
    htm_block_reg2hw_sdr_1_9_reg_t sdr_1_9; // [5507:5476]
    htm_block_reg2hw_sdr_1_10_reg_t sdr_1_10; // [5475:5444]
    htm_block_reg2hw_sdr_1_11_reg_t sdr_1_11; // [5443:5412]
    htm_block_reg2hw_sdr_1_12_reg_t sdr_1_12; // [5411:5380]
    htm_block_reg2hw_sdr_1_13_reg_t sdr_1_13; // [5379:5348]
    htm_block_reg2hw_sdr_1_14_reg_t sdr_1_14; // [5347:5316]
    htm_block_reg2hw_sdr_1_15_reg_t sdr_1_15; // [5315:5284]
    htm_block_reg2hw_sdr_1_16_reg_t sdr_1_16; // [5283:5252]
    htm_block_reg2hw_sdr_1_17_reg_t sdr_1_17; // [5251:5220]
    htm_block_reg2hw_sdr_1_18_reg_t sdr_1_18; // [5219:5188]
    htm_block_reg2hw_sdr_1_19_reg_t sdr_1_19; // [5187:5156]
    htm_block_reg2hw_sdr_1_20_reg_t sdr_1_20; // [5155:5124]
    htm_block_reg2hw_sdr_1_21_reg_t sdr_1_21; // [5123:5092]
    htm_block_reg2hw_sdr_1_22_reg_t sdr_1_22; // [5091:5060]
    htm_block_reg2hw_sdr_1_23_reg_t sdr_1_23; // [5059:5028]
    htm_block_reg2hw_sdr_1_24_reg_t sdr_1_24; // [5027:4996]
    htm_block_reg2hw_sdr_1_25_reg_t sdr_1_25; // [4995:4964]
    htm_block_reg2hw_sdr_1_26_reg_t sdr_1_26; // [4963:4932]
    htm_block_reg2hw_sdr_1_27_reg_t sdr_1_27; // [4931:4900]
    htm_block_reg2hw_sdr_1_28_reg_t sdr_1_28; // [4899:4868]
    htm_block_reg2hw_sdr_1_29_reg_t sdr_1_29; // [4867:4836]
    htm_block_reg2hw_sdr_1_30_reg_t sdr_1_30; // [4835:4804]
    htm_block_reg2hw_sdr_1_31_reg_t sdr_1_31; // [4803:4772]
    htm_block_reg2hw_sdr_1_index_0_reg_t sdr_1_index_0; // [4771:4740]
    htm_block_reg2hw_sdr_1_index_1_reg_t sdr_1_index_1; // [4739:4708]
    htm_block_reg2hw_sdr_1_index_2_reg_t sdr_1_index_2; // [4707:4676]
    htm_block_reg2hw_sdr_1_index_3_reg_t sdr_1_index_3; // [4675:4644]
    htm_block_reg2hw_sdr_1_index_4_reg_t sdr_1_index_4; // [4643:4612]
    htm_block_reg2hw_sdr_1_index_5_reg_t sdr_1_index_5; // [4611:4580]
    htm_block_reg2hw_sdr_1_index_6_reg_t sdr_1_index_6; // [4579:4548]
    htm_block_reg2hw_sdr_1_index_7_reg_t sdr_1_index_7; // [4547:4516]
    htm_block_reg2hw_sdr_1_index_8_reg_t sdr_1_index_8; // [4515:4484]
    htm_block_reg2hw_sdr_1_index_9_reg_t sdr_1_index_9; // [4483:4452]
    htm_block_reg2hw_sdr_1_index_10_reg_t sdr_1_index_10; // [4451:4420]
    htm_block_reg2hw_sdr_1_index_11_reg_t sdr_1_index_11; // [4419:4388]
    htm_block_reg2hw_sdr_1_index_12_reg_t sdr_1_index_12; // [4387:4356]
    htm_block_reg2hw_sdr_1_index_13_reg_t sdr_1_index_13; // [4355:4324]
    htm_block_reg2hw_sdr_1_index_14_reg_t sdr_1_index_14; // [4323:4292]
    htm_block_reg2hw_sdr_1_index_15_reg_t sdr_1_index_15; // [4291:4260]
    htm_block_reg2hw_sdr_2_control_reg_reg_t sdr_2_control_reg; // [4259:4228]
    htm_block_reg2hw_sdr_2_status_reg_reg_t sdr_2_status_reg; // [4227:4196]
    htm_block_reg2hw_sdr_2_0_reg_t sdr_2_0; // [4195:4164]
    htm_block_reg2hw_sdr_2_1_reg_t sdr_2_1; // [4163:4132]
    htm_block_reg2hw_sdr_2_2_reg_t sdr_2_2; // [4131:4100]
    htm_block_reg2hw_sdr_2_3_reg_t sdr_2_3; // [4099:4068]
    htm_block_reg2hw_sdr_2_4_reg_t sdr_2_4; // [4067:4036]
    htm_block_reg2hw_sdr_2_5_reg_t sdr_2_5; // [4035:4004]
    htm_block_reg2hw_sdr_2_6_reg_t sdr_2_6; // [4003:3972]
    htm_block_reg2hw_sdr_2_7_reg_t sdr_2_7; // [3971:3940]
    htm_block_reg2hw_sdr_2_8_reg_t sdr_2_8; // [3939:3908]
    htm_block_reg2hw_sdr_2_9_reg_t sdr_2_9; // [3907:3876]
    htm_block_reg2hw_sdr_2_10_reg_t sdr_2_10; // [3875:3844]
    htm_block_reg2hw_sdr_2_11_reg_t sdr_2_11; // [3843:3812]
    htm_block_reg2hw_sdr_2_12_reg_t sdr_2_12; // [3811:3780]
    htm_block_reg2hw_sdr_2_13_reg_t sdr_2_13; // [3779:3748]
    htm_block_reg2hw_sdr_2_14_reg_t sdr_2_14; // [3747:3716]
    htm_block_reg2hw_sdr_2_15_reg_t sdr_2_15; // [3715:3684]
    htm_block_reg2hw_sdr_2_16_reg_t sdr_2_16; // [3683:3652]
    htm_block_reg2hw_sdr_2_17_reg_t sdr_2_17; // [3651:3620]
    htm_block_reg2hw_sdr_2_18_reg_t sdr_2_18; // [3619:3588]
    htm_block_reg2hw_sdr_2_19_reg_t sdr_2_19; // [3587:3556]
    htm_block_reg2hw_sdr_2_20_reg_t sdr_2_20; // [3555:3524]
    htm_block_reg2hw_sdr_2_21_reg_t sdr_2_21; // [3523:3492]
    htm_block_reg2hw_sdr_2_22_reg_t sdr_2_22; // [3491:3460]
    htm_block_reg2hw_sdr_2_23_reg_t sdr_2_23; // [3459:3428]
    htm_block_reg2hw_sdr_2_24_reg_t sdr_2_24; // [3427:3396]
    htm_block_reg2hw_sdr_2_25_reg_t sdr_2_25; // [3395:3364]
    htm_block_reg2hw_sdr_2_26_reg_t sdr_2_26; // [3363:3332]
    htm_block_reg2hw_sdr_2_27_reg_t sdr_2_27; // [3331:3300]
    htm_block_reg2hw_sdr_2_28_reg_t sdr_2_28; // [3299:3268]
    htm_block_reg2hw_sdr_2_29_reg_t sdr_2_29; // [3267:3236]
    htm_block_reg2hw_sdr_2_30_reg_t sdr_2_30; // [3235:3204]
    htm_block_reg2hw_sdr_2_31_reg_t sdr_2_31; // [3203:3172]
    htm_block_reg2hw_sdr_2_index_0_reg_t sdr_2_index_0; // [3171:3140]
    htm_block_reg2hw_sdr_2_index_1_reg_t sdr_2_index_1; // [3139:3108]
    htm_block_reg2hw_sdr_2_index_2_reg_t sdr_2_index_2; // [3107:3076]
    htm_block_reg2hw_sdr_2_index_3_reg_t sdr_2_index_3; // [3075:3044]
    htm_block_reg2hw_sdr_2_index_4_reg_t sdr_2_index_4; // [3043:3012]
    htm_block_reg2hw_sdr_2_index_5_reg_t sdr_2_index_5; // [3011:2980]
    htm_block_reg2hw_sdr_2_index_6_reg_t sdr_2_index_6; // [2979:2948]
    htm_block_reg2hw_sdr_2_index_7_reg_t sdr_2_index_7; // [2947:2916]
    htm_block_reg2hw_sdr_2_index_8_reg_t sdr_2_index_8; // [2915:2884]
    htm_block_reg2hw_sdr_2_index_9_reg_t sdr_2_index_9; // [2883:2852]
    htm_block_reg2hw_sdr_2_index_10_reg_t sdr_2_index_10; // [2851:2820]
    htm_block_reg2hw_sdr_2_index_11_reg_t sdr_2_index_11; // [2819:2788]
    htm_block_reg2hw_sdr_2_index_12_reg_t sdr_2_index_12; // [2787:2756]
    htm_block_reg2hw_sdr_2_index_13_reg_t sdr_2_index_13; // [2755:2724]
    htm_block_reg2hw_sdr_2_index_14_reg_t sdr_2_index_14; // [2723:2692]
    htm_block_reg2hw_sdr_2_index_15_reg_t sdr_2_index_15; // [2691:2660]
    htm_block_reg2hw_sdr_3_control_reg_reg_t sdr_3_control_reg; // [2659:2628]
    htm_block_reg2hw_sdr_3_status_reg_reg_t sdr_3_status_reg; // [2627:2596]
    htm_block_reg2hw_sdr_3_0_reg_t sdr_3_0; // [2595:2564]
    htm_block_reg2hw_sdr_3_1_reg_t sdr_3_1; // [2563:2532]
    htm_block_reg2hw_sdr_3_2_reg_t sdr_3_2; // [2531:2500]
    htm_block_reg2hw_sdr_3_3_reg_t sdr_3_3; // [2499:2468]
    htm_block_reg2hw_sdr_3_4_reg_t sdr_3_4; // [2467:2436]
    htm_block_reg2hw_sdr_3_5_reg_t sdr_3_5; // [2435:2404]
    htm_block_reg2hw_sdr_3_6_reg_t sdr_3_6; // [2403:2372]
    htm_block_reg2hw_sdr_3_7_reg_t sdr_3_7; // [2371:2340]
    htm_block_reg2hw_sdr_3_8_reg_t sdr_3_8; // [2339:2308]
    htm_block_reg2hw_sdr_3_9_reg_t sdr_3_9; // [2307:2276]
    htm_block_reg2hw_sdr_3_10_reg_t sdr_3_10; // [2275:2244]
    htm_block_reg2hw_sdr_3_11_reg_t sdr_3_11; // [2243:2212]
    htm_block_reg2hw_sdr_3_12_reg_t sdr_3_12; // [2211:2180]
    htm_block_reg2hw_sdr_3_13_reg_t sdr_3_13; // [2179:2148]
    htm_block_reg2hw_sdr_3_14_reg_t sdr_3_14; // [2147:2116]
    htm_block_reg2hw_sdr_3_15_reg_t sdr_3_15; // [2115:2084]
    htm_block_reg2hw_sdr_3_16_reg_t sdr_3_16; // [2083:2052]
    htm_block_reg2hw_sdr_3_17_reg_t sdr_3_17; // [2051:2020]
    htm_block_reg2hw_sdr_3_18_reg_t sdr_3_18; // [2019:1988]
    htm_block_reg2hw_sdr_3_19_reg_t sdr_3_19; // [1987:1956]
    htm_block_reg2hw_sdr_3_20_reg_t sdr_3_20; // [1955:1924]
    htm_block_reg2hw_sdr_3_21_reg_t sdr_3_21; // [1923:1892]
    htm_block_reg2hw_sdr_3_22_reg_t sdr_3_22; // [1891:1860]
    htm_block_reg2hw_sdr_3_23_reg_t sdr_3_23; // [1859:1828]
    htm_block_reg2hw_sdr_3_24_reg_t sdr_3_24; // [1827:1796]
    htm_block_reg2hw_sdr_3_25_reg_t sdr_3_25; // [1795:1764]
    htm_block_reg2hw_sdr_3_26_reg_t sdr_3_26; // [1763:1732]
    htm_block_reg2hw_sdr_3_27_reg_t sdr_3_27; // [1731:1700]
    htm_block_reg2hw_sdr_3_28_reg_t sdr_3_28; // [1699:1668]
    htm_block_reg2hw_sdr_3_29_reg_t sdr_3_29; // [1667:1636]
    htm_block_reg2hw_sdr_3_30_reg_t sdr_3_30; // [1635:1604]
    htm_block_reg2hw_sdr_3_31_reg_t sdr_3_31; // [1603:1572]
    htm_block_reg2hw_sdr_3_index_0_reg_t sdr_3_index_0; // [1571:1540]
    htm_block_reg2hw_sdr_3_index_1_reg_t sdr_3_index_1; // [1539:1508]
    htm_block_reg2hw_sdr_3_index_2_reg_t sdr_3_index_2; // [1507:1476]
    htm_block_reg2hw_sdr_3_index_3_reg_t sdr_3_index_3; // [1475:1444]
    htm_block_reg2hw_sdr_3_index_4_reg_t sdr_3_index_4; // [1443:1412]
    htm_block_reg2hw_sdr_3_index_5_reg_t sdr_3_index_5; // [1411:1380]
    htm_block_reg2hw_sdr_3_index_6_reg_t sdr_3_index_6; // [1379:1348]
    htm_block_reg2hw_sdr_3_index_7_reg_t sdr_3_index_7; // [1347:1316]
    htm_block_reg2hw_sdr_3_index_8_reg_t sdr_3_index_8; // [1315:1284]
    htm_block_reg2hw_sdr_3_index_9_reg_t sdr_3_index_9; // [1283:1252]
    htm_block_reg2hw_sdr_3_index_10_reg_t sdr_3_index_10; // [1251:1220]
    htm_block_reg2hw_sdr_3_index_11_reg_t sdr_3_index_11; // [1219:1188]
    htm_block_reg2hw_sdr_3_index_12_reg_t sdr_3_index_12; // [1187:1156]
    htm_block_reg2hw_sdr_3_index_13_reg_t sdr_3_index_13; // [1155:1124]
    htm_block_reg2hw_sdr_3_index_14_reg_t sdr_3_index_14; // [1123:1092]
    htm_block_reg2hw_sdr_3_index_15_reg_t sdr_3_index_15; // [1091:1060]
    htm_block_reg2hw_sdr_logical_op_control_reg_reg_t sdr_logical_op_control_reg; // [1059:1024]
    htm_block_reg2hw_sdr_logical_result_0_reg_t sdr_logical_result_0; // [1023:992]
    htm_block_reg2hw_sdr_logical_result_1_reg_t sdr_logical_result_1; // [991:960]
    htm_block_reg2hw_sdr_logical_result_2_reg_t sdr_logical_result_2; // [959:928]
    htm_block_reg2hw_sdr_logical_result_3_reg_t sdr_logical_result_3; // [927:896]
    htm_block_reg2hw_sdr_logical_result_4_reg_t sdr_logical_result_4; // [895:864]
    htm_block_reg2hw_sdr_logical_result_5_reg_t sdr_logical_result_5; // [863:832]
    htm_block_reg2hw_sdr_logical_result_6_reg_t sdr_logical_result_6; // [831:800]
    htm_block_reg2hw_sdr_logical_result_7_reg_t sdr_logical_result_7; // [799:768]
    htm_block_reg2hw_sdr_logical_result_8_reg_t sdr_logical_result_8; // [767:736]
    htm_block_reg2hw_sdr_logical_result_9_reg_t sdr_logical_result_9; // [735:704]
    htm_block_reg2hw_sdr_logical_result_10_reg_t sdr_logical_result_10; // [703:672]
    htm_block_reg2hw_sdr_logical_result_11_reg_t sdr_logical_result_11; // [671:640]
    htm_block_reg2hw_sdr_logical_result_12_reg_t sdr_logical_result_12; // [639:608]
    htm_block_reg2hw_sdr_logical_result_13_reg_t sdr_logical_result_13; // [607:576]
    htm_block_reg2hw_sdr_logical_result_14_reg_t sdr_logical_result_14; // [575:544]
    htm_block_reg2hw_sdr_logical_result_15_reg_t sdr_logical_result_15; // [543:512]
    htm_block_reg2hw_sdr_logical_result_16_reg_t sdr_logical_result_16; // [511:480]
    htm_block_reg2hw_sdr_logical_result_17_reg_t sdr_logical_result_17; // [479:448]
    htm_block_reg2hw_sdr_logical_result_18_reg_t sdr_logical_result_18; // [447:416]
    htm_block_reg2hw_sdr_logical_result_19_reg_t sdr_logical_result_19; // [415:384]
    htm_block_reg2hw_sdr_logical_result_20_reg_t sdr_logical_result_20; // [383:352]
    htm_block_reg2hw_sdr_logical_result_21_reg_t sdr_logical_result_21; // [351:320]
    htm_block_reg2hw_sdr_logical_result_22_reg_t sdr_logical_result_22; // [319:288]
    htm_block_reg2hw_sdr_logical_result_23_reg_t sdr_logical_result_23; // [287:256]
    htm_block_reg2hw_sdr_logical_result_24_reg_t sdr_logical_result_24; // [255:224]
    htm_block_reg2hw_sdr_logical_result_25_reg_t sdr_logical_result_25; // [223:192]
    htm_block_reg2hw_sdr_logical_result_26_reg_t sdr_logical_result_26; // [191:160]
    htm_block_reg2hw_sdr_logical_result_27_reg_t sdr_logical_result_27; // [159:128]
    htm_block_reg2hw_sdr_logical_result_28_reg_t sdr_logical_result_28; // [127:96]
    htm_block_reg2hw_sdr_logical_result_29_reg_t sdr_logical_result_29; // [95:64]
    htm_block_reg2hw_sdr_logical_result_30_reg_t sdr_logical_result_30; // [63:32]
    htm_block_reg2hw_sdr_logical_result_31_reg_t sdr_logical_result_31; // [31:0]
  } htm_block_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    htm_block_hw2reg_sdr_0_control_reg_reg_t sdr_0_control_reg; // [3455:3422]
    htm_block_hw2reg_sdr_0_status_reg_reg_t sdr_0_status_reg; // [3421:3384]
    htm_block_hw2reg_sdr_0_index_0_reg_t sdr_0_index_0; // [3383:3351]
    htm_block_hw2reg_sdr_0_index_1_reg_t sdr_0_index_1; // [3350:3318]
    htm_block_hw2reg_sdr_0_index_2_reg_t sdr_0_index_2; // [3317:3285]
    htm_block_hw2reg_sdr_0_index_3_reg_t sdr_0_index_3; // [3284:3252]
    htm_block_hw2reg_sdr_0_index_4_reg_t sdr_0_index_4; // [3251:3219]
    htm_block_hw2reg_sdr_0_index_5_reg_t sdr_0_index_5; // [3218:3186]
    htm_block_hw2reg_sdr_0_index_6_reg_t sdr_0_index_6; // [3185:3153]
    htm_block_hw2reg_sdr_0_index_7_reg_t sdr_0_index_7; // [3152:3120]
    htm_block_hw2reg_sdr_0_index_8_reg_t sdr_0_index_8; // [3119:3087]
    htm_block_hw2reg_sdr_0_index_9_reg_t sdr_0_index_9; // [3086:3054]
    htm_block_hw2reg_sdr_0_index_10_reg_t sdr_0_index_10; // [3053:3021]
    htm_block_hw2reg_sdr_0_index_11_reg_t sdr_0_index_11; // [3020:2988]
    htm_block_hw2reg_sdr_0_index_12_reg_t sdr_0_index_12; // [2987:2955]
    htm_block_hw2reg_sdr_0_index_13_reg_t sdr_0_index_13; // [2954:2922]
    htm_block_hw2reg_sdr_0_index_14_reg_t sdr_0_index_14; // [2921:2889]
    htm_block_hw2reg_sdr_0_index_15_reg_t sdr_0_index_15; // [2888:2856]
    htm_block_hw2reg_sdr_1_control_reg_reg_t sdr_1_control_reg; // [2855:2822]
    htm_block_hw2reg_sdr_1_status_reg_reg_t sdr_1_status_reg; // [2821:2784]
    htm_block_hw2reg_sdr_1_index_0_reg_t sdr_1_index_0; // [2783:2751]
    htm_block_hw2reg_sdr_1_index_1_reg_t sdr_1_index_1; // [2750:2718]
    htm_block_hw2reg_sdr_1_index_2_reg_t sdr_1_index_2; // [2717:2685]
    htm_block_hw2reg_sdr_1_index_3_reg_t sdr_1_index_3; // [2684:2652]
    htm_block_hw2reg_sdr_1_index_4_reg_t sdr_1_index_4; // [2651:2619]
    htm_block_hw2reg_sdr_1_index_5_reg_t sdr_1_index_5; // [2618:2586]
    htm_block_hw2reg_sdr_1_index_6_reg_t sdr_1_index_6; // [2585:2553]
    htm_block_hw2reg_sdr_1_index_7_reg_t sdr_1_index_7; // [2552:2520]
    htm_block_hw2reg_sdr_1_index_8_reg_t sdr_1_index_8; // [2519:2487]
    htm_block_hw2reg_sdr_1_index_9_reg_t sdr_1_index_9; // [2486:2454]
    htm_block_hw2reg_sdr_1_index_10_reg_t sdr_1_index_10; // [2453:2421]
    htm_block_hw2reg_sdr_1_index_11_reg_t sdr_1_index_11; // [2420:2388]
    htm_block_hw2reg_sdr_1_index_12_reg_t sdr_1_index_12; // [2387:2355]
    htm_block_hw2reg_sdr_1_index_13_reg_t sdr_1_index_13; // [2354:2322]
    htm_block_hw2reg_sdr_1_index_14_reg_t sdr_1_index_14; // [2321:2289]
    htm_block_hw2reg_sdr_1_index_15_reg_t sdr_1_index_15; // [2288:2256]
    htm_block_hw2reg_sdr_2_control_reg_reg_t sdr_2_control_reg; // [2255:2222]
    htm_block_hw2reg_sdr_2_status_reg_reg_t sdr_2_status_reg; // [2221:2184]
    htm_block_hw2reg_sdr_2_index_0_reg_t sdr_2_index_0; // [2183:2151]
    htm_block_hw2reg_sdr_2_index_1_reg_t sdr_2_index_1; // [2150:2118]
    htm_block_hw2reg_sdr_2_index_2_reg_t sdr_2_index_2; // [2117:2085]
    htm_block_hw2reg_sdr_2_index_3_reg_t sdr_2_index_3; // [2084:2052]
    htm_block_hw2reg_sdr_2_index_4_reg_t sdr_2_index_4; // [2051:2019]
    htm_block_hw2reg_sdr_2_index_5_reg_t sdr_2_index_5; // [2018:1986]
    htm_block_hw2reg_sdr_2_index_6_reg_t sdr_2_index_6; // [1985:1953]
    htm_block_hw2reg_sdr_2_index_7_reg_t sdr_2_index_7; // [1952:1920]
    htm_block_hw2reg_sdr_2_index_8_reg_t sdr_2_index_8; // [1919:1887]
    htm_block_hw2reg_sdr_2_index_9_reg_t sdr_2_index_9; // [1886:1854]
    htm_block_hw2reg_sdr_2_index_10_reg_t sdr_2_index_10; // [1853:1821]
    htm_block_hw2reg_sdr_2_index_11_reg_t sdr_2_index_11; // [1820:1788]
    htm_block_hw2reg_sdr_2_index_12_reg_t sdr_2_index_12; // [1787:1755]
    htm_block_hw2reg_sdr_2_index_13_reg_t sdr_2_index_13; // [1754:1722]
    htm_block_hw2reg_sdr_2_index_14_reg_t sdr_2_index_14; // [1721:1689]
    htm_block_hw2reg_sdr_2_index_15_reg_t sdr_2_index_15; // [1688:1656]
    htm_block_hw2reg_sdr_3_control_reg_reg_t sdr_3_control_reg; // [1655:1622]
    htm_block_hw2reg_sdr_3_status_reg_reg_t sdr_3_status_reg; // [1621:1584]
    htm_block_hw2reg_sdr_3_index_0_reg_t sdr_3_index_0; // [1583:1551]
    htm_block_hw2reg_sdr_3_index_1_reg_t sdr_3_index_1; // [1550:1518]
    htm_block_hw2reg_sdr_3_index_2_reg_t sdr_3_index_2; // [1517:1485]
    htm_block_hw2reg_sdr_3_index_3_reg_t sdr_3_index_3; // [1484:1452]
    htm_block_hw2reg_sdr_3_index_4_reg_t sdr_3_index_4; // [1451:1419]
    htm_block_hw2reg_sdr_3_index_5_reg_t sdr_3_index_5; // [1418:1386]
    htm_block_hw2reg_sdr_3_index_6_reg_t sdr_3_index_6; // [1385:1353]
    htm_block_hw2reg_sdr_3_index_7_reg_t sdr_3_index_7; // [1352:1320]
    htm_block_hw2reg_sdr_3_index_8_reg_t sdr_3_index_8; // [1319:1287]
    htm_block_hw2reg_sdr_3_index_9_reg_t sdr_3_index_9; // [1286:1254]
    htm_block_hw2reg_sdr_3_index_10_reg_t sdr_3_index_10; // [1253:1221]
    htm_block_hw2reg_sdr_3_index_11_reg_t sdr_3_index_11; // [1220:1188]
    htm_block_hw2reg_sdr_3_index_12_reg_t sdr_3_index_12; // [1187:1155]
    htm_block_hw2reg_sdr_3_index_13_reg_t sdr_3_index_13; // [1154:1122]
    htm_block_hw2reg_sdr_3_index_14_reg_t sdr_3_index_14; // [1121:1089]
    htm_block_hw2reg_sdr_3_index_15_reg_t sdr_3_index_15; // [1088:1056]
    htm_block_hw2reg_sdr_logical_result_0_reg_t sdr_logical_result_0; // [1055:1023]
    htm_block_hw2reg_sdr_logical_result_1_reg_t sdr_logical_result_1; // [1022:990]
    htm_block_hw2reg_sdr_logical_result_2_reg_t sdr_logical_result_2; // [989:957]
    htm_block_hw2reg_sdr_logical_result_3_reg_t sdr_logical_result_3; // [956:924]
    htm_block_hw2reg_sdr_logical_result_4_reg_t sdr_logical_result_4; // [923:891]
    htm_block_hw2reg_sdr_logical_result_5_reg_t sdr_logical_result_5; // [890:858]
    htm_block_hw2reg_sdr_logical_result_6_reg_t sdr_logical_result_6; // [857:825]
    htm_block_hw2reg_sdr_logical_result_7_reg_t sdr_logical_result_7; // [824:792]
    htm_block_hw2reg_sdr_logical_result_8_reg_t sdr_logical_result_8; // [791:759]
    htm_block_hw2reg_sdr_logical_result_9_reg_t sdr_logical_result_9; // [758:726]
    htm_block_hw2reg_sdr_logical_result_10_reg_t sdr_logical_result_10; // [725:693]
    htm_block_hw2reg_sdr_logical_result_11_reg_t sdr_logical_result_11; // [692:660]
    htm_block_hw2reg_sdr_logical_result_12_reg_t sdr_logical_result_12; // [659:627]
    htm_block_hw2reg_sdr_logical_result_13_reg_t sdr_logical_result_13; // [626:594]
    htm_block_hw2reg_sdr_logical_result_14_reg_t sdr_logical_result_14; // [593:561]
    htm_block_hw2reg_sdr_logical_result_15_reg_t sdr_logical_result_15; // [560:528]
    htm_block_hw2reg_sdr_logical_result_16_reg_t sdr_logical_result_16; // [527:495]
    htm_block_hw2reg_sdr_logical_result_17_reg_t sdr_logical_result_17; // [494:462]
    htm_block_hw2reg_sdr_logical_result_18_reg_t sdr_logical_result_18; // [461:429]
    htm_block_hw2reg_sdr_logical_result_19_reg_t sdr_logical_result_19; // [428:396]
    htm_block_hw2reg_sdr_logical_result_20_reg_t sdr_logical_result_20; // [395:363]
    htm_block_hw2reg_sdr_logical_result_21_reg_t sdr_logical_result_21; // [362:330]
    htm_block_hw2reg_sdr_logical_result_22_reg_t sdr_logical_result_22; // [329:297]
    htm_block_hw2reg_sdr_logical_result_23_reg_t sdr_logical_result_23; // [296:264]
    htm_block_hw2reg_sdr_logical_result_24_reg_t sdr_logical_result_24; // [263:231]
    htm_block_hw2reg_sdr_logical_result_25_reg_t sdr_logical_result_25; // [230:198]
    htm_block_hw2reg_sdr_logical_result_26_reg_t sdr_logical_result_26; // [197:165]
    htm_block_hw2reg_sdr_logical_result_27_reg_t sdr_logical_result_27; // [164:132]
    htm_block_hw2reg_sdr_logical_result_28_reg_t sdr_logical_result_28; // [131:99]
    htm_block_hw2reg_sdr_logical_result_29_reg_t sdr_logical_result_29; // [98:66]
    htm_block_hw2reg_sdr_logical_result_30_reg_t sdr_logical_result_30; // [65:33]
    htm_block_hw2reg_sdr_logical_result_31_reg_t sdr_logical_result_31; // [32:0]
  } htm_block_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_CONTROL_REG_OFFSET = 10'h 0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_STATUS_REG_OFFSET = 10'h 4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_0_OFFSET = 10'h 8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_1_OFFSET = 10'h c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_2_OFFSET = 10'h 10;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_3_OFFSET = 10'h 14;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_4_OFFSET = 10'h 18;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_5_OFFSET = 10'h 1c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_6_OFFSET = 10'h 20;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_7_OFFSET = 10'h 24;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_8_OFFSET = 10'h 28;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_9_OFFSET = 10'h 2c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_10_OFFSET = 10'h 30;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_11_OFFSET = 10'h 34;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_12_OFFSET = 10'h 38;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_13_OFFSET = 10'h 3c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_14_OFFSET = 10'h 40;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_15_OFFSET = 10'h 44;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_16_OFFSET = 10'h 48;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_17_OFFSET = 10'h 4c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_18_OFFSET = 10'h 50;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_19_OFFSET = 10'h 54;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_20_OFFSET = 10'h 58;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_21_OFFSET = 10'h 5c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_22_OFFSET = 10'h 60;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_23_OFFSET = 10'h 64;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_24_OFFSET = 10'h 68;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_25_OFFSET = 10'h 6c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_26_OFFSET = 10'h 70;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_27_OFFSET = 10'h 74;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_28_OFFSET = 10'h 78;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_29_OFFSET = 10'h 7c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_30_OFFSET = 10'h 80;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_31_OFFSET = 10'h 84;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_0_OFFSET = 10'h 88;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_1_OFFSET = 10'h 8c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_2_OFFSET = 10'h 90;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_3_OFFSET = 10'h 94;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_4_OFFSET = 10'h 98;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_5_OFFSET = 10'h 9c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_6_OFFSET = 10'h a0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_7_OFFSET = 10'h a4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_8_OFFSET = 10'h a8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_9_OFFSET = 10'h ac;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_10_OFFSET = 10'h b0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_11_OFFSET = 10'h b4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_12_OFFSET = 10'h b8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_13_OFFSET = 10'h bc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_14_OFFSET = 10'h c0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_INDEX_15_OFFSET = 10'h c4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_CONTROL_REG_OFFSET = 10'h c8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_STATUS_REG_OFFSET = 10'h cc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_0_OFFSET = 10'h d0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_1_OFFSET = 10'h d4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_2_OFFSET = 10'h d8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_3_OFFSET = 10'h dc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_4_OFFSET = 10'h e0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_5_OFFSET = 10'h e4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_6_OFFSET = 10'h e8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_7_OFFSET = 10'h ec;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_8_OFFSET = 10'h f0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_9_OFFSET = 10'h f4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_10_OFFSET = 10'h f8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_11_OFFSET = 10'h fc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_12_OFFSET = 10'h 100;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_13_OFFSET = 10'h 104;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_14_OFFSET = 10'h 108;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_15_OFFSET = 10'h 10c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_16_OFFSET = 10'h 110;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_17_OFFSET = 10'h 114;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_18_OFFSET = 10'h 118;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_19_OFFSET = 10'h 11c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_20_OFFSET = 10'h 120;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_21_OFFSET = 10'h 124;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_22_OFFSET = 10'h 128;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_23_OFFSET = 10'h 12c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_24_OFFSET = 10'h 130;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_25_OFFSET = 10'h 134;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_26_OFFSET = 10'h 138;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_27_OFFSET = 10'h 13c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_28_OFFSET = 10'h 140;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_29_OFFSET = 10'h 144;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_30_OFFSET = 10'h 148;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_31_OFFSET = 10'h 14c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_0_OFFSET = 10'h 150;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_1_OFFSET = 10'h 154;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_2_OFFSET = 10'h 158;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_3_OFFSET = 10'h 15c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_4_OFFSET = 10'h 160;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_5_OFFSET = 10'h 164;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_6_OFFSET = 10'h 168;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_7_OFFSET = 10'h 16c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_8_OFFSET = 10'h 170;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_9_OFFSET = 10'h 174;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_10_OFFSET = 10'h 178;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_11_OFFSET = 10'h 17c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_12_OFFSET = 10'h 180;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_13_OFFSET = 10'h 184;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_14_OFFSET = 10'h 188;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_1_INDEX_15_OFFSET = 10'h 18c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_CONTROL_REG_OFFSET = 10'h 190;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_STATUS_REG_OFFSET = 10'h 194;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_0_OFFSET = 10'h 198;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_1_OFFSET = 10'h 19c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_2_OFFSET = 10'h 1a0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_3_OFFSET = 10'h 1a4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_4_OFFSET = 10'h 1a8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_5_OFFSET = 10'h 1ac;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_6_OFFSET = 10'h 1b0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_7_OFFSET = 10'h 1b4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_8_OFFSET = 10'h 1b8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_9_OFFSET = 10'h 1bc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_10_OFFSET = 10'h 1c0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_11_OFFSET = 10'h 1c4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_12_OFFSET = 10'h 1c8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_13_OFFSET = 10'h 1cc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_14_OFFSET = 10'h 1d0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_15_OFFSET = 10'h 1d4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_16_OFFSET = 10'h 1d8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_17_OFFSET = 10'h 1dc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_18_OFFSET = 10'h 1e0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_19_OFFSET = 10'h 1e4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_20_OFFSET = 10'h 1e8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_21_OFFSET = 10'h 1ec;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_22_OFFSET = 10'h 1f0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_23_OFFSET = 10'h 1f4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_24_OFFSET = 10'h 1f8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_25_OFFSET = 10'h 1fc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_26_OFFSET = 10'h 200;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_27_OFFSET = 10'h 204;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_28_OFFSET = 10'h 208;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_29_OFFSET = 10'h 20c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_30_OFFSET = 10'h 210;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_31_OFFSET = 10'h 214;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_0_OFFSET = 10'h 218;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_1_OFFSET = 10'h 21c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_2_OFFSET = 10'h 220;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_3_OFFSET = 10'h 224;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_4_OFFSET = 10'h 228;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_5_OFFSET = 10'h 22c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_6_OFFSET = 10'h 230;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_7_OFFSET = 10'h 234;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_8_OFFSET = 10'h 238;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_9_OFFSET = 10'h 23c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_10_OFFSET = 10'h 240;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_11_OFFSET = 10'h 244;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_12_OFFSET = 10'h 248;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_13_OFFSET = 10'h 24c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_14_OFFSET = 10'h 250;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_2_INDEX_15_OFFSET = 10'h 254;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_CONTROL_REG_OFFSET = 10'h 258;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_STATUS_REG_OFFSET = 10'h 25c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_0_OFFSET = 10'h 260;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_1_OFFSET = 10'h 264;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_2_OFFSET = 10'h 268;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_3_OFFSET = 10'h 26c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_4_OFFSET = 10'h 270;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_5_OFFSET = 10'h 274;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_6_OFFSET = 10'h 278;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_7_OFFSET = 10'h 27c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_8_OFFSET = 10'h 280;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_9_OFFSET = 10'h 284;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_10_OFFSET = 10'h 288;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_11_OFFSET = 10'h 28c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_12_OFFSET = 10'h 290;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_13_OFFSET = 10'h 294;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_14_OFFSET = 10'h 298;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_15_OFFSET = 10'h 29c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_16_OFFSET = 10'h 2a0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_17_OFFSET = 10'h 2a4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_18_OFFSET = 10'h 2a8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_19_OFFSET = 10'h 2ac;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_20_OFFSET = 10'h 2b0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_21_OFFSET = 10'h 2b4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_22_OFFSET = 10'h 2b8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_23_OFFSET = 10'h 2bc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_24_OFFSET = 10'h 2c0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_25_OFFSET = 10'h 2c4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_26_OFFSET = 10'h 2c8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_27_OFFSET = 10'h 2cc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_28_OFFSET = 10'h 2d0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_29_OFFSET = 10'h 2d4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_30_OFFSET = 10'h 2d8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_31_OFFSET = 10'h 2dc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_0_OFFSET = 10'h 2e0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_1_OFFSET = 10'h 2e4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_2_OFFSET = 10'h 2e8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_3_OFFSET = 10'h 2ec;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_4_OFFSET = 10'h 2f0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_5_OFFSET = 10'h 2f4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_6_OFFSET = 10'h 2f8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_7_OFFSET = 10'h 2fc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_8_OFFSET = 10'h 300;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_9_OFFSET = 10'h 304;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_10_OFFSET = 10'h 308;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_11_OFFSET = 10'h 30c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_12_OFFSET = 10'h 310;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_13_OFFSET = 10'h 314;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_14_OFFSET = 10'h 318;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_3_INDEX_15_OFFSET = 10'h 31c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_OP_CONTROL_REG_OFFSET = 10'h 320;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_0_OFFSET = 10'h 324;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_1_OFFSET = 10'h 328;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_2_OFFSET = 10'h 32c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_3_OFFSET = 10'h 330;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_4_OFFSET = 10'h 334;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_5_OFFSET = 10'h 338;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_6_OFFSET = 10'h 33c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_7_OFFSET = 10'h 340;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_8_OFFSET = 10'h 344;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_9_OFFSET = 10'h 348;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_10_OFFSET = 10'h 34c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_11_OFFSET = 10'h 350;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_12_OFFSET = 10'h 354;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_13_OFFSET = 10'h 358;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_14_OFFSET = 10'h 35c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_15_OFFSET = 10'h 360;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_16_OFFSET = 10'h 364;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_17_OFFSET = 10'h 368;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_18_OFFSET = 10'h 36c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_19_OFFSET = 10'h 370;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_20_OFFSET = 10'h 374;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_21_OFFSET = 10'h 378;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_22_OFFSET = 10'h 37c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_23_OFFSET = 10'h 380;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_24_OFFSET = 10'h 384;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_25_OFFSET = 10'h 388;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_26_OFFSET = 10'h 38c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_27_OFFSET = 10'h 390;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_28_OFFSET = 10'h 394;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_29_OFFSET = 10'h 398;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_30_OFFSET = 10'h 39c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_LOGICAL_RESULT_31_OFFSET = 10'h 3a0;

  // Register index
  typedef enum int {
    HTM_BLOCK_SDR_0_CONTROL_REG,
    HTM_BLOCK_SDR_0_STATUS_REG,
    HTM_BLOCK_SDR_0_0,
    HTM_BLOCK_SDR_0_1,
    HTM_BLOCK_SDR_0_2,
    HTM_BLOCK_SDR_0_3,
    HTM_BLOCK_SDR_0_4,
    HTM_BLOCK_SDR_0_5,
    HTM_BLOCK_SDR_0_6,
    HTM_BLOCK_SDR_0_7,
    HTM_BLOCK_SDR_0_8,
    HTM_BLOCK_SDR_0_9,
    HTM_BLOCK_SDR_0_10,
    HTM_BLOCK_SDR_0_11,
    HTM_BLOCK_SDR_0_12,
    HTM_BLOCK_SDR_0_13,
    HTM_BLOCK_SDR_0_14,
    HTM_BLOCK_SDR_0_15,
    HTM_BLOCK_SDR_0_16,
    HTM_BLOCK_SDR_0_17,
    HTM_BLOCK_SDR_0_18,
    HTM_BLOCK_SDR_0_19,
    HTM_BLOCK_SDR_0_20,
    HTM_BLOCK_SDR_0_21,
    HTM_BLOCK_SDR_0_22,
    HTM_BLOCK_SDR_0_23,
    HTM_BLOCK_SDR_0_24,
    HTM_BLOCK_SDR_0_25,
    HTM_BLOCK_SDR_0_26,
    HTM_BLOCK_SDR_0_27,
    HTM_BLOCK_SDR_0_28,
    HTM_BLOCK_SDR_0_29,
    HTM_BLOCK_SDR_0_30,
    HTM_BLOCK_SDR_0_31,
    HTM_BLOCK_SDR_0_INDEX_0,
    HTM_BLOCK_SDR_0_INDEX_1,
    HTM_BLOCK_SDR_0_INDEX_2,
    HTM_BLOCK_SDR_0_INDEX_3,
    HTM_BLOCK_SDR_0_INDEX_4,
    HTM_BLOCK_SDR_0_INDEX_5,
    HTM_BLOCK_SDR_0_INDEX_6,
    HTM_BLOCK_SDR_0_INDEX_7,
    HTM_BLOCK_SDR_0_INDEX_8,
    HTM_BLOCK_SDR_0_INDEX_9,
    HTM_BLOCK_SDR_0_INDEX_10,
    HTM_BLOCK_SDR_0_INDEX_11,
    HTM_BLOCK_SDR_0_INDEX_12,
    HTM_BLOCK_SDR_0_INDEX_13,
    HTM_BLOCK_SDR_0_INDEX_14,
    HTM_BLOCK_SDR_0_INDEX_15,
    HTM_BLOCK_SDR_1_CONTROL_REG,
    HTM_BLOCK_SDR_1_STATUS_REG,
    HTM_BLOCK_SDR_1_0,
    HTM_BLOCK_SDR_1_1,
    HTM_BLOCK_SDR_1_2,
    HTM_BLOCK_SDR_1_3,
    HTM_BLOCK_SDR_1_4,
    HTM_BLOCK_SDR_1_5,
    HTM_BLOCK_SDR_1_6,
    HTM_BLOCK_SDR_1_7,
    HTM_BLOCK_SDR_1_8,
    HTM_BLOCK_SDR_1_9,
    HTM_BLOCK_SDR_1_10,
    HTM_BLOCK_SDR_1_11,
    HTM_BLOCK_SDR_1_12,
    HTM_BLOCK_SDR_1_13,
    HTM_BLOCK_SDR_1_14,
    HTM_BLOCK_SDR_1_15,
    HTM_BLOCK_SDR_1_16,
    HTM_BLOCK_SDR_1_17,
    HTM_BLOCK_SDR_1_18,
    HTM_BLOCK_SDR_1_19,
    HTM_BLOCK_SDR_1_20,
    HTM_BLOCK_SDR_1_21,
    HTM_BLOCK_SDR_1_22,
    HTM_BLOCK_SDR_1_23,
    HTM_BLOCK_SDR_1_24,
    HTM_BLOCK_SDR_1_25,
    HTM_BLOCK_SDR_1_26,
    HTM_BLOCK_SDR_1_27,
    HTM_BLOCK_SDR_1_28,
    HTM_BLOCK_SDR_1_29,
    HTM_BLOCK_SDR_1_30,
    HTM_BLOCK_SDR_1_31,
    HTM_BLOCK_SDR_1_INDEX_0,
    HTM_BLOCK_SDR_1_INDEX_1,
    HTM_BLOCK_SDR_1_INDEX_2,
    HTM_BLOCK_SDR_1_INDEX_3,
    HTM_BLOCK_SDR_1_INDEX_4,
    HTM_BLOCK_SDR_1_INDEX_5,
    HTM_BLOCK_SDR_1_INDEX_6,
    HTM_BLOCK_SDR_1_INDEX_7,
    HTM_BLOCK_SDR_1_INDEX_8,
    HTM_BLOCK_SDR_1_INDEX_9,
    HTM_BLOCK_SDR_1_INDEX_10,
    HTM_BLOCK_SDR_1_INDEX_11,
    HTM_BLOCK_SDR_1_INDEX_12,
    HTM_BLOCK_SDR_1_INDEX_13,
    HTM_BLOCK_SDR_1_INDEX_14,
    HTM_BLOCK_SDR_1_INDEX_15,
    HTM_BLOCK_SDR_2_CONTROL_REG,
    HTM_BLOCK_SDR_2_STATUS_REG,
    HTM_BLOCK_SDR_2_0,
    HTM_BLOCK_SDR_2_1,
    HTM_BLOCK_SDR_2_2,
    HTM_BLOCK_SDR_2_3,
    HTM_BLOCK_SDR_2_4,
    HTM_BLOCK_SDR_2_5,
    HTM_BLOCK_SDR_2_6,
    HTM_BLOCK_SDR_2_7,
    HTM_BLOCK_SDR_2_8,
    HTM_BLOCK_SDR_2_9,
    HTM_BLOCK_SDR_2_10,
    HTM_BLOCK_SDR_2_11,
    HTM_BLOCK_SDR_2_12,
    HTM_BLOCK_SDR_2_13,
    HTM_BLOCK_SDR_2_14,
    HTM_BLOCK_SDR_2_15,
    HTM_BLOCK_SDR_2_16,
    HTM_BLOCK_SDR_2_17,
    HTM_BLOCK_SDR_2_18,
    HTM_BLOCK_SDR_2_19,
    HTM_BLOCK_SDR_2_20,
    HTM_BLOCK_SDR_2_21,
    HTM_BLOCK_SDR_2_22,
    HTM_BLOCK_SDR_2_23,
    HTM_BLOCK_SDR_2_24,
    HTM_BLOCK_SDR_2_25,
    HTM_BLOCK_SDR_2_26,
    HTM_BLOCK_SDR_2_27,
    HTM_BLOCK_SDR_2_28,
    HTM_BLOCK_SDR_2_29,
    HTM_BLOCK_SDR_2_30,
    HTM_BLOCK_SDR_2_31,
    HTM_BLOCK_SDR_2_INDEX_0,
    HTM_BLOCK_SDR_2_INDEX_1,
    HTM_BLOCK_SDR_2_INDEX_2,
    HTM_BLOCK_SDR_2_INDEX_3,
    HTM_BLOCK_SDR_2_INDEX_4,
    HTM_BLOCK_SDR_2_INDEX_5,
    HTM_BLOCK_SDR_2_INDEX_6,
    HTM_BLOCK_SDR_2_INDEX_7,
    HTM_BLOCK_SDR_2_INDEX_8,
    HTM_BLOCK_SDR_2_INDEX_9,
    HTM_BLOCK_SDR_2_INDEX_10,
    HTM_BLOCK_SDR_2_INDEX_11,
    HTM_BLOCK_SDR_2_INDEX_12,
    HTM_BLOCK_SDR_2_INDEX_13,
    HTM_BLOCK_SDR_2_INDEX_14,
    HTM_BLOCK_SDR_2_INDEX_15,
    HTM_BLOCK_SDR_3_CONTROL_REG,
    HTM_BLOCK_SDR_3_STATUS_REG,
    HTM_BLOCK_SDR_3_0,
    HTM_BLOCK_SDR_3_1,
    HTM_BLOCK_SDR_3_2,
    HTM_BLOCK_SDR_3_3,
    HTM_BLOCK_SDR_3_4,
    HTM_BLOCK_SDR_3_5,
    HTM_BLOCK_SDR_3_6,
    HTM_BLOCK_SDR_3_7,
    HTM_BLOCK_SDR_3_8,
    HTM_BLOCK_SDR_3_9,
    HTM_BLOCK_SDR_3_10,
    HTM_BLOCK_SDR_3_11,
    HTM_BLOCK_SDR_3_12,
    HTM_BLOCK_SDR_3_13,
    HTM_BLOCK_SDR_3_14,
    HTM_BLOCK_SDR_3_15,
    HTM_BLOCK_SDR_3_16,
    HTM_BLOCK_SDR_3_17,
    HTM_BLOCK_SDR_3_18,
    HTM_BLOCK_SDR_3_19,
    HTM_BLOCK_SDR_3_20,
    HTM_BLOCK_SDR_3_21,
    HTM_BLOCK_SDR_3_22,
    HTM_BLOCK_SDR_3_23,
    HTM_BLOCK_SDR_3_24,
    HTM_BLOCK_SDR_3_25,
    HTM_BLOCK_SDR_3_26,
    HTM_BLOCK_SDR_3_27,
    HTM_BLOCK_SDR_3_28,
    HTM_BLOCK_SDR_3_29,
    HTM_BLOCK_SDR_3_30,
    HTM_BLOCK_SDR_3_31,
    HTM_BLOCK_SDR_3_INDEX_0,
    HTM_BLOCK_SDR_3_INDEX_1,
    HTM_BLOCK_SDR_3_INDEX_2,
    HTM_BLOCK_SDR_3_INDEX_3,
    HTM_BLOCK_SDR_3_INDEX_4,
    HTM_BLOCK_SDR_3_INDEX_5,
    HTM_BLOCK_SDR_3_INDEX_6,
    HTM_BLOCK_SDR_3_INDEX_7,
    HTM_BLOCK_SDR_3_INDEX_8,
    HTM_BLOCK_SDR_3_INDEX_9,
    HTM_BLOCK_SDR_3_INDEX_10,
    HTM_BLOCK_SDR_3_INDEX_11,
    HTM_BLOCK_SDR_3_INDEX_12,
    HTM_BLOCK_SDR_3_INDEX_13,
    HTM_BLOCK_SDR_3_INDEX_14,
    HTM_BLOCK_SDR_3_INDEX_15,
    HTM_BLOCK_SDR_LOGICAL_OP_CONTROL_REG,
    HTM_BLOCK_SDR_LOGICAL_RESULT_0,
    HTM_BLOCK_SDR_LOGICAL_RESULT_1,
    HTM_BLOCK_SDR_LOGICAL_RESULT_2,
    HTM_BLOCK_SDR_LOGICAL_RESULT_3,
    HTM_BLOCK_SDR_LOGICAL_RESULT_4,
    HTM_BLOCK_SDR_LOGICAL_RESULT_5,
    HTM_BLOCK_SDR_LOGICAL_RESULT_6,
    HTM_BLOCK_SDR_LOGICAL_RESULT_7,
    HTM_BLOCK_SDR_LOGICAL_RESULT_8,
    HTM_BLOCK_SDR_LOGICAL_RESULT_9,
    HTM_BLOCK_SDR_LOGICAL_RESULT_10,
    HTM_BLOCK_SDR_LOGICAL_RESULT_11,
    HTM_BLOCK_SDR_LOGICAL_RESULT_12,
    HTM_BLOCK_SDR_LOGICAL_RESULT_13,
    HTM_BLOCK_SDR_LOGICAL_RESULT_14,
    HTM_BLOCK_SDR_LOGICAL_RESULT_15,
    HTM_BLOCK_SDR_LOGICAL_RESULT_16,
    HTM_BLOCK_SDR_LOGICAL_RESULT_17,
    HTM_BLOCK_SDR_LOGICAL_RESULT_18,
    HTM_BLOCK_SDR_LOGICAL_RESULT_19,
    HTM_BLOCK_SDR_LOGICAL_RESULT_20,
    HTM_BLOCK_SDR_LOGICAL_RESULT_21,
    HTM_BLOCK_SDR_LOGICAL_RESULT_22,
    HTM_BLOCK_SDR_LOGICAL_RESULT_23,
    HTM_BLOCK_SDR_LOGICAL_RESULT_24,
    HTM_BLOCK_SDR_LOGICAL_RESULT_25,
    HTM_BLOCK_SDR_LOGICAL_RESULT_26,
    HTM_BLOCK_SDR_LOGICAL_RESULT_27,
    HTM_BLOCK_SDR_LOGICAL_RESULT_28,
    HTM_BLOCK_SDR_LOGICAL_RESULT_29,
    HTM_BLOCK_SDR_LOGICAL_RESULT_30,
    HTM_BLOCK_SDR_LOGICAL_RESULT_31
  } htm_block_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] HTM_BLOCK_PERMIT [233] = '{
    4'b 1111, // index[  0] HTM_BLOCK_SDR_0_CONTROL_REG
    4'b 1111, // index[  1] HTM_BLOCK_SDR_0_STATUS_REG
    4'b 1111, // index[  2] HTM_BLOCK_SDR_0_0
    4'b 1111, // index[  3] HTM_BLOCK_SDR_0_1
    4'b 1111, // index[  4] HTM_BLOCK_SDR_0_2
    4'b 1111, // index[  5] HTM_BLOCK_SDR_0_3
    4'b 1111, // index[  6] HTM_BLOCK_SDR_0_4
    4'b 1111, // index[  7] HTM_BLOCK_SDR_0_5
    4'b 1111, // index[  8] HTM_BLOCK_SDR_0_6
    4'b 1111, // index[  9] HTM_BLOCK_SDR_0_7
    4'b 1111, // index[ 10] HTM_BLOCK_SDR_0_8
    4'b 1111, // index[ 11] HTM_BLOCK_SDR_0_9
    4'b 1111, // index[ 12] HTM_BLOCK_SDR_0_10
    4'b 1111, // index[ 13] HTM_BLOCK_SDR_0_11
    4'b 1111, // index[ 14] HTM_BLOCK_SDR_0_12
    4'b 1111, // index[ 15] HTM_BLOCK_SDR_0_13
    4'b 1111, // index[ 16] HTM_BLOCK_SDR_0_14
    4'b 1111, // index[ 17] HTM_BLOCK_SDR_0_15
    4'b 1111, // index[ 18] HTM_BLOCK_SDR_0_16
    4'b 1111, // index[ 19] HTM_BLOCK_SDR_0_17
    4'b 1111, // index[ 20] HTM_BLOCK_SDR_0_18
    4'b 1111, // index[ 21] HTM_BLOCK_SDR_0_19
    4'b 1111, // index[ 22] HTM_BLOCK_SDR_0_20
    4'b 1111, // index[ 23] HTM_BLOCK_SDR_0_21
    4'b 1111, // index[ 24] HTM_BLOCK_SDR_0_22
    4'b 1111, // index[ 25] HTM_BLOCK_SDR_0_23
    4'b 1111, // index[ 26] HTM_BLOCK_SDR_0_24
    4'b 1111, // index[ 27] HTM_BLOCK_SDR_0_25
    4'b 1111, // index[ 28] HTM_BLOCK_SDR_0_26
    4'b 1111, // index[ 29] HTM_BLOCK_SDR_0_27
    4'b 1111, // index[ 30] HTM_BLOCK_SDR_0_28
    4'b 1111, // index[ 31] HTM_BLOCK_SDR_0_29
    4'b 1111, // index[ 32] HTM_BLOCK_SDR_0_30
    4'b 1111, // index[ 33] HTM_BLOCK_SDR_0_31
    4'b 1111, // index[ 34] HTM_BLOCK_SDR_0_INDEX_0
    4'b 1111, // index[ 35] HTM_BLOCK_SDR_0_INDEX_1
    4'b 1111, // index[ 36] HTM_BLOCK_SDR_0_INDEX_2
    4'b 1111, // index[ 37] HTM_BLOCK_SDR_0_INDEX_3
    4'b 1111, // index[ 38] HTM_BLOCK_SDR_0_INDEX_4
    4'b 1111, // index[ 39] HTM_BLOCK_SDR_0_INDEX_5
    4'b 1111, // index[ 40] HTM_BLOCK_SDR_0_INDEX_6
    4'b 1111, // index[ 41] HTM_BLOCK_SDR_0_INDEX_7
    4'b 1111, // index[ 42] HTM_BLOCK_SDR_0_INDEX_8
    4'b 1111, // index[ 43] HTM_BLOCK_SDR_0_INDEX_9
    4'b 1111, // index[ 44] HTM_BLOCK_SDR_0_INDEX_10
    4'b 1111, // index[ 45] HTM_BLOCK_SDR_0_INDEX_11
    4'b 1111, // index[ 46] HTM_BLOCK_SDR_0_INDEX_12
    4'b 1111, // index[ 47] HTM_BLOCK_SDR_0_INDEX_13
    4'b 1111, // index[ 48] HTM_BLOCK_SDR_0_INDEX_14
    4'b 1111, // index[ 49] HTM_BLOCK_SDR_0_INDEX_15
    4'b 1111, // index[ 50] HTM_BLOCK_SDR_1_CONTROL_REG
    4'b 1111, // index[ 51] HTM_BLOCK_SDR_1_STATUS_REG
    4'b 1111, // index[ 52] HTM_BLOCK_SDR_1_0
    4'b 1111, // index[ 53] HTM_BLOCK_SDR_1_1
    4'b 1111, // index[ 54] HTM_BLOCK_SDR_1_2
    4'b 1111, // index[ 55] HTM_BLOCK_SDR_1_3
    4'b 1111, // index[ 56] HTM_BLOCK_SDR_1_4
    4'b 1111, // index[ 57] HTM_BLOCK_SDR_1_5
    4'b 1111, // index[ 58] HTM_BLOCK_SDR_1_6
    4'b 1111, // index[ 59] HTM_BLOCK_SDR_1_7
    4'b 1111, // index[ 60] HTM_BLOCK_SDR_1_8
    4'b 1111, // index[ 61] HTM_BLOCK_SDR_1_9
    4'b 1111, // index[ 62] HTM_BLOCK_SDR_1_10
    4'b 1111, // index[ 63] HTM_BLOCK_SDR_1_11
    4'b 1111, // index[ 64] HTM_BLOCK_SDR_1_12
    4'b 1111, // index[ 65] HTM_BLOCK_SDR_1_13
    4'b 1111, // index[ 66] HTM_BLOCK_SDR_1_14
    4'b 1111, // index[ 67] HTM_BLOCK_SDR_1_15
    4'b 1111, // index[ 68] HTM_BLOCK_SDR_1_16
    4'b 1111, // index[ 69] HTM_BLOCK_SDR_1_17
    4'b 1111, // index[ 70] HTM_BLOCK_SDR_1_18
    4'b 1111, // index[ 71] HTM_BLOCK_SDR_1_19
    4'b 1111, // index[ 72] HTM_BLOCK_SDR_1_20
    4'b 1111, // index[ 73] HTM_BLOCK_SDR_1_21
    4'b 1111, // index[ 74] HTM_BLOCK_SDR_1_22
    4'b 1111, // index[ 75] HTM_BLOCK_SDR_1_23
    4'b 1111, // index[ 76] HTM_BLOCK_SDR_1_24
    4'b 1111, // index[ 77] HTM_BLOCK_SDR_1_25
    4'b 1111, // index[ 78] HTM_BLOCK_SDR_1_26
    4'b 1111, // index[ 79] HTM_BLOCK_SDR_1_27
    4'b 1111, // index[ 80] HTM_BLOCK_SDR_1_28
    4'b 1111, // index[ 81] HTM_BLOCK_SDR_1_29
    4'b 1111, // index[ 82] HTM_BLOCK_SDR_1_30
    4'b 1111, // index[ 83] HTM_BLOCK_SDR_1_31
    4'b 1111, // index[ 84] HTM_BLOCK_SDR_1_INDEX_0
    4'b 1111, // index[ 85] HTM_BLOCK_SDR_1_INDEX_1
    4'b 1111, // index[ 86] HTM_BLOCK_SDR_1_INDEX_2
    4'b 1111, // index[ 87] HTM_BLOCK_SDR_1_INDEX_3
    4'b 1111, // index[ 88] HTM_BLOCK_SDR_1_INDEX_4
    4'b 1111, // index[ 89] HTM_BLOCK_SDR_1_INDEX_5
    4'b 1111, // index[ 90] HTM_BLOCK_SDR_1_INDEX_6
    4'b 1111, // index[ 91] HTM_BLOCK_SDR_1_INDEX_7
    4'b 1111, // index[ 92] HTM_BLOCK_SDR_1_INDEX_8
    4'b 1111, // index[ 93] HTM_BLOCK_SDR_1_INDEX_9
    4'b 1111, // index[ 94] HTM_BLOCK_SDR_1_INDEX_10
    4'b 1111, // index[ 95] HTM_BLOCK_SDR_1_INDEX_11
    4'b 1111, // index[ 96] HTM_BLOCK_SDR_1_INDEX_12
    4'b 1111, // index[ 97] HTM_BLOCK_SDR_1_INDEX_13
    4'b 1111, // index[ 98] HTM_BLOCK_SDR_1_INDEX_14
    4'b 1111, // index[ 99] HTM_BLOCK_SDR_1_INDEX_15
    4'b 1111, // index[100] HTM_BLOCK_SDR_2_CONTROL_REG
    4'b 1111, // index[101] HTM_BLOCK_SDR_2_STATUS_REG
    4'b 1111, // index[102] HTM_BLOCK_SDR_2_0
    4'b 1111, // index[103] HTM_BLOCK_SDR_2_1
    4'b 1111, // index[104] HTM_BLOCK_SDR_2_2
    4'b 1111, // index[105] HTM_BLOCK_SDR_2_3
    4'b 1111, // index[106] HTM_BLOCK_SDR_2_4
    4'b 1111, // index[107] HTM_BLOCK_SDR_2_5
    4'b 1111, // index[108] HTM_BLOCK_SDR_2_6
    4'b 1111, // index[109] HTM_BLOCK_SDR_2_7
    4'b 1111, // index[110] HTM_BLOCK_SDR_2_8
    4'b 1111, // index[111] HTM_BLOCK_SDR_2_9
    4'b 1111, // index[112] HTM_BLOCK_SDR_2_10
    4'b 1111, // index[113] HTM_BLOCK_SDR_2_11
    4'b 1111, // index[114] HTM_BLOCK_SDR_2_12
    4'b 1111, // index[115] HTM_BLOCK_SDR_2_13
    4'b 1111, // index[116] HTM_BLOCK_SDR_2_14
    4'b 1111, // index[117] HTM_BLOCK_SDR_2_15
    4'b 1111, // index[118] HTM_BLOCK_SDR_2_16
    4'b 1111, // index[119] HTM_BLOCK_SDR_2_17
    4'b 1111, // index[120] HTM_BLOCK_SDR_2_18
    4'b 1111, // index[121] HTM_BLOCK_SDR_2_19
    4'b 1111, // index[122] HTM_BLOCK_SDR_2_20
    4'b 1111, // index[123] HTM_BLOCK_SDR_2_21
    4'b 1111, // index[124] HTM_BLOCK_SDR_2_22
    4'b 1111, // index[125] HTM_BLOCK_SDR_2_23
    4'b 1111, // index[126] HTM_BLOCK_SDR_2_24
    4'b 1111, // index[127] HTM_BLOCK_SDR_2_25
    4'b 1111, // index[128] HTM_BLOCK_SDR_2_26
    4'b 1111, // index[129] HTM_BLOCK_SDR_2_27
    4'b 1111, // index[130] HTM_BLOCK_SDR_2_28
    4'b 1111, // index[131] HTM_BLOCK_SDR_2_29
    4'b 1111, // index[132] HTM_BLOCK_SDR_2_30
    4'b 1111, // index[133] HTM_BLOCK_SDR_2_31
    4'b 1111, // index[134] HTM_BLOCK_SDR_2_INDEX_0
    4'b 1111, // index[135] HTM_BLOCK_SDR_2_INDEX_1
    4'b 1111, // index[136] HTM_BLOCK_SDR_2_INDEX_2
    4'b 1111, // index[137] HTM_BLOCK_SDR_2_INDEX_3
    4'b 1111, // index[138] HTM_BLOCK_SDR_2_INDEX_4
    4'b 1111, // index[139] HTM_BLOCK_SDR_2_INDEX_5
    4'b 1111, // index[140] HTM_BLOCK_SDR_2_INDEX_6
    4'b 1111, // index[141] HTM_BLOCK_SDR_2_INDEX_7
    4'b 1111, // index[142] HTM_BLOCK_SDR_2_INDEX_8
    4'b 1111, // index[143] HTM_BLOCK_SDR_2_INDEX_9
    4'b 1111, // index[144] HTM_BLOCK_SDR_2_INDEX_10
    4'b 1111, // index[145] HTM_BLOCK_SDR_2_INDEX_11
    4'b 1111, // index[146] HTM_BLOCK_SDR_2_INDEX_12
    4'b 1111, // index[147] HTM_BLOCK_SDR_2_INDEX_13
    4'b 1111, // index[148] HTM_BLOCK_SDR_2_INDEX_14
    4'b 1111, // index[149] HTM_BLOCK_SDR_2_INDEX_15
    4'b 1111, // index[150] HTM_BLOCK_SDR_3_CONTROL_REG
    4'b 1111, // index[151] HTM_BLOCK_SDR_3_STATUS_REG
    4'b 1111, // index[152] HTM_BLOCK_SDR_3_0
    4'b 1111, // index[153] HTM_BLOCK_SDR_3_1
    4'b 1111, // index[154] HTM_BLOCK_SDR_3_2
    4'b 1111, // index[155] HTM_BLOCK_SDR_3_3
    4'b 1111, // index[156] HTM_BLOCK_SDR_3_4
    4'b 1111, // index[157] HTM_BLOCK_SDR_3_5
    4'b 1111, // index[158] HTM_BLOCK_SDR_3_6
    4'b 1111, // index[159] HTM_BLOCK_SDR_3_7
    4'b 1111, // index[160] HTM_BLOCK_SDR_3_8
    4'b 1111, // index[161] HTM_BLOCK_SDR_3_9
    4'b 1111, // index[162] HTM_BLOCK_SDR_3_10
    4'b 1111, // index[163] HTM_BLOCK_SDR_3_11
    4'b 1111, // index[164] HTM_BLOCK_SDR_3_12
    4'b 1111, // index[165] HTM_BLOCK_SDR_3_13
    4'b 1111, // index[166] HTM_BLOCK_SDR_3_14
    4'b 1111, // index[167] HTM_BLOCK_SDR_3_15
    4'b 1111, // index[168] HTM_BLOCK_SDR_3_16
    4'b 1111, // index[169] HTM_BLOCK_SDR_3_17
    4'b 1111, // index[170] HTM_BLOCK_SDR_3_18
    4'b 1111, // index[171] HTM_BLOCK_SDR_3_19
    4'b 1111, // index[172] HTM_BLOCK_SDR_3_20
    4'b 1111, // index[173] HTM_BLOCK_SDR_3_21
    4'b 1111, // index[174] HTM_BLOCK_SDR_3_22
    4'b 1111, // index[175] HTM_BLOCK_SDR_3_23
    4'b 1111, // index[176] HTM_BLOCK_SDR_3_24
    4'b 1111, // index[177] HTM_BLOCK_SDR_3_25
    4'b 1111, // index[178] HTM_BLOCK_SDR_3_26
    4'b 1111, // index[179] HTM_BLOCK_SDR_3_27
    4'b 1111, // index[180] HTM_BLOCK_SDR_3_28
    4'b 1111, // index[181] HTM_BLOCK_SDR_3_29
    4'b 1111, // index[182] HTM_BLOCK_SDR_3_30
    4'b 1111, // index[183] HTM_BLOCK_SDR_3_31
    4'b 1111, // index[184] HTM_BLOCK_SDR_3_INDEX_0
    4'b 1111, // index[185] HTM_BLOCK_SDR_3_INDEX_1
    4'b 1111, // index[186] HTM_BLOCK_SDR_3_INDEX_2
    4'b 1111, // index[187] HTM_BLOCK_SDR_3_INDEX_3
    4'b 1111, // index[188] HTM_BLOCK_SDR_3_INDEX_4
    4'b 1111, // index[189] HTM_BLOCK_SDR_3_INDEX_5
    4'b 1111, // index[190] HTM_BLOCK_SDR_3_INDEX_6
    4'b 1111, // index[191] HTM_BLOCK_SDR_3_INDEX_7
    4'b 1111, // index[192] HTM_BLOCK_SDR_3_INDEX_8
    4'b 1111, // index[193] HTM_BLOCK_SDR_3_INDEX_9
    4'b 1111, // index[194] HTM_BLOCK_SDR_3_INDEX_10
    4'b 1111, // index[195] HTM_BLOCK_SDR_3_INDEX_11
    4'b 1111, // index[196] HTM_BLOCK_SDR_3_INDEX_12
    4'b 1111, // index[197] HTM_BLOCK_SDR_3_INDEX_13
    4'b 1111, // index[198] HTM_BLOCK_SDR_3_INDEX_14
    4'b 1111, // index[199] HTM_BLOCK_SDR_3_INDEX_15
    4'b 1111, // index[200] HTM_BLOCK_SDR_LOGICAL_OP_CONTROL_REG
    4'b 1111, // index[201] HTM_BLOCK_SDR_LOGICAL_RESULT_0
    4'b 1111, // index[202] HTM_BLOCK_SDR_LOGICAL_RESULT_1
    4'b 1111, // index[203] HTM_BLOCK_SDR_LOGICAL_RESULT_2
    4'b 1111, // index[204] HTM_BLOCK_SDR_LOGICAL_RESULT_3
    4'b 1111, // index[205] HTM_BLOCK_SDR_LOGICAL_RESULT_4
    4'b 1111, // index[206] HTM_BLOCK_SDR_LOGICAL_RESULT_5
    4'b 1111, // index[207] HTM_BLOCK_SDR_LOGICAL_RESULT_6
    4'b 1111, // index[208] HTM_BLOCK_SDR_LOGICAL_RESULT_7
    4'b 1111, // index[209] HTM_BLOCK_SDR_LOGICAL_RESULT_8
    4'b 1111, // index[210] HTM_BLOCK_SDR_LOGICAL_RESULT_9
    4'b 1111, // index[211] HTM_BLOCK_SDR_LOGICAL_RESULT_10
    4'b 1111, // index[212] HTM_BLOCK_SDR_LOGICAL_RESULT_11
    4'b 1111, // index[213] HTM_BLOCK_SDR_LOGICAL_RESULT_12
    4'b 1111, // index[214] HTM_BLOCK_SDR_LOGICAL_RESULT_13
    4'b 1111, // index[215] HTM_BLOCK_SDR_LOGICAL_RESULT_14
    4'b 1111, // index[216] HTM_BLOCK_SDR_LOGICAL_RESULT_15
    4'b 1111, // index[217] HTM_BLOCK_SDR_LOGICAL_RESULT_16
    4'b 1111, // index[218] HTM_BLOCK_SDR_LOGICAL_RESULT_17
    4'b 1111, // index[219] HTM_BLOCK_SDR_LOGICAL_RESULT_18
    4'b 1111, // index[220] HTM_BLOCK_SDR_LOGICAL_RESULT_19
    4'b 1111, // index[221] HTM_BLOCK_SDR_LOGICAL_RESULT_20
    4'b 1111, // index[222] HTM_BLOCK_SDR_LOGICAL_RESULT_21
    4'b 1111, // index[223] HTM_BLOCK_SDR_LOGICAL_RESULT_22
    4'b 1111, // index[224] HTM_BLOCK_SDR_LOGICAL_RESULT_23
    4'b 1111, // index[225] HTM_BLOCK_SDR_LOGICAL_RESULT_24
    4'b 1111, // index[226] HTM_BLOCK_SDR_LOGICAL_RESULT_25
    4'b 1111, // index[227] HTM_BLOCK_SDR_LOGICAL_RESULT_26
    4'b 1111, // index[228] HTM_BLOCK_SDR_LOGICAL_RESULT_27
    4'b 1111, // index[229] HTM_BLOCK_SDR_LOGICAL_RESULT_28
    4'b 1111, // index[230] HTM_BLOCK_SDR_LOGICAL_RESULT_29
    4'b 1111, // index[231] HTM_BLOCK_SDR_LOGICAL_RESULT_30
    4'b 1111  // index[232] HTM_BLOCK_SDR_LOGICAL_RESULT_31
  };

endpackage

