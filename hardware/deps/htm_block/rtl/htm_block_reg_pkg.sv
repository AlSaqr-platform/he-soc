// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package htm_block_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } start;
    struct packed {
      logic [30:0] q;
    } unused;
  } htm_block_reg2hw_sdr_control_reg_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_15_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_16_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_17_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_18_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_19_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_20_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_21_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_22_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_23_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_24_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_25_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_26_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_27_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_28_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_29_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_30_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_0_31_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_4_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_5_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_6_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_7_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_8_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_9_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_10_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_11_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_12_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_13_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_14_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } htm_block_reg2hw_sdr_index_0_15_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } start;
    struct packed {
      logic [30:0] d;
      logic        de;
    } unused;
  } htm_block_hw2reg_sdr_control_reg_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_0_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_1_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_2_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_3_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_4_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_5_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_6_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_7_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_8_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_9_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_10_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_11_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_12_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_13_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_14_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } htm_block_hw2reg_sdr_index_0_15_reg_t;

  // Register -> HW type
  typedef struct packed {
    htm_block_reg2hw_sdr_control_reg_reg_t sdr_control_reg; // [1567:1536]
    htm_block_reg2hw_sdr_0_0_reg_t sdr_0_0; // [1535:1504]
    htm_block_reg2hw_sdr_0_1_reg_t sdr_0_1; // [1503:1472]
    htm_block_reg2hw_sdr_0_2_reg_t sdr_0_2; // [1471:1440]
    htm_block_reg2hw_sdr_0_3_reg_t sdr_0_3; // [1439:1408]
    htm_block_reg2hw_sdr_0_4_reg_t sdr_0_4; // [1407:1376]
    htm_block_reg2hw_sdr_0_5_reg_t sdr_0_5; // [1375:1344]
    htm_block_reg2hw_sdr_0_6_reg_t sdr_0_6; // [1343:1312]
    htm_block_reg2hw_sdr_0_7_reg_t sdr_0_7; // [1311:1280]
    htm_block_reg2hw_sdr_0_8_reg_t sdr_0_8; // [1279:1248]
    htm_block_reg2hw_sdr_0_9_reg_t sdr_0_9; // [1247:1216]
    htm_block_reg2hw_sdr_0_10_reg_t sdr_0_10; // [1215:1184]
    htm_block_reg2hw_sdr_0_11_reg_t sdr_0_11; // [1183:1152]
    htm_block_reg2hw_sdr_0_12_reg_t sdr_0_12; // [1151:1120]
    htm_block_reg2hw_sdr_0_13_reg_t sdr_0_13; // [1119:1088]
    htm_block_reg2hw_sdr_0_14_reg_t sdr_0_14; // [1087:1056]
    htm_block_reg2hw_sdr_0_15_reg_t sdr_0_15; // [1055:1024]
    htm_block_reg2hw_sdr_0_16_reg_t sdr_0_16; // [1023:992]
    htm_block_reg2hw_sdr_0_17_reg_t sdr_0_17; // [991:960]
    htm_block_reg2hw_sdr_0_18_reg_t sdr_0_18; // [959:928]
    htm_block_reg2hw_sdr_0_19_reg_t sdr_0_19; // [927:896]
    htm_block_reg2hw_sdr_0_20_reg_t sdr_0_20; // [895:864]
    htm_block_reg2hw_sdr_0_21_reg_t sdr_0_21; // [863:832]
    htm_block_reg2hw_sdr_0_22_reg_t sdr_0_22; // [831:800]
    htm_block_reg2hw_sdr_0_23_reg_t sdr_0_23; // [799:768]
    htm_block_reg2hw_sdr_0_24_reg_t sdr_0_24; // [767:736]
    htm_block_reg2hw_sdr_0_25_reg_t sdr_0_25; // [735:704]
    htm_block_reg2hw_sdr_0_26_reg_t sdr_0_26; // [703:672]
    htm_block_reg2hw_sdr_0_27_reg_t sdr_0_27; // [671:640]
    htm_block_reg2hw_sdr_0_28_reg_t sdr_0_28; // [639:608]
    htm_block_reg2hw_sdr_0_29_reg_t sdr_0_29; // [607:576]
    htm_block_reg2hw_sdr_0_30_reg_t sdr_0_30; // [575:544]
    htm_block_reg2hw_sdr_0_31_reg_t sdr_0_31; // [543:512]
    htm_block_reg2hw_sdr_index_0_0_reg_t sdr_index_0_0; // [511:480]
    htm_block_reg2hw_sdr_index_0_1_reg_t sdr_index_0_1; // [479:448]
    htm_block_reg2hw_sdr_index_0_2_reg_t sdr_index_0_2; // [447:416]
    htm_block_reg2hw_sdr_index_0_3_reg_t sdr_index_0_3; // [415:384]
    htm_block_reg2hw_sdr_index_0_4_reg_t sdr_index_0_4; // [383:352]
    htm_block_reg2hw_sdr_index_0_5_reg_t sdr_index_0_5; // [351:320]
    htm_block_reg2hw_sdr_index_0_6_reg_t sdr_index_0_6; // [319:288]
    htm_block_reg2hw_sdr_index_0_7_reg_t sdr_index_0_7; // [287:256]
    htm_block_reg2hw_sdr_index_0_8_reg_t sdr_index_0_8; // [255:224]
    htm_block_reg2hw_sdr_index_0_9_reg_t sdr_index_0_9; // [223:192]
    htm_block_reg2hw_sdr_index_0_10_reg_t sdr_index_0_10; // [191:160]
    htm_block_reg2hw_sdr_index_0_11_reg_t sdr_index_0_11; // [159:128]
    htm_block_reg2hw_sdr_index_0_12_reg_t sdr_index_0_12; // [127:96]
    htm_block_reg2hw_sdr_index_0_13_reg_t sdr_index_0_13; // [95:64]
    htm_block_reg2hw_sdr_index_0_14_reg_t sdr_index_0_14; // [63:32]
    htm_block_reg2hw_sdr_index_0_15_reg_t sdr_index_0_15; // [31:0]
  } htm_block_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    htm_block_hw2reg_sdr_control_reg_reg_t sdr_control_reg; // [561:528]
    htm_block_hw2reg_sdr_index_0_0_reg_t sdr_index_0_0; // [527:495]
    htm_block_hw2reg_sdr_index_0_1_reg_t sdr_index_0_1; // [494:462]
    htm_block_hw2reg_sdr_index_0_2_reg_t sdr_index_0_2; // [461:429]
    htm_block_hw2reg_sdr_index_0_3_reg_t sdr_index_0_3; // [428:396]
    htm_block_hw2reg_sdr_index_0_4_reg_t sdr_index_0_4; // [395:363]
    htm_block_hw2reg_sdr_index_0_5_reg_t sdr_index_0_5; // [362:330]
    htm_block_hw2reg_sdr_index_0_6_reg_t sdr_index_0_6; // [329:297]
    htm_block_hw2reg_sdr_index_0_7_reg_t sdr_index_0_7; // [296:264]
    htm_block_hw2reg_sdr_index_0_8_reg_t sdr_index_0_8; // [263:231]
    htm_block_hw2reg_sdr_index_0_9_reg_t sdr_index_0_9; // [230:198]
    htm_block_hw2reg_sdr_index_0_10_reg_t sdr_index_0_10; // [197:165]
    htm_block_hw2reg_sdr_index_0_11_reg_t sdr_index_0_11; // [164:132]
    htm_block_hw2reg_sdr_index_0_12_reg_t sdr_index_0_12; // [131:99]
    htm_block_hw2reg_sdr_index_0_13_reg_t sdr_index_0_13; // [98:66]
    htm_block_hw2reg_sdr_index_0_14_reg_t sdr_index_0_14; // [65:33]
    htm_block_hw2reg_sdr_index_0_15_reg_t sdr_index_0_15; // [32:0]
  } htm_block_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_CONTROL_REG_OFFSET = 8'h 0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_0_OFFSET = 8'h 4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_1_OFFSET = 8'h 8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_2_OFFSET = 8'h c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_3_OFFSET = 8'h 10;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_4_OFFSET = 8'h 14;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_5_OFFSET = 8'h 18;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_6_OFFSET = 8'h 1c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_7_OFFSET = 8'h 20;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_8_OFFSET = 8'h 24;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_9_OFFSET = 8'h 28;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_10_OFFSET = 8'h 2c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_11_OFFSET = 8'h 30;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_12_OFFSET = 8'h 34;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_13_OFFSET = 8'h 38;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_14_OFFSET = 8'h 3c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_15_OFFSET = 8'h 40;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_16_OFFSET = 8'h 44;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_17_OFFSET = 8'h 48;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_18_OFFSET = 8'h 4c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_19_OFFSET = 8'h 50;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_20_OFFSET = 8'h 54;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_21_OFFSET = 8'h 58;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_22_OFFSET = 8'h 5c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_23_OFFSET = 8'h 60;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_24_OFFSET = 8'h 64;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_25_OFFSET = 8'h 68;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_26_OFFSET = 8'h 6c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_27_OFFSET = 8'h 70;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_28_OFFSET = 8'h 74;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_29_OFFSET = 8'h 78;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_30_OFFSET = 8'h 7c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_0_31_OFFSET = 8'h 80;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_0_OFFSET = 8'h 84;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_1_OFFSET = 8'h 88;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_2_OFFSET = 8'h 8c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_3_OFFSET = 8'h 90;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_4_OFFSET = 8'h 94;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_5_OFFSET = 8'h 98;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_6_OFFSET = 8'h 9c;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_7_OFFSET = 8'h a0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_8_OFFSET = 8'h a4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_9_OFFSET = 8'h a8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_10_OFFSET = 8'h ac;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_11_OFFSET = 8'h b0;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_12_OFFSET = 8'h b4;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_13_OFFSET = 8'h b8;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_14_OFFSET = 8'h bc;
  parameter logic [BlockAw-1:0] HTM_BLOCK_SDR_INDEX_0_15_OFFSET = 8'h c0;

  // Register index
  typedef enum int {
    HTM_BLOCK_SDR_CONTROL_REG,
    HTM_BLOCK_SDR_0_0,
    HTM_BLOCK_SDR_0_1,
    HTM_BLOCK_SDR_0_2,
    HTM_BLOCK_SDR_0_3,
    HTM_BLOCK_SDR_0_4,
    HTM_BLOCK_SDR_0_5,
    HTM_BLOCK_SDR_0_6,
    HTM_BLOCK_SDR_0_7,
    HTM_BLOCK_SDR_0_8,
    HTM_BLOCK_SDR_0_9,
    HTM_BLOCK_SDR_0_10,
    HTM_BLOCK_SDR_0_11,
    HTM_BLOCK_SDR_0_12,
    HTM_BLOCK_SDR_0_13,
    HTM_BLOCK_SDR_0_14,
    HTM_BLOCK_SDR_0_15,
    HTM_BLOCK_SDR_0_16,
    HTM_BLOCK_SDR_0_17,
    HTM_BLOCK_SDR_0_18,
    HTM_BLOCK_SDR_0_19,
    HTM_BLOCK_SDR_0_20,
    HTM_BLOCK_SDR_0_21,
    HTM_BLOCK_SDR_0_22,
    HTM_BLOCK_SDR_0_23,
    HTM_BLOCK_SDR_0_24,
    HTM_BLOCK_SDR_0_25,
    HTM_BLOCK_SDR_0_26,
    HTM_BLOCK_SDR_0_27,
    HTM_BLOCK_SDR_0_28,
    HTM_BLOCK_SDR_0_29,
    HTM_BLOCK_SDR_0_30,
    HTM_BLOCK_SDR_0_31,
    HTM_BLOCK_SDR_INDEX_0_0,
    HTM_BLOCK_SDR_INDEX_0_1,
    HTM_BLOCK_SDR_INDEX_0_2,
    HTM_BLOCK_SDR_INDEX_0_3,
    HTM_BLOCK_SDR_INDEX_0_4,
    HTM_BLOCK_SDR_INDEX_0_5,
    HTM_BLOCK_SDR_INDEX_0_6,
    HTM_BLOCK_SDR_INDEX_0_7,
    HTM_BLOCK_SDR_INDEX_0_8,
    HTM_BLOCK_SDR_INDEX_0_9,
    HTM_BLOCK_SDR_INDEX_0_10,
    HTM_BLOCK_SDR_INDEX_0_11,
    HTM_BLOCK_SDR_INDEX_0_12,
    HTM_BLOCK_SDR_INDEX_0_13,
    HTM_BLOCK_SDR_INDEX_0_14,
    HTM_BLOCK_SDR_INDEX_0_15
  } htm_block_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] HTM_BLOCK_PERMIT [49] = '{
    4'b 1111, // index[ 0] HTM_BLOCK_SDR_CONTROL_REG
    4'b 1111, // index[ 1] HTM_BLOCK_SDR_0_0
    4'b 1111, // index[ 2] HTM_BLOCK_SDR_0_1
    4'b 1111, // index[ 3] HTM_BLOCK_SDR_0_2
    4'b 1111, // index[ 4] HTM_BLOCK_SDR_0_3
    4'b 1111, // index[ 5] HTM_BLOCK_SDR_0_4
    4'b 1111, // index[ 6] HTM_BLOCK_SDR_0_5
    4'b 1111, // index[ 7] HTM_BLOCK_SDR_0_6
    4'b 1111, // index[ 8] HTM_BLOCK_SDR_0_7
    4'b 1111, // index[ 9] HTM_BLOCK_SDR_0_8
    4'b 1111, // index[10] HTM_BLOCK_SDR_0_9
    4'b 1111, // index[11] HTM_BLOCK_SDR_0_10
    4'b 1111, // index[12] HTM_BLOCK_SDR_0_11
    4'b 1111, // index[13] HTM_BLOCK_SDR_0_12
    4'b 1111, // index[14] HTM_BLOCK_SDR_0_13
    4'b 1111, // index[15] HTM_BLOCK_SDR_0_14
    4'b 1111, // index[16] HTM_BLOCK_SDR_0_15
    4'b 1111, // index[17] HTM_BLOCK_SDR_0_16
    4'b 1111, // index[18] HTM_BLOCK_SDR_0_17
    4'b 1111, // index[19] HTM_BLOCK_SDR_0_18
    4'b 1111, // index[20] HTM_BLOCK_SDR_0_19
    4'b 1111, // index[21] HTM_BLOCK_SDR_0_20
    4'b 1111, // index[22] HTM_BLOCK_SDR_0_21
    4'b 1111, // index[23] HTM_BLOCK_SDR_0_22
    4'b 1111, // index[24] HTM_BLOCK_SDR_0_23
    4'b 1111, // index[25] HTM_BLOCK_SDR_0_24
    4'b 1111, // index[26] HTM_BLOCK_SDR_0_25
    4'b 1111, // index[27] HTM_BLOCK_SDR_0_26
    4'b 1111, // index[28] HTM_BLOCK_SDR_0_27
    4'b 1111, // index[29] HTM_BLOCK_SDR_0_28
    4'b 1111, // index[30] HTM_BLOCK_SDR_0_29
    4'b 1111, // index[31] HTM_BLOCK_SDR_0_30
    4'b 1111, // index[32] HTM_BLOCK_SDR_0_31
    4'b 1111, // index[33] HTM_BLOCK_SDR_INDEX_0_0
    4'b 1111, // index[34] HTM_BLOCK_SDR_INDEX_0_1
    4'b 1111, // index[35] HTM_BLOCK_SDR_INDEX_0_2
    4'b 1111, // index[36] HTM_BLOCK_SDR_INDEX_0_3
    4'b 1111, // index[37] HTM_BLOCK_SDR_INDEX_0_4
    4'b 1111, // index[38] HTM_BLOCK_SDR_INDEX_0_5
    4'b 1111, // index[39] HTM_BLOCK_SDR_INDEX_0_6
    4'b 1111, // index[40] HTM_BLOCK_SDR_INDEX_0_7
    4'b 1111, // index[41] HTM_BLOCK_SDR_INDEX_0_8
    4'b 1111, // index[42] HTM_BLOCK_SDR_INDEX_0_9
    4'b 1111, // index[43] HTM_BLOCK_SDR_INDEX_0_10
    4'b 1111, // index[44] HTM_BLOCK_SDR_INDEX_0_11
    4'b 1111, // index[45] HTM_BLOCK_SDR_INDEX_0_12
    4'b 1111, // index[46] HTM_BLOCK_SDR_INDEX_0_13
    4'b 1111, // index[47] HTM_BLOCK_SDR_INDEX_0_14
    4'b 1111  // index[48] HTM_BLOCK_SDR_INDEX_0_15
  };

endpackage

