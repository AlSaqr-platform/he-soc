// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module htm_block_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 10
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output htm_block_reg_pkg::htm_block_reg2hw_t reg2hw, // Write
  input  htm_block_reg_pkg::htm_block_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import htm_block_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic sdr_0_control_reg_start_qs;
  logic sdr_0_control_reg_start_wd;
  logic sdr_0_control_reg_start_we;
  logic [30:0] sdr_0_control_reg_unused_qs;
  logic [30:0] sdr_0_control_reg_unused_wd;
  logic sdr_0_control_reg_unused_we;
  logic [7:0] sdr_0_status_reg_number_of_indexes_qs;
  logic [7:0] sdr_0_status_reg_number_of_indexes_wd;
  logic sdr_0_status_reg_number_of_indexes_we;
  logic [16:0] sdr_0_status_reg_number_of_ones_qs;
  logic [16:0] sdr_0_status_reg_number_of_ones_wd;
  logic sdr_0_status_reg_number_of_ones_we;
  logic [3:0] sdr_0_status_reg_unused_qs;
  logic [3:0] sdr_0_status_reg_unused_wd;
  logic sdr_0_status_reg_unused_we;
  logic sdr_0_status_reg_error_indexes_gt_32_qs;
  logic sdr_0_status_reg_error_indexes_gt_32_wd;
  logic sdr_0_status_reg_error_indexes_gt_32_we;
  logic sdr_0_status_reg_error_fifo_full_qs;
  logic sdr_0_status_reg_error_fifo_full_wd;
  logic sdr_0_status_reg_error_fifo_full_we;
  logic sdr_0_status_reg_done_qs;
  logic sdr_0_status_reg_done_wd;
  logic sdr_0_status_reg_done_we;
  logic [31:0] sdr_0_0_qs;
  logic [31:0] sdr_0_0_wd;
  logic sdr_0_0_we;
  logic [31:0] sdr_0_1_qs;
  logic [31:0] sdr_0_1_wd;
  logic sdr_0_1_we;
  logic [31:0] sdr_0_2_qs;
  logic [31:0] sdr_0_2_wd;
  logic sdr_0_2_we;
  logic [31:0] sdr_0_3_qs;
  logic [31:0] sdr_0_3_wd;
  logic sdr_0_3_we;
  logic [31:0] sdr_0_4_qs;
  logic [31:0] sdr_0_4_wd;
  logic sdr_0_4_we;
  logic [31:0] sdr_0_5_qs;
  logic [31:0] sdr_0_5_wd;
  logic sdr_0_5_we;
  logic [31:0] sdr_0_6_qs;
  logic [31:0] sdr_0_6_wd;
  logic sdr_0_6_we;
  logic [31:0] sdr_0_7_qs;
  logic [31:0] sdr_0_7_wd;
  logic sdr_0_7_we;
  logic [31:0] sdr_0_8_qs;
  logic [31:0] sdr_0_8_wd;
  logic sdr_0_8_we;
  logic [31:0] sdr_0_9_qs;
  logic [31:0] sdr_0_9_wd;
  logic sdr_0_9_we;
  logic [31:0] sdr_0_10_qs;
  logic [31:0] sdr_0_10_wd;
  logic sdr_0_10_we;
  logic [31:0] sdr_0_11_qs;
  logic [31:0] sdr_0_11_wd;
  logic sdr_0_11_we;
  logic [31:0] sdr_0_12_qs;
  logic [31:0] sdr_0_12_wd;
  logic sdr_0_12_we;
  logic [31:0] sdr_0_13_qs;
  logic [31:0] sdr_0_13_wd;
  logic sdr_0_13_we;
  logic [31:0] sdr_0_14_qs;
  logic [31:0] sdr_0_14_wd;
  logic sdr_0_14_we;
  logic [31:0] sdr_0_15_qs;
  logic [31:0] sdr_0_15_wd;
  logic sdr_0_15_we;
  logic [31:0] sdr_0_16_qs;
  logic [31:0] sdr_0_16_wd;
  logic sdr_0_16_we;
  logic [31:0] sdr_0_17_qs;
  logic [31:0] sdr_0_17_wd;
  logic sdr_0_17_we;
  logic [31:0] sdr_0_18_qs;
  logic [31:0] sdr_0_18_wd;
  logic sdr_0_18_we;
  logic [31:0] sdr_0_19_qs;
  logic [31:0] sdr_0_19_wd;
  logic sdr_0_19_we;
  logic [31:0] sdr_0_20_qs;
  logic [31:0] sdr_0_20_wd;
  logic sdr_0_20_we;
  logic [31:0] sdr_0_21_qs;
  logic [31:0] sdr_0_21_wd;
  logic sdr_0_21_we;
  logic [31:0] sdr_0_22_qs;
  logic [31:0] sdr_0_22_wd;
  logic sdr_0_22_we;
  logic [31:0] sdr_0_23_qs;
  logic [31:0] sdr_0_23_wd;
  logic sdr_0_23_we;
  logic [31:0] sdr_0_24_qs;
  logic [31:0] sdr_0_24_wd;
  logic sdr_0_24_we;
  logic [31:0] sdr_0_25_qs;
  logic [31:0] sdr_0_25_wd;
  logic sdr_0_25_we;
  logic [31:0] sdr_0_26_qs;
  logic [31:0] sdr_0_26_wd;
  logic sdr_0_26_we;
  logic [31:0] sdr_0_27_qs;
  logic [31:0] sdr_0_27_wd;
  logic sdr_0_27_we;
  logic [31:0] sdr_0_28_qs;
  logic [31:0] sdr_0_28_wd;
  logic sdr_0_28_we;
  logic [31:0] sdr_0_29_qs;
  logic [31:0] sdr_0_29_wd;
  logic sdr_0_29_we;
  logic [31:0] sdr_0_30_qs;
  logic [31:0] sdr_0_30_wd;
  logic sdr_0_30_we;
  logic [31:0] sdr_0_31_qs;
  logic [31:0] sdr_0_31_wd;
  logic sdr_0_31_we;
  logic [31:0] sdr_0_index_0_qs;
  logic [31:0] sdr_0_index_1_qs;
  logic [31:0] sdr_0_index_2_qs;
  logic [31:0] sdr_0_index_3_qs;
  logic [31:0] sdr_0_index_4_qs;
  logic [31:0] sdr_0_index_5_qs;
  logic [31:0] sdr_0_index_6_qs;
  logic [31:0] sdr_0_index_7_qs;
  logic [31:0] sdr_0_index_8_qs;
  logic [31:0] sdr_0_index_9_qs;
  logic [31:0] sdr_0_index_10_qs;
  logic [31:0] sdr_0_index_11_qs;
  logic [31:0] sdr_0_index_12_qs;
  logic [31:0] sdr_0_index_13_qs;
  logic [31:0] sdr_0_index_14_qs;
  logic [31:0] sdr_0_index_15_qs;
  logic sdr_1_control_reg_start_qs;
  logic sdr_1_control_reg_start_wd;
  logic sdr_1_control_reg_start_we;
  logic [30:0] sdr_1_control_reg_unused_qs;
  logic [30:0] sdr_1_control_reg_unused_wd;
  logic sdr_1_control_reg_unused_we;
  logic [7:0] sdr_1_status_reg_number_of_indexes_qs;
  logic [7:0] sdr_1_status_reg_number_of_indexes_wd;
  logic sdr_1_status_reg_number_of_indexes_we;
  logic [16:0] sdr_1_status_reg_number_of_ones_qs;
  logic [16:0] sdr_1_status_reg_number_of_ones_wd;
  logic sdr_1_status_reg_number_of_ones_we;
  logic [3:0] sdr_1_status_reg_unused_qs;
  logic [3:0] sdr_1_status_reg_unused_wd;
  logic sdr_1_status_reg_unused_we;
  logic sdr_1_status_reg_error_indexes_gt_32_qs;
  logic sdr_1_status_reg_error_indexes_gt_32_wd;
  logic sdr_1_status_reg_error_indexes_gt_32_we;
  logic sdr_1_status_reg_error_fifo_full_qs;
  logic sdr_1_status_reg_error_fifo_full_wd;
  logic sdr_1_status_reg_error_fifo_full_we;
  logic sdr_1_status_reg_done_qs;
  logic sdr_1_status_reg_done_wd;
  logic sdr_1_status_reg_done_we;
  logic [31:0] sdr_1_0_qs;
  logic [31:0] sdr_1_0_wd;
  logic sdr_1_0_we;
  logic [31:0] sdr_1_1_qs;
  logic [31:0] sdr_1_1_wd;
  logic sdr_1_1_we;
  logic [31:0] sdr_1_2_qs;
  logic [31:0] sdr_1_2_wd;
  logic sdr_1_2_we;
  logic [31:0] sdr_1_3_qs;
  logic [31:0] sdr_1_3_wd;
  logic sdr_1_3_we;
  logic [31:0] sdr_1_4_qs;
  logic [31:0] sdr_1_4_wd;
  logic sdr_1_4_we;
  logic [31:0] sdr_1_5_qs;
  logic [31:0] sdr_1_5_wd;
  logic sdr_1_5_we;
  logic [31:0] sdr_1_6_qs;
  logic [31:0] sdr_1_6_wd;
  logic sdr_1_6_we;
  logic [31:0] sdr_1_7_qs;
  logic [31:0] sdr_1_7_wd;
  logic sdr_1_7_we;
  logic [31:0] sdr_1_8_qs;
  logic [31:0] sdr_1_8_wd;
  logic sdr_1_8_we;
  logic [31:0] sdr_1_9_qs;
  logic [31:0] sdr_1_9_wd;
  logic sdr_1_9_we;
  logic [31:0] sdr_1_10_qs;
  logic [31:0] sdr_1_10_wd;
  logic sdr_1_10_we;
  logic [31:0] sdr_1_11_qs;
  logic [31:0] sdr_1_11_wd;
  logic sdr_1_11_we;
  logic [31:0] sdr_1_12_qs;
  logic [31:0] sdr_1_12_wd;
  logic sdr_1_12_we;
  logic [31:0] sdr_1_13_qs;
  logic [31:0] sdr_1_13_wd;
  logic sdr_1_13_we;
  logic [31:0] sdr_1_14_qs;
  logic [31:0] sdr_1_14_wd;
  logic sdr_1_14_we;
  logic [31:0] sdr_1_15_qs;
  logic [31:0] sdr_1_15_wd;
  logic sdr_1_15_we;
  logic [31:0] sdr_1_16_qs;
  logic [31:0] sdr_1_16_wd;
  logic sdr_1_16_we;
  logic [31:0] sdr_1_17_qs;
  logic [31:0] sdr_1_17_wd;
  logic sdr_1_17_we;
  logic [31:0] sdr_1_18_qs;
  logic [31:0] sdr_1_18_wd;
  logic sdr_1_18_we;
  logic [31:0] sdr_1_19_qs;
  logic [31:0] sdr_1_19_wd;
  logic sdr_1_19_we;
  logic [31:0] sdr_1_20_qs;
  logic [31:0] sdr_1_20_wd;
  logic sdr_1_20_we;
  logic [31:0] sdr_1_21_qs;
  logic [31:0] sdr_1_21_wd;
  logic sdr_1_21_we;
  logic [31:0] sdr_1_22_qs;
  logic [31:0] sdr_1_22_wd;
  logic sdr_1_22_we;
  logic [31:0] sdr_1_23_qs;
  logic [31:0] sdr_1_23_wd;
  logic sdr_1_23_we;
  logic [31:0] sdr_1_24_qs;
  logic [31:0] sdr_1_24_wd;
  logic sdr_1_24_we;
  logic [31:0] sdr_1_25_qs;
  logic [31:0] sdr_1_25_wd;
  logic sdr_1_25_we;
  logic [31:0] sdr_1_26_qs;
  logic [31:0] sdr_1_26_wd;
  logic sdr_1_26_we;
  logic [31:0] sdr_1_27_qs;
  logic [31:0] sdr_1_27_wd;
  logic sdr_1_27_we;
  logic [31:0] sdr_1_28_qs;
  logic [31:0] sdr_1_28_wd;
  logic sdr_1_28_we;
  logic [31:0] sdr_1_29_qs;
  logic [31:0] sdr_1_29_wd;
  logic sdr_1_29_we;
  logic [31:0] sdr_1_30_qs;
  logic [31:0] sdr_1_30_wd;
  logic sdr_1_30_we;
  logic [31:0] sdr_1_31_qs;
  logic [31:0] sdr_1_31_wd;
  logic sdr_1_31_we;
  logic [31:0] sdr_1_index_0_qs;
  logic [31:0] sdr_1_index_1_qs;
  logic [31:0] sdr_1_index_2_qs;
  logic [31:0] sdr_1_index_3_qs;
  logic [31:0] sdr_1_index_4_qs;
  logic [31:0] sdr_1_index_5_qs;
  logic [31:0] sdr_1_index_6_qs;
  logic [31:0] sdr_1_index_7_qs;
  logic [31:0] sdr_1_index_8_qs;
  logic [31:0] sdr_1_index_9_qs;
  logic [31:0] sdr_1_index_10_qs;
  logic [31:0] sdr_1_index_11_qs;
  logic [31:0] sdr_1_index_12_qs;
  logic [31:0] sdr_1_index_13_qs;
  logic [31:0] sdr_1_index_14_qs;
  logic [31:0] sdr_1_index_15_qs;
  logic sdr_2_control_reg_start_qs;
  logic sdr_2_control_reg_start_wd;
  logic sdr_2_control_reg_start_we;
  logic [30:0] sdr_2_control_reg_unused_qs;
  logic [30:0] sdr_2_control_reg_unused_wd;
  logic sdr_2_control_reg_unused_we;
  logic [7:0] sdr_2_status_reg_number_of_indexes_qs;
  logic [7:0] sdr_2_status_reg_number_of_indexes_wd;
  logic sdr_2_status_reg_number_of_indexes_we;
  logic [16:0] sdr_2_status_reg_number_of_ones_qs;
  logic [16:0] sdr_2_status_reg_number_of_ones_wd;
  logic sdr_2_status_reg_number_of_ones_we;
  logic [3:0] sdr_2_status_reg_unused_qs;
  logic [3:0] sdr_2_status_reg_unused_wd;
  logic sdr_2_status_reg_unused_we;
  logic sdr_2_status_reg_error_indexes_gt_32_qs;
  logic sdr_2_status_reg_error_indexes_gt_32_wd;
  logic sdr_2_status_reg_error_indexes_gt_32_we;
  logic sdr_2_status_reg_error_fifo_full_qs;
  logic sdr_2_status_reg_error_fifo_full_wd;
  logic sdr_2_status_reg_error_fifo_full_we;
  logic sdr_2_status_reg_done_qs;
  logic sdr_2_status_reg_done_wd;
  logic sdr_2_status_reg_done_we;
  logic [31:0] sdr_2_0_qs;
  logic [31:0] sdr_2_0_wd;
  logic sdr_2_0_we;
  logic [31:0] sdr_2_1_qs;
  logic [31:0] sdr_2_1_wd;
  logic sdr_2_1_we;
  logic [31:0] sdr_2_2_qs;
  logic [31:0] sdr_2_2_wd;
  logic sdr_2_2_we;
  logic [31:0] sdr_2_3_qs;
  logic [31:0] sdr_2_3_wd;
  logic sdr_2_3_we;
  logic [31:0] sdr_2_4_qs;
  logic [31:0] sdr_2_4_wd;
  logic sdr_2_4_we;
  logic [31:0] sdr_2_5_qs;
  logic [31:0] sdr_2_5_wd;
  logic sdr_2_5_we;
  logic [31:0] sdr_2_6_qs;
  logic [31:0] sdr_2_6_wd;
  logic sdr_2_6_we;
  logic [31:0] sdr_2_7_qs;
  logic [31:0] sdr_2_7_wd;
  logic sdr_2_7_we;
  logic [31:0] sdr_2_8_qs;
  logic [31:0] sdr_2_8_wd;
  logic sdr_2_8_we;
  logic [31:0] sdr_2_9_qs;
  logic [31:0] sdr_2_9_wd;
  logic sdr_2_9_we;
  logic [31:0] sdr_2_10_qs;
  logic [31:0] sdr_2_10_wd;
  logic sdr_2_10_we;
  logic [31:0] sdr_2_11_qs;
  logic [31:0] sdr_2_11_wd;
  logic sdr_2_11_we;
  logic [31:0] sdr_2_12_qs;
  logic [31:0] sdr_2_12_wd;
  logic sdr_2_12_we;
  logic [31:0] sdr_2_13_qs;
  logic [31:0] sdr_2_13_wd;
  logic sdr_2_13_we;
  logic [31:0] sdr_2_14_qs;
  logic [31:0] sdr_2_14_wd;
  logic sdr_2_14_we;
  logic [31:0] sdr_2_15_qs;
  logic [31:0] sdr_2_15_wd;
  logic sdr_2_15_we;
  logic [31:0] sdr_2_16_qs;
  logic [31:0] sdr_2_16_wd;
  logic sdr_2_16_we;
  logic [31:0] sdr_2_17_qs;
  logic [31:0] sdr_2_17_wd;
  logic sdr_2_17_we;
  logic [31:0] sdr_2_18_qs;
  logic [31:0] sdr_2_18_wd;
  logic sdr_2_18_we;
  logic [31:0] sdr_2_19_qs;
  logic [31:0] sdr_2_19_wd;
  logic sdr_2_19_we;
  logic [31:0] sdr_2_20_qs;
  logic [31:0] sdr_2_20_wd;
  logic sdr_2_20_we;
  logic [31:0] sdr_2_21_qs;
  logic [31:0] sdr_2_21_wd;
  logic sdr_2_21_we;
  logic [31:0] sdr_2_22_qs;
  logic [31:0] sdr_2_22_wd;
  logic sdr_2_22_we;
  logic [31:0] sdr_2_23_qs;
  logic [31:0] sdr_2_23_wd;
  logic sdr_2_23_we;
  logic [31:0] sdr_2_24_qs;
  logic [31:0] sdr_2_24_wd;
  logic sdr_2_24_we;
  logic [31:0] sdr_2_25_qs;
  logic [31:0] sdr_2_25_wd;
  logic sdr_2_25_we;
  logic [31:0] sdr_2_26_qs;
  logic [31:0] sdr_2_26_wd;
  logic sdr_2_26_we;
  logic [31:0] sdr_2_27_qs;
  logic [31:0] sdr_2_27_wd;
  logic sdr_2_27_we;
  logic [31:0] sdr_2_28_qs;
  logic [31:0] sdr_2_28_wd;
  logic sdr_2_28_we;
  logic [31:0] sdr_2_29_qs;
  logic [31:0] sdr_2_29_wd;
  logic sdr_2_29_we;
  logic [31:0] sdr_2_30_qs;
  logic [31:0] sdr_2_30_wd;
  logic sdr_2_30_we;
  logic [31:0] sdr_2_31_qs;
  logic [31:0] sdr_2_31_wd;
  logic sdr_2_31_we;
  logic [31:0] sdr_2_index_0_qs;
  logic [31:0] sdr_2_index_1_qs;
  logic [31:0] sdr_2_index_2_qs;
  logic [31:0] sdr_2_index_3_qs;
  logic [31:0] sdr_2_index_4_qs;
  logic [31:0] sdr_2_index_5_qs;
  logic [31:0] sdr_2_index_6_qs;
  logic [31:0] sdr_2_index_7_qs;
  logic [31:0] sdr_2_index_8_qs;
  logic [31:0] sdr_2_index_9_qs;
  logic [31:0] sdr_2_index_10_qs;
  logic [31:0] sdr_2_index_11_qs;
  logic [31:0] sdr_2_index_12_qs;
  logic [31:0] sdr_2_index_13_qs;
  logic [31:0] sdr_2_index_14_qs;
  logic [31:0] sdr_2_index_15_qs;
  logic sdr_3_control_reg_start_qs;
  logic sdr_3_control_reg_start_wd;
  logic sdr_3_control_reg_start_we;
  logic [30:0] sdr_3_control_reg_unused_qs;
  logic [30:0] sdr_3_control_reg_unused_wd;
  logic sdr_3_control_reg_unused_we;
  logic [7:0] sdr_3_status_reg_number_of_indexes_qs;
  logic [7:0] sdr_3_status_reg_number_of_indexes_wd;
  logic sdr_3_status_reg_number_of_indexes_we;
  logic [16:0] sdr_3_status_reg_number_of_ones_qs;
  logic [16:0] sdr_3_status_reg_number_of_ones_wd;
  logic sdr_3_status_reg_number_of_ones_we;
  logic [3:0] sdr_3_status_reg_unused_qs;
  logic [3:0] sdr_3_status_reg_unused_wd;
  logic sdr_3_status_reg_unused_we;
  logic sdr_3_status_reg_error_indexes_gt_32_qs;
  logic sdr_3_status_reg_error_indexes_gt_32_wd;
  logic sdr_3_status_reg_error_indexes_gt_32_we;
  logic sdr_3_status_reg_error_fifo_full_qs;
  logic sdr_3_status_reg_error_fifo_full_wd;
  logic sdr_3_status_reg_error_fifo_full_we;
  logic sdr_3_status_reg_done_qs;
  logic sdr_3_status_reg_done_wd;
  logic sdr_3_status_reg_done_we;
  logic [31:0] sdr_3_0_qs;
  logic [31:0] sdr_3_0_wd;
  logic sdr_3_0_we;
  logic [31:0] sdr_3_1_qs;
  logic [31:0] sdr_3_1_wd;
  logic sdr_3_1_we;
  logic [31:0] sdr_3_2_qs;
  logic [31:0] sdr_3_2_wd;
  logic sdr_3_2_we;
  logic [31:0] sdr_3_3_qs;
  logic [31:0] sdr_3_3_wd;
  logic sdr_3_3_we;
  logic [31:0] sdr_3_4_qs;
  logic [31:0] sdr_3_4_wd;
  logic sdr_3_4_we;
  logic [31:0] sdr_3_5_qs;
  logic [31:0] sdr_3_5_wd;
  logic sdr_3_5_we;
  logic [31:0] sdr_3_6_qs;
  logic [31:0] sdr_3_6_wd;
  logic sdr_3_6_we;
  logic [31:0] sdr_3_7_qs;
  logic [31:0] sdr_3_7_wd;
  logic sdr_3_7_we;
  logic [31:0] sdr_3_8_qs;
  logic [31:0] sdr_3_8_wd;
  logic sdr_3_8_we;
  logic [31:0] sdr_3_9_qs;
  logic [31:0] sdr_3_9_wd;
  logic sdr_3_9_we;
  logic [31:0] sdr_3_10_qs;
  logic [31:0] sdr_3_10_wd;
  logic sdr_3_10_we;
  logic [31:0] sdr_3_11_qs;
  logic [31:0] sdr_3_11_wd;
  logic sdr_3_11_we;
  logic [31:0] sdr_3_12_qs;
  logic [31:0] sdr_3_12_wd;
  logic sdr_3_12_we;
  logic [31:0] sdr_3_13_qs;
  logic [31:0] sdr_3_13_wd;
  logic sdr_3_13_we;
  logic [31:0] sdr_3_14_qs;
  logic [31:0] sdr_3_14_wd;
  logic sdr_3_14_we;
  logic [31:0] sdr_3_15_qs;
  logic [31:0] sdr_3_15_wd;
  logic sdr_3_15_we;
  logic [31:0] sdr_3_16_qs;
  logic [31:0] sdr_3_16_wd;
  logic sdr_3_16_we;
  logic [31:0] sdr_3_17_qs;
  logic [31:0] sdr_3_17_wd;
  logic sdr_3_17_we;
  logic [31:0] sdr_3_18_qs;
  logic [31:0] sdr_3_18_wd;
  logic sdr_3_18_we;
  logic [31:0] sdr_3_19_qs;
  logic [31:0] sdr_3_19_wd;
  logic sdr_3_19_we;
  logic [31:0] sdr_3_20_qs;
  logic [31:0] sdr_3_20_wd;
  logic sdr_3_20_we;
  logic [31:0] sdr_3_21_qs;
  logic [31:0] sdr_3_21_wd;
  logic sdr_3_21_we;
  logic [31:0] sdr_3_22_qs;
  logic [31:0] sdr_3_22_wd;
  logic sdr_3_22_we;
  logic [31:0] sdr_3_23_qs;
  logic [31:0] sdr_3_23_wd;
  logic sdr_3_23_we;
  logic [31:0] sdr_3_24_qs;
  logic [31:0] sdr_3_24_wd;
  logic sdr_3_24_we;
  logic [31:0] sdr_3_25_qs;
  logic [31:0] sdr_3_25_wd;
  logic sdr_3_25_we;
  logic [31:0] sdr_3_26_qs;
  logic [31:0] sdr_3_26_wd;
  logic sdr_3_26_we;
  logic [31:0] sdr_3_27_qs;
  logic [31:0] sdr_3_27_wd;
  logic sdr_3_27_we;
  logic [31:0] sdr_3_28_qs;
  logic [31:0] sdr_3_28_wd;
  logic sdr_3_28_we;
  logic [31:0] sdr_3_29_qs;
  logic [31:0] sdr_3_29_wd;
  logic sdr_3_29_we;
  logic [31:0] sdr_3_30_qs;
  logic [31:0] sdr_3_30_wd;
  logic sdr_3_30_we;
  logic [31:0] sdr_3_31_qs;
  logic [31:0] sdr_3_31_wd;
  logic sdr_3_31_we;
  logic [31:0] sdr_3_index_0_qs;
  logic [31:0] sdr_3_index_1_qs;
  logic [31:0] sdr_3_index_2_qs;
  logic [31:0] sdr_3_index_3_qs;
  logic [31:0] sdr_3_index_4_qs;
  logic [31:0] sdr_3_index_5_qs;
  logic [31:0] sdr_3_index_6_qs;
  logic [31:0] sdr_3_index_7_qs;
  logic [31:0] sdr_3_index_8_qs;
  logic [31:0] sdr_3_index_9_qs;
  logic [31:0] sdr_3_index_10_qs;
  logic [31:0] sdr_3_index_11_qs;
  logic [31:0] sdr_3_index_12_qs;
  logic [31:0] sdr_3_index_13_qs;
  logic [31:0] sdr_3_index_14_qs;
  logic [31:0] sdr_3_index_15_qs;
  logic [3:0] sdr_logical_op_control_reg_sdr_src_1_qs;
  logic [3:0] sdr_logical_op_control_reg_sdr_src_1_wd;
  logic sdr_logical_op_control_reg_sdr_src_1_we;
  logic [3:0] sdr_logical_op_control_reg_sdr_src_2_qs;
  logic [3:0] sdr_logical_op_control_reg_sdr_src_2_wd;
  logic sdr_logical_op_control_reg_sdr_src_2_we;
  logic [3:0] sdr_logical_op_control_reg_destination_sdr_qs;
  logic [3:0] sdr_logical_op_control_reg_destination_sdr_wd;
  logic sdr_logical_op_control_reg_destination_sdr_we;
  logic [3:0] sdr_logical_op_control_reg_bitwise_logical_operation_qs;
  logic [3:0] sdr_logical_op_control_reg_bitwise_logical_operation_wd;
  logic sdr_logical_op_control_reg_bitwise_logical_operation_we;
  logic [19:0] sdr_logical_op_control_reg_unused_qs;
  logic [19:0] sdr_logical_op_control_reg_unused_wd;
  logic sdr_logical_op_control_reg_unused_we;
  logic [31:0] sdr_logical_result_0_qs;
  logic [31:0] sdr_logical_result_0_wd;
  logic sdr_logical_result_0_we;
  logic [31:0] sdr_logical_result_1_qs;
  logic [31:0] sdr_logical_result_1_wd;
  logic sdr_logical_result_1_we;
  logic [31:0] sdr_logical_result_2_qs;
  logic [31:0] sdr_logical_result_2_wd;
  logic sdr_logical_result_2_we;
  logic [31:0] sdr_logical_result_3_qs;
  logic [31:0] sdr_logical_result_3_wd;
  logic sdr_logical_result_3_we;
  logic [31:0] sdr_logical_result_4_qs;
  logic [31:0] sdr_logical_result_4_wd;
  logic sdr_logical_result_4_we;
  logic [31:0] sdr_logical_result_5_qs;
  logic [31:0] sdr_logical_result_5_wd;
  logic sdr_logical_result_5_we;
  logic [31:0] sdr_logical_result_6_qs;
  logic [31:0] sdr_logical_result_6_wd;
  logic sdr_logical_result_6_we;
  logic [31:0] sdr_logical_result_7_qs;
  logic [31:0] sdr_logical_result_7_wd;
  logic sdr_logical_result_7_we;
  logic [31:0] sdr_logical_result_8_qs;
  logic [31:0] sdr_logical_result_8_wd;
  logic sdr_logical_result_8_we;
  logic [31:0] sdr_logical_result_9_qs;
  logic [31:0] sdr_logical_result_9_wd;
  logic sdr_logical_result_9_we;
  logic [31:0] sdr_logical_result_10_qs;
  logic [31:0] sdr_logical_result_10_wd;
  logic sdr_logical_result_10_we;
  logic [31:0] sdr_logical_result_11_qs;
  logic [31:0] sdr_logical_result_11_wd;
  logic sdr_logical_result_11_we;
  logic [31:0] sdr_logical_result_12_qs;
  logic [31:0] sdr_logical_result_12_wd;
  logic sdr_logical_result_12_we;
  logic [31:0] sdr_logical_result_13_qs;
  logic [31:0] sdr_logical_result_13_wd;
  logic sdr_logical_result_13_we;
  logic [31:0] sdr_logical_result_14_qs;
  logic [31:0] sdr_logical_result_14_wd;
  logic sdr_logical_result_14_we;
  logic [31:0] sdr_logical_result_15_qs;
  logic [31:0] sdr_logical_result_15_wd;
  logic sdr_logical_result_15_we;
  logic [31:0] sdr_logical_result_16_qs;
  logic [31:0] sdr_logical_result_16_wd;
  logic sdr_logical_result_16_we;
  logic [31:0] sdr_logical_result_17_qs;
  logic [31:0] sdr_logical_result_17_wd;
  logic sdr_logical_result_17_we;
  logic [31:0] sdr_logical_result_18_qs;
  logic [31:0] sdr_logical_result_18_wd;
  logic sdr_logical_result_18_we;
  logic [31:0] sdr_logical_result_19_qs;
  logic [31:0] sdr_logical_result_19_wd;
  logic sdr_logical_result_19_we;
  logic [31:0] sdr_logical_result_20_qs;
  logic [31:0] sdr_logical_result_20_wd;
  logic sdr_logical_result_20_we;
  logic [31:0] sdr_logical_result_21_qs;
  logic [31:0] sdr_logical_result_21_wd;
  logic sdr_logical_result_21_we;
  logic [31:0] sdr_logical_result_22_qs;
  logic [31:0] sdr_logical_result_22_wd;
  logic sdr_logical_result_22_we;
  logic [31:0] sdr_logical_result_23_qs;
  logic [31:0] sdr_logical_result_23_wd;
  logic sdr_logical_result_23_we;
  logic [31:0] sdr_logical_result_24_qs;
  logic [31:0] sdr_logical_result_24_wd;
  logic sdr_logical_result_24_we;
  logic [31:0] sdr_logical_result_25_qs;
  logic [31:0] sdr_logical_result_25_wd;
  logic sdr_logical_result_25_we;
  logic [31:0] sdr_logical_result_26_qs;
  logic [31:0] sdr_logical_result_26_wd;
  logic sdr_logical_result_26_we;
  logic [31:0] sdr_logical_result_27_qs;
  logic [31:0] sdr_logical_result_27_wd;
  logic sdr_logical_result_27_we;
  logic [31:0] sdr_logical_result_28_qs;
  logic [31:0] sdr_logical_result_28_wd;
  logic sdr_logical_result_28_we;
  logic [31:0] sdr_logical_result_29_qs;
  logic [31:0] sdr_logical_result_29_wd;
  logic sdr_logical_result_29_we;
  logic [31:0] sdr_logical_result_30_qs;
  logic [31:0] sdr_logical_result_30_wd;
  logic sdr_logical_result_30_we;
  logic [31:0] sdr_logical_result_31_qs;
  logic [31:0] sdr_logical_result_31_wd;
  logic sdr_logical_result_31_we;

  // Register instances
  // R[sdr_0_control_reg]: V(False)

  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_0_control_reg_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_control_reg_start_we),
    .wd     (sdr_0_control_reg_start_wd),

    // from internal hardware
    .de     (hw2reg.sdr_0_control_reg.start.de),
    .d      (hw2reg.sdr_0_control_reg.start.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_control_reg.start.q ),

    // to register interface (read)
    .qs     (sdr_0_control_reg_start_qs)
  );


  //   F[unused]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("W1S"),
    .RESVAL  (31'h0)
  ) u_sdr_0_control_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_control_reg_unused_we),
    .wd     (sdr_0_control_reg_unused_wd),

    // from internal hardware
    .de     (hw2reg.sdr_0_control_reg.unused.de),
    .d      (hw2reg.sdr_0_control_reg.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_control_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_0_control_reg_unused_qs)
  );


  // R[sdr_0_status_reg]: V(False)

  //   F[number_of_indexes]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("W1S"),
    .RESVAL  (8'h0)
  ) u_sdr_0_status_reg_number_of_indexes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_status_reg_number_of_indexes_we),
    .wd     (sdr_0_status_reg_number_of_indexes_wd),

    // from internal hardware
    .de     (hw2reg.sdr_0_status_reg.number_of_indexes.de),
    .d      (hw2reg.sdr_0_status_reg.number_of_indexes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_status_reg.number_of_indexes.q ),

    // to register interface (read)
    .qs     (sdr_0_status_reg_number_of_indexes_qs)
  );


  //   F[number_of_ones]: 24:8
  prim_subreg #(
    .DW      (17),
    .SWACCESS("W1S"),
    .RESVAL  (17'h0)
  ) u_sdr_0_status_reg_number_of_ones (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_status_reg_number_of_ones_we),
    .wd     (sdr_0_status_reg_number_of_ones_wd),

    // from internal hardware
    .de     (hw2reg.sdr_0_status_reg.number_of_ones.de),
    .d      (hw2reg.sdr_0_status_reg.number_of_ones.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_status_reg.number_of_ones.q ),

    // to register interface (read)
    .qs     (sdr_0_status_reg_number_of_ones_qs)
  );


  //   F[unused]: 28:25
  prim_subreg #(
    .DW      (4),
    .SWACCESS("W1S"),
    .RESVAL  (4'h0)
  ) u_sdr_0_status_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_status_reg_unused_we),
    .wd     (sdr_0_status_reg_unused_wd),

    // from internal hardware
    .de     (hw2reg.sdr_0_status_reg.unused.de),
    .d      (hw2reg.sdr_0_status_reg.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_status_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_0_status_reg_unused_qs)
  );


  //   F[error_indexes_gt_32]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_0_status_reg_error_indexes_gt_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_status_reg_error_indexes_gt_32_we),
    .wd     (sdr_0_status_reg_error_indexes_gt_32_wd),

    // from internal hardware
    .de     (hw2reg.sdr_0_status_reg.error_indexes_gt_32.de),
    .d      (hw2reg.sdr_0_status_reg.error_indexes_gt_32.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_status_reg.error_indexes_gt_32.q ),

    // to register interface (read)
    .qs     (sdr_0_status_reg_error_indexes_gt_32_qs)
  );


  //   F[error_fifo_full]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_0_status_reg_error_fifo_full (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_status_reg_error_fifo_full_we),
    .wd     (sdr_0_status_reg_error_fifo_full_wd),

    // from internal hardware
    .de     (hw2reg.sdr_0_status_reg.error_fifo_full.de),
    .d      (hw2reg.sdr_0_status_reg.error_fifo_full.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_status_reg.error_fifo_full.q ),

    // to register interface (read)
    .qs     (sdr_0_status_reg_error_fifo_full_qs)
  );


  //   F[done]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_0_status_reg_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_status_reg_done_we),
    .wd     (sdr_0_status_reg_done_wd),

    // from internal hardware
    .de     (hw2reg.sdr_0_status_reg.done.de),
    .d      (hw2reg.sdr_0_status_reg.done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_status_reg.done.q ),

    // to register interface (read)
    .qs     (sdr_0_status_reg_done_qs)
  );


  // R[sdr_0_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_0_we),
    .wd     (sdr_0_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_0.q ),

    // to register interface (read)
    .qs     (sdr_0_0_qs)
  );


  // R[sdr_0_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_1_we),
    .wd     (sdr_0_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_1.q ),

    // to register interface (read)
    .qs     (sdr_0_1_qs)
  );


  // R[sdr_0_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_2_we),
    .wd     (sdr_0_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_2.q ),

    // to register interface (read)
    .qs     (sdr_0_2_qs)
  );


  // R[sdr_0_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_3_we),
    .wd     (sdr_0_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_3.q ),

    // to register interface (read)
    .qs     (sdr_0_3_qs)
  );


  // R[sdr_0_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_4_we),
    .wd     (sdr_0_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_4.q ),

    // to register interface (read)
    .qs     (sdr_0_4_qs)
  );


  // R[sdr_0_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_5_we),
    .wd     (sdr_0_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_5.q ),

    // to register interface (read)
    .qs     (sdr_0_5_qs)
  );


  // R[sdr_0_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_6_we),
    .wd     (sdr_0_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_6.q ),

    // to register interface (read)
    .qs     (sdr_0_6_qs)
  );


  // R[sdr_0_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_7_we),
    .wd     (sdr_0_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_7.q ),

    // to register interface (read)
    .qs     (sdr_0_7_qs)
  );


  // R[sdr_0_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_8_we),
    .wd     (sdr_0_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_8.q ),

    // to register interface (read)
    .qs     (sdr_0_8_qs)
  );


  // R[sdr_0_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_9_we),
    .wd     (sdr_0_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_9.q ),

    // to register interface (read)
    .qs     (sdr_0_9_qs)
  );


  // R[sdr_0_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_10_we),
    .wd     (sdr_0_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_10.q ),

    // to register interface (read)
    .qs     (sdr_0_10_qs)
  );


  // R[sdr_0_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_11_we),
    .wd     (sdr_0_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_11.q ),

    // to register interface (read)
    .qs     (sdr_0_11_qs)
  );


  // R[sdr_0_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_12_we),
    .wd     (sdr_0_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_12.q ),

    // to register interface (read)
    .qs     (sdr_0_12_qs)
  );


  // R[sdr_0_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_13_we),
    .wd     (sdr_0_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_13.q ),

    // to register interface (read)
    .qs     (sdr_0_13_qs)
  );


  // R[sdr_0_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_14_we),
    .wd     (sdr_0_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_14.q ),

    // to register interface (read)
    .qs     (sdr_0_14_qs)
  );


  // R[sdr_0_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_15_we),
    .wd     (sdr_0_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_15.q ),

    // to register interface (read)
    .qs     (sdr_0_15_qs)
  );


  // R[sdr_0_16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_16_we),
    .wd     (sdr_0_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_16.q ),

    // to register interface (read)
    .qs     (sdr_0_16_qs)
  );


  // R[sdr_0_17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_17_we),
    .wd     (sdr_0_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_17.q ),

    // to register interface (read)
    .qs     (sdr_0_17_qs)
  );


  // R[sdr_0_18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_18_we),
    .wd     (sdr_0_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_18.q ),

    // to register interface (read)
    .qs     (sdr_0_18_qs)
  );


  // R[sdr_0_19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_19_we),
    .wd     (sdr_0_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_19.q ),

    // to register interface (read)
    .qs     (sdr_0_19_qs)
  );


  // R[sdr_0_20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_20_we),
    .wd     (sdr_0_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_20.q ),

    // to register interface (read)
    .qs     (sdr_0_20_qs)
  );


  // R[sdr_0_21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_21_we),
    .wd     (sdr_0_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_21.q ),

    // to register interface (read)
    .qs     (sdr_0_21_qs)
  );


  // R[sdr_0_22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_22_we),
    .wd     (sdr_0_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_22.q ),

    // to register interface (read)
    .qs     (sdr_0_22_qs)
  );


  // R[sdr_0_23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_23_we),
    .wd     (sdr_0_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_23.q ),

    // to register interface (read)
    .qs     (sdr_0_23_qs)
  );


  // R[sdr_0_24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_24_we),
    .wd     (sdr_0_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_24.q ),

    // to register interface (read)
    .qs     (sdr_0_24_qs)
  );


  // R[sdr_0_25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_25_we),
    .wd     (sdr_0_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_25.q ),

    // to register interface (read)
    .qs     (sdr_0_25_qs)
  );


  // R[sdr_0_26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_26_we),
    .wd     (sdr_0_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_26.q ),

    // to register interface (read)
    .qs     (sdr_0_26_qs)
  );


  // R[sdr_0_27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_27_we),
    .wd     (sdr_0_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_27.q ),

    // to register interface (read)
    .qs     (sdr_0_27_qs)
  );


  // R[sdr_0_28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_28_we),
    .wd     (sdr_0_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_28.q ),

    // to register interface (read)
    .qs     (sdr_0_28_qs)
  );


  // R[sdr_0_29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_29_we),
    .wd     (sdr_0_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_29.q ),

    // to register interface (read)
    .qs     (sdr_0_29_qs)
  );


  // R[sdr_0_30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_30_we),
    .wd     (sdr_0_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_30.q ),

    // to register interface (read)
    .qs     (sdr_0_30_qs)
  );


  // R[sdr_0_31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_31_we),
    .wd     (sdr_0_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_31.q ),

    // to register interface (read)
    .qs     (sdr_0_31_qs)
  );


  // R[sdr_0_index_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_0.de),
    .d      (hw2reg.sdr_0_index_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_0.q ),

    // to register interface (read)
    .qs     (sdr_0_index_0_qs)
  );


  // R[sdr_0_index_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_1.de),
    .d      (hw2reg.sdr_0_index_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_1.q ),

    // to register interface (read)
    .qs     (sdr_0_index_1_qs)
  );


  // R[sdr_0_index_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_2.de),
    .d      (hw2reg.sdr_0_index_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_2.q ),

    // to register interface (read)
    .qs     (sdr_0_index_2_qs)
  );


  // R[sdr_0_index_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_3.de),
    .d      (hw2reg.sdr_0_index_3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_3.q ),

    // to register interface (read)
    .qs     (sdr_0_index_3_qs)
  );


  // R[sdr_0_index_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_4.de),
    .d      (hw2reg.sdr_0_index_4.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_4.q ),

    // to register interface (read)
    .qs     (sdr_0_index_4_qs)
  );


  // R[sdr_0_index_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_5.de),
    .d      (hw2reg.sdr_0_index_5.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_5.q ),

    // to register interface (read)
    .qs     (sdr_0_index_5_qs)
  );


  // R[sdr_0_index_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_6.de),
    .d      (hw2reg.sdr_0_index_6.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_6.q ),

    // to register interface (read)
    .qs     (sdr_0_index_6_qs)
  );


  // R[sdr_0_index_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_7.de),
    .d      (hw2reg.sdr_0_index_7.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_7.q ),

    // to register interface (read)
    .qs     (sdr_0_index_7_qs)
  );


  // R[sdr_0_index_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_8.de),
    .d      (hw2reg.sdr_0_index_8.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_8.q ),

    // to register interface (read)
    .qs     (sdr_0_index_8_qs)
  );


  // R[sdr_0_index_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_9.de),
    .d      (hw2reg.sdr_0_index_9.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_9.q ),

    // to register interface (read)
    .qs     (sdr_0_index_9_qs)
  );


  // R[sdr_0_index_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_10.de),
    .d      (hw2reg.sdr_0_index_10.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_10.q ),

    // to register interface (read)
    .qs     (sdr_0_index_10_qs)
  );


  // R[sdr_0_index_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_11.de),
    .d      (hw2reg.sdr_0_index_11.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_11.q ),

    // to register interface (read)
    .qs     (sdr_0_index_11_qs)
  );


  // R[sdr_0_index_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_12.de),
    .d      (hw2reg.sdr_0_index_12.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_12.q ),

    // to register interface (read)
    .qs     (sdr_0_index_12_qs)
  );


  // R[sdr_0_index_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_13.de),
    .d      (hw2reg.sdr_0_index_13.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_13.q ),

    // to register interface (read)
    .qs     (sdr_0_index_13_qs)
  );


  // R[sdr_0_index_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_14.de),
    .d      (hw2reg.sdr_0_index_14.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_14.q ),

    // to register interface (read)
    .qs     (sdr_0_index_14_qs)
  );


  // R[sdr_0_index_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_0_index_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_0_index_15.de),
    .d      (hw2reg.sdr_0_index_15.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_index_15.q ),

    // to register interface (read)
    .qs     (sdr_0_index_15_qs)
  );


  // R[sdr_1_control_reg]: V(False)

  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_1_control_reg_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_control_reg_start_we),
    .wd     (sdr_1_control_reg_start_wd),

    // from internal hardware
    .de     (hw2reg.sdr_1_control_reg.start.de),
    .d      (hw2reg.sdr_1_control_reg.start.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_control_reg.start.q ),

    // to register interface (read)
    .qs     (sdr_1_control_reg_start_qs)
  );


  //   F[unused]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("W1S"),
    .RESVAL  (31'h0)
  ) u_sdr_1_control_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_control_reg_unused_we),
    .wd     (sdr_1_control_reg_unused_wd),

    // from internal hardware
    .de     (hw2reg.sdr_1_control_reg.unused.de),
    .d      (hw2reg.sdr_1_control_reg.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_control_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_1_control_reg_unused_qs)
  );


  // R[sdr_1_status_reg]: V(False)

  //   F[number_of_indexes]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("W1S"),
    .RESVAL  (8'h0)
  ) u_sdr_1_status_reg_number_of_indexes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_status_reg_number_of_indexes_we),
    .wd     (sdr_1_status_reg_number_of_indexes_wd),

    // from internal hardware
    .de     (hw2reg.sdr_1_status_reg.number_of_indexes.de),
    .d      (hw2reg.sdr_1_status_reg.number_of_indexes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_status_reg.number_of_indexes.q ),

    // to register interface (read)
    .qs     (sdr_1_status_reg_number_of_indexes_qs)
  );


  //   F[number_of_ones]: 24:8
  prim_subreg #(
    .DW      (17),
    .SWACCESS("W1S"),
    .RESVAL  (17'h0)
  ) u_sdr_1_status_reg_number_of_ones (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_status_reg_number_of_ones_we),
    .wd     (sdr_1_status_reg_number_of_ones_wd),

    // from internal hardware
    .de     (hw2reg.sdr_1_status_reg.number_of_ones.de),
    .d      (hw2reg.sdr_1_status_reg.number_of_ones.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_status_reg.number_of_ones.q ),

    // to register interface (read)
    .qs     (sdr_1_status_reg_number_of_ones_qs)
  );


  //   F[unused]: 28:25
  prim_subreg #(
    .DW      (4),
    .SWACCESS("W1S"),
    .RESVAL  (4'h0)
  ) u_sdr_1_status_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_status_reg_unused_we),
    .wd     (sdr_1_status_reg_unused_wd),

    // from internal hardware
    .de     (hw2reg.sdr_1_status_reg.unused.de),
    .d      (hw2reg.sdr_1_status_reg.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_status_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_1_status_reg_unused_qs)
  );


  //   F[error_indexes_gt_32]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_1_status_reg_error_indexes_gt_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_status_reg_error_indexes_gt_32_we),
    .wd     (sdr_1_status_reg_error_indexes_gt_32_wd),

    // from internal hardware
    .de     (hw2reg.sdr_1_status_reg.error_indexes_gt_32.de),
    .d      (hw2reg.sdr_1_status_reg.error_indexes_gt_32.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_status_reg.error_indexes_gt_32.q ),

    // to register interface (read)
    .qs     (sdr_1_status_reg_error_indexes_gt_32_qs)
  );


  //   F[error_fifo_full]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_1_status_reg_error_fifo_full (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_status_reg_error_fifo_full_we),
    .wd     (sdr_1_status_reg_error_fifo_full_wd),

    // from internal hardware
    .de     (hw2reg.sdr_1_status_reg.error_fifo_full.de),
    .d      (hw2reg.sdr_1_status_reg.error_fifo_full.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_status_reg.error_fifo_full.q ),

    // to register interface (read)
    .qs     (sdr_1_status_reg_error_fifo_full_qs)
  );


  //   F[done]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_1_status_reg_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_status_reg_done_we),
    .wd     (sdr_1_status_reg_done_wd),

    // from internal hardware
    .de     (hw2reg.sdr_1_status_reg.done.de),
    .d      (hw2reg.sdr_1_status_reg.done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_status_reg.done.q ),

    // to register interface (read)
    .qs     (sdr_1_status_reg_done_qs)
  );


  // R[sdr_1_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_0_we),
    .wd     (sdr_1_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_0.q ),

    // to register interface (read)
    .qs     (sdr_1_0_qs)
  );


  // R[sdr_1_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_1_we),
    .wd     (sdr_1_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_1.q ),

    // to register interface (read)
    .qs     (sdr_1_1_qs)
  );


  // R[sdr_1_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_2_we),
    .wd     (sdr_1_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_2.q ),

    // to register interface (read)
    .qs     (sdr_1_2_qs)
  );


  // R[sdr_1_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_3_we),
    .wd     (sdr_1_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_3.q ),

    // to register interface (read)
    .qs     (sdr_1_3_qs)
  );


  // R[sdr_1_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_4_we),
    .wd     (sdr_1_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_4.q ),

    // to register interface (read)
    .qs     (sdr_1_4_qs)
  );


  // R[sdr_1_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_5_we),
    .wd     (sdr_1_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_5.q ),

    // to register interface (read)
    .qs     (sdr_1_5_qs)
  );


  // R[sdr_1_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_6_we),
    .wd     (sdr_1_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_6.q ),

    // to register interface (read)
    .qs     (sdr_1_6_qs)
  );


  // R[sdr_1_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_7_we),
    .wd     (sdr_1_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_7.q ),

    // to register interface (read)
    .qs     (sdr_1_7_qs)
  );


  // R[sdr_1_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_8_we),
    .wd     (sdr_1_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_8.q ),

    // to register interface (read)
    .qs     (sdr_1_8_qs)
  );


  // R[sdr_1_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_9_we),
    .wd     (sdr_1_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_9.q ),

    // to register interface (read)
    .qs     (sdr_1_9_qs)
  );


  // R[sdr_1_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_10_we),
    .wd     (sdr_1_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_10.q ),

    // to register interface (read)
    .qs     (sdr_1_10_qs)
  );


  // R[sdr_1_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_11_we),
    .wd     (sdr_1_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_11.q ),

    // to register interface (read)
    .qs     (sdr_1_11_qs)
  );


  // R[sdr_1_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_12_we),
    .wd     (sdr_1_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_12.q ),

    // to register interface (read)
    .qs     (sdr_1_12_qs)
  );


  // R[sdr_1_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_13_we),
    .wd     (sdr_1_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_13.q ),

    // to register interface (read)
    .qs     (sdr_1_13_qs)
  );


  // R[sdr_1_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_14_we),
    .wd     (sdr_1_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_14.q ),

    // to register interface (read)
    .qs     (sdr_1_14_qs)
  );


  // R[sdr_1_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_15_we),
    .wd     (sdr_1_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_15.q ),

    // to register interface (read)
    .qs     (sdr_1_15_qs)
  );


  // R[sdr_1_16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_16_we),
    .wd     (sdr_1_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_16.q ),

    // to register interface (read)
    .qs     (sdr_1_16_qs)
  );


  // R[sdr_1_17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_17_we),
    .wd     (sdr_1_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_17.q ),

    // to register interface (read)
    .qs     (sdr_1_17_qs)
  );


  // R[sdr_1_18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_18_we),
    .wd     (sdr_1_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_18.q ),

    // to register interface (read)
    .qs     (sdr_1_18_qs)
  );


  // R[sdr_1_19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_19_we),
    .wd     (sdr_1_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_19.q ),

    // to register interface (read)
    .qs     (sdr_1_19_qs)
  );


  // R[sdr_1_20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_20_we),
    .wd     (sdr_1_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_20.q ),

    // to register interface (read)
    .qs     (sdr_1_20_qs)
  );


  // R[sdr_1_21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_21_we),
    .wd     (sdr_1_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_21.q ),

    // to register interface (read)
    .qs     (sdr_1_21_qs)
  );


  // R[sdr_1_22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_22_we),
    .wd     (sdr_1_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_22.q ),

    // to register interface (read)
    .qs     (sdr_1_22_qs)
  );


  // R[sdr_1_23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_23_we),
    .wd     (sdr_1_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_23.q ),

    // to register interface (read)
    .qs     (sdr_1_23_qs)
  );


  // R[sdr_1_24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_24_we),
    .wd     (sdr_1_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_24.q ),

    // to register interface (read)
    .qs     (sdr_1_24_qs)
  );


  // R[sdr_1_25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_25_we),
    .wd     (sdr_1_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_25.q ),

    // to register interface (read)
    .qs     (sdr_1_25_qs)
  );


  // R[sdr_1_26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_26_we),
    .wd     (sdr_1_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_26.q ),

    // to register interface (read)
    .qs     (sdr_1_26_qs)
  );


  // R[sdr_1_27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_27_we),
    .wd     (sdr_1_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_27.q ),

    // to register interface (read)
    .qs     (sdr_1_27_qs)
  );


  // R[sdr_1_28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_28_we),
    .wd     (sdr_1_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_28.q ),

    // to register interface (read)
    .qs     (sdr_1_28_qs)
  );


  // R[sdr_1_29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_29_we),
    .wd     (sdr_1_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_29.q ),

    // to register interface (read)
    .qs     (sdr_1_29_qs)
  );


  // R[sdr_1_30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_30_we),
    .wd     (sdr_1_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_30.q ),

    // to register interface (read)
    .qs     (sdr_1_30_qs)
  );


  // R[sdr_1_31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_1_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_1_31_we),
    .wd     (sdr_1_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_31.q ),

    // to register interface (read)
    .qs     (sdr_1_31_qs)
  );


  // R[sdr_1_index_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_0.de),
    .d      (hw2reg.sdr_1_index_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_0.q ),

    // to register interface (read)
    .qs     (sdr_1_index_0_qs)
  );


  // R[sdr_1_index_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_1.de),
    .d      (hw2reg.sdr_1_index_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_1.q ),

    // to register interface (read)
    .qs     (sdr_1_index_1_qs)
  );


  // R[sdr_1_index_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_2.de),
    .d      (hw2reg.sdr_1_index_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_2.q ),

    // to register interface (read)
    .qs     (sdr_1_index_2_qs)
  );


  // R[sdr_1_index_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_3.de),
    .d      (hw2reg.sdr_1_index_3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_3.q ),

    // to register interface (read)
    .qs     (sdr_1_index_3_qs)
  );


  // R[sdr_1_index_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_4.de),
    .d      (hw2reg.sdr_1_index_4.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_4.q ),

    // to register interface (read)
    .qs     (sdr_1_index_4_qs)
  );


  // R[sdr_1_index_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_5.de),
    .d      (hw2reg.sdr_1_index_5.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_5.q ),

    // to register interface (read)
    .qs     (sdr_1_index_5_qs)
  );


  // R[sdr_1_index_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_6.de),
    .d      (hw2reg.sdr_1_index_6.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_6.q ),

    // to register interface (read)
    .qs     (sdr_1_index_6_qs)
  );


  // R[sdr_1_index_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_7.de),
    .d      (hw2reg.sdr_1_index_7.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_7.q ),

    // to register interface (read)
    .qs     (sdr_1_index_7_qs)
  );


  // R[sdr_1_index_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_8.de),
    .d      (hw2reg.sdr_1_index_8.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_8.q ),

    // to register interface (read)
    .qs     (sdr_1_index_8_qs)
  );


  // R[sdr_1_index_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_9.de),
    .d      (hw2reg.sdr_1_index_9.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_9.q ),

    // to register interface (read)
    .qs     (sdr_1_index_9_qs)
  );


  // R[sdr_1_index_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_10.de),
    .d      (hw2reg.sdr_1_index_10.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_10.q ),

    // to register interface (read)
    .qs     (sdr_1_index_10_qs)
  );


  // R[sdr_1_index_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_11.de),
    .d      (hw2reg.sdr_1_index_11.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_11.q ),

    // to register interface (read)
    .qs     (sdr_1_index_11_qs)
  );


  // R[sdr_1_index_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_12.de),
    .d      (hw2reg.sdr_1_index_12.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_12.q ),

    // to register interface (read)
    .qs     (sdr_1_index_12_qs)
  );


  // R[sdr_1_index_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_13.de),
    .d      (hw2reg.sdr_1_index_13.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_13.q ),

    // to register interface (read)
    .qs     (sdr_1_index_13_qs)
  );


  // R[sdr_1_index_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_14.de),
    .d      (hw2reg.sdr_1_index_14.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_14.q ),

    // to register interface (read)
    .qs     (sdr_1_index_14_qs)
  );


  // R[sdr_1_index_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_1_index_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_1_index_15.de),
    .d      (hw2reg.sdr_1_index_15.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_1_index_15.q ),

    // to register interface (read)
    .qs     (sdr_1_index_15_qs)
  );


  // R[sdr_2_control_reg]: V(False)

  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_2_control_reg_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_control_reg_start_we),
    .wd     (sdr_2_control_reg_start_wd),

    // from internal hardware
    .de     (hw2reg.sdr_2_control_reg.start.de),
    .d      (hw2reg.sdr_2_control_reg.start.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_control_reg.start.q ),

    // to register interface (read)
    .qs     (sdr_2_control_reg_start_qs)
  );


  //   F[unused]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("W1S"),
    .RESVAL  (31'h0)
  ) u_sdr_2_control_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_control_reg_unused_we),
    .wd     (sdr_2_control_reg_unused_wd),

    // from internal hardware
    .de     (hw2reg.sdr_2_control_reg.unused.de),
    .d      (hw2reg.sdr_2_control_reg.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_control_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_2_control_reg_unused_qs)
  );


  // R[sdr_2_status_reg]: V(False)

  //   F[number_of_indexes]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("W1S"),
    .RESVAL  (8'h0)
  ) u_sdr_2_status_reg_number_of_indexes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_status_reg_number_of_indexes_we),
    .wd     (sdr_2_status_reg_number_of_indexes_wd),

    // from internal hardware
    .de     (hw2reg.sdr_2_status_reg.number_of_indexes.de),
    .d      (hw2reg.sdr_2_status_reg.number_of_indexes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_status_reg.number_of_indexes.q ),

    // to register interface (read)
    .qs     (sdr_2_status_reg_number_of_indexes_qs)
  );


  //   F[number_of_ones]: 24:8
  prim_subreg #(
    .DW      (17),
    .SWACCESS("W1S"),
    .RESVAL  (17'h0)
  ) u_sdr_2_status_reg_number_of_ones (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_status_reg_number_of_ones_we),
    .wd     (sdr_2_status_reg_number_of_ones_wd),

    // from internal hardware
    .de     (hw2reg.sdr_2_status_reg.number_of_ones.de),
    .d      (hw2reg.sdr_2_status_reg.number_of_ones.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_status_reg.number_of_ones.q ),

    // to register interface (read)
    .qs     (sdr_2_status_reg_number_of_ones_qs)
  );


  //   F[unused]: 28:25
  prim_subreg #(
    .DW      (4),
    .SWACCESS("W1S"),
    .RESVAL  (4'h0)
  ) u_sdr_2_status_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_status_reg_unused_we),
    .wd     (sdr_2_status_reg_unused_wd),

    // from internal hardware
    .de     (hw2reg.sdr_2_status_reg.unused.de),
    .d      (hw2reg.sdr_2_status_reg.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_status_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_2_status_reg_unused_qs)
  );


  //   F[error_indexes_gt_32]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_2_status_reg_error_indexes_gt_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_status_reg_error_indexes_gt_32_we),
    .wd     (sdr_2_status_reg_error_indexes_gt_32_wd),

    // from internal hardware
    .de     (hw2reg.sdr_2_status_reg.error_indexes_gt_32.de),
    .d      (hw2reg.sdr_2_status_reg.error_indexes_gt_32.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_status_reg.error_indexes_gt_32.q ),

    // to register interface (read)
    .qs     (sdr_2_status_reg_error_indexes_gt_32_qs)
  );


  //   F[error_fifo_full]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_2_status_reg_error_fifo_full (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_status_reg_error_fifo_full_we),
    .wd     (sdr_2_status_reg_error_fifo_full_wd),

    // from internal hardware
    .de     (hw2reg.sdr_2_status_reg.error_fifo_full.de),
    .d      (hw2reg.sdr_2_status_reg.error_fifo_full.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_status_reg.error_fifo_full.q ),

    // to register interface (read)
    .qs     (sdr_2_status_reg_error_fifo_full_qs)
  );


  //   F[done]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_2_status_reg_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_status_reg_done_we),
    .wd     (sdr_2_status_reg_done_wd),

    // from internal hardware
    .de     (hw2reg.sdr_2_status_reg.done.de),
    .d      (hw2reg.sdr_2_status_reg.done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_status_reg.done.q ),

    // to register interface (read)
    .qs     (sdr_2_status_reg_done_qs)
  );


  // R[sdr_2_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_0_we),
    .wd     (sdr_2_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_0.q ),

    // to register interface (read)
    .qs     (sdr_2_0_qs)
  );


  // R[sdr_2_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_1_we),
    .wd     (sdr_2_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_1.q ),

    // to register interface (read)
    .qs     (sdr_2_1_qs)
  );


  // R[sdr_2_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_2_we),
    .wd     (sdr_2_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_2.q ),

    // to register interface (read)
    .qs     (sdr_2_2_qs)
  );


  // R[sdr_2_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_3_we),
    .wd     (sdr_2_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_3.q ),

    // to register interface (read)
    .qs     (sdr_2_3_qs)
  );


  // R[sdr_2_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_4_we),
    .wd     (sdr_2_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_4.q ),

    // to register interface (read)
    .qs     (sdr_2_4_qs)
  );


  // R[sdr_2_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_5_we),
    .wd     (sdr_2_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_5.q ),

    // to register interface (read)
    .qs     (sdr_2_5_qs)
  );


  // R[sdr_2_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_6_we),
    .wd     (sdr_2_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_6.q ),

    // to register interface (read)
    .qs     (sdr_2_6_qs)
  );


  // R[sdr_2_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_7_we),
    .wd     (sdr_2_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_7.q ),

    // to register interface (read)
    .qs     (sdr_2_7_qs)
  );


  // R[sdr_2_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_8_we),
    .wd     (sdr_2_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_8.q ),

    // to register interface (read)
    .qs     (sdr_2_8_qs)
  );


  // R[sdr_2_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_9_we),
    .wd     (sdr_2_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_9.q ),

    // to register interface (read)
    .qs     (sdr_2_9_qs)
  );


  // R[sdr_2_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_10_we),
    .wd     (sdr_2_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_10.q ),

    // to register interface (read)
    .qs     (sdr_2_10_qs)
  );


  // R[sdr_2_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_11_we),
    .wd     (sdr_2_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_11.q ),

    // to register interface (read)
    .qs     (sdr_2_11_qs)
  );


  // R[sdr_2_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_12_we),
    .wd     (sdr_2_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_12.q ),

    // to register interface (read)
    .qs     (sdr_2_12_qs)
  );


  // R[sdr_2_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_13_we),
    .wd     (sdr_2_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_13.q ),

    // to register interface (read)
    .qs     (sdr_2_13_qs)
  );


  // R[sdr_2_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_14_we),
    .wd     (sdr_2_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_14.q ),

    // to register interface (read)
    .qs     (sdr_2_14_qs)
  );


  // R[sdr_2_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_15_we),
    .wd     (sdr_2_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_15.q ),

    // to register interface (read)
    .qs     (sdr_2_15_qs)
  );


  // R[sdr_2_16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_16_we),
    .wd     (sdr_2_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_16.q ),

    // to register interface (read)
    .qs     (sdr_2_16_qs)
  );


  // R[sdr_2_17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_17_we),
    .wd     (sdr_2_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_17.q ),

    // to register interface (read)
    .qs     (sdr_2_17_qs)
  );


  // R[sdr_2_18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_18_we),
    .wd     (sdr_2_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_18.q ),

    // to register interface (read)
    .qs     (sdr_2_18_qs)
  );


  // R[sdr_2_19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_19_we),
    .wd     (sdr_2_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_19.q ),

    // to register interface (read)
    .qs     (sdr_2_19_qs)
  );


  // R[sdr_2_20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_20_we),
    .wd     (sdr_2_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_20.q ),

    // to register interface (read)
    .qs     (sdr_2_20_qs)
  );


  // R[sdr_2_21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_21_we),
    .wd     (sdr_2_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_21.q ),

    // to register interface (read)
    .qs     (sdr_2_21_qs)
  );


  // R[sdr_2_22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_22_we),
    .wd     (sdr_2_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_22.q ),

    // to register interface (read)
    .qs     (sdr_2_22_qs)
  );


  // R[sdr_2_23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_23_we),
    .wd     (sdr_2_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_23.q ),

    // to register interface (read)
    .qs     (sdr_2_23_qs)
  );


  // R[sdr_2_24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_24_we),
    .wd     (sdr_2_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_24.q ),

    // to register interface (read)
    .qs     (sdr_2_24_qs)
  );


  // R[sdr_2_25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_25_we),
    .wd     (sdr_2_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_25.q ),

    // to register interface (read)
    .qs     (sdr_2_25_qs)
  );


  // R[sdr_2_26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_26_we),
    .wd     (sdr_2_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_26.q ),

    // to register interface (read)
    .qs     (sdr_2_26_qs)
  );


  // R[sdr_2_27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_27_we),
    .wd     (sdr_2_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_27.q ),

    // to register interface (read)
    .qs     (sdr_2_27_qs)
  );


  // R[sdr_2_28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_28_we),
    .wd     (sdr_2_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_28.q ),

    // to register interface (read)
    .qs     (sdr_2_28_qs)
  );


  // R[sdr_2_29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_29_we),
    .wd     (sdr_2_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_29.q ),

    // to register interface (read)
    .qs     (sdr_2_29_qs)
  );


  // R[sdr_2_30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_30_we),
    .wd     (sdr_2_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_30.q ),

    // to register interface (read)
    .qs     (sdr_2_30_qs)
  );


  // R[sdr_2_31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_2_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_2_31_we),
    .wd     (sdr_2_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_31.q ),

    // to register interface (read)
    .qs     (sdr_2_31_qs)
  );


  // R[sdr_2_index_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_0.de),
    .d      (hw2reg.sdr_2_index_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_0.q ),

    // to register interface (read)
    .qs     (sdr_2_index_0_qs)
  );


  // R[sdr_2_index_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_1.de),
    .d      (hw2reg.sdr_2_index_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_1.q ),

    // to register interface (read)
    .qs     (sdr_2_index_1_qs)
  );


  // R[sdr_2_index_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_2.de),
    .d      (hw2reg.sdr_2_index_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_2.q ),

    // to register interface (read)
    .qs     (sdr_2_index_2_qs)
  );


  // R[sdr_2_index_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_3.de),
    .d      (hw2reg.sdr_2_index_3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_3.q ),

    // to register interface (read)
    .qs     (sdr_2_index_3_qs)
  );


  // R[sdr_2_index_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_4.de),
    .d      (hw2reg.sdr_2_index_4.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_4.q ),

    // to register interface (read)
    .qs     (sdr_2_index_4_qs)
  );


  // R[sdr_2_index_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_5.de),
    .d      (hw2reg.sdr_2_index_5.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_5.q ),

    // to register interface (read)
    .qs     (sdr_2_index_5_qs)
  );


  // R[sdr_2_index_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_6.de),
    .d      (hw2reg.sdr_2_index_6.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_6.q ),

    // to register interface (read)
    .qs     (sdr_2_index_6_qs)
  );


  // R[sdr_2_index_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_7.de),
    .d      (hw2reg.sdr_2_index_7.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_7.q ),

    // to register interface (read)
    .qs     (sdr_2_index_7_qs)
  );


  // R[sdr_2_index_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_8.de),
    .d      (hw2reg.sdr_2_index_8.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_8.q ),

    // to register interface (read)
    .qs     (sdr_2_index_8_qs)
  );


  // R[sdr_2_index_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_9.de),
    .d      (hw2reg.sdr_2_index_9.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_9.q ),

    // to register interface (read)
    .qs     (sdr_2_index_9_qs)
  );


  // R[sdr_2_index_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_10.de),
    .d      (hw2reg.sdr_2_index_10.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_10.q ),

    // to register interface (read)
    .qs     (sdr_2_index_10_qs)
  );


  // R[sdr_2_index_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_11.de),
    .d      (hw2reg.sdr_2_index_11.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_11.q ),

    // to register interface (read)
    .qs     (sdr_2_index_11_qs)
  );


  // R[sdr_2_index_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_12.de),
    .d      (hw2reg.sdr_2_index_12.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_12.q ),

    // to register interface (read)
    .qs     (sdr_2_index_12_qs)
  );


  // R[sdr_2_index_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_13.de),
    .d      (hw2reg.sdr_2_index_13.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_13.q ),

    // to register interface (read)
    .qs     (sdr_2_index_13_qs)
  );


  // R[sdr_2_index_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_14.de),
    .d      (hw2reg.sdr_2_index_14.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_14.q ),

    // to register interface (read)
    .qs     (sdr_2_index_14_qs)
  );


  // R[sdr_2_index_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_2_index_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_2_index_15.de),
    .d      (hw2reg.sdr_2_index_15.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_2_index_15.q ),

    // to register interface (read)
    .qs     (sdr_2_index_15_qs)
  );


  // R[sdr_3_control_reg]: V(False)

  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_3_control_reg_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_control_reg_start_we),
    .wd     (sdr_3_control_reg_start_wd),

    // from internal hardware
    .de     (hw2reg.sdr_3_control_reg.start.de),
    .d      (hw2reg.sdr_3_control_reg.start.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_control_reg.start.q ),

    // to register interface (read)
    .qs     (sdr_3_control_reg_start_qs)
  );


  //   F[unused]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("W1S"),
    .RESVAL  (31'h0)
  ) u_sdr_3_control_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_control_reg_unused_we),
    .wd     (sdr_3_control_reg_unused_wd),

    // from internal hardware
    .de     (hw2reg.sdr_3_control_reg.unused.de),
    .d      (hw2reg.sdr_3_control_reg.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_control_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_3_control_reg_unused_qs)
  );


  // R[sdr_3_status_reg]: V(False)

  //   F[number_of_indexes]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("W1S"),
    .RESVAL  (8'h0)
  ) u_sdr_3_status_reg_number_of_indexes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_status_reg_number_of_indexes_we),
    .wd     (sdr_3_status_reg_number_of_indexes_wd),

    // from internal hardware
    .de     (hw2reg.sdr_3_status_reg.number_of_indexes.de),
    .d      (hw2reg.sdr_3_status_reg.number_of_indexes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_status_reg.number_of_indexes.q ),

    // to register interface (read)
    .qs     (sdr_3_status_reg_number_of_indexes_qs)
  );


  //   F[number_of_ones]: 24:8
  prim_subreg #(
    .DW      (17),
    .SWACCESS("W1S"),
    .RESVAL  (17'h0)
  ) u_sdr_3_status_reg_number_of_ones (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_status_reg_number_of_ones_we),
    .wd     (sdr_3_status_reg_number_of_ones_wd),

    // from internal hardware
    .de     (hw2reg.sdr_3_status_reg.number_of_ones.de),
    .d      (hw2reg.sdr_3_status_reg.number_of_ones.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_status_reg.number_of_ones.q ),

    // to register interface (read)
    .qs     (sdr_3_status_reg_number_of_ones_qs)
  );


  //   F[unused]: 28:25
  prim_subreg #(
    .DW      (4),
    .SWACCESS("W1S"),
    .RESVAL  (4'h0)
  ) u_sdr_3_status_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_status_reg_unused_we),
    .wd     (sdr_3_status_reg_unused_wd),

    // from internal hardware
    .de     (hw2reg.sdr_3_status_reg.unused.de),
    .d      (hw2reg.sdr_3_status_reg.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_status_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_3_status_reg_unused_qs)
  );


  //   F[error_indexes_gt_32]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_3_status_reg_error_indexes_gt_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_status_reg_error_indexes_gt_32_we),
    .wd     (sdr_3_status_reg_error_indexes_gt_32_wd),

    // from internal hardware
    .de     (hw2reg.sdr_3_status_reg.error_indexes_gt_32.de),
    .d      (hw2reg.sdr_3_status_reg.error_indexes_gt_32.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_status_reg.error_indexes_gt_32.q ),

    // to register interface (read)
    .qs     (sdr_3_status_reg_error_indexes_gt_32_qs)
  );


  //   F[error_fifo_full]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_3_status_reg_error_fifo_full (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_status_reg_error_fifo_full_we),
    .wd     (sdr_3_status_reg_error_fifo_full_wd),

    // from internal hardware
    .de     (hw2reg.sdr_3_status_reg.error_fifo_full.de),
    .d      (hw2reg.sdr_3_status_reg.error_fifo_full.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_status_reg.error_fifo_full.q ),

    // to register interface (read)
    .qs     (sdr_3_status_reg_error_fifo_full_qs)
  );


  //   F[done]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_3_status_reg_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_status_reg_done_we),
    .wd     (sdr_3_status_reg_done_wd),

    // from internal hardware
    .de     (hw2reg.sdr_3_status_reg.done.de),
    .d      (hw2reg.sdr_3_status_reg.done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_status_reg.done.q ),

    // to register interface (read)
    .qs     (sdr_3_status_reg_done_qs)
  );


  // R[sdr_3_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_0_we),
    .wd     (sdr_3_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_0.q ),

    // to register interface (read)
    .qs     (sdr_3_0_qs)
  );


  // R[sdr_3_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_1_we),
    .wd     (sdr_3_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_1.q ),

    // to register interface (read)
    .qs     (sdr_3_1_qs)
  );


  // R[sdr_3_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_2_we),
    .wd     (sdr_3_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_2.q ),

    // to register interface (read)
    .qs     (sdr_3_2_qs)
  );


  // R[sdr_3_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_3_we),
    .wd     (sdr_3_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_3.q ),

    // to register interface (read)
    .qs     (sdr_3_3_qs)
  );


  // R[sdr_3_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_4_we),
    .wd     (sdr_3_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_4.q ),

    // to register interface (read)
    .qs     (sdr_3_4_qs)
  );


  // R[sdr_3_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_5_we),
    .wd     (sdr_3_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_5.q ),

    // to register interface (read)
    .qs     (sdr_3_5_qs)
  );


  // R[sdr_3_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_6_we),
    .wd     (sdr_3_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_6.q ),

    // to register interface (read)
    .qs     (sdr_3_6_qs)
  );


  // R[sdr_3_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_7_we),
    .wd     (sdr_3_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_7.q ),

    // to register interface (read)
    .qs     (sdr_3_7_qs)
  );


  // R[sdr_3_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_8_we),
    .wd     (sdr_3_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_8.q ),

    // to register interface (read)
    .qs     (sdr_3_8_qs)
  );


  // R[sdr_3_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_9_we),
    .wd     (sdr_3_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_9.q ),

    // to register interface (read)
    .qs     (sdr_3_9_qs)
  );


  // R[sdr_3_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_10_we),
    .wd     (sdr_3_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_10.q ),

    // to register interface (read)
    .qs     (sdr_3_10_qs)
  );


  // R[sdr_3_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_11_we),
    .wd     (sdr_3_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_11.q ),

    // to register interface (read)
    .qs     (sdr_3_11_qs)
  );


  // R[sdr_3_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_12_we),
    .wd     (sdr_3_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_12.q ),

    // to register interface (read)
    .qs     (sdr_3_12_qs)
  );


  // R[sdr_3_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_13_we),
    .wd     (sdr_3_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_13.q ),

    // to register interface (read)
    .qs     (sdr_3_13_qs)
  );


  // R[sdr_3_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_14_we),
    .wd     (sdr_3_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_14.q ),

    // to register interface (read)
    .qs     (sdr_3_14_qs)
  );


  // R[sdr_3_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_15_we),
    .wd     (sdr_3_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_15.q ),

    // to register interface (read)
    .qs     (sdr_3_15_qs)
  );


  // R[sdr_3_16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_16_we),
    .wd     (sdr_3_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_16.q ),

    // to register interface (read)
    .qs     (sdr_3_16_qs)
  );


  // R[sdr_3_17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_17_we),
    .wd     (sdr_3_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_17.q ),

    // to register interface (read)
    .qs     (sdr_3_17_qs)
  );


  // R[sdr_3_18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_18_we),
    .wd     (sdr_3_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_18.q ),

    // to register interface (read)
    .qs     (sdr_3_18_qs)
  );


  // R[sdr_3_19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_19_we),
    .wd     (sdr_3_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_19.q ),

    // to register interface (read)
    .qs     (sdr_3_19_qs)
  );


  // R[sdr_3_20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_20_we),
    .wd     (sdr_3_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_20.q ),

    // to register interface (read)
    .qs     (sdr_3_20_qs)
  );


  // R[sdr_3_21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_21_we),
    .wd     (sdr_3_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_21.q ),

    // to register interface (read)
    .qs     (sdr_3_21_qs)
  );


  // R[sdr_3_22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_22_we),
    .wd     (sdr_3_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_22.q ),

    // to register interface (read)
    .qs     (sdr_3_22_qs)
  );


  // R[sdr_3_23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_23_we),
    .wd     (sdr_3_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_23.q ),

    // to register interface (read)
    .qs     (sdr_3_23_qs)
  );


  // R[sdr_3_24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_24_we),
    .wd     (sdr_3_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_24.q ),

    // to register interface (read)
    .qs     (sdr_3_24_qs)
  );


  // R[sdr_3_25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_25_we),
    .wd     (sdr_3_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_25.q ),

    // to register interface (read)
    .qs     (sdr_3_25_qs)
  );


  // R[sdr_3_26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_26_we),
    .wd     (sdr_3_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_26.q ),

    // to register interface (read)
    .qs     (sdr_3_26_qs)
  );


  // R[sdr_3_27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_27_we),
    .wd     (sdr_3_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_27.q ),

    // to register interface (read)
    .qs     (sdr_3_27_qs)
  );


  // R[sdr_3_28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_28_we),
    .wd     (sdr_3_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_28.q ),

    // to register interface (read)
    .qs     (sdr_3_28_qs)
  );


  // R[sdr_3_29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_29_we),
    .wd     (sdr_3_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_29.q ),

    // to register interface (read)
    .qs     (sdr_3_29_qs)
  );


  // R[sdr_3_30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_30_we),
    .wd     (sdr_3_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_30.q ),

    // to register interface (read)
    .qs     (sdr_3_30_qs)
  );


  // R[sdr_3_31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_3_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_3_31_we),
    .wd     (sdr_3_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_31.q ),

    // to register interface (read)
    .qs     (sdr_3_31_qs)
  );


  // R[sdr_3_index_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_0.de),
    .d      (hw2reg.sdr_3_index_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_0.q ),

    // to register interface (read)
    .qs     (sdr_3_index_0_qs)
  );


  // R[sdr_3_index_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_1.de),
    .d      (hw2reg.sdr_3_index_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_1.q ),

    // to register interface (read)
    .qs     (sdr_3_index_1_qs)
  );


  // R[sdr_3_index_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_2.de),
    .d      (hw2reg.sdr_3_index_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_2.q ),

    // to register interface (read)
    .qs     (sdr_3_index_2_qs)
  );


  // R[sdr_3_index_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_3.de),
    .d      (hw2reg.sdr_3_index_3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_3.q ),

    // to register interface (read)
    .qs     (sdr_3_index_3_qs)
  );


  // R[sdr_3_index_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_4.de),
    .d      (hw2reg.sdr_3_index_4.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_4.q ),

    // to register interface (read)
    .qs     (sdr_3_index_4_qs)
  );


  // R[sdr_3_index_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_5.de),
    .d      (hw2reg.sdr_3_index_5.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_5.q ),

    // to register interface (read)
    .qs     (sdr_3_index_5_qs)
  );


  // R[sdr_3_index_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_6.de),
    .d      (hw2reg.sdr_3_index_6.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_6.q ),

    // to register interface (read)
    .qs     (sdr_3_index_6_qs)
  );


  // R[sdr_3_index_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_7.de),
    .d      (hw2reg.sdr_3_index_7.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_7.q ),

    // to register interface (read)
    .qs     (sdr_3_index_7_qs)
  );


  // R[sdr_3_index_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_8.de),
    .d      (hw2reg.sdr_3_index_8.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_8.q ),

    // to register interface (read)
    .qs     (sdr_3_index_8_qs)
  );


  // R[sdr_3_index_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_9.de),
    .d      (hw2reg.sdr_3_index_9.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_9.q ),

    // to register interface (read)
    .qs     (sdr_3_index_9_qs)
  );


  // R[sdr_3_index_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_10.de),
    .d      (hw2reg.sdr_3_index_10.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_10.q ),

    // to register interface (read)
    .qs     (sdr_3_index_10_qs)
  );


  // R[sdr_3_index_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_11.de),
    .d      (hw2reg.sdr_3_index_11.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_11.q ),

    // to register interface (read)
    .qs     (sdr_3_index_11_qs)
  );


  // R[sdr_3_index_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_12.de),
    .d      (hw2reg.sdr_3_index_12.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_12.q ),

    // to register interface (read)
    .qs     (sdr_3_index_12_qs)
  );


  // R[sdr_3_index_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_13.de),
    .d      (hw2reg.sdr_3_index_13.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_13.q ),

    // to register interface (read)
    .qs     (sdr_3_index_13_qs)
  );


  // R[sdr_3_index_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_14.de),
    .d      (hw2reg.sdr_3_index_14.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_14.q ),

    // to register interface (read)
    .qs     (sdr_3_index_14_qs)
  );


  // R[sdr_3_index_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_3_index_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_3_index_15.de),
    .d      (hw2reg.sdr_3_index_15.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_3_index_15.q ),

    // to register interface (read)
    .qs     (sdr_3_index_15_qs)
  );


  // R[sdr_logical_op_control_reg]: V(False)

  //   F[sdr_src_1]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("W1S"),
    .RESVAL  (4'h0)
  ) u_sdr_logical_op_control_reg_sdr_src_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_op_control_reg_sdr_src_1_we),
    .wd     (sdr_logical_op_control_reg_sdr_src_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_op_control_reg.sdr_src_1.q ),

    // to register interface (read)
    .qs     (sdr_logical_op_control_reg_sdr_src_1_qs)
  );


  //   F[sdr_src_2]: 7:4
  prim_subreg #(
    .DW      (4),
    .SWACCESS("W1S"),
    .RESVAL  (4'h0)
  ) u_sdr_logical_op_control_reg_sdr_src_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_op_control_reg_sdr_src_2_we),
    .wd     (sdr_logical_op_control_reg_sdr_src_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_op_control_reg.sdr_src_2.q ),

    // to register interface (read)
    .qs     (sdr_logical_op_control_reg_sdr_src_2_qs)
  );


  //   F[destination_sdr]: 11:8
  prim_subreg #(
    .DW      (4),
    .SWACCESS("W1S"),
    .RESVAL  (4'h0)
  ) u_sdr_logical_op_control_reg_destination_sdr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_op_control_reg_destination_sdr_we),
    .wd     (sdr_logical_op_control_reg_destination_sdr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_op_control_reg.destination_sdr.q ),

    // to register interface (read)
    .qs     (sdr_logical_op_control_reg_destination_sdr_qs)
  );


  //   F[bitwise_logical_operation]: 11:8
  prim_subreg #(
    .DW      (4),
    .SWACCESS("W1S"),
    .RESVAL  (4'h0)
  ) u_sdr_logical_op_control_reg_bitwise_logical_operation (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_op_control_reg_bitwise_logical_operation_we),
    .wd     (sdr_logical_op_control_reg_bitwise_logical_operation_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_op_control_reg.bitwise_logical_operation.q ),

    // to register interface (read)
    .qs     (sdr_logical_op_control_reg_bitwise_logical_operation_qs)
  );


  //   F[unused]: 31:12
  prim_subreg #(
    .DW      (20),
    .SWACCESS("W1S"),
    .RESVAL  (20'h0)
  ) u_sdr_logical_op_control_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_op_control_reg_unused_we),
    .wd     (sdr_logical_op_control_reg_unused_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_op_control_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_logical_op_control_reg_unused_qs)
  );


  // R[sdr_logical_result_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_0_we),
    .wd     (sdr_logical_result_0_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_0.de),
    .d      (hw2reg.sdr_logical_result_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_0.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_0_qs)
  );


  // R[sdr_logical_result_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_1_we),
    .wd     (sdr_logical_result_1_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_1.de),
    .d      (hw2reg.sdr_logical_result_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_1.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_1_qs)
  );


  // R[sdr_logical_result_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_2_we),
    .wd     (sdr_logical_result_2_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_2.de),
    .d      (hw2reg.sdr_logical_result_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_2.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_2_qs)
  );


  // R[sdr_logical_result_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_3_we),
    .wd     (sdr_logical_result_3_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_3.de),
    .d      (hw2reg.sdr_logical_result_3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_3.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_3_qs)
  );


  // R[sdr_logical_result_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_4_we),
    .wd     (sdr_logical_result_4_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_4.de),
    .d      (hw2reg.sdr_logical_result_4.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_4.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_4_qs)
  );


  // R[sdr_logical_result_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_5_we),
    .wd     (sdr_logical_result_5_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_5.de),
    .d      (hw2reg.sdr_logical_result_5.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_5.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_5_qs)
  );


  // R[sdr_logical_result_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_6_we),
    .wd     (sdr_logical_result_6_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_6.de),
    .d      (hw2reg.sdr_logical_result_6.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_6.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_6_qs)
  );


  // R[sdr_logical_result_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_7_we),
    .wd     (sdr_logical_result_7_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_7.de),
    .d      (hw2reg.sdr_logical_result_7.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_7.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_7_qs)
  );


  // R[sdr_logical_result_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_8_we),
    .wd     (sdr_logical_result_8_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_8.de),
    .d      (hw2reg.sdr_logical_result_8.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_8.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_8_qs)
  );


  // R[sdr_logical_result_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_9_we),
    .wd     (sdr_logical_result_9_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_9.de),
    .d      (hw2reg.sdr_logical_result_9.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_9.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_9_qs)
  );


  // R[sdr_logical_result_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_10_we),
    .wd     (sdr_logical_result_10_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_10.de),
    .d      (hw2reg.sdr_logical_result_10.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_10.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_10_qs)
  );


  // R[sdr_logical_result_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_11_we),
    .wd     (sdr_logical_result_11_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_11.de),
    .d      (hw2reg.sdr_logical_result_11.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_11.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_11_qs)
  );


  // R[sdr_logical_result_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_12_we),
    .wd     (sdr_logical_result_12_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_12.de),
    .d      (hw2reg.sdr_logical_result_12.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_12.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_12_qs)
  );


  // R[sdr_logical_result_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_13_we),
    .wd     (sdr_logical_result_13_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_13.de),
    .d      (hw2reg.sdr_logical_result_13.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_13.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_13_qs)
  );


  // R[sdr_logical_result_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_14_we),
    .wd     (sdr_logical_result_14_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_14.de),
    .d      (hw2reg.sdr_logical_result_14.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_14.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_14_qs)
  );


  // R[sdr_logical_result_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_15_we),
    .wd     (sdr_logical_result_15_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_15.de),
    .d      (hw2reg.sdr_logical_result_15.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_15.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_15_qs)
  );


  // R[sdr_logical_result_16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_16_we),
    .wd     (sdr_logical_result_16_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_16.de),
    .d      (hw2reg.sdr_logical_result_16.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_16.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_16_qs)
  );


  // R[sdr_logical_result_17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_17_we),
    .wd     (sdr_logical_result_17_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_17.de),
    .d      (hw2reg.sdr_logical_result_17.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_17.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_17_qs)
  );


  // R[sdr_logical_result_18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_18_we),
    .wd     (sdr_logical_result_18_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_18.de),
    .d      (hw2reg.sdr_logical_result_18.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_18.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_18_qs)
  );


  // R[sdr_logical_result_19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_19_we),
    .wd     (sdr_logical_result_19_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_19.de),
    .d      (hw2reg.sdr_logical_result_19.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_19.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_19_qs)
  );


  // R[sdr_logical_result_20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_20_we),
    .wd     (sdr_logical_result_20_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_20.de),
    .d      (hw2reg.sdr_logical_result_20.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_20.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_20_qs)
  );


  // R[sdr_logical_result_21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_21_we),
    .wd     (sdr_logical_result_21_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_21.de),
    .d      (hw2reg.sdr_logical_result_21.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_21.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_21_qs)
  );


  // R[sdr_logical_result_22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_22_we),
    .wd     (sdr_logical_result_22_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_22.de),
    .d      (hw2reg.sdr_logical_result_22.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_22.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_22_qs)
  );


  // R[sdr_logical_result_23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_23_we),
    .wd     (sdr_logical_result_23_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_23.de),
    .d      (hw2reg.sdr_logical_result_23.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_23.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_23_qs)
  );


  // R[sdr_logical_result_24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_24_we),
    .wd     (sdr_logical_result_24_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_24.de),
    .d      (hw2reg.sdr_logical_result_24.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_24.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_24_qs)
  );


  // R[sdr_logical_result_25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_25_we),
    .wd     (sdr_logical_result_25_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_25.de),
    .d      (hw2reg.sdr_logical_result_25.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_25.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_25_qs)
  );


  // R[sdr_logical_result_26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_26_we),
    .wd     (sdr_logical_result_26_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_26.de),
    .d      (hw2reg.sdr_logical_result_26.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_26.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_26_qs)
  );


  // R[sdr_logical_result_27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_27_we),
    .wd     (sdr_logical_result_27_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_27.de),
    .d      (hw2reg.sdr_logical_result_27.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_27.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_27_qs)
  );


  // R[sdr_logical_result_28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_28_we),
    .wd     (sdr_logical_result_28_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_28.de),
    .d      (hw2reg.sdr_logical_result_28.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_28.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_28_qs)
  );


  // R[sdr_logical_result_29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_29_we),
    .wd     (sdr_logical_result_29_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_29.de),
    .d      (hw2reg.sdr_logical_result_29.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_29.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_29_qs)
  );


  // R[sdr_logical_result_30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_30_we),
    .wd     (sdr_logical_result_30_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_30.de),
    .d      (hw2reg.sdr_logical_result_30.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_30.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_30_qs)
  );


  // R[sdr_logical_result_31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_logical_result_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_logical_result_31_we),
    .wd     (sdr_logical_result_31_wd),

    // from internal hardware
    .de     (hw2reg.sdr_logical_result_31.de),
    .d      (hw2reg.sdr_logical_result_31.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_logical_result_31.q ),

    // to register interface (read)
    .qs     (sdr_logical_result_31_qs)
  );




  logic [232:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == HTM_BLOCK_SDR_0_CONTROL_REG_OFFSET);
    addr_hit[  1] = (reg_addr == HTM_BLOCK_SDR_0_STATUS_REG_OFFSET);
    addr_hit[  2] = (reg_addr == HTM_BLOCK_SDR_0_0_OFFSET);
    addr_hit[  3] = (reg_addr == HTM_BLOCK_SDR_0_1_OFFSET);
    addr_hit[  4] = (reg_addr == HTM_BLOCK_SDR_0_2_OFFSET);
    addr_hit[  5] = (reg_addr == HTM_BLOCK_SDR_0_3_OFFSET);
    addr_hit[  6] = (reg_addr == HTM_BLOCK_SDR_0_4_OFFSET);
    addr_hit[  7] = (reg_addr == HTM_BLOCK_SDR_0_5_OFFSET);
    addr_hit[  8] = (reg_addr == HTM_BLOCK_SDR_0_6_OFFSET);
    addr_hit[  9] = (reg_addr == HTM_BLOCK_SDR_0_7_OFFSET);
    addr_hit[ 10] = (reg_addr == HTM_BLOCK_SDR_0_8_OFFSET);
    addr_hit[ 11] = (reg_addr == HTM_BLOCK_SDR_0_9_OFFSET);
    addr_hit[ 12] = (reg_addr == HTM_BLOCK_SDR_0_10_OFFSET);
    addr_hit[ 13] = (reg_addr == HTM_BLOCK_SDR_0_11_OFFSET);
    addr_hit[ 14] = (reg_addr == HTM_BLOCK_SDR_0_12_OFFSET);
    addr_hit[ 15] = (reg_addr == HTM_BLOCK_SDR_0_13_OFFSET);
    addr_hit[ 16] = (reg_addr == HTM_BLOCK_SDR_0_14_OFFSET);
    addr_hit[ 17] = (reg_addr == HTM_BLOCK_SDR_0_15_OFFSET);
    addr_hit[ 18] = (reg_addr == HTM_BLOCK_SDR_0_16_OFFSET);
    addr_hit[ 19] = (reg_addr == HTM_BLOCK_SDR_0_17_OFFSET);
    addr_hit[ 20] = (reg_addr == HTM_BLOCK_SDR_0_18_OFFSET);
    addr_hit[ 21] = (reg_addr == HTM_BLOCK_SDR_0_19_OFFSET);
    addr_hit[ 22] = (reg_addr == HTM_BLOCK_SDR_0_20_OFFSET);
    addr_hit[ 23] = (reg_addr == HTM_BLOCK_SDR_0_21_OFFSET);
    addr_hit[ 24] = (reg_addr == HTM_BLOCK_SDR_0_22_OFFSET);
    addr_hit[ 25] = (reg_addr == HTM_BLOCK_SDR_0_23_OFFSET);
    addr_hit[ 26] = (reg_addr == HTM_BLOCK_SDR_0_24_OFFSET);
    addr_hit[ 27] = (reg_addr == HTM_BLOCK_SDR_0_25_OFFSET);
    addr_hit[ 28] = (reg_addr == HTM_BLOCK_SDR_0_26_OFFSET);
    addr_hit[ 29] = (reg_addr == HTM_BLOCK_SDR_0_27_OFFSET);
    addr_hit[ 30] = (reg_addr == HTM_BLOCK_SDR_0_28_OFFSET);
    addr_hit[ 31] = (reg_addr == HTM_BLOCK_SDR_0_29_OFFSET);
    addr_hit[ 32] = (reg_addr == HTM_BLOCK_SDR_0_30_OFFSET);
    addr_hit[ 33] = (reg_addr == HTM_BLOCK_SDR_0_31_OFFSET);
    addr_hit[ 34] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_0_OFFSET);
    addr_hit[ 35] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_1_OFFSET);
    addr_hit[ 36] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_2_OFFSET);
    addr_hit[ 37] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_3_OFFSET);
    addr_hit[ 38] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_4_OFFSET);
    addr_hit[ 39] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_5_OFFSET);
    addr_hit[ 40] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_6_OFFSET);
    addr_hit[ 41] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_7_OFFSET);
    addr_hit[ 42] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_8_OFFSET);
    addr_hit[ 43] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_9_OFFSET);
    addr_hit[ 44] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_10_OFFSET);
    addr_hit[ 45] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_11_OFFSET);
    addr_hit[ 46] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_12_OFFSET);
    addr_hit[ 47] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_13_OFFSET);
    addr_hit[ 48] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_14_OFFSET);
    addr_hit[ 49] = (reg_addr == HTM_BLOCK_SDR_0_INDEX_15_OFFSET);
    addr_hit[ 50] = (reg_addr == HTM_BLOCK_SDR_1_CONTROL_REG_OFFSET);
    addr_hit[ 51] = (reg_addr == HTM_BLOCK_SDR_1_STATUS_REG_OFFSET);
    addr_hit[ 52] = (reg_addr == HTM_BLOCK_SDR_1_0_OFFSET);
    addr_hit[ 53] = (reg_addr == HTM_BLOCK_SDR_1_1_OFFSET);
    addr_hit[ 54] = (reg_addr == HTM_BLOCK_SDR_1_2_OFFSET);
    addr_hit[ 55] = (reg_addr == HTM_BLOCK_SDR_1_3_OFFSET);
    addr_hit[ 56] = (reg_addr == HTM_BLOCK_SDR_1_4_OFFSET);
    addr_hit[ 57] = (reg_addr == HTM_BLOCK_SDR_1_5_OFFSET);
    addr_hit[ 58] = (reg_addr == HTM_BLOCK_SDR_1_6_OFFSET);
    addr_hit[ 59] = (reg_addr == HTM_BLOCK_SDR_1_7_OFFSET);
    addr_hit[ 60] = (reg_addr == HTM_BLOCK_SDR_1_8_OFFSET);
    addr_hit[ 61] = (reg_addr == HTM_BLOCK_SDR_1_9_OFFSET);
    addr_hit[ 62] = (reg_addr == HTM_BLOCK_SDR_1_10_OFFSET);
    addr_hit[ 63] = (reg_addr == HTM_BLOCK_SDR_1_11_OFFSET);
    addr_hit[ 64] = (reg_addr == HTM_BLOCK_SDR_1_12_OFFSET);
    addr_hit[ 65] = (reg_addr == HTM_BLOCK_SDR_1_13_OFFSET);
    addr_hit[ 66] = (reg_addr == HTM_BLOCK_SDR_1_14_OFFSET);
    addr_hit[ 67] = (reg_addr == HTM_BLOCK_SDR_1_15_OFFSET);
    addr_hit[ 68] = (reg_addr == HTM_BLOCK_SDR_1_16_OFFSET);
    addr_hit[ 69] = (reg_addr == HTM_BLOCK_SDR_1_17_OFFSET);
    addr_hit[ 70] = (reg_addr == HTM_BLOCK_SDR_1_18_OFFSET);
    addr_hit[ 71] = (reg_addr == HTM_BLOCK_SDR_1_19_OFFSET);
    addr_hit[ 72] = (reg_addr == HTM_BLOCK_SDR_1_20_OFFSET);
    addr_hit[ 73] = (reg_addr == HTM_BLOCK_SDR_1_21_OFFSET);
    addr_hit[ 74] = (reg_addr == HTM_BLOCK_SDR_1_22_OFFSET);
    addr_hit[ 75] = (reg_addr == HTM_BLOCK_SDR_1_23_OFFSET);
    addr_hit[ 76] = (reg_addr == HTM_BLOCK_SDR_1_24_OFFSET);
    addr_hit[ 77] = (reg_addr == HTM_BLOCK_SDR_1_25_OFFSET);
    addr_hit[ 78] = (reg_addr == HTM_BLOCK_SDR_1_26_OFFSET);
    addr_hit[ 79] = (reg_addr == HTM_BLOCK_SDR_1_27_OFFSET);
    addr_hit[ 80] = (reg_addr == HTM_BLOCK_SDR_1_28_OFFSET);
    addr_hit[ 81] = (reg_addr == HTM_BLOCK_SDR_1_29_OFFSET);
    addr_hit[ 82] = (reg_addr == HTM_BLOCK_SDR_1_30_OFFSET);
    addr_hit[ 83] = (reg_addr == HTM_BLOCK_SDR_1_31_OFFSET);
    addr_hit[ 84] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_0_OFFSET);
    addr_hit[ 85] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_1_OFFSET);
    addr_hit[ 86] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_2_OFFSET);
    addr_hit[ 87] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_3_OFFSET);
    addr_hit[ 88] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_4_OFFSET);
    addr_hit[ 89] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_5_OFFSET);
    addr_hit[ 90] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_6_OFFSET);
    addr_hit[ 91] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_7_OFFSET);
    addr_hit[ 92] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_8_OFFSET);
    addr_hit[ 93] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_9_OFFSET);
    addr_hit[ 94] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_10_OFFSET);
    addr_hit[ 95] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_11_OFFSET);
    addr_hit[ 96] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_12_OFFSET);
    addr_hit[ 97] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_13_OFFSET);
    addr_hit[ 98] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_14_OFFSET);
    addr_hit[ 99] = (reg_addr == HTM_BLOCK_SDR_1_INDEX_15_OFFSET);
    addr_hit[100] = (reg_addr == HTM_BLOCK_SDR_2_CONTROL_REG_OFFSET);
    addr_hit[101] = (reg_addr == HTM_BLOCK_SDR_2_STATUS_REG_OFFSET);
    addr_hit[102] = (reg_addr == HTM_BLOCK_SDR_2_0_OFFSET);
    addr_hit[103] = (reg_addr == HTM_BLOCK_SDR_2_1_OFFSET);
    addr_hit[104] = (reg_addr == HTM_BLOCK_SDR_2_2_OFFSET);
    addr_hit[105] = (reg_addr == HTM_BLOCK_SDR_2_3_OFFSET);
    addr_hit[106] = (reg_addr == HTM_BLOCK_SDR_2_4_OFFSET);
    addr_hit[107] = (reg_addr == HTM_BLOCK_SDR_2_5_OFFSET);
    addr_hit[108] = (reg_addr == HTM_BLOCK_SDR_2_6_OFFSET);
    addr_hit[109] = (reg_addr == HTM_BLOCK_SDR_2_7_OFFSET);
    addr_hit[110] = (reg_addr == HTM_BLOCK_SDR_2_8_OFFSET);
    addr_hit[111] = (reg_addr == HTM_BLOCK_SDR_2_9_OFFSET);
    addr_hit[112] = (reg_addr == HTM_BLOCK_SDR_2_10_OFFSET);
    addr_hit[113] = (reg_addr == HTM_BLOCK_SDR_2_11_OFFSET);
    addr_hit[114] = (reg_addr == HTM_BLOCK_SDR_2_12_OFFSET);
    addr_hit[115] = (reg_addr == HTM_BLOCK_SDR_2_13_OFFSET);
    addr_hit[116] = (reg_addr == HTM_BLOCK_SDR_2_14_OFFSET);
    addr_hit[117] = (reg_addr == HTM_BLOCK_SDR_2_15_OFFSET);
    addr_hit[118] = (reg_addr == HTM_BLOCK_SDR_2_16_OFFSET);
    addr_hit[119] = (reg_addr == HTM_BLOCK_SDR_2_17_OFFSET);
    addr_hit[120] = (reg_addr == HTM_BLOCK_SDR_2_18_OFFSET);
    addr_hit[121] = (reg_addr == HTM_BLOCK_SDR_2_19_OFFSET);
    addr_hit[122] = (reg_addr == HTM_BLOCK_SDR_2_20_OFFSET);
    addr_hit[123] = (reg_addr == HTM_BLOCK_SDR_2_21_OFFSET);
    addr_hit[124] = (reg_addr == HTM_BLOCK_SDR_2_22_OFFSET);
    addr_hit[125] = (reg_addr == HTM_BLOCK_SDR_2_23_OFFSET);
    addr_hit[126] = (reg_addr == HTM_BLOCK_SDR_2_24_OFFSET);
    addr_hit[127] = (reg_addr == HTM_BLOCK_SDR_2_25_OFFSET);
    addr_hit[128] = (reg_addr == HTM_BLOCK_SDR_2_26_OFFSET);
    addr_hit[129] = (reg_addr == HTM_BLOCK_SDR_2_27_OFFSET);
    addr_hit[130] = (reg_addr == HTM_BLOCK_SDR_2_28_OFFSET);
    addr_hit[131] = (reg_addr == HTM_BLOCK_SDR_2_29_OFFSET);
    addr_hit[132] = (reg_addr == HTM_BLOCK_SDR_2_30_OFFSET);
    addr_hit[133] = (reg_addr == HTM_BLOCK_SDR_2_31_OFFSET);
    addr_hit[134] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_0_OFFSET);
    addr_hit[135] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_1_OFFSET);
    addr_hit[136] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_2_OFFSET);
    addr_hit[137] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_3_OFFSET);
    addr_hit[138] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_4_OFFSET);
    addr_hit[139] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_5_OFFSET);
    addr_hit[140] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_6_OFFSET);
    addr_hit[141] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_7_OFFSET);
    addr_hit[142] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_8_OFFSET);
    addr_hit[143] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_9_OFFSET);
    addr_hit[144] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_10_OFFSET);
    addr_hit[145] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_11_OFFSET);
    addr_hit[146] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_12_OFFSET);
    addr_hit[147] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_13_OFFSET);
    addr_hit[148] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_14_OFFSET);
    addr_hit[149] = (reg_addr == HTM_BLOCK_SDR_2_INDEX_15_OFFSET);
    addr_hit[150] = (reg_addr == HTM_BLOCK_SDR_3_CONTROL_REG_OFFSET);
    addr_hit[151] = (reg_addr == HTM_BLOCK_SDR_3_STATUS_REG_OFFSET);
    addr_hit[152] = (reg_addr == HTM_BLOCK_SDR_3_0_OFFSET);
    addr_hit[153] = (reg_addr == HTM_BLOCK_SDR_3_1_OFFSET);
    addr_hit[154] = (reg_addr == HTM_BLOCK_SDR_3_2_OFFSET);
    addr_hit[155] = (reg_addr == HTM_BLOCK_SDR_3_3_OFFSET);
    addr_hit[156] = (reg_addr == HTM_BLOCK_SDR_3_4_OFFSET);
    addr_hit[157] = (reg_addr == HTM_BLOCK_SDR_3_5_OFFSET);
    addr_hit[158] = (reg_addr == HTM_BLOCK_SDR_3_6_OFFSET);
    addr_hit[159] = (reg_addr == HTM_BLOCK_SDR_3_7_OFFSET);
    addr_hit[160] = (reg_addr == HTM_BLOCK_SDR_3_8_OFFSET);
    addr_hit[161] = (reg_addr == HTM_BLOCK_SDR_3_9_OFFSET);
    addr_hit[162] = (reg_addr == HTM_BLOCK_SDR_3_10_OFFSET);
    addr_hit[163] = (reg_addr == HTM_BLOCK_SDR_3_11_OFFSET);
    addr_hit[164] = (reg_addr == HTM_BLOCK_SDR_3_12_OFFSET);
    addr_hit[165] = (reg_addr == HTM_BLOCK_SDR_3_13_OFFSET);
    addr_hit[166] = (reg_addr == HTM_BLOCK_SDR_3_14_OFFSET);
    addr_hit[167] = (reg_addr == HTM_BLOCK_SDR_3_15_OFFSET);
    addr_hit[168] = (reg_addr == HTM_BLOCK_SDR_3_16_OFFSET);
    addr_hit[169] = (reg_addr == HTM_BLOCK_SDR_3_17_OFFSET);
    addr_hit[170] = (reg_addr == HTM_BLOCK_SDR_3_18_OFFSET);
    addr_hit[171] = (reg_addr == HTM_BLOCK_SDR_3_19_OFFSET);
    addr_hit[172] = (reg_addr == HTM_BLOCK_SDR_3_20_OFFSET);
    addr_hit[173] = (reg_addr == HTM_BLOCK_SDR_3_21_OFFSET);
    addr_hit[174] = (reg_addr == HTM_BLOCK_SDR_3_22_OFFSET);
    addr_hit[175] = (reg_addr == HTM_BLOCK_SDR_3_23_OFFSET);
    addr_hit[176] = (reg_addr == HTM_BLOCK_SDR_3_24_OFFSET);
    addr_hit[177] = (reg_addr == HTM_BLOCK_SDR_3_25_OFFSET);
    addr_hit[178] = (reg_addr == HTM_BLOCK_SDR_3_26_OFFSET);
    addr_hit[179] = (reg_addr == HTM_BLOCK_SDR_3_27_OFFSET);
    addr_hit[180] = (reg_addr == HTM_BLOCK_SDR_3_28_OFFSET);
    addr_hit[181] = (reg_addr == HTM_BLOCK_SDR_3_29_OFFSET);
    addr_hit[182] = (reg_addr == HTM_BLOCK_SDR_3_30_OFFSET);
    addr_hit[183] = (reg_addr == HTM_BLOCK_SDR_3_31_OFFSET);
    addr_hit[184] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_0_OFFSET);
    addr_hit[185] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_1_OFFSET);
    addr_hit[186] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_2_OFFSET);
    addr_hit[187] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_3_OFFSET);
    addr_hit[188] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_4_OFFSET);
    addr_hit[189] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_5_OFFSET);
    addr_hit[190] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_6_OFFSET);
    addr_hit[191] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_7_OFFSET);
    addr_hit[192] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_8_OFFSET);
    addr_hit[193] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_9_OFFSET);
    addr_hit[194] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_10_OFFSET);
    addr_hit[195] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_11_OFFSET);
    addr_hit[196] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_12_OFFSET);
    addr_hit[197] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_13_OFFSET);
    addr_hit[198] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_14_OFFSET);
    addr_hit[199] = (reg_addr == HTM_BLOCK_SDR_3_INDEX_15_OFFSET);
    addr_hit[200] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_OP_CONTROL_REG_OFFSET);
    addr_hit[201] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_0_OFFSET);
    addr_hit[202] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_1_OFFSET);
    addr_hit[203] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_2_OFFSET);
    addr_hit[204] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_3_OFFSET);
    addr_hit[205] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_4_OFFSET);
    addr_hit[206] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_5_OFFSET);
    addr_hit[207] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_6_OFFSET);
    addr_hit[208] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_7_OFFSET);
    addr_hit[209] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_8_OFFSET);
    addr_hit[210] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_9_OFFSET);
    addr_hit[211] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_10_OFFSET);
    addr_hit[212] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_11_OFFSET);
    addr_hit[213] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_12_OFFSET);
    addr_hit[214] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_13_OFFSET);
    addr_hit[215] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_14_OFFSET);
    addr_hit[216] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_15_OFFSET);
    addr_hit[217] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_16_OFFSET);
    addr_hit[218] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_17_OFFSET);
    addr_hit[219] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_18_OFFSET);
    addr_hit[220] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_19_OFFSET);
    addr_hit[221] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_20_OFFSET);
    addr_hit[222] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_21_OFFSET);
    addr_hit[223] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_22_OFFSET);
    addr_hit[224] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_23_OFFSET);
    addr_hit[225] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_24_OFFSET);
    addr_hit[226] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_25_OFFSET);
    addr_hit[227] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_26_OFFSET);
    addr_hit[228] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_27_OFFSET);
    addr_hit[229] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_28_OFFSET);
    addr_hit[230] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_29_OFFSET);
    addr_hit[231] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_30_OFFSET);
    addr_hit[232] = (reg_addr == HTM_BLOCK_SDR_LOGICAL_RESULT_31_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(HTM_BLOCK_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(HTM_BLOCK_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(HTM_BLOCK_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(HTM_BLOCK_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(HTM_BLOCK_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(HTM_BLOCK_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(HTM_BLOCK_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(HTM_BLOCK_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(HTM_BLOCK_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(HTM_BLOCK_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(HTM_BLOCK_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(HTM_BLOCK_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(HTM_BLOCK_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(HTM_BLOCK_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(HTM_BLOCK_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(HTM_BLOCK_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(HTM_BLOCK_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(HTM_BLOCK_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(HTM_BLOCK_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(HTM_BLOCK_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(HTM_BLOCK_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(HTM_BLOCK_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(HTM_BLOCK_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(HTM_BLOCK_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(HTM_BLOCK_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(HTM_BLOCK_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(HTM_BLOCK_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(HTM_BLOCK_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(HTM_BLOCK_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(HTM_BLOCK_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(HTM_BLOCK_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(HTM_BLOCK_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(HTM_BLOCK_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(HTM_BLOCK_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(HTM_BLOCK_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(HTM_BLOCK_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(HTM_BLOCK_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(HTM_BLOCK_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(HTM_BLOCK_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(HTM_BLOCK_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(HTM_BLOCK_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(HTM_BLOCK_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(HTM_BLOCK_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(HTM_BLOCK_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(HTM_BLOCK_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(HTM_BLOCK_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(HTM_BLOCK_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(HTM_BLOCK_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(HTM_BLOCK_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(HTM_BLOCK_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(HTM_BLOCK_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(HTM_BLOCK_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(HTM_BLOCK_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(HTM_BLOCK_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(HTM_BLOCK_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(HTM_BLOCK_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(HTM_BLOCK_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(HTM_BLOCK_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(HTM_BLOCK_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(HTM_BLOCK_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(HTM_BLOCK_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(HTM_BLOCK_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(HTM_BLOCK_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(HTM_BLOCK_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(HTM_BLOCK_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(HTM_BLOCK_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(HTM_BLOCK_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(HTM_BLOCK_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(HTM_BLOCK_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(HTM_BLOCK_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(HTM_BLOCK_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(HTM_BLOCK_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(HTM_BLOCK_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(HTM_BLOCK_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(HTM_BLOCK_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(HTM_BLOCK_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(HTM_BLOCK_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(HTM_BLOCK_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(HTM_BLOCK_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(HTM_BLOCK_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(HTM_BLOCK_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(HTM_BLOCK_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(HTM_BLOCK_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(HTM_BLOCK_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(HTM_BLOCK_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(HTM_BLOCK_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(HTM_BLOCK_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(HTM_BLOCK_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(HTM_BLOCK_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(HTM_BLOCK_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(HTM_BLOCK_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(HTM_BLOCK_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(HTM_BLOCK_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(HTM_BLOCK_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(HTM_BLOCK_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(HTM_BLOCK_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(HTM_BLOCK_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(HTM_BLOCK_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(HTM_BLOCK_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(HTM_BLOCK_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(HTM_BLOCK_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(HTM_BLOCK_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(HTM_BLOCK_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(HTM_BLOCK_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(HTM_BLOCK_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(HTM_BLOCK_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(HTM_BLOCK_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(HTM_BLOCK_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(HTM_BLOCK_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(HTM_BLOCK_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(HTM_BLOCK_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(HTM_BLOCK_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(HTM_BLOCK_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(HTM_BLOCK_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(HTM_BLOCK_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(HTM_BLOCK_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(HTM_BLOCK_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(HTM_BLOCK_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(HTM_BLOCK_PERMIT[118] & ~reg_be))) |
               (addr_hit[119] & (|(HTM_BLOCK_PERMIT[119] & ~reg_be))) |
               (addr_hit[120] & (|(HTM_BLOCK_PERMIT[120] & ~reg_be))) |
               (addr_hit[121] & (|(HTM_BLOCK_PERMIT[121] & ~reg_be))) |
               (addr_hit[122] & (|(HTM_BLOCK_PERMIT[122] & ~reg_be))) |
               (addr_hit[123] & (|(HTM_BLOCK_PERMIT[123] & ~reg_be))) |
               (addr_hit[124] & (|(HTM_BLOCK_PERMIT[124] & ~reg_be))) |
               (addr_hit[125] & (|(HTM_BLOCK_PERMIT[125] & ~reg_be))) |
               (addr_hit[126] & (|(HTM_BLOCK_PERMIT[126] & ~reg_be))) |
               (addr_hit[127] & (|(HTM_BLOCK_PERMIT[127] & ~reg_be))) |
               (addr_hit[128] & (|(HTM_BLOCK_PERMIT[128] & ~reg_be))) |
               (addr_hit[129] & (|(HTM_BLOCK_PERMIT[129] & ~reg_be))) |
               (addr_hit[130] & (|(HTM_BLOCK_PERMIT[130] & ~reg_be))) |
               (addr_hit[131] & (|(HTM_BLOCK_PERMIT[131] & ~reg_be))) |
               (addr_hit[132] & (|(HTM_BLOCK_PERMIT[132] & ~reg_be))) |
               (addr_hit[133] & (|(HTM_BLOCK_PERMIT[133] & ~reg_be))) |
               (addr_hit[134] & (|(HTM_BLOCK_PERMIT[134] & ~reg_be))) |
               (addr_hit[135] & (|(HTM_BLOCK_PERMIT[135] & ~reg_be))) |
               (addr_hit[136] & (|(HTM_BLOCK_PERMIT[136] & ~reg_be))) |
               (addr_hit[137] & (|(HTM_BLOCK_PERMIT[137] & ~reg_be))) |
               (addr_hit[138] & (|(HTM_BLOCK_PERMIT[138] & ~reg_be))) |
               (addr_hit[139] & (|(HTM_BLOCK_PERMIT[139] & ~reg_be))) |
               (addr_hit[140] & (|(HTM_BLOCK_PERMIT[140] & ~reg_be))) |
               (addr_hit[141] & (|(HTM_BLOCK_PERMIT[141] & ~reg_be))) |
               (addr_hit[142] & (|(HTM_BLOCK_PERMIT[142] & ~reg_be))) |
               (addr_hit[143] & (|(HTM_BLOCK_PERMIT[143] & ~reg_be))) |
               (addr_hit[144] & (|(HTM_BLOCK_PERMIT[144] & ~reg_be))) |
               (addr_hit[145] & (|(HTM_BLOCK_PERMIT[145] & ~reg_be))) |
               (addr_hit[146] & (|(HTM_BLOCK_PERMIT[146] & ~reg_be))) |
               (addr_hit[147] & (|(HTM_BLOCK_PERMIT[147] & ~reg_be))) |
               (addr_hit[148] & (|(HTM_BLOCK_PERMIT[148] & ~reg_be))) |
               (addr_hit[149] & (|(HTM_BLOCK_PERMIT[149] & ~reg_be))) |
               (addr_hit[150] & (|(HTM_BLOCK_PERMIT[150] & ~reg_be))) |
               (addr_hit[151] & (|(HTM_BLOCK_PERMIT[151] & ~reg_be))) |
               (addr_hit[152] & (|(HTM_BLOCK_PERMIT[152] & ~reg_be))) |
               (addr_hit[153] & (|(HTM_BLOCK_PERMIT[153] & ~reg_be))) |
               (addr_hit[154] & (|(HTM_BLOCK_PERMIT[154] & ~reg_be))) |
               (addr_hit[155] & (|(HTM_BLOCK_PERMIT[155] & ~reg_be))) |
               (addr_hit[156] & (|(HTM_BLOCK_PERMIT[156] & ~reg_be))) |
               (addr_hit[157] & (|(HTM_BLOCK_PERMIT[157] & ~reg_be))) |
               (addr_hit[158] & (|(HTM_BLOCK_PERMIT[158] & ~reg_be))) |
               (addr_hit[159] & (|(HTM_BLOCK_PERMIT[159] & ~reg_be))) |
               (addr_hit[160] & (|(HTM_BLOCK_PERMIT[160] & ~reg_be))) |
               (addr_hit[161] & (|(HTM_BLOCK_PERMIT[161] & ~reg_be))) |
               (addr_hit[162] & (|(HTM_BLOCK_PERMIT[162] & ~reg_be))) |
               (addr_hit[163] & (|(HTM_BLOCK_PERMIT[163] & ~reg_be))) |
               (addr_hit[164] & (|(HTM_BLOCK_PERMIT[164] & ~reg_be))) |
               (addr_hit[165] & (|(HTM_BLOCK_PERMIT[165] & ~reg_be))) |
               (addr_hit[166] & (|(HTM_BLOCK_PERMIT[166] & ~reg_be))) |
               (addr_hit[167] & (|(HTM_BLOCK_PERMIT[167] & ~reg_be))) |
               (addr_hit[168] & (|(HTM_BLOCK_PERMIT[168] & ~reg_be))) |
               (addr_hit[169] & (|(HTM_BLOCK_PERMIT[169] & ~reg_be))) |
               (addr_hit[170] & (|(HTM_BLOCK_PERMIT[170] & ~reg_be))) |
               (addr_hit[171] & (|(HTM_BLOCK_PERMIT[171] & ~reg_be))) |
               (addr_hit[172] & (|(HTM_BLOCK_PERMIT[172] & ~reg_be))) |
               (addr_hit[173] & (|(HTM_BLOCK_PERMIT[173] & ~reg_be))) |
               (addr_hit[174] & (|(HTM_BLOCK_PERMIT[174] & ~reg_be))) |
               (addr_hit[175] & (|(HTM_BLOCK_PERMIT[175] & ~reg_be))) |
               (addr_hit[176] & (|(HTM_BLOCK_PERMIT[176] & ~reg_be))) |
               (addr_hit[177] & (|(HTM_BLOCK_PERMIT[177] & ~reg_be))) |
               (addr_hit[178] & (|(HTM_BLOCK_PERMIT[178] & ~reg_be))) |
               (addr_hit[179] & (|(HTM_BLOCK_PERMIT[179] & ~reg_be))) |
               (addr_hit[180] & (|(HTM_BLOCK_PERMIT[180] & ~reg_be))) |
               (addr_hit[181] & (|(HTM_BLOCK_PERMIT[181] & ~reg_be))) |
               (addr_hit[182] & (|(HTM_BLOCK_PERMIT[182] & ~reg_be))) |
               (addr_hit[183] & (|(HTM_BLOCK_PERMIT[183] & ~reg_be))) |
               (addr_hit[184] & (|(HTM_BLOCK_PERMIT[184] & ~reg_be))) |
               (addr_hit[185] & (|(HTM_BLOCK_PERMIT[185] & ~reg_be))) |
               (addr_hit[186] & (|(HTM_BLOCK_PERMIT[186] & ~reg_be))) |
               (addr_hit[187] & (|(HTM_BLOCK_PERMIT[187] & ~reg_be))) |
               (addr_hit[188] & (|(HTM_BLOCK_PERMIT[188] & ~reg_be))) |
               (addr_hit[189] & (|(HTM_BLOCK_PERMIT[189] & ~reg_be))) |
               (addr_hit[190] & (|(HTM_BLOCK_PERMIT[190] & ~reg_be))) |
               (addr_hit[191] & (|(HTM_BLOCK_PERMIT[191] & ~reg_be))) |
               (addr_hit[192] & (|(HTM_BLOCK_PERMIT[192] & ~reg_be))) |
               (addr_hit[193] & (|(HTM_BLOCK_PERMIT[193] & ~reg_be))) |
               (addr_hit[194] & (|(HTM_BLOCK_PERMIT[194] & ~reg_be))) |
               (addr_hit[195] & (|(HTM_BLOCK_PERMIT[195] & ~reg_be))) |
               (addr_hit[196] & (|(HTM_BLOCK_PERMIT[196] & ~reg_be))) |
               (addr_hit[197] & (|(HTM_BLOCK_PERMIT[197] & ~reg_be))) |
               (addr_hit[198] & (|(HTM_BLOCK_PERMIT[198] & ~reg_be))) |
               (addr_hit[199] & (|(HTM_BLOCK_PERMIT[199] & ~reg_be))) |
               (addr_hit[200] & (|(HTM_BLOCK_PERMIT[200] & ~reg_be))) |
               (addr_hit[201] & (|(HTM_BLOCK_PERMIT[201] & ~reg_be))) |
               (addr_hit[202] & (|(HTM_BLOCK_PERMIT[202] & ~reg_be))) |
               (addr_hit[203] & (|(HTM_BLOCK_PERMIT[203] & ~reg_be))) |
               (addr_hit[204] & (|(HTM_BLOCK_PERMIT[204] & ~reg_be))) |
               (addr_hit[205] & (|(HTM_BLOCK_PERMIT[205] & ~reg_be))) |
               (addr_hit[206] & (|(HTM_BLOCK_PERMIT[206] & ~reg_be))) |
               (addr_hit[207] & (|(HTM_BLOCK_PERMIT[207] & ~reg_be))) |
               (addr_hit[208] & (|(HTM_BLOCK_PERMIT[208] & ~reg_be))) |
               (addr_hit[209] & (|(HTM_BLOCK_PERMIT[209] & ~reg_be))) |
               (addr_hit[210] & (|(HTM_BLOCK_PERMIT[210] & ~reg_be))) |
               (addr_hit[211] & (|(HTM_BLOCK_PERMIT[211] & ~reg_be))) |
               (addr_hit[212] & (|(HTM_BLOCK_PERMIT[212] & ~reg_be))) |
               (addr_hit[213] & (|(HTM_BLOCK_PERMIT[213] & ~reg_be))) |
               (addr_hit[214] & (|(HTM_BLOCK_PERMIT[214] & ~reg_be))) |
               (addr_hit[215] & (|(HTM_BLOCK_PERMIT[215] & ~reg_be))) |
               (addr_hit[216] & (|(HTM_BLOCK_PERMIT[216] & ~reg_be))) |
               (addr_hit[217] & (|(HTM_BLOCK_PERMIT[217] & ~reg_be))) |
               (addr_hit[218] & (|(HTM_BLOCK_PERMIT[218] & ~reg_be))) |
               (addr_hit[219] & (|(HTM_BLOCK_PERMIT[219] & ~reg_be))) |
               (addr_hit[220] & (|(HTM_BLOCK_PERMIT[220] & ~reg_be))) |
               (addr_hit[221] & (|(HTM_BLOCK_PERMIT[221] & ~reg_be))) |
               (addr_hit[222] & (|(HTM_BLOCK_PERMIT[222] & ~reg_be))) |
               (addr_hit[223] & (|(HTM_BLOCK_PERMIT[223] & ~reg_be))) |
               (addr_hit[224] & (|(HTM_BLOCK_PERMIT[224] & ~reg_be))) |
               (addr_hit[225] & (|(HTM_BLOCK_PERMIT[225] & ~reg_be))) |
               (addr_hit[226] & (|(HTM_BLOCK_PERMIT[226] & ~reg_be))) |
               (addr_hit[227] & (|(HTM_BLOCK_PERMIT[227] & ~reg_be))) |
               (addr_hit[228] & (|(HTM_BLOCK_PERMIT[228] & ~reg_be))) |
               (addr_hit[229] & (|(HTM_BLOCK_PERMIT[229] & ~reg_be))) |
               (addr_hit[230] & (|(HTM_BLOCK_PERMIT[230] & ~reg_be))) |
               (addr_hit[231] & (|(HTM_BLOCK_PERMIT[231] & ~reg_be))) |
               (addr_hit[232] & (|(HTM_BLOCK_PERMIT[232] & ~reg_be)))));
  end

  assign sdr_0_control_reg_start_we = addr_hit[0] & reg_we & !reg_error;
  assign sdr_0_control_reg_start_wd = reg_wdata[0];

  assign sdr_0_control_reg_unused_we = addr_hit[0] & reg_we & !reg_error;
  assign sdr_0_control_reg_unused_wd = reg_wdata[31:1];

  assign sdr_0_status_reg_number_of_indexes_we = addr_hit[1] & reg_we & !reg_error;
  assign sdr_0_status_reg_number_of_indexes_wd = reg_wdata[7:0];

  assign sdr_0_status_reg_number_of_ones_we = addr_hit[1] & reg_we & !reg_error;
  assign sdr_0_status_reg_number_of_ones_wd = reg_wdata[24:8];

  assign sdr_0_status_reg_unused_we = addr_hit[1] & reg_we & !reg_error;
  assign sdr_0_status_reg_unused_wd = reg_wdata[28:25];

  assign sdr_0_status_reg_error_indexes_gt_32_we = addr_hit[1] & reg_we & !reg_error;
  assign sdr_0_status_reg_error_indexes_gt_32_wd = reg_wdata[29];

  assign sdr_0_status_reg_error_fifo_full_we = addr_hit[1] & reg_we & !reg_error;
  assign sdr_0_status_reg_error_fifo_full_wd = reg_wdata[30];

  assign sdr_0_status_reg_done_we = addr_hit[1] & reg_we & !reg_error;
  assign sdr_0_status_reg_done_wd = reg_wdata[31];

  assign sdr_0_0_we = addr_hit[2] & reg_we & !reg_error;
  assign sdr_0_0_wd = reg_wdata[31:0];

  assign sdr_0_1_we = addr_hit[3] & reg_we & !reg_error;
  assign sdr_0_1_wd = reg_wdata[31:0];

  assign sdr_0_2_we = addr_hit[4] & reg_we & !reg_error;
  assign sdr_0_2_wd = reg_wdata[31:0];

  assign sdr_0_3_we = addr_hit[5] & reg_we & !reg_error;
  assign sdr_0_3_wd = reg_wdata[31:0];

  assign sdr_0_4_we = addr_hit[6] & reg_we & !reg_error;
  assign sdr_0_4_wd = reg_wdata[31:0];

  assign sdr_0_5_we = addr_hit[7] & reg_we & !reg_error;
  assign sdr_0_5_wd = reg_wdata[31:0];

  assign sdr_0_6_we = addr_hit[8] & reg_we & !reg_error;
  assign sdr_0_6_wd = reg_wdata[31:0];

  assign sdr_0_7_we = addr_hit[9] & reg_we & !reg_error;
  assign sdr_0_7_wd = reg_wdata[31:0];

  assign sdr_0_8_we = addr_hit[10] & reg_we & !reg_error;
  assign sdr_0_8_wd = reg_wdata[31:0];

  assign sdr_0_9_we = addr_hit[11] & reg_we & !reg_error;
  assign sdr_0_9_wd = reg_wdata[31:0];

  assign sdr_0_10_we = addr_hit[12] & reg_we & !reg_error;
  assign sdr_0_10_wd = reg_wdata[31:0];

  assign sdr_0_11_we = addr_hit[13] & reg_we & !reg_error;
  assign sdr_0_11_wd = reg_wdata[31:0];

  assign sdr_0_12_we = addr_hit[14] & reg_we & !reg_error;
  assign sdr_0_12_wd = reg_wdata[31:0];

  assign sdr_0_13_we = addr_hit[15] & reg_we & !reg_error;
  assign sdr_0_13_wd = reg_wdata[31:0];

  assign sdr_0_14_we = addr_hit[16] & reg_we & !reg_error;
  assign sdr_0_14_wd = reg_wdata[31:0];

  assign sdr_0_15_we = addr_hit[17] & reg_we & !reg_error;
  assign sdr_0_15_wd = reg_wdata[31:0];

  assign sdr_0_16_we = addr_hit[18] & reg_we & !reg_error;
  assign sdr_0_16_wd = reg_wdata[31:0];

  assign sdr_0_17_we = addr_hit[19] & reg_we & !reg_error;
  assign sdr_0_17_wd = reg_wdata[31:0];

  assign sdr_0_18_we = addr_hit[20] & reg_we & !reg_error;
  assign sdr_0_18_wd = reg_wdata[31:0];

  assign sdr_0_19_we = addr_hit[21] & reg_we & !reg_error;
  assign sdr_0_19_wd = reg_wdata[31:0];

  assign sdr_0_20_we = addr_hit[22] & reg_we & !reg_error;
  assign sdr_0_20_wd = reg_wdata[31:0];

  assign sdr_0_21_we = addr_hit[23] & reg_we & !reg_error;
  assign sdr_0_21_wd = reg_wdata[31:0];

  assign sdr_0_22_we = addr_hit[24] & reg_we & !reg_error;
  assign sdr_0_22_wd = reg_wdata[31:0];

  assign sdr_0_23_we = addr_hit[25] & reg_we & !reg_error;
  assign sdr_0_23_wd = reg_wdata[31:0];

  assign sdr_0_24_we = addr_hit[26] & reg_we & !reg_error;
  assign sdr_0_24_wd = reg_wdata[31:0];

  assign sdr_0_25_we = addr_hit[27] & reg_we & !reg_error;
  assign sdr_0_25_wd = reg_wdata[31:0];

  assign sdr_0_26_we = addr_hit[28] & reg_we & !reg_error;
  assign sdr_0_26_wd = reg_wdata[31:0];

  assign sdr_0_27_we = addr_hit[29] & reg_we & !reg_error;
  assign sdr_0_27_wd = reg_wdata[31:0];

  assign sdr_0_28_we = addr_hit[30] & reg_we & !reg_error;
  assign sdr_0_28_wd = reg_wdata[31:0];

  assign sdr_0_29_we = addr_hit[31] & reg_we & !reg_error;
  assign sdr_0_29_wd = reg_wdata[31:0];

  assign sdr_0_30_we = addr_hit[32] & reg_we & !reg_error;
  assign sdr_0_30_wd = reg_wdata[31:0];

  assign sdr_0_31_we = addr_hit[33] & reg_we & !reg_error;
  assign sdr_0_31_wd = reg_wdata[31:0];

  assign sdr_1_control_reg_start_we = addr_hit[50] & reg_we & !reg_error;
  assign sdr_1_control_reg_start_wd = reg_wdata[0];

  assign sdr_1_control_reg_unused_we = addr_hit[50] & reg_we & !reg_error;
  assign sdr_1_control_reg_unused_wd = reg_wdata[31:1];

  assign sdr_1_status_reg_number_of_indexes_we = addr_hit[51] & reg_we & !reg_error;
  assign sdr_1_status_reg_number_of_indexes_wd = reg_wdata[7:0];

  assign sdr_1_status_reg_number_of_ones_we = addr_hit[51] & reg_we & !reg_error;
  assign sdr_1_status_reg_number_of_ones_wd = reg_wdata[24:8];

  assign sdr_1_status_reg_unused_we = addr_hit[51] & reg_we & !reg_error;
  assign sdr_1_status_reg_unused_wd = reg_wdata[28:25];

  assign sdr_1_status_reg_error_indexes_gt_32_we = addr_hit[51] & reg_we & !reg_error;
  assign sdr_1_status_reg_error_indexes_gt_32_wd = reg_wdata[29];

  assign sdr_1_status_reg_error_fifo_full_we = addr_hit[51] & reg_we & !reg_error;
  assign sdr_1_status_reg_error_fifo_full_wd = reg_wdata[30];

  assign sdr_1_status_reg_done_we = addr_hit[51] & reg_we & !reg_error;
  assign sdr_1_status_reg_done_wd = reg_wdata[31];

  assign sdr_1_0_we = addr_hit[52] & reg_we & !reg_error;
  assign sdr_1_0_wd = reg_wdata[31:0];

  assign sdr_1_1_we = addr_hit[53] & reg_we & !reg_error;
  assign sdr_1_1_wd = reg_wdata[31:0];

  assign sdr_1_2_we = addr_hit[54] & reg_we & !reg_error;
  assign sdr_1_2_wd = reg_wdata[31:0];

  assign sdr_1_3_we = addr_hit[55] & reg_we & !reg_error;
  assign sdr_1_3_wd = reg_wdata[31:0];

  assign sdr_1_4_we = addr_hit[56] & reg_we & !reg_error;
  assign sdr_1_4_wd = reg_wdata[31:0];

  assign sdr_1_5_we = addr_hit[57] & reg_we & !reg_error;
  assign sdr_1_5_wd = reg_wdata[31:0];

  assign sdr_1_6_we = addr_hit[58] & reg_we & !reg_error;
  assign sdr_1_6_wd = reg_wdata[31:0];

  assign sdr_1_7_we = addr_hit[59] & reg_we & !reg_error;
  assign sdr_1_7_wd = reg_wdata[31:0];

  assign sdr_1_8_we = addr_hit[60] & reg_we & !reg_error;
  assign sdr_1_8_wd = reg_wdata[31:0];

  assign sdr_1_9_we = addr_hit[61] & reg_we & !reg_error;
  assign sdr_1_9_wd = reg_wdata[31:0];

  assign sdr_1_10_we = addr_hit[62] & reg_we & !reg_error;
  assign sdr_1_10_wd = reg_wdata[31:0];

  assign sdr_1_11_we = addr_hit[63] & reg_we & !reg_error;
  assign sdr_1_11_wd = reg_wdata[31:0];

  assign sdr_1_12_we = addr_hit[64] & reg_we & !reg_error;
  assign sdr_1_12_wd = reg_wdata[31:0];

  assign sdr_1_13_we = addr_hit[65] & reg_we & !reg_error;
  assign sdr_1_13_wd = reg_wdata[31:0];

  assign sdr_1_14_we = addr_hit[66] & reg_we & !reg_error;
  assign sdr_1_14_wd = reg_wdata[31:0];

  assign sdr_1_15_we = addr_hit[67] & reg_we & !reg_error;
  assign sdr_1_15_wd = reg_wdata[31:0];

  assign sdr_1_16_we = addr_hit[68] & reg_we & !reg_error;
  assign sdr_1_16_wd = reg_wdata[31:0];

  assign sdr_1_17_we = addr_hit[69] & reg_we & !reg_error;
  assign sdr_1_17_wd = reg_wdata[31:0];

  assign sdr_1_18_we = addr_hit[70] & reg_we & !reg_error;
  assign sdr_1_18_wd = reg_wdata[31:0];

  assign sdr_1_19_we = addr_hit[71] & reg_we & !reg_error;
  assign sdr_1_19_wd = reg_wdata[31:0];

  assign sdr_1_20_we = addr_hit[72] & reg_we & !reg_error;
  assign sdr_1_20_wd = reg_wdata[31:0];

  assign sdr_1_21_we = addr_hit[73] & reg_we & !reg_error;
  assign sdr_1_21_wd = reg_wdata[31:0];

  assign sdr_1_22_we = addr_hit[74] & reg_we & !reg_error;
  assign sdr_1_22_wd = reg_wdata[31:0];

  assign sdr_1_23_we = addr_hit[75] & reg_we & !reg_error;
  assign sdr_1_23_wd = reg_wdata[31:0];

  assign sdr_1_24_we = addr_hit[76] & reg_we & !reg_error;
  assign sdr_1_24_wd = reg_wdata[31:0];

  assign sdr_1_25_we = addr_hit[77] & reg_we & !reg_error;
  assign sdr_1_25_wd = reg_wdata[31:0];

  assign sdr_1_26_we = addr_hit[78] & reg_we & !reg_error;
  assign sdr_1_26_wd = reg_wdata[31:0];

  assign sdr_1_27_we = addr_hit[79] & reg_we & !reg_error;
  assign sdr_1_27_wd = reg_wdata[31:0];

  assign sdr_1_28_we = addr_hit[80] & reg_we & !reg_error;
  assign sdr_1_28_wd = reg_wdata[31:0];

  assign sdr_1_29_we = addr_hit[81] & reg_we & !reg_error;
  assign sdr_1_29_wd = reg_wdata[31:0];

  assign sdr_1_30_we = addr_hit[82] & reg_we & !reg_error;
  assign sdr_1_30_wd = reg_wdata[31:0];

  assign sdr_1_31_we = addr_hit[83] & reg_we & !reg_error;
  assign sdr_1_31_wd = reg_wdata[31:0];

  assign sdr_2_control_reg_start_we = addr_hit[100] & reg_we & !reg_error;
  assign sdr_2_control_reg_start_wd = reg_wdata[0];

  assign sdr_2_control_reg_unused_we = addr_hit[100] & reg_we & !reg_error;
  assign sdr_2_control_reg_unused_wd = reg_wdata[31:1];

  assign sdr_2_status_reg_number_of_indexes_we = addr_hit[101] & reg_we & !reg_error;
  assign sdr_2_status_reg_number_of_indexes_wd = reg_wdata[7:0];

  assign sdr_2_status_reg_number_of_ones_we = addr_hit[101] & reg_we & !reg_error;
  assign sdr_2_status_reg_number_of_ones_wd = reg_wdata[24:8];

  assign sdr_2_status_reg_unused_we = addr_hit[101] & reg_we & !reg_error;
  assign sdr_2_status_reg_unused_wd = reg_wdata[28:25];

  assign sdr_2_status_reg_error_indexes_gt_32_we = addr_hit[101] & reg_we & !reg_error;
  assign sdr_2_status_reg_error_indexes_gt_32_wd = reg_wdata[29];

  assign sdr_2_status_reg_error_fifo_full_we = addr_hit[101] & reg_we & !reg_error;
  assign sdr_2_status_reg_error_fifo_full_wd = reg_wdata[30];

  assign sdr_2_status_reg_done_we = addr_hit[101] & reg_we & !reg_error;
  assign sdr_2_status_reg_done_wd = reg_wdata[31];

  assign sdr_2_0_we = addr_hit[102] & reg_we & !reg_error;
  assign sdr_2_0_wd = reg_wdata[31:0];

  assign sdr_2_1_we = addr_hit[103] & reg_we & !reg_error;
  assign sdr_2_1_wd = reg_wdata[31:0];

  assign sdr_2_2_we = addr_hit[104] & reg_we & !reg_error;
  assign sdr_2_2_wd = reg_wdata[31:0];

  assign sdr_2_3_we = addr_hit[105] & reg_we & !reg_error;
  assign sdr_2_3_wd = reg_wdata[31:0];

  assign sdr_2_4_we = addr_hit[106] & reg_we & !reg_error;
  assign sdr_2_4_wd = reg_wdata[31:0];

  assign sdr_2_5_we = addr_hit[107] & reg_we & !reg_error;
  assign sdr_2_5_wd = reg_wdata[31:0];

  assign sdr_2_6_we = addr_hit[108] & reg_we & !reg_error;
  assign sdr_2_6_wd = reg_wdata[31:0];

  assign sdr_2_7_we = addr_hit[109] & reg_we & !reg_error;
  assign sdr_2_7_wd = reg_wdata[31:0];

  assign sdr_2_8_we = addr_hit[110] & reg_we & !reg_error;
  assign sdr_2_8_wd = reg_wdata[31:0];

  assign sdr_2_9_we = addr_hit[111] & reg_we & !reg_error;
  assign sdr_2_9_wd = reg_wdata[31:0];

  assign sdr_2_10_we = addr_hit[112] & reg_we & !reg_error;
  assign sdr_2_10_wd = reg_wdata[31:0];

  assign sdr_2_11_we = addr_hit[113] & reg_we & !reg_error;
  assign sdr_2_11_wd = reg_wdata[31:0];

  assign sdr_2_12_we = addr_hit[114] & reg_we & !reg_error;
  assign sdr_2_12_wd = reg_wdata[31:0];

  assign sdr_2_13_we = addr_hit[115] & reg_we & !reg_error;
  assign sdr_2_13_wd = reg_wdata[31:0];

  assign sdr_2_14_we = addr_hit[116] & reg_we & !reg_error;
  assign sdr_2_14_wd = reg_wdata[31:0];

  assign sdr_2_15_we = addr_hit[117] & reg_we & !reg_error;
  assign sdr_2_15_wd = reg_wdata[31:0];

  assign sdr_2_16_we = addr_hit[118] & reg_we & !reg_error;
  assign sdr_2_16_wd = reg_wdata[31:0];

  assign sdr_2_17_we = addr_hit[119] & reg_we & !reg_error;
  assign sdr_2_17_wd = reg_wdata[31:0];

  assign sdr_2_18_we = addr_hit[120] & reg_we & !reg_error;
  assign sdr_2_18_wd = reg_wdata[31:0];

  assign sdr_2_19_we = addr_hit[121] & reg_we & !reg_error;
  assign sdr_2_19_wd = reg_wdata[31:0];

  assign sdr_2_20_we = addr_hit[122] & reg_we & !reg_error;
  assign sdr_2_20_wd = reg_wdata[31:0];

  assign sdr_2_21_we = addr_hit[123] & reg_we & !reg_error;
  assign sdr_2_21_wd = reg_wdata[31:0];

  assign sdr_2_22_we = addr_hit[124] & reg_we & !reg_error;
  assign sdr_2_22_wd = reg_wdata[31:0];

  assign sdr_2_23_we = addr_hit[125] & reg_we & !reg_error;
  assign sdr_2_23_wd = reg_wdata[31:0];

  assign sdr_2_24_we = addr_hit[126] & reg_we & !reg_error;
  assign sdr_2_24_wd = reg_wdata[31:0];

  assign sdr_2_25_we = addr_hit[127] & reg_we & !reg_error;
  assign sdr_2_25_wd = reg_wdata[31:0];

  assign sdr_2_26_we = addr_hit[128] & reg_we & !reg_error;
  assign sdr_2_26_wd = reg_wdata[31:0];

  assign sdr_2_27_we = addr_hit[129] & reg_we & !reg_error;
  assign sdr_2_27_wd = reg_wdata[31:0];

  assign sdr_2_28_we = addr_hit[130] & reg_we & !reg_error;
  assign sdr_2_28_wd = reg_wdata[31:0];

  assign sdr_2_29_we = addr_hit[131] & reg_we & !reg_error;
  assign sdr_2_29_wd = reg_wdata[31:0];

  assign sdr_2_30_we = addr_hit[132] & reg_we & !reg_error;
  assign sdr_2_30_wd = reg_wdata[31:0];

  assign sdr_2_31_we = addr_hit[133] & reg_we & !reg_error;
  assign sdr_2_31_wd = reg_wdata[31:0];

  assign sdr_3_control_reg_start_we = addr_hit[150] & reg_we & !reg_error;
  assign sdr_3_control_reg_start_wd = reg_wdata[0];

  assign sdr_3_control_reg_unused_we = addr_hit[150] & reg_we & !reg_error;
  assign sdr_3_control_reg_unused_wd = reg_wdata[31:1];

  assign sdr_3_status_reg_number_of_indexes_we = addr_hit[151] & reg_we & !reg_error;
  assign sdr_3_status_reg_number_of_indexes_wd = reg_wdata[7:0];

  assign sdr_3_status_reg_number_of_ones_we = addr_hit[151] & reg_we & !reg_error;
  assign sdr_3_status_reg_number_of_ones_wd = reg_wdata[24:8];

  assign sdr_3_status_reg_unused_we = addr_hit[151] & reg_we & !reg_error;
  assign sdr_3_status_reg_unused_wd = reg_wdata[28:25];

  assign sdr_3_status_reg_error_indexes_gt_32_we = addr_hit[151] & reg_we & !reg_error;
  assign sdr_3_status_reg_error_indexes_gt_32_wd = reg_wdata[29];

  assign sdr_3_status_reg_error_fifo_full_we = addr_hit[151] & reg_we & !reg_error;
  assign sdr_3_status_reg_error_fifo_full_wd = reg_wdata[30];

  assign sdr_3_status_reg_done_we = addr_hit[151] & reg_we & !reg_error;
  assign sdr_3_status_reg_done_wd = reg_wdata[31];

  assign sdr_3_0_we = addr_hit[152] & reg_we & !reg_error;
  assign sdr_3_0_wd = reg_wdata[31:0];

  assign sdr_3_1_we = addr_hit[153] & reg_we & !reg_error;
  assign sdr_3_1_wd = reg_wdata[31:0];

  assign sdr_3_2_we = addr_hit[154] & reg_we & !reg_error;
  assign sdr_3_2_wd = reg_wdata[31:0];

  assign sdr_3_3_we = addr_hit[155] & reg_we & !reg_error;
  assign sdr_3_3_wd = reg_wdata[31:0];

  assign sdr_3_4_we = addr_hit[156] & reg_we & !reg_error;
  assign sdr_3_4_wd = reg_wdata[31:0];

  assign sdr_3_5_we = addr_hit[157] & reg_we & !reg_error;
  assign sdr_3_5_wd = reg_wdata[31:0];

  assign sdr_3_6_we = addr_hit[158] & reg_we & !reg_error;
  assign sdr_3_6_wd = reg_wdata[31:0];

  assign sdr_3_7_we = addr_hit[159] & reg_we & !reg_error;
  assign sdr_3_7_wd = reg_wdata[31:0];

  assign sdr_3_8_we = addr_hit[160] & reg_we & !reg_error;
  assign sdr_3_8_wd = reg_wdata[31:0];

  assign sdr_3_9_we = addr_hit[161] & reg_we & !reg_error;
  assign sdr_3_9_wd = reg_wdata[31:0];

  assign sdr_3_10_we = addr_hit[162] & reg_we & !reg_error;
  assign sdr_3_10_wd = reg_wdata[31:0];

  assign sdr_3_11_we = addr_hit[163] & reg_we & !reg_error;
  assign sdr_3_11_wd = reg_wdata[31:0];

  assign sdr_3_12_we = addr_hit[164] & reg_we & !reg_error;
  assign sdr_3_12_wd = reg_wdata[31:0];

  assign sdr_3_13_we = addr_hit[165] & reg_we & !reg_error;
  assign sdr_3_13_wd = reg_wdata[31:0];

  assign sdr_3_14_we = addr_hit[166] & reg_we & !reg_error;
  assign sdr_3_14_wd = reg_wdata[31:0];

  assign sdr_3_15_we = addr_hit[167] & reg_we & !reg_error;
  assign sdr_3_15_wd = reg_wdata[31:0];

  assign sdr_3_16_we = addr_hit[168] & reg_we & !reg_error;
  assign sdr_3_16_wd = reg_wdata[31:0];

  assign sdr_3_17_we = addr_hit[169] & reg_we & !reg_error;
  assign sdr_3_17_wd = reg_wdata[31:0];

  assign sdr_3_18_we = addr_hit[170] & reg_we & !reg_error;
  assign sdr_3_18_wd = reg_wdata[31:0];

  assign sdr_3_19_we = addr_hit[171] & reg_we & !reg_error;
  assign sdr_3_19_wd = reg_wdata[31:0];

  assign sdr_3_20_we = addr_hit[172] & reg_we & !reg_error;
  assign sdr_3_20_wd = reg_wdata[31:0];

  assign sdr_3_21_we = addr_hit[173] & reg_we & !reg_error;
  assign sdr_3_21_wd = reg_wdata[31:0];

  assign sdr_3_22_we = addr_hit[174] & reg_we & !reg_error;
  assign sdr_3_22_wd = reg_wdata[31:0];

  assign sdr_3_23_we = addr_hit[175] & reg_we & !reg_error;
  assign sdr_3_23_wd = reg_wdata[31:0];

  assign sdr_3_24_we = addr_hit[176] & reg_we & !reg_error;
  assign sdr_3_24_wd = reg_wdata[31:0];

  assign sdr_3_25_we = addr_hit[177] & reg_we & !reg_error;
  assign sdr_3_25_wd = reg_wdata[31:0];

  assign sdr_3_26_we = addr_hit[178] & reg_we & !reg_error;
  assign sdr_3_26_wd = reg_wdata[31:0];

  assign sdr_3_27_we = addr_hit[179] & reg_we & !reg_error;
  assign sdr_3_27_wd = reg_wdata[31:0];

  assign sdr_3_28_we = addr_hit[180] & reg_we & !reg_error;
  assign sdr_3_28_wd = reg_wdata[31:0];

  assign sdr_3_29_we = addr_hit[181] & reg_we & !reg_error;
  assign sdr_3_29_wd = reg_wdata[31:0];

  assign sdr_3_30_we = addr_hit[182] & reg_we & !reg_error;
  assign sdr_3_30_wd = reg_wdata[31:0];

  assign sdr_3_31_we = addr_hit[183] & reg_we & !reg_error;
  assign sdr_3_31_wd = reg_wdata[31:0];

  assign sdr_logical_op_control_reg_sdr_src_1_we = addr_hit[200] & reg_we & !reg_error;
  assign sdr_logical_op_control_reg_sdr_src_1_wd = reg_wdata[3:0];

  assign sdr_logical_op_control_reg_sdr_src_2_we = addr_hit[200] & reg_we & !reg_error;
  assign sdr_logical_op_control_reg_sdr_src_2_wd = reg_wdata[7:4];

  assign sdr_logical_op_control_reg_destination_sdr_we = addr_hit[200] & reg_we & !reg_error;
  assign sdr_logical_op_control_reg_destination_sdr_wd = reg_wdata[11:8];

  assign sdr_logical_op_control_reg_bitwise_logical_operation_we = addr_hit[200] & reg_we & !reg_error;
  assign sdr_logical_op_control_reg_bitwise_logical_operation_wd = reg_wdata[11:8];

  assign sdr_logical_op_control_reg_unused_we = addr_hit[200] & reg_we & !reg_error;
  assign sdr_logical_op_control_reg_unused_wd = reg_wdata[31:12];

  assign sdr_logical_result_0_we = addr_hit[201] & reg_we & !reg_error;
  assign sdr_logical_result_0_wd = reg_wdata[31:0];

  assign sdr_logical_result_1_we = addr_hit[202] & reg_we & !reg_error;
  assign sdr_logical_result_1_wd = reg_wdata[31:0];

  assign sdr_logical_result_2_we = addr_hit[203] & reg_we & !reg_error;
  assign sdr_logical_result_2_wd = reg_wdata[31:0];

  assign sdr_logical_result_3_we = addr_hit[204] & reg_we & !reg_error;
  assign sdr_logical_result_3_wd = reg_wdata[31:0];

  assign sdr_logical_result_4_we = addr_hit[205] & reg_we & !reg_error;
  assign sdr_logical_result_4_wd = reg_wdata[31:0];

  assign sdr_logical_result_5_we = addr_hit[206] & reg_we & !reg_error;
  assign sdr_logical_result_5_wd = reg_wdata[31:0];

  assign sdr_logical_result_6_we = addr_hit[207] & reg_we & !reg_error;
  assign sdr_logical_result_6_wd = reg_wdata[31:0];

  assign sdr_logical_result_7_we = addr_hit[208] & reg_we & !reg_error;
  assign sdr_logical_result_7_wd = reg_wdata[31:0];

  assign sdr_logical_result_8_we = addr_hit[209] & reg_we & !reg_error;
  assign sdr_logical_result_8_wd = reg_wdata[31:0];

  assign sdr_logical_result_9_we = addr_hit[210] & reg_we & !reg_error;
  assign sdr_logical_result_9_wd = reg_wdata[31:0];

  assign sdr_logical_result_10_we = addr_hit[211] & reg_we & !reg_error;
  assign sdr_logical_result_10_wd = reg_wdata[31:0];

  assign sdr_logical_result_11_we = addr_hit[212] & reg_we & !reg_error;
  assign sdr_logical_result_11_wd = reg_wdata[31:0];

  assign sdr_logical_result_12_we = addr_hit[213] & reg_we & !reg_error;
  assign sdr_logical_result_12_wd = reg_wdata[31:0];

  assign sdr_logical_result_13_we = addr_hit[214] & reg_we & !reg_error;
  assign sdr_logical_result_13_wd = reg_wdata[31:0];

  assign sdr_logical_result_14_we = addr_hit[215] & reg_we & !reg_error;
  assign sdr_logical_result_14_wd = reg_wdata[31:0];

  assign sdr_logical_result_15_we = addr_hit[216] & reg_we & !reg_error;
  assign sdr_logical_result_15_wd = reg_wdata[31:0];

  assign sdr_logical_result_16_we = addr_hit[217] & reg_we & !reg_error;
  assign sdr_logical_result_16_wd = reg_wdata[31:0];

  assign sdr_logical_result_17_we = addr_hit[218] & reg_we & !reg_error;
  assign sdr_logical_result_17_wd = reg_wdata[31:0];

  assign sdr_logical_result_18_we = addr_hit[219] & reg_we & !reg_error;
  assign sdr_logical_result_18_wd = reg_wdata[31:0];

  assign sdr_logical_result_19_we = addr_hit[220] & reg_we & !reg_error;
  assign sdr_logical_result_19_wd = reg_wdata[31:0];

  assign sdr_logical_result_20_we = addr_hit[221] & reg_we & !reg_error;
  assign sdr_logical_result_20_wd = reg_wdata[31:0];

  assign sdr_logical_result_21_we = addr_hit[222] & reg_we & !reg_error;
  assign sdr_logical_result_21_wd = reg_wdata[31:0];

  assign sdr_logical_result_22_we = addr_hit[223] & reg_we & !reg_error;
  assign sdr_logical_result_22_wd = reg_wdata[31:0];

  assign sdr_logical_result_23_we = addr_hit[224] & reg_we & !reg_error;
  assign sdr_logical_result_23_wd = reg_wdata[31:0];

  assign sdr_logical_result_24_we = addr_hit[225] & reg_we & !reg_error;
  assign sdr_logical_result_24_wd = reg_wdata[31:0];

  assign sdr_logical_result_25_we = addr_hit[226] & reg_we & !reg_error;
  assign sdr_logical_result_25_wd = reg_wdata[31:0];

  assign sdr_logical_result_26_we = addr_hit[227] & reg_we & !reg_error;
  assign sdr_logical_result_26_wd = reg_wdata[31:0];

  assign sdr_logical_result_27_we = addr_hit[228] & reg_we & !reg_error;
  assign sdr_logical_result_27_wd = reg_wdata[31:0];

  assign sdr_logical_result_28_we = addr_hit[229] & reg_we & !reg_error;
  assign sdr_logical_result_28_wd = reg_wdata[31:0];

  assign sdr_logical_result_29_we = addr_hit[230] & reg_we & !reg_error;
  assign sdr_logical_result_29_wd = reg_wdata[31:0];

  assign sdr_logical_result_30_we = addr_hit[231] & reg_we & !reg_error;
  assign sdr_logical_result_30_wd = reg_wdata[31:0];

  assign sdr_logical_result_31_we = addr_hit[232] & reg_we & !reg_error;
  assign sdr_logical_result_31_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = sdr_0_control_reg_start_qs;
        reg_rdata_next[31:1] = sdr_0_control_reg_unused_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[7:0] = sdr_0_status_reg_number_of_indexes_qs;
        reg_rdata_next[24:8] = sdr_0_status_reg_number_of_ones_qs;
        reg_rdata_next[28:25] = sdr_0_status_reg_unused_qs;
        reg_rdata_next[29] = sdr_0_status_reg_error_indexes_gt_32_qs;
        reg_rdata_next[30] = sdr_0_status_reg_error_fifo_full_qs;
        reg_rdata_next[31] = sdr_0_status_reg_done_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = sdr_0_0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = sdr_0_1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = sdr_0_2_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = sdr_0_3_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = sdr_0_4_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = sdr_0_5_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = sdr_0_6_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = sdr_0_7_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = sdr_0_8_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = sdr_0_9_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = sdr_0_10_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = sdr_0_11_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = sdr_0_12_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = sdr_0_13_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = sdr_0_14_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = sdr_0_15_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = sdr_0_16_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = sdr_0_17_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = sdr_0_18_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = sdr_0_19_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = sdr_0_20_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = sdr_0_21_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = sdr_0_22_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = sdr_0_23_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = sdr_0_24_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = sdr_0_25_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = sdr_0_26_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = sdr_0_27_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = sdr_0_28_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = sdr_0_29_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = sdr_0_30_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = sdr_0_31_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = sdr_0_index_0_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = sdr_0_index_1_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = sdr_0_index_2_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = sdr_0_index_3_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = sdr_0_index_4_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = sdr_0_index_5_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = sdr_0_index_6_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = sdr_0_index_7_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = sdr_0_index_8_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = sdr_0_index_9_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = sdr_0_index_10_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = sdr_0_index_11_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = sdr_0_index_12_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = sdr_0_index_13_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = sdr_0_index_14_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[31:0] = sdr_0_index_15_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = sdr_1_control_reg_start_qs;
        reg_rdata_next[31:1] = sdr_1_control_reg_unused_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[7:0] = sdr_1_status_reg_number_of_indexes_qs;
        reg_rdata_next[24:8] = sdr_1_status_reg_number_of_ones_qs;
        reg_rdata_next[28:25] = sdr_1_status_reg_unused_qs;
        reg_rdata_next[29] = sdr_1_status_reg_error_indexes_gt_32_qs;
        reg_rdata_next[30] = sdr_1_status_reg_error_fifo_full_qs;
        reg_rdata_next[31] = sdr_1_status_reg_done_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = sdr_1_0_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = sdr_1_1_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = sdr_1_2_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = sdr_1_3_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[31:0] = sdr_1_4_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[31:0] = sdr_1_5_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[31:0] = sdr_1_6_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[31:0] = sdr_1_7_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[31:0] = sdr_1_8_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[31:0] = sdr_1_9_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[31:0] = sdr_1_10_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = sdr_1_11_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = sdr_1_12_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = sdr_1_13_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = sdr_1_14_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = sdr_1_15_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[31:0] = sdr_1_16_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[31:0] = sdr_1_17_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[31:0] = sdr_1_18_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[31:0] = sdr_1_19_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[31:0] = sdr_1_20_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[31:0] = sdr_1_21_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[31:0] = sdr_1_22_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[31:0] = sdr_1_23_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[31:0] = sdr_1_24_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[31:0] = sdr_1_25_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[31:0] = sdr_1_26_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[31:0] = sdr_1_27_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[31:0] = sdr_1_28_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[31:0] = sdr_1_29_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[31:0] = sdr_1_30_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[31:0] = sdr_1_31_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[31:0] = sdr_1_index_0_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[31:0] = sdr_1_index_1_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[31:0] = sdr_1_index_2_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[31:0] = sdr_1_index_3_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[31:0] = sdr_1_index_4_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[31:0] = sdr_1_index_5_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[31:0] = sdr_1_index_6_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[31:0] = sdr_1_index_7_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[31:0] = sdr_1_index_8_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[31:0] = sdr_1_index_9_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[31:0] = sdr_1_index_10_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[31:0] = sdr_1_index_11_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[31:0] = sdr_1_index_12_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[31:0] = sdr_1_index_13_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[31:0] = sdr_1_index_14_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[31:0] = sdr_1_index_15_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[0] = sdr_2_control_reg_start_qs;
        reg_rdata_next[31:1] = sdr_2_control_reg_unused_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[7:0] = sdr_2_status_reg_number_of_indexes_qs;
        reg_rdata_next[24:8] = sdr_2_status_reg_number_of_ones_qs;
        reg_rdata_next[28:25] = sdr_2_status_reg_unused_qs;
        reg_rdata_next[29] = sdr_2_status_reg_error_indexes_gt_32_qs;
        reg_rdata_next[30] = sdr_2_status_reg_error_fifo_full_qs;
        reg_rdata_next[31] = sdr_2_status_reg_done_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[31:0] = sdr_2_0_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[31:0] = sdr_2_1_qs;
      end

      addr_hit[104]: begin
        reg_rdata_next[31:0] = sdr_2_2_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[31:0] = sdr_2_3_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[31:0] = sdr_2_4_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[31:0] = sdr_2_5_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[31:0] = sdr_2_6_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[31:0] = sdr_2_7_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[31:0] = sdr_2_8_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[31:0] = sdr_2_9_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[31:0] = sdr_2_10_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[31:0] = sdr_2_11_qs;
      end

      addr_hit[114]: begin
        reg_rdata_next[31:0] = sdr_2_12_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[31:0] = sdr_2_13_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[31:0] = sdr_2_14_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[31:0] = sdr_2_15_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[31:0] = sdr_2_16_qs;
      end

      addr_hit[119]: begin
        reg_rdata_next[31:0] = sdr_2_17_qs;
      end

      addr_hit[120]: begin
        reg_rdata_next[31:0] = sdr_2_18_qs;
      end

      addr_hit[121]: begin
        reg_rdata_next[31:0] = sdr_2_19_qs;
      end

      addr_hit[122]: begin
        reg_rdata_next[31:0] = sdr_2_20_qs;
      end

      addr_hit[123]: begin
        reg_rdata_next[31:0] = sdr_2_21_qs;
      end

      addr_hit[124]: begin
        reg_rdata_next[31:0] = sdr_2_22_qs;
      end

      addr_hit[125]: begin
        reg_rdata_next[31:0] = sdr_2_23_qs;
      end

      addr_hit[126]: begin
        reg_rdata_next[31:0] = sdr_2_24_qs;
      end

      addr_hit[127]: begin
        reg_rdata_next[31:0] = sdr_2_25_qs;
      end

      addr_hit[128]: begin
        reg_rdata_next[31:0] = sdr_2_26_qs;
      end

      addr_hit[129]: begin
        reg_rdata_next[31:0] = sdr_2_27_qs;
      end

      addr_hit[130]: begin
        reg_rdata_next[31:0] = sdr_2_28_qs;
      end

      addr_hit[131]: begin
        reg_rdata_next[31:0] = sdr_2_29_qs;
      end

      addr_hit[132]: begin
        reg_rdata_next[31:0] = sdr_2_30_qs;
      end

      addr_hit[133]: begin
        reg_rdata_next[31:0] = sdr_2_31_qs;
      end

      addr_hit[134]: begin
        reg_rdata_next[31:0] = sdr_2_index_0_qs;
      end

      addr_hit[135]: begin
        reg_rdata_next[31:0] = sdr_2_index_1_qs;
      end

      addr_hit[136]: begin
        reg_rdata_next[31:0] = sdr_2_index_2_qs;
      end

      addr_hit[137]: begin
        reg_rdata_next[31:0] = sdr_2_index_3_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[31:0] = sdr_2_index_4_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[31:0] = sdr_2_index_5_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[31:0] = sdr_2_index_6_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[31:0] = sdr_2_index_7_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[31:0] = sdr_2_index_8_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[31:0] = sdr_2_index_9_qs;
      end

      addr_hit[144]: begin
        reg_rdata_next[31:0] = sdr_2_index_10_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[31:0] = sdr_2_index_11_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[31:0] = sdr_2_index_12_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[31:0] = sdr_2_index_13_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[31:0] = sdr_2_index_14_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[31:0] = sdr_2_index_15_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[0] = sdr_3_control_reg_start_qs;
        reg_rdata_next[31:1] = sdr_3_control_reg_unused_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[7:0] = sdr_3_status_reg_number_of_indexes_qs;
        reg_rdata_next[24:8] = sdr_3_status_reg_number_of_ones_qs;
        reg_rdata_next[28:25] = sdr_3_status_reg_unused_qs;
        reg_rdata_next[29] = sdr_3_status_reg_error_indexes_gt_32_qs;
        reg_rdata_next[30] = sdr_3_status_reg_error_fifo_full_qs;
        reg_rdata_next[31] = sdr_3_status_reg_done_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[31:0] = sdr_3_0_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[31:0] = sdr_3_1_qs;
      end

      addr_hit[154]: begin
        reg_rdata_next[31:0] = sdr_3_2_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[31:0] = sdr_3_3_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[31:0] = sdr_3_4_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[31:0] = sdr_3_5_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[31:0] = sdr_3_6_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[31:0] = sdr_3_7_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[31:0] = sdr_3_8_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[31:0] = sdr_3_9_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[31:0] = sdr_3_10_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[31:0] = sdr_3_11_qs;
      end

      addr_hit[164]: begin
        reg_rdata_next[31:0] = sdr_3_12_qs;
      end

      addr_hit[165]: begin
        reg_rdata_next[31:0] = sdr_3_13_qs;
      end

      addr_hit[166]: begin
        reg_rdata_next[31:0] = sdr_3_14_qs;
      end

      addr_hit[167]: begin
        reg_rdata_next[31:0] = sdr_3_15_qs;
      end

      addr_hit[168]: begin
        reg_rdata_next[31:0] = sdr_3_16_qs;
      end

      addr_hit[169]: begin
        reg_rdata_next[31:0] = sdr_3_17_qs;
      end

      addr_hit[170]: begin
        reg_rdata_next[31:0] = sdr_3_18_qs;
      end

      addr_hit[171]: begin
        reg_rdata_next[31:0] = sdr_3_19_qs;
      end

      addr_hit[172]: begin
        reg_rdata_next[31:0] = sdr_3_20_qs;
      end

      addr_hit[173]: begin
        reg_rdata_next[31:0] = sdr_3_21_qs;
      end

      addr_hit[174]: begin
        reg_rdata_next[31:0] = sdr_3_22_qs;
      end

      addr_hit[175]: begin
        reg_rdata_next[31:0] = sdr_3_23_qs;
      end

      addr_hit[176]: begin
        reg_rdata_next[31:0] = sdr_3_24_qs;
      end

      addr_hit[177]: begin
        reg_rdata_next[31:0] = sdr_3_25_qs;
      end

      addr_hit[178]: begin
        reg_rdata_next[31:0] = sdr_3_26_qs;
      end

      addr_hit[179]: begin
        reg_rdata_next[31:0] = sdr_3_27_qs;
      end

      addr_hit[180]: begin
        reg_rdata_next[31:0] = sdr_3_28_qs;
      end

      addr_hit[181]: begin
        reg_rdata_next[31:0] = sdr_3_29_qs;
      end

      addr_hit[182]: begin
        reg_rdata_next[31:0] = sdr_3_30_qs;
      end

      addr_hit[183]: begin
        reg_rdata_next[31:0] = sdr_3_31_qs;
      end

      addr_hit[184]: begin
        reg_rdata_next[31:0] = sdr_3_index_0_qs;
      end

      addr_hit[185]: begin
        reg_rdata_next[31:0] = sdr_3_index_1_qs;
      end

      addr_hit[186]: begin
        reg_rdata_next[31:0] = sdr_3_index_2_qs;
      end

      addr_hit[187]: begin
        reg_rdata_next[31:0] = sdr_3_index_3_qs;
      end

      addr_hit[188]: begin
        reg_rdata_next[31:0] = sdr_3_index_4_qs;
      end

      addr_hit[189]: begin
        reg_rdata_next[31:0] = sdr_3_index_5_qs;
      end

      addr_hit[190]: begin
        reg_rdata_next[31:0] = sdr_3_index_6_qs;
      end

      addr_hit[191]: begin
        reg_rdata_next[31:0] = sdr_3_index_7_qs;
      end

      addr_hit[192]: begin
        reg_rdata_next[31:0] = sdr_3_index_8_qs;
      end

      addr_hit[193]: begin
        reg_rdata_next[31:0] = sdr_3_index_9_qs;
      end

      addr_hit[194]: begin
        reg_rdata_next[31:0] = sdr_3_index_10_qs;
      end

      addr_hit[195]: begin
        reg_rdata_next[31:0] = sdr_3_index_11_qs;
      end

      addr_hit[196]: begin
        reg_rdata_next[31:0] = sdr_3_index_12_qs;
      end

      addr_hit[197]: begin
        reg_rdata_next[31:0] = sdr_3_index_13_qs;
      end

      addr_hit[198]: begin
        reg_rdata_next[31:0] = sdr_3_index_14_qs;
      end

      addr_hit[199]: begin
        reg_rdata_next[31:0] = sdr_3_index_15_qs;
      end

      addr_hit[200]: begin
        reg_rdata_next[3:0] = sdr_logical_op_control_reg_sdr_src_1_qs;
        reg_rdata_next[7:4] = sdr_logical_op_control_reg_sdr_src_2_qs;
        reg_rdata_next[11:8] = sdr_logical_op_control_reg_destination_sdr_qs;
        reg_rdata_next[11:8] = sdr_logical_op_control_reg_bitwise_logical_operation_qs;
        reg_rdata_next[31:12] = sdr_logical_op_control_reg_unused_qs;
      end

      addr_hit[201]: begin
        reg_rdata_next[31:0] = sdr_logical_result_0_qs;
      end

      addr_hit[202]: begin
        reg_rdata_next[31:0] = sdr_logical_result_1_qs;
      end

      addr_hit[203]: begin
        reg_rdata_next[31:0] = sdr_logical_result_2_qs;
      end

      addr_hit[204]: begin
        reg_rdata_next[31:0] = sdr_logical_result_3_qs;
      end

      addr_hit[205]: begin
        reg_rdata_next[31:0] = sdr_logical_result_4_qs;
      end

      addr_hit[206]: begin
        reg_rdata_next[31:0] = sdr_logical_result_5_qs;
      end

      addr_hit[207]: begin
        reg_rdata_next[31:0] = sdr_logical_result_6_qs;
      end

      addr_hit[208]: begin
        reg_rdata_next[31:0] = sdr_logical_result_7_qs;
      end

      addr_hit[209]: begin
        reg_rdata_next[31:0] = sdr_logical_result_8_qs;
      end

      addr_hit[210]: begin
        reg_rdata_next[31:0] = sdr_logical_result_9_qs;
      end

      addr_hit[211]: begin
        reg_rdata_next[31:0] = sdr_logical_result_10_qs;
      end

      addr_hit[212]: begin
        reg_rdata_next[31:0] = sdr_logical_result_11_qs;
      end

      addr_hit[213]: begin
        reg_rdata_next[31:0] = sdr_logical_result_12_qs;
      end

      addr_hit[214]: begin
        reg_rdata_next[31:0] = sdr_logical_result_13_qs;
      end

      addr_hit[215]: begin
        reg_rdata_next[31:0] = sdr_logical_result_14_qs;
      end

      addr_hit[216]: begin
        reg_rdata_next[31:0] = sdr_logical_result_15_qs;
      end

      addr_hit[217]: begin
        reg_rdata_next[31:0] = sdr_logical_result_16_qs;
      end

      addr_hit[218]: begin
        reg_rdata_next[31:0] = sdr_logical_result_17_qs;
      end

      addr_hit[219]: begin
        reg_rdata_next[31:0] = sdr_logical_result_18_qs;
      end

      addr_hit[220]: begin
        reg_rdata_next[31:0] = sdr_logical_result_19_qs;
      end

      addr_hit[221]: begin
        reg_rdata_next[31:0] = sdr_logical_result_20_qs;
      end

      addr_hit[222]: begin
        reg_rdata_next[31:0] = sdr_logical_result_21_qs;
      end

      addr_hit[223]: begin
        reg_rdata_next[31:0] = sdr_logical_result_22_qs;
      end

      addr_hit[224]: begin
        reg_rdata_next[31:0] = sdr_logical_result_23_qs;
      end

      addr_hit[225]: begin
        reg_rdata_next[31:0] = sdr_logical_result_24_qs;
      end

      addr_hit[226]: begin
        reg_rdata_next[31:0] = sdr_logical_result_25_qs;
      end

      addr_hit[227]: begin
        reg_rdata_next[31:0] = sdr_logical_result_26_qs;
      end

      addr_hit[228]: begin
        reg_rdata_next[31:0] = sdr_logical_result_27_qs;
      end

      addr_hit[229]: begin
        reg_rdata_next[31:0] = sdr_logical_result_28_qs;
      end

      addr_hit[230]: begin
        reg_rdata_next[31:0] = sdr_logical_result_29_qs;
      end

      addr_hit[231]: begin
        reg_rdata_next[31:0] = sdr_logical_result_30_qs;
      end

      addr_hit[232]: begin
        reg_rdata_next[31:0] = sdr_logical_result_31_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
