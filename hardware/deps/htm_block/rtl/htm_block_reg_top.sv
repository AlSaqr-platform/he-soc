// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module htm_block_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 8
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output htm_block_reg_pkg::htm_block_reg2hw_t reg2hw, // Write
  input  htm_block_reg_pkg::htm_block_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import htm_block_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic sdr_control_reg_start_qs;
  logic sdr_control_reg_start_wd;
  logic sdr_control_reg_start_we;
  logic [30:0] sdr_control_reg_unused_qs;
  logic [30:0] sdr_control_reg_unused_wd;
  logic sdr_control_reg_unused_we;
  logic [31:0] sdr_0_0_qs;
  logic [31:0] sdr_0_0_wd;
  logic sdr_0_0_we;
  logic [31:0] sdr_0_1_qs;
  logic [31:0] sdr_0_1_wd;
  logic sdr_0_1_we;
  logic [31:0] sdr_0_2_qs;
  logic [31:0] sdr_0_2_wd;
  logic sdr_0_2_we;
  logic [31:0] sdr_0_3_qs;
  logic [31:0] sdr_0_3_wd;
  logic sdr_0_3_we;
  logic [31:0] sdr_0_4_qs;
  logic [31:0] sdr_0_4_wd;
  logic sdr_0_4_we;
  logic [31:0] sdr_0_5_qs;
  logic [31:0] sdr_0_5_wd;
  logic sdr_0_5_we;
  logic [31:0] sdr_0_6_qs;
  logic [31:0] sdr_0_6_wd;
  logic sdr_0_6_we;
  logic [31:0] sdr_0_7_qs;
  logic [31:0] sdr_0_7_wd;
  logic sdr_0_7_we;
  logic [31:0] sdr_0_8_qs;
  logic [31:0] sdr_0_8_wd;
  logic sdr_0_8_we;
  logic [31:0] sdr_0_9_qs;
  logic [31:0] sdr_0_9_wd;
  logic sdr_0_9_we;
  logic [31:0] sdr_0_10_qs;
  logic [31:0] sdr_0_10_wd;
  logic sdr_0_10_we;
  logic [31:0] sdr_0_11_qs;
  logic [31:0] sdr_0_11_wd;
  logic sdr_0_11_we;
  logic [31:0] sdr_0_12_qs;
  logic [31:0] sdr_0_12_wd;
  logic sdr_0_12_we;
  logic [31:0] sdr_0_13_qs;
  logic [31:0] sdr_0_13_wd;
  logic sdr_0_13_we;
  logic [31:0] sdr_0_14_qs;
  logic [31:0] sdr_0_14_wd;
  logic sdr_0_14_we;
  logic [31:0] sdr_0_15_qs;
  logic [31:0] sdr_0_15_wd;
  logic sdr_0_15_we;
  logic [31:0] sdr_0_16_qs;
  logic [31:0] sdr_0_16_wd;
  logic sdr_0_16_we;
  logic [31:0] sdr_0_17_qs;
  logic [31:0] sdr_0_17_wd;
  logic sdr_0_17_we;
  logic [31:0] sdr_0_18_qs;
  logic [31:0] sdr_0_18_wd;
  logic sdr_0_18_we;
  logic [31:0] sdr_0_19_qs;
  logic [31:0] sdr_0_19_wd;
  logic sdr_0_19_we;
  logic [31:0] sdr_0_20_qs;
  logic [31:0] sdr_0_20_wd;
  logic sdr_0_20_we;
  logic [31:0] sdr_0_21_qs;
  logic [31:0] sdr_0_21_wd;
  logic sdr_0_21_we;
  logic [31:0] sdr_0_22_qs;
  logic [31:0] sdr_0_22_wd;
  logic sdr_0_22_we;
  logic [31:0] sdr_0_23_qs;
  logic [31:0] sdr_0_23_wd;
  logic sdr_0_23_we;
  logic [31:0] sdr_0_24_qs;
  logic [31:0] sdr_0_24_wd;
  logic sdr_0_24_we;
  logic [31:0] sdr_0_25_qs;
  logic [31:0] sdr_0_25_wd;
  logic sdr_0_25_we;
  logic [31:0] sdr_0_26_qs;
  logic [31:0] sdr_0_26_wd;
  logic sdr_0_26_we;
  logic [31:0] sdr_0_27_qs;
  logic [31:0] sdr_0_27_wd;
  logic sdr_0_27_we;
  logic [31:0] sdr_0_28_qs;
  logic [31:0] sdr_0_28_wd;
  logic sdr_0_28_we;
  logic [31:0] sdr_0_29_qs;
  logic [31:0] sdr_0_29_wd;
  logic sdr_0_29_we;
  logic [31:0] sdr_0_30_qs;
  logic [31:0] sdr_0_30_wd;
  logic sdr_0_30_we;
  logic [31:0] sdr_0_31_qs;
  logic [31:0] sdr_0_31_wd;
  logic sdr_0_31_we;
  logic [31:0] sdr_index_0_0_qs;
  logic [31:0] sdr_index_0_1_qs;
  logic [31:0] sdr_index_0_2_qs;
  logic [31:0] sdr_index_0_3_qs;
  logic [31:0] sdr_index_0_4_qs;
  logic [31:0] sdr_index_0_5_qs;
  logic [31:0] sdr_index_0_6_qs;
  logic [31:0] sdr_index_0_7_qs;
  logic [31:0] sdr_index_0_8_qs;
  logic [31:0] sdr_index_0_9_qs;
  logic [31:0] sdr_index_0_10_qs;
  logic [31:0] sdr_index_0_11_qs;
  logic [31:0] sdr_index_0_12_qs;
  logic [31:0] sdr_index_0_13_qs;
  logic [31:0] sdr_index_0_14_qs;
  logic [31:0] sdr_index_0_15_qs;

  // Register instances
  // R[sdr_control_reg]: V(False)

  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_sdr_control_reg_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_control_reg_start_we),
    .wd     (sdr_control_reg_start_wd),

    // from internal hardware
    .de     (hw2reg.sdr_control_reg.start.de),
    .d      (hw2reg.sdr_control_reg.start.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_control_reg.start.q ),

    // to register interface (read)
    .qs     (sdr_control_reg_start_qs)
  );


  //   F[unused]: 31:1
  prim_subreg #(
    .DW      (31),
    .SWACCESS("W1S"),
    .RESVAL  (31'h0)
  ) u_sdr_control_reg_unused (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_control_reg_unused_we),
    .wd     (sdr_control_reg_unused_wd),

    // from internal hardware
    .de     (hw2reg.sdr_control_reg.unused.de),
    .d      (hw2reg.sdr_control_reg.unused.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_control_reg.unused.q ),

    // to register interface (read)
    .qs     (sdr_control_reg_unused_qs)
  );


  // R[sdr_0_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_0_we),
    .wd     (sdr_0_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_0.q ),

    // to register interface (read)
    .qs     (sdr_0_0_qs)
  );


  // R[sdr_0_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_1_we),
    .wd     (sdr_0_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_1.q ),

    // to register interface (read)
    .qs     (sdr_0_1_qs)
  );


  // R[sdr_0_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_2_we),
    .wd     (sdr_0_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_2.q ),

    // to register interface (read)
    .qs     (sdr_0_2_qs)
  );


  // R[sdr_0_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_3_we),
    .wd     (sdr_0_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_3.q ),

    // to register interface (read)
    .qs     (sdr_0_3_qs)
  );


  // R[sdr_0_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_4_we),
    .wd     (sdr_0_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_4.q ),

    // to register interface (read)
    .qs     (sdr_0_4_qs)
  );


  // R[sdr_0_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_5_we),
    .wd     (sdr_0_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_5.q ),

    // to register interface (read)
    .qs     (sdr_0_5_qs)
  );


  // R[sdr_0_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_6_we),
    .wd     (sdr_0_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_6.q ),

    // to register interface (read)
    .qs     (sdr_0_6_qs)
  );


  // R[sdr_0_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_7_we),
    .wd     (sdr_0_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_7.q ),

    // to register interface (read)
    .qs     (sdr_0_7_qs)
  );


  // R[sdr_0_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_8_we),
    .wd     (sdr_0_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_8.q ),

    // to register interface (read)
    .qs     (sdr_0_8_qs)
  );


  // R[sdr_0_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_9_we),
    .wd     (sdr_0_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_9.q ),

    // to register interface (read)
    .qs     (sdr_0_9_qs)
  );


  // R[sdr_0_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_10_we),
    .wd     (sdr_0_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_10.q ),

    // to register interface (read)
    .qs     (sdr_0_10_qs)
  );


  // R[sdr_0_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_11_we),
    .wd     (sdr_0_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_11.q ),

    // to register interface (read)
    .qs     (sdr_0_11_qs)
  );


  // R[sdr_0_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_12_we),
    .wd     (sdr_0_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_12.q ),

    // to register interface (read)
    .qs     (sdr_0_12_qs)
  );


  // R[sdr_0_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_13_we),
    .wd     (sdr_0_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_13.q ),

    // to register interface (read)
    .qs     (sdr_0_13_qs)
  );


  // R[sdr_0_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_14_we),
    .wd     (sdr_0_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_14.q ),

    // to register interface (read)
    .qs     (sdr_0_14_qs)
  );


  // R[sdr_0_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_15_we),
    .wd     (sdr_0_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_15.q ),

    // to register interface (read)
    .qs     (sdr_0_15_qs)
  );


  // R[sdr_0_16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_16_we),
    .wd     (sdr_0_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_16.q ),

    // to register interface (read)
    .qs     (sdr_0_16_qs)
  );


  // R[sdr_0_17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_17_we),
    .wd     (sdr_0_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_17.q ),

    // to register interface (read)
    .qs     (sdr_0_17_qs)
  );


  // R[sdr_0_18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_18_we),
    .wd     (sdr_0_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_18.q ),

    // to register interface (read)
    .qs     (sdr_0_18_qs)
  );


  // R[sdr_0_19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_19_we),
    .wd     (sdr_0_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_19.q ),

    // to register interface (read)
    .qs     (sdr_0_19_qs)
  );


  // R[sdr_0_20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_20_we),
    .wd     (sdr_0_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_20.q ),

    // to register interface (read)
    .qs     (sdr_0_20_qs)
  );


  // R[sdr_0_21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_21_we),
    .wd     (sdr_0_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_21.q ),

    // to register interface (read)
    .qs     (sdr_0_21_qs)
  );


  // R[sdr_0_22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_22_we),
    .wd     (sdr_0_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_22.q ),

    // to register interface (read)
    .qs     (sdr_0_22_qs)
  );


  // R[sdr_0_23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_23_we),
    .wd     (sdr_0_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_23.q ),

    // to register interface (read)
    .qs     (sdr_0_23_qs)
  );


  // R[sdr_0_24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_24_we),
    .wd     (sdr_0_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_24.q ),

    // to register interface (read)
    .qs     (sdr_0_24_qs)
  );


  // R[sdr_0_25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_25_we),
    .wd     (sdr_0_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_25.q ),

    // to register interface (read)
    .qs     (sdr_0_25_qs)
  );


  // R[sdr_0_26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_26_we),
    .wd     (sdr_0_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_26.q ),

    // to register interface (read)
    .qs     (sdr_0_26_qs)
  );


  // R[sdr_0_27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_27_we),
    .wd     (sdr_0_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_27.q ),

    // to register interface (read)
    .qs     (sdr_0_27_qs)
  );


  // R[sdr_0_28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_28_we),
    .wd     (sdr_0_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_28.q ),

    // to register interface (read)
    .qs     (sdr_0_28_qs)
  );


  // R[sdr_0_29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_29_we),
    .wd     (sdr_0_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_29.q ),

    // to register interface (read)
    .qs     (sdr_0_29_qs)
  );


  // R[sdr_0_30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_30_we),
    .wd     (sdr_0_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_30.q ),

    // to register interface (read)
    .qs     (sdr_0_30_qs)
  );


  // R[sdr_0_31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sdr_0_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sdr_0_31_we),
    .wd     (sdr_0_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_0_31.q ),

    // to register interface (read)
    .qs     (sdr_0_31_qs)
  );


  // R[sdr_index_0_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_0.de),
    .d      (hw2reg.sdr_index_0_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_0.q ),

    // to register interface (read)
    .qs     (sdr_index_0_0_qs)
  );


  // R[sdr_index_0_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_1.de),
    .d      (hw2reg.sdr_index_0_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_1.q ),

    // to register interface (read)
    .qs     (sdr_index_0_1_qs)
  );


  // R[sdr_index_0_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_2.de),
    .d      (hw2reg.sdr_index_0_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_2.q ),

    // to register interface (read)
    .qs     (sdr_index_0_2_qs)
  );


  // R[sdr_index_0_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_3.de),
    .d      (hw2reg.sdr_index_0_3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_3.q ),

    // to register interface (read)
    .qs     (sdr_index_0_3_qs)
  );


  // R[sdr_index_0_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_4.de),
    .d      (hw2reg.sdr_index_0_4.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_4.q ),

    // to register interface (read)
    .qs     (sdr_index_0_4_qs)
  );


  // R[sdr_index_0_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_5.de),
    .d      (hw2reg.sdr_index_0_5.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_5.q ),

    // to register interface (read)
    .qs     (sdr_index_0_5_qs)
  );


  // R[sdr_index_0_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_6.de),
    .d      (hw2reg.sdr_index_0_6.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_6.q ),

    // to register interface (read)
    .qs     (sdr_index_0_6_qs)
  );


  // R[sdr_index_0_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_7.de),
    .d      (hw2reg.sdr_index_0_7.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_7.q ),

    // to register interface (read)
    .qs     (sdr_index_0_7_qs)
  );


  // R[sdr_index_0_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_8.de),
    .d      (hw2reg.sdr_index_0_8.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_8.q ),

    // to register interface (read)
    .qs     (sdr_index_0_8_qs)
  );


  // R[sdr_index_0_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_9.de),
    .d      (hw2reg.sdr_index_0_9.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_9.q ),

    // to register interface (read)
    .qs     (sdr_index_0_9_qs)
  );


  // R[sdr_index_0_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_10.de),
    .d      (hw2reg.sdr_index_0_10.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_10.q ),

    // to register interface (read)
    .qs     (sdr_index_0_10_qs)
  );


  // R[sdr_index_0_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_11.de),
    .d      (hw2reg.sdr_index_0_11.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_11.q ),

    // to register interface (read)
    .qs     (sdr_index_0_11_qs)
  );


  // R[sdr_index_0_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_12.de),
    .d      (hw2reg.sdr_index_0_12.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_12.q ),

    // to register interface (read)
    .qs     (sdr_index_0_12_qs)
  );


  // R[sdr_index_0_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_13.de),
    .d      (hw2reg.sdr_index_0_13.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_13.q ),

    // to register interface (read)
    .qs     (sdr_index_0_13_qs)
  );


  // R[sdr_index_0_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_14.de),
    .d      (hw2reg.sdr_index_0_14.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_14.q ),

    // to register interface (read)
    .qs     (sdr_index_0_14_qs)
  );


  // R[sdr_index_0_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_sdr_index_0_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.sdr_index_0_15.de),
    .d      (hw2reg.sdr_index_0_15.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sdr_index_0_15.q ),

    // to register interface (read)
    .qs     (sdr_index_0_15_qs)
  );




  logic [48:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == HTM_BLOCK_SDR_CONTROL_REG_OFFSET);
    addr_hit[ 1] = (reg_addr == HTM_BLOCK_SDR_0_0_OFFSET);
    addr_hit[ 2] = (reg_addr == HTM_BLOCK_SDR_0_1_OFFSET);
    addr_hit[ 3] = (reg_addr == HTM_BLOCK_SDR_0_2_OFFSET);
    addr_hit[ 4] = (reg_addr == HTM_BLOCK_SDR_0_3_OFFSET);
    addr_hit[ 5] = (reg_addr == HTM_BLOCK_SDR_0_4_OFFSET);
    addr_hit[ 6] = (reg_addr == HTM_BLOCK_SDR_0_5_OFFSET);
    addr_hit[ 7] = (reg_addr == HTM_BLOCK_SDR_0_6_OFFSET);
    addr_hit[ 8] = (reg_addr == HTM_BLOCK_SDR_0_7_OFFSET);
    addr_hit[ 9] = (reg_addr == HTM_BLOCK_SDR_0_8_OFFSET);
    addr_hit[10] = (reg_addr == HTM_BLOCK_SDR_0_9_OFFSET);
    addr_hit[11] = (reg_addr == HTM_BLOCK_SDR_0_10_OFFSET);
    addr_hit[12] = (reg_addr == HTM_BLOCK_SDR_0_11_OFFSET);
    addr_hit[13] = (reg_addr == HTM_BLOCK_SDR_0_12_OFFSET);
    addr_hit[14] = (reg_addr == HTM_BLOCK_SDR_0_13_OFFSET);
    addr_hit[15] = (reg_addr == HTM_BLOCK_SDR_0_14_OFFSET);
    addr_hit[16] = (reg_addr == HTM_BLOCK_SDR_0_15_OFFSET);
    addr_hit[17] = (reg_addr == HTM_BLOCK_SDR_0_16_OFFSET);
    addr_hit[18] = (reg_addr == HTM_BLOCK_SDR_0_17_OFFSET);
    addr_hit[19] = (reg_addr == HTM_BLOCK_SDR_0_18_OFFSET);
    addr_hit[20] = (reg_addr == HTM_BLOCK_SDR_0_19_OFFSET);
    addr_hit[21] = (reg_addr == HTM_BLOCK_SDR_0_20_OFFSET);
    addr_hit[22] = (reg_addr == HTM_BLOCK_SDR_0_21_OFFSET);
    addr_hit[23] = (reg_addr == HTM_BLOCK_SDR_0_22_OFFSET);
    addr_hit[24] = (reg_addr == HTM_BLOCK_SDR_0_23_OFFSET);
    addr_hit[25] = (reg_addr == HTM_BLOCK_SDR_0_24_OFFSET);
    addr_hit[26] = (reg_addr == HTM_BLOCK_SDR_0_25_OFFSET);
    addr_hit[27] = (reg_addr == HTM_BLOCK_SDR_0_26_OFFSET);
    addr_hit[28] = (reg_addr == HTM_BLOCK_SDR_0_27_OFFSET);
    addr_hit[29] = (reg_addr == HTM_BLOCK_SDR_0_28_OFFSET);
    addr_hit[30] = (reg_addr == HTM_BLOCK_SDR_0_29_OFFSET);
    addr_hit[31] = (reg_addr == HTM_BLOCK_SDR_0_30_OFFSET);
    addr_hit[32] = (reg_addr == HTM_BLOCK_SDR_0_31_OFFSET);
    addr_hit[33] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_0_OFFSET);
    addr_hit[34] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_1_OFFSET);
    addr_hit[35] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_2_OFFSET);
    addr_hit[36] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_3_OFFSET);
    addr_hit[37] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_4_OFFSET);
    addr_hit[38] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_5_OFFSET);
    addr_hit[39] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_6_OFFSET);
    addr_hit[40] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_7_OFFSET);
    addr_hit[41] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_8_OFFSET);
    addr_hit[42] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_9_OFFSET);
    addr_hit[43] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_10_OFFSET);
    addr_hit[44] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_11_OFFSET);
    addr_hit[45] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_12_OFFSET);
    addr_hit[46] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_13_OFFSET);
    addr_hit[47] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_14_OFFSET);
    addr_hit[48] = (reg_addr == HTM_BLOCK_SDR_INDEX_0_15_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(HTM_BLOCK_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(HTM_BLOCK_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(HTM_BLOCK_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(HTM_BLOCK_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(HTM_BLOCK_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(HTM_BLOCK_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(HTM_BLOCK_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(HTM_BLOCK_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(HTM_BLOCK_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(HTM_BLOCK_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(HTM_BLOCK_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(HTM_BLOCK_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(HTM_BLOCK_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(HTM_BLOCK_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(HTM_BLOCK_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(HTM_BLOCK_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(HTM_BLOCK_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(HTM_BLOCK_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(HTM_BLOCK_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(HTM_BLOCK_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(HTM_BLOCK_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(HTM_BLOCK_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(HTM_BLOCK_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(HTM_BLOCK_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(HTM_BLOCK_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(HTM_BLOCK_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(HTM_BLOCK_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(HTM_BLOCK_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(HTM_BLOCK_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(HTM_BLOCK_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(HTM_BLOCK_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(HTM_BLOCK_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(HTM_BLOCK_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(HTM_BLOCK_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(HTM_BLOCK_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(HTM_BLOCK_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(HTM_BLOCK_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(HTM_BLOCK_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(HTM_BLOCK_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(HTM_BLOCK_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(HTM_BLOCK_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(HTM_BLOCK_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(HTM_BLOCK_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(HTM_BLOCK_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(HTM_BLOCK_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(HTM_BLOCK_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(HTM_BLOCK_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(HTM_BLOCK_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(HTM_BLOCK_PERMIT[48] & ~reg_be)))));
  end

  assign sdr_control_reg_start_we = addr_hit[0] & reg_we & !reg_error;
  assign sdr_control_reg_start_wd = reg_wdata[0];

  assign sdr_control_reg_unused_we = addr_hit[0] & reg_we & !reg_error;
  assign sdr_control_reg_unused_wd = reg_wdata[31:1];

  assign sdr_0_0_we = addr_hit[1] & reg_we & !reg_error;
  assign sdr_0_0_wd = reg_wdata[31:0];

  assign sdr_0_1_we = addr_hit[2] & reg_we & !reg_error;
  assign sdr_0_1_wd = reg_wdata[31:0];

  assign sdr_0_2_we = addr_hit[3] & reg_we & !reg_error;
  assign sdr_0_2_wd = reg_wdata[31:0];

  assign sdr_0_3_we = addr_hit[4] & reg_we & !reg_error;
  assign sdr_0_3_wd = reg_wdata[31:0];

  assign sdr_0_4_we = addr_hit[5] & reg_we & !reg_error;
  assign sdr_0_4_wd = reg_wdata[31:0];

  assign sdr_0_5_we = addr_hit[6] & reg_we & !reg_error;
  assign sdr_0_5_wd = reg_wdata[31:0];

  assign sdr_0_6_we = addr_hit[7] & reg_we & !reg_error;
  assign sdr_0_6_wd = reg_wdata[31:0];

  assign sdr_0_7_we = addr_hit[8] & reg_we & !reg_error;
  assign sdr_0_7_wd = reg_wdata[31:0];

  assign sdr_0_8_we = addr_hit[9] & reg_we & !reg_error;
  assign sdr_0_8_wd = reg_wdata[31:0];

  assign sdr_0_9_we = addr_hit[10] & reg_we & !reg_error;
  assign sdr_0_9_wd = reg_wdata[31:0];

  assign sdr_0_10_we = addr_hit[11] & reg_we & !reg_error;
  assign sdr_0_10_wd = reg_wdata[31:0];

  assign sdr_0_11_we = addr_hit[12] & reg_we & !reg_error;
  assign sdr_0_11_wd = reg_wdata[31:0];

  assign sdr_0_12_we = addr_hit[13] & reg_we & !reg_error;
  assign sdr_0_12_wd = reg_wdata[31:0];

  assign sdr_0_13_we = addr_hit[14] & reg_we & !reg_error;
  assign sdr_0_13_wd = reg_wdata[31:0];

  assign sdr_0_14_we = addr_hit[15] & reg_we & !reg_error;
  assign sdr_0_14_wd = reg_wdata[31:0];

  assign sdr_0_15_we = addr_hit[16] & reg_we & !reg_error;
  assign sdr_0_15_wd = reg_wdata[31:0];

  assign sdr_0_16_we = addr_hit[17] & reg_we & !reg_error;
  assign sdr_0_16_wd = reg_wdata[31:0];

  assign sdr_0_17_we = addr_hit[18] & reg_we & !reg_error;
  assign sdr_0_17_wd = reg_wdata[31:0];

  assign sdr_0_18_we = addr_hit[19] & reg_we & !reg_error;
  assign sdr_0_18_wd = reg_wdata[31:0];

  assign sdr_0_19_we = addr_hit[20] & reg_we & !reg_error;
  assign sdr_0_19_wd = reg_wdata[31:0];

  assign sdr_0_20_we = addr_hit[21] & reg_we & !reg_error;
  assign sdr_0_20_wd = reg_wdata[31:0];

  assign sdr_0_21_we = addr_hit[22] & reg_we & !reg_error;
  assign sdr_0_21_wd = reg_wdata[31:0];

  assign sdr_0_22_we = addr_hit[23] & reg_we & !reg_error;
  assign sdr_0_22_wd = reg_wdata[31:0];

  assign sdr_0_23_we = addr_hit[24] & reg_we & !reg_error;
  assign sdr_0_23_wd = reg_wdata[31:0];

  assign sdr_0_24_we = addr_hit[25] & reg_we & !reg_error;
  assign sdr_0_24_wd = reg_wdata[31:0];

  assign sdr_0_25_we = addr_hit[26] & reg_we & !reg_error;
  assign sdr_0_25_wd = reg_wdata[31:0];

  assign sdr_0_26_we = addr_hit[27] & reg_we & !reg_error;
  assign sdr_0_26_wd = reg_wdata[31:0];

  assign sdr_0_27_we = addr_hit[28] & reg_we & !reg_error;
  assign sdr_0_27_wd = reg_wdata[31:0];

  assign sdr_0_28_we = addr_hit[29] & reg_we & !reg_error;
  assign sdr_0_28_wd = reg_wdata[31:0];

  assign sdr_0_29_we = addr_hit[30] & reg_we & !reg_error;
  assign sdr_0_29_wd = reg_wdata[31:0];

  assign sdr_0_30_we = addr_hit[31] & reg_we & !reg_error;
  assign sdr_0_30_wd = reg_wdata[31:0];

  assign sdr_0_31_we = addr_hit[32] & reg_we & !reg_error;
  assign sdr_0_31_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = sdr_control_reg_start_qs;
        reg_rdata_next[31:1] = sdr_control_reg_unused_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = sdr_0_0_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = sdr_0_1_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = sdr_0_2_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = sdr_0_3_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = sdr_0_4_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = sdr_0_5_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = sdr_0_6_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = sdr_0_7_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = sdr_0_8_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = sdr_0_9_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = sdr_0_10_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = sdr_0_11_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = sdr_0_12_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = sdr_0_13_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = sdr_0_14_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = sdr_0_15_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = sdr_0_16_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = sdr_0_17_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = sdr_0_18_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = sdr_0_19_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = sdr_0_20_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = sdr_0_21_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = sdr_0_22_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = sdr_0_23_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = sdr_0_24_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = sdr_0_25_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = sdr_0_26_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = sdr_0_27_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = sdr_0_28_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = sdr_0_29_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = sdr_0_30_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = sdr_0_31_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = sdr_index_0_0_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = sdr_index_0_1_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = sdr_index_0_2_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = sdr_index_0_3_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = sdr_index_0_4_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = sdr_index_0_5_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = sdr_index_0_6_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = sdr_index_0_7_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = sdr_index_0_8_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = sdr_index_0_9_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = sdr_index_0_10_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = sdr_index_0_11_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = sdr_index_0_12_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = sdr_index_0_13_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = sdr_index_0_14_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = sdr_index_0_15_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
