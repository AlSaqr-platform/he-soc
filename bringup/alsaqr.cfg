# Configuration Parameters for AlSaqr

#Number of cores to halt, here you can specify 1 or 2
set _NUM_CORES 1

# Enable FLL configuration (0: FLL uses default config - 1: FLL uses specified config )
set FLL_CONFIG 1

## This file has been generated
adapter_khz     1000

# Olimex ARM-USB-OCD-H - CVA6
interface ftdi
ftdi_device_desc "Olimex OpenOCD JTAG ARM-USB-OCD-H"
ftdi_vid_pid 0x15ba 0x002b

ftdi_layout_init 0x0908 0x0b1b
ftdi_layout_signal nSRST -oe 0x0200
ftdi_layout_signal nTRST -data 0x0100
ftdi_layout_signal LED -data 0x0800
#ftdi_serial OLEDD7FB

# Config nTRST interface
#reset_config trst_only
reset_config none

# Hold nTRST low for 200ms
jtag_ntrst_delay 200


# links:
# http://openocd.org/doc-release/html/Debug-Adapter-Configuration.html
#
# Bit  MPSSE     FT2232    JTAG    Type   Description
# Bit0 TCK       ADBUS0    TCK     Out    Clock Signal Output
# Bit1 TDI       ADBUS1    TDI     Out    Serial Data Out
# Bit2 TDO       ADBUS2    TDO     In     Serial Data In
# Bit3 TMS       ADBUS3    TMS     Out    Select Signal Out
# Bit4 GPIOL0    ADBUS4    nTRST   In/Out General Purpose I/O
# this corresponds to the following in/out layout, with TMS initially set to 1
#ftdi_layout_init 0x0018 0x001b
# we only have to specify nTRST, the others are assigned correctly by default
#ftdi_layout_signal nTRST -ndata 0x0010

# Number of cores (set this according to your configuration)
if { ! [info exists _NUM_CORES] } {
    echo "Error: _NUM_CORES variable not set."
    exit 1
}

# Chip name and JTAG setup
set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu -irlen 5

# Create target names dynamically and configure each core
for {set i 0} {$i < $_NUM_CORES} {incr i} {
    set _TARGETNAME "${_CHIPNAME}.cpu${i}"
    if {$i == 0} {
        target create $_TARGETNAME riscv -chain-position $_CHIPNAME.cpu -coreid 0 -rtos hwthread
    } else {
        target create $_TARGETNAME riscv -chain-position $_CHIPNAME.cpu -coreid $i
    }
    lappend _SMP_TARGETS $_TARGETNAME
}

# Create SMP target configuration
target smp {*}[set _SMP_TARGETS]

# End _NUM_CORES core config

gdb_report_data_abort enable
gdb_report_register_access_error enable

riscv set_reset_timeout_sec 120
riscv set_command_timeout_sec 120

# prefer to use sba for system bus access
riscv set_prefer_sba off

# Try enabling address translation (only works for newer versions)
if { [catch {riscv set_enable_virtual on} ] } {
    echo "Warning: This version of OpenOCD does not support address translation. To debug on virtual addresses, please update to the latest version." }

init
#reset halt

halt


    ###################################
    # CONFIG FLL - DEFAULT 50MHz      #
    ###################################

if {  $FLL_CONFIG == 1 } {

    echo "Set up FLL registers to 50MHz, DCO locked"
    mww 0x1A100004  0x01ff0000
    mww 0x1A10000C  0x2801ff71
    mww 0x1A100014  0x2801ff71
    mww 0x1A10001C  0x2801ff71
    mww 0x1A100024  0x2801ff71


    # M REG 600MHz
    #mww 0x1a100010  0x00008f0a

    # M REG 100MHz
    mww 0x1a100010  0x000017d7

    # M REG/2 50MHz
    #mww 0x1a100010  0x00000beb

    # 30MHz
    #mww 0x1a100010  0x00000726

    # 15MHz
    #mww 0x1a100010  0x00000393


    mww 0x1a100018  0x000017d7
    mww 0x1a100020  0x000017d7
    mww 0x1a100028  0x000017d7
    mww 0x1A100030  0x00001111
    mww 0x1A10000C  0x2801ff73
    mww 0x1A100014  0x2801ff73
    mww 0x1A10001C  0x2801ff73
    mww 0x1A100024  0x2801ff73
    mww 0x1A100030  0x00001111

    # D REG
    #mww 0x1A10002C  0x02020202

    ####################################################
    #          Fout[i]= 2^14 *(Mreg/Dreg)              #
    #                                                  #
    #             xx   | xx  | xx| xx                  #
    #           Cluster|Hyper|SoC|Host                 #
    #                                                  #
    # NB: Hyper has additional divider by 2 internally #
    ####################################################

    #hyper to 300Mhz and SoC 300Mhz (from 600Mhz)
    #mww 0x1A10002C  0x02010202

    #hyper to 150Mhz and SoC 300Mhz (from 600Mhz)
    #mww 0x1A10002C  0x02020202

    #hyper to 75Mhz and SoC 300Mhz (from 600Mhz) -> (ok)
    #mww 0x1A10002C  0x02040202

    #hyper to 37.5Mhz and SoC 150Mhz (from 600Mhz) -> (ok)
    #mww 0x1A10002C  0x04080404

    #hyper to 50Mhz and SoC 100Mhz (from 100Mhz)
    #mww 0x1A10002C  0x01010101

    #hyper to 25Mhz and SoC 100Mhz (from 100Mhz)
    #mww 0x1A10002C  0x01020101

    #hyper to 25Mhz and SoC 50Mhz (from 100Mhz)
    mww 0x1A10002C  0x02020202

    #hyper to 6.25Mhz and SoC 100Mhz (from 100Mhz)
    #mww 0x1A10002C  0x01080101

}

################################################
#          CONFIG HYPER CONTROLLER             #
################################################

echo "Config Hyper Controller to use PHY0 only"
mww 0x1A101000 0x7
mww 0x1A101018 0x1B
mww 0x1A10101C 0x0
mww 0x1A101020 0x0
mww 0x1A101024 0x0

# CS0 range
mww 0x1A101028 0x80000000
mww 0x1A10102C 0x84000000
# CS1 range
mww 0x1A101030 0x84000000
mww 0x1A101034 0x88000000
# CS2 range
mww 0x1A101038 0x88000000
mww 0x1A10103C 0x8C000000
# CS3 range
mww 0x1A101040 0x8C000000
mww 0x1A101044 0x90000000

echo "Ready for Remote Connections"